package bssopenapi

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ConfirmRelation invokes the bssopenapi.ConfirmRelation API synchronously
func (client *Client) ConfirmRelation(request *ConfirmRelationRequest) (response *ConfirmRelationResponse, err error) {
	response = CreateConfirmRelationResponse()
	err = client.DoAction(request, response)
	return
}

// ConfirmRelationWithChan invokes the bssopenapi.ConfirmRelation API asynchronously
func (client *Client) ConfirmRelationWithChan(request *ConfirmRelationRequest) (<-chan *ConfirmRelationResponse, <-chan error) {
	responseChan := make(chan *ConfirmRelationResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ConfirmRelation(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ConfirmRelationWithCallback invokes the bssopenapi.ConfirmRelation API asynchronously
func (client *Client) ConfirmRelationWithCallback(request *ConfirmRelationRequest, callback func(response *ConfirmRelationResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ConfirmRelationResponse
		var err error
		defer close(result)
		response, err = client.ConfirmRelation(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ConfirmRelationRequest is the request struct for api ConfirmRelation
type ConfirmRelationRequest struct {
	*requests.RpcRequest
	RelationType    string           `position:"Query" name:"RelationType"`
	ParentUserId    requests.Integer `position:"Query" name:"ParentUserId"`
	ConfirmCode     string           `position:"Query" name:"ConfirmCode"`
	ChildUserId     requests.Integer `position:"Query" name:"ChildUserId"`
	RequestId       string           `position:"Query" name:"RequestId"`
	PermissionCodes *[]string        `position:"Query" name:"PermissionCodes"  type:"Repeated"`
}

// ConfirmRelationResponse is the response struct for api ConfirmRelation
type ConfirmRelationResponse struct {
	*responses.BaseResponse
	Code      string `json:"Code" xml:"Code"`
	RequestId string `json:"RequestId" xml:"RequestId"`
	Success   bool   `json:"Success" xml:"Success"`
	Message   string `json:"Message" xml:"Message"`
	Data      Data   `json:"Data" xml:"Data"`
}

// CreateConfirmRelationRequest creates a request to invoke ConfirmRelation API
func CreateConfirmRelationRequest() (request *ConfirmRelationRequest) {
	request = &ConfirmRelationRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("BssOpenApi", "2017-12-14", "ConfirmRelation", "", "")
	request.Method = requests.POST
	return
}

// CreateConfirmRelationResponse creates a response to parse from ConfirmRelation response
func CreateConfirmRelationResponse() (response *ConfirmRelationResponse) {
	response = &ConfirmRelationResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
