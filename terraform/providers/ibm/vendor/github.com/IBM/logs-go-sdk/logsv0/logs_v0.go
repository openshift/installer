/**
 * (C) Copyright IBM Corp. 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * IBM OpenAPI SDK Code Generator Version: 3.89.1-ed9d96f4-20240417-193115
 */

// Package logsv0 : Operations and models for the LogsV0 service
package logsv0

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"reflect"
	"time"

	"github.com/IBM/go-sdk-core/v5/core"
	"github.com/go-openapi/strfmt"
	common "github.com/IBM/logs-go-sdk/common"
)

// LogsV0 : No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
//
// API Version: 0.1.0
type LogsV0 struct {
	Service *core.BaseService
}

// DefaultServiceName is the default key used to find external configuration information.
const DefaultServiceName = "logs"

// LogsV0Options : Service options
type LogsV0Options struct {
	ServiceName   string
	URL           string
	Authenticator core.Authenticator
}

// NewLogsV0UsingExternalConfig : constructs an instance of LogsV0 with passed in options and external configuration.
func NewLogsV0UsingExternalConfig(options *LogsV0Options) (logs *LogsV0, err error) {
	if options.ServiceName == "" {
		options.ServiceName = DefaultServiceName
	}

	if options.Authenticator == nil {
		options.Authenticator, err = core.GetAuthenticatorFromEnvironment(options.ServiceName)
		if err != nil {
			err = core.SDKErrorf(err, "", "env-auth-error", common.GetComponentInfo())
			return
		}
	}

	logs, err = NewLogsV0(options)
	err = core.RepurposeSDKProblem(err, "new-client-error")
	if err != nil {
		return
	}

	err = logs.Service.ConfigureService(options.ServiceName)
	if err != nil {
		err = core.SDKErrorf(err, "", "client-config-error", common.GetComponentInfo())
		return
	}

	if options.URL != "" {
		err = logs.Service.SetServiceURL(options.URL)
		err = core.RepurposeSDKProblem(err, "url-set-error")
	}
	return
}

// NewLogsV0 : constructs an instance of LogsV0 with passed in options.
func NewLogsV0(options *LogsV0Options) (service *LogsV0, err error) {
	serviceOptions := &core.ServiceOptions{
		Authenticator: options.Authenticator,
	}

	baseService, err := core.NewBaseService(serviceOptions)
	if err != nil {
		err = core.SDKErrorf(err, "", "new-base-error", common.GetComponentInfo())
		return
	}

	if options.URL != "" {
		err = baseService.SetServiceURL(options.URL)
		if err != nil {
			err = core.SDKErrorf(err, "", "set-url-error", common.GetComponentInfo())
			return
		}
	}

	service = &LogsV0{
		Service: baseService,
	}

	return
}

// GetServiceURLForRegion returns the service URL to be used for the specified region
func GetServiceURLForRegion(region string) (string, error) {
	return "", core.SDKErrorf(nil, "service does not support regional URLs", "no-regional-support", common.GetComponentInfo())
}

// Clone makes a copy of "logs" suitable for processing requests.
func (logs *LogsV0) Clone() *LogsV0 {
	if core.IsNil(logs) {
		return nil
	}
	clone := *logs
	clone.Service = logs.Service.Clone()
	return &clone
}

// SetServiceURL sets the service URL
func (logs *LogsV0) SetServiceURL(url string) error {
	err := logs.Service.SetServiceURL(url)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-set-error", common.GetComponentInfo())
	}
	return err
}

// GetServiceURL returns the service URL
func (logs *LogsV0) GetServiceURL() string {
	return logs.Service.GetServiceURL()
}

// SetDefaultHeaders sets HTTP headers to be sent in every request
func (logs *LogsV0) SetDefaultHeaders(headers http.Header) {
	logs.Service.SetDefaultHeaders(headers)
}

// SetEnableGzipCompression sets the service's EnableGzipCompression field
func (logs *LogsV0) SetEnableGzipCompression(enableGzip bool) {
	logs.Service.SetEnableGzipCompression(enableGzip)
}

// GetEnableGzipCompression returns the service's EnableGzipCompression field
func (logs *LogsV0) GetEnableGzipCompression() bool {
	return logs.Service.GetEnableGzipCompression()
}

// EnableRetries enables automatic retries for requests invoked for this service instance.
// If either parameter is specified as 0, then a default value is used instead.
func (logs *LogsV0) EnableRetries(maxRetries int, maxRetryInterval time.Duration) {
	logs.Service.EnableRetries(maxRetries, maxRetryInterval)
}

// DisableRetries disables automatic retries for requests invoked for this service instance.
func (logs *LogsV0) DisableRetries() {
	logs.Service.DisableRetries()
}

// GetAlert : Get an alert by ID
// Get an alert by ID.
func (logs *LogsV0) GetAlert(getAlertOptions *GetAlertOptions) (result *Alert, response *core.DetailedResponse, err error) {
	result, response, err = logs.GetAlertWithContext(context.Background(), getAlertOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// GetAlertWithContext is an alternate form of the GetAlert method which supports a Context parameter
func (logs *LogsV0) GetAlertWithContext(ctx context.Context, getAlertOptions *GetAlertOptions) (result *Alert, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getAlertOptions, "getAlertOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(getAlertOptions, "getAlertOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*getAlertOptions.ID),
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/alerts/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range getAlertOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "GetAlert")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "get_alert", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAlert)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// UpdateAlert : Update an alert
// Update an alert.
func (logs *LogsV0) UpdateAlert(updateAlertOptions *UpdateAlertOptions) (result *Alert, response *core.DetailedResponse, err error) {
	result, response, err = logs.UpdateAlertWithContext(context.Background(), updateAlertOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// UpdateAlertWithContext is an alternate form of the UpdateAlert method which supports a Context parameter
func (logs *LogsV0) UpdateAlertWithContext(ctx context.Context, updateAlertOptions *UpdateAlertOptions) (result *Alert, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateAlertOptions, "updateAlertOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(updateAlertOptions, "updateAlertOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*updateAlertOptions.ID),
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/alerts/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range updateAlertOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "UpdateAlert")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if updateAlertOptions.Name != nil {
		body["name"] = updateAlertOptions.Name
	}
	if updateAlertOptions.IsActive != nil {
		body["is_active"] = updateAlertOptions.IsActive
	}
	if updateAlertOptions.Severity != nil {
		body["severity"] = updateAlertOptions.Severity
	}
	if updateAlertOptions.Condition != nil {
		body["condition"] = updateAlertOptions.Condition
	}
	if updateAlertOptions.NotificationGroups != nil {
		body["notification_groups"] = updateAlertOptions.NotificationGroups
	}
	if updateAlertOptions.Filters != nil {
		body["filters"] = updateAlertOptions.Filters
	}
	if updateAlertOptions.Description != nil {
		body["description"] = updateAlertOptions.Description
	}
	if updateAlertOptions.Expiration != nil {
		body["expiration"] = updateAlertOptions.Expiration
	}
	if updateAlertOptions.ActiveWhen != nil {
		body["active_when"] = updateAlertOptions.ActiveWhen
	}
	if updateAlertOptions.NotificationPayloadFilters != nil {
		body["notification_payload_filters"] = updateAlertOptions.NotificationPayloadFilters
	}
	if updateAlertOptions.MetaLabels != nil {
		body["meta_labels"] = updateAlertOptions.MetaLabels
	}
	if updateAlertOptions.MetaLabelsStrings != nil {
		body["meta_labels_strings"] = updateAlertOptions.MetaLabelsStrings
	}
	if updateAlertOptions.IncidentSettings != nil {
		body["incident_settings"] = updateAlertOptions.IncidentSettings
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "update_alert", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAlert)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// DeleteAlert : Delete an alert
// Delete an alert.
func (logs *LogsV0) DeleteAlert(deleteAlertOptions *DeleteAlertOptions) (response *core.DetailedResponse, err error) {
	response, err = logs.DeleteAlertWithContext(context.Background(), deleteAlertOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// DeleteAlertWithContext is an alternate form of the DeleteAlert method which supports a Context parameter
func (logs *LogsV0) DeleteAlertWithContext(ctx context.Context, deleteAlertOptions *DeleteAlertOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteAlertOptions, "deleteAlertOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(deleteAlertOptions, "deleteAlertOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*deleteAlertOptions.ID),
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/alerts/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range deleteAlertOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "DeleteAlert")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	response, err = logs.Service.Request(request, nil)
	if err != nil {
		core.EnrichHTTPProblem(err, "delete_alert", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}

	return
}

// GetAlerts : List alerts
// List alerts.
func (logs *LogsV0) GetAlerts(getAlertsOptions *GetAlertsOptions) (result *AlertCollection, response *core.DetailedResponse, err error) {
	result, response, err = logs.GetAlertsWithContext(context.Background(), getAlertsOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// GetAlertsWithContext is an alternate form of the GetAlerts method which supports a Context parameter
func (logs *LogsV0) GetAlertsWithContext(ctx context.Context, getAlertsOptions *GetAlertsOptions) (result *AlertCollection, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(getAlertsOptions, "getAlertsOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/alerts`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range getAlertsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "GetAlerts")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "get_alerts", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAlertCollection)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// CreateAlert : Create an alert
// Create an alert.
func (logs *LogsV0) CreateAlert(createAlertOptions *CreateAlertOptions) (result *Alert, response *core.DetailedResponse, err error) {
	result, response, err = logs.CreateAlertWithContext(context.Background(), createAlertOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// CreateAlertWithContext is an alternate form of the CreateAlert method which supports a Context parameter
func (logs *LogsV0) CreateAlertWithContext(ctx context.Context, createAlertOptions *CreateAlertOptions) (result *Alert, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createAlertOptions, "createAlertOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(createAlertOptions, "createAlertOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/alerts`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range createAlertOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "CreateAlert")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if createAlertOptions.Name != nil {
		body["name"] = createAlertOptions.Name
	}
	if createAlertOptions.IsActive != nil {
		body["is_active"] = createAlertOptions.IsActive
	}
	if createAlertOptions.Severity != nil {
		body["severity"] = createAlertOptions.Severity
	}
	if createAlertOptions.Condition != nil {
		body["condition"] = createAlertOptions.Condition
	}
	if createAlertOptions.NotificationGroups != nil {
		body["notification_groups"] = createAlertOptions.NotificationGroups
	}
	if createAlertOptions.Filters != nil {
		body["filters"] = createAlertOptions.Filters
	}
	if createAlertOptions.Description != nil {
		body["description"] = createAlertOptions.Description
	}
	if createAlertOptions.Expiration != nil {
		body["expiration"] = createAlertOptions.Expiration
	}
	if createAlertOptions.ActiveWhen != nil {
		body["active_when"] = createAlertOptions.ActiveWhen
	}
	if createAlertOptions.NotificationPayloadFilters != nil {
		body["notification_payload_filters"] = createAlertOptions.NotificationPayloadFilters
	}
	if createAlertOptions.MetaLabels != nil {
		body["meta_labels"] = createAlertOptions.MetaLabels
	}
	if createAlertOptions.MetaLabelsStrings != nil {
		body["meta_labels_strings"] = createAlertOptions.MetaLabelsStrings
	}
	if createAlertOptions.IncidentSettings != nil {
		body["incident_settings"] = createAlertOptions.IncidentSettings
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "create_alert", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAlert)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// GetRuleGroup : Gets rule group by groupid
// Gets rule group by groupid.
func (logs *LogsV0) GetRuleGroup(getRuleGroupOptions *GetRuleGroupOptions) (result *RuleGroup, response *core.DetailedResponse, err error) {
	result, response, err = logs.GetRuleGroupWithContext(context.Background(), getRuleGroupOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// GetRuleGroupWithContext is an alternate form of the GetRuleGroup method which supports a Context parameter
func (logs *LogsV0) GetRuleGroupWithContext(ctx context.Context, getRuleGroupOptions *GetRuleGroupOptions) (result *RuleGroup, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getRuleGroupOptions, "getRuleGroupOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(getRuleGroupOptions, "getRuleGroupOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"group_id": fmt.Sprint(*getRuleGroupOptions.GroupID),
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/rule_groups/{group_id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range getRuleGroupOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "GetRuleGroup")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "get_rule_group", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalRuleGroup)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// UpdateRuleGroup : Updates rule group by groupid
// Updates rule group by groupid.
func (logs *LogsV0) UpdateRuleGroup(updateRuleGroupOptions *UpdateRuleGroupOptions) (result *RuleGroup, response *core.DetailedResponse, err error) {
	result, response, err = logs.UpdateRuleGroupWithContext(context.Background(), updateRuleGroupOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// UpdateRuleGroupWithContext is an alternate form of the UpdateRuleGroup method which supports a Context parameter
func (logs *LogsV0) UpdateRuleGroupWithContext(ctx context.Context, updateRuleGroupOptions *UpdateRuleGroupOptions) (result *RuleGroup, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateRuleGroupOptions, "updateRuleGroupOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(updateRuleGroupOptions, "updateRuleGroupOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"group_id": fmt.Sprint(*updateRuleGroupOptions.GroupID),
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/rule_groups/{group_id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range updateRuleGroupOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "UpdateRuleGroup")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if updateRuleGroupOptions.Name != nil {
		body["name"] = updateRuleGroupOptions.Name
	}
	if updateRuleGroupOptions.RuleSubgroups != nil {
		body["rule_subgroups"] = updateRuleGroupOptions.RuleSubgroups
	}
	if updateRuleGroupOptions.Description != nil {
		body["description"] = updateRuleGroupOptions.Description
	}
	if updateRuleGroupOptions.Enabled != nil {
		body["enabled"] = updateRuleGroupOptions.Enabled
	}
	if updateRuleGroupOptions.RuleMatchers != nil {
		body["rule_matchers"] = updateRuleGroupOptions.RuleMatchers
	}
	if updateRuleGroupOptions.Order != nil {
		body["order"] = updateRuleGroupOptions.Order
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "update_rule_group", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalRuleGroup)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// DeleteRuleGroup : Deletes rule group by groupid
// Deletes rule group by groupid.
func (logs *LogsV0) DeleteRuleGroup(deleteRuleGroupOptions *DeleteRuleGroupOptions) (response *core.DetailedResponse, err error) {
	response, err = logs.DeleteRuleGroupWithContext(context.Background(), deleteRuleGroupOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// DeleteRuleGroupWithContext is an alternate form of the DeleteRuleGroup method which supports a Context parameter
func (logs *LogsV0) DeleteRuleGroupWithContext(ctx context.Context, deleteRuleGroupOptions *DeleteRuleGroupOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteRuleGroupOptions, "deleteRuleGroupOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(deleteRuleGroupOptions, "deleteRuleGroupOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"group_id": fmt.Sprint(*deleteRuleGroupOptions.GroupID),
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/rule_groups/{group_id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range deleteRuleGroupOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "DeleteRuleGroup")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	response, err = logs.Service.Request(request, nil)
	if err != nil {
		core.EnrichHTTPProblem(err, "delete_rule_group", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}

	return
}

// ListRuleGroups : Gets all rule groups
// Gets all rule groups.
func (logs *LogsV0) ListRuleGroups(listRuleGroupsOptions *ListRuleGroupsOptions) (result *RuleGroupCollection, response *core.DetailedResponse, err error) {
	result, response, err = logs.ListRuleGroupsWithContext(context.Background(), listRuleGroupsOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// ListRuleGroupsWithContext is an alternate form of the ListRuleGroups method which supports a Context parameter
func (logs *LogsV0) ListRuleGroupsWithContext(ctx context.Context, listRuleGroupsOptions *ListRuleGroupsOptions) (result *RuleGroupCollection, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listRuleGroupsOptions, "listRuleGroupsOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/rule_groups`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range listRuleGroupsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "ListRuleGroups")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "list_rule_groups", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalRuleGroupCollection)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// CreateRuleGroup : Creates rule group
// Creates rule group.
func (logs *LogsV0) CreateRuleGroup(createRuleGroupOptions *CreateRuleGroupOptions) (result *RuleGroup, response *core.DetailedResponse, err error) {
	result, response, err = logs.CreateRuleGroupWithContext(context.Background(), createRuleGroupOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// CreateRuleGroupWithContext is an alternate form of the CreateRuleGroup method which supports a Context parameter
func (logs *LogsV0) CreateRuleGroupWithContext(ctx context.Context, createRuleGroupOptions *CreateRuleGroupOptions) (result *RuleGroup, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createRuleGroupOptions, "createRuleGroupOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(createRuleGroupOptions, "createRuleGroupOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/rule_groups`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range createRuleGroupOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "CreateRuleGroup")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if createRuleGroupOptions.Name != nil {
		body["name"] = createRuleGroupOptions.Name
	}
	if createRuleGroupOptions.RuleSubgroups != nil {
		body["rule_subgroups"] = createRuleGroupOptions.RuleSubgroups
	}
	if createRuleGroupOptions.Description != nil {
		body["description"] = createRuleGroupOptions.Description
	}
	if createRuleGroupOptions.Enabled != nil {
		body["enabled"] = createRuleGroupOptions.Enabled
	}
	if createRuleGroupOptions.RuleMatchers != nil {
		body["rule_matchers"] = createRuleGroupOptions.RuleMatchers
	}
	if createRuleGroupOptions.Order != nil {
		body["order"] = createRuleGroupOptions.Order
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "create_rule_group", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalRuleGroup)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// ListOutgoingWebhooks : List Outbound Integrations
// List Outbound Integrations.
func (logs *LogsV0) ListOutgoingWebhooks(listOutgoingWebhooksOptions *ListOutgoingWebhooksOptions) (result *OutgoingWebhookCollection, response *core.DetailedResponse, err error) {
	result, response, err = logs.ListOutgoingWebhooksWithContext(context.Background(), listOutgoingWebhooksOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// ListOutgoingWebhooksWithContext is an alternate form of the ListOutgoingWebhooks method which supports a Context parameter
func (logs *LogsV0) ListOutgoingWebhooksWithContext(ctx context.Context, listOutgoingWebhooksOptions *ListOutgoingWebhooksOptions) (result *OutgoingWebhookCollection, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listOutgoingWebhooksOptions, "listOutgoingWebhooksOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/outgoing_webhooks`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range listOutgoingWebhooksOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "ListOutgoingWebhooks")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listOutgoingWebhooksOptions.Type != nil {
		builder.AddQuery("type", fmt.Sprint(*listOutgoingWebhooksOptions.Type))
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "list_outgoing_webhooks", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalOutgoingWebhookCollection)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// CreateOutgoingWebhook : Create an Outbound Integration
// Create an Outbound Integration.
func (logs *LogsV0) CreateOutgoingWebhook(createOutgoingWebhookOptions *CreateOutgoingWebhookOptions) (result OutgoingWebhookIntf, response *core.DetailedResponse, err error) {
	result, response, err = logs.CreateOutgoingWebhookWithContext(context.Background(), createOutgoingWebhookOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// CreateOutgoingWebhookWithContext is an alternate form of the CreateOutgoingWebhook method which supports a Context parameter
func (logs *LogsV0) CreateOutgoingWebhookWithContext(ctx context.Context, createOutgoingWebhookOptions *CreateOutgoingWebhookOptions) (result OutgoingWebhookIntf, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createOutgoingWebhookOptions, "createOutgoingWebhookOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(createOutgoingWebhookOptions, "createOutgoingWebhookOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/outgoing_webhooks`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range createOutgoingWebhookOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "CreateOutgoingWebhook")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createOutgoingWebhookOptions.OutgoingWebhookPrototype)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "create_outgoing_webhook", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalOutgoingWebhook)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// GetOutgoingWebhook : Gets an Outbound Integration by ID
// Gets an Outbound Integration by ID.
func (logs *LogsV0) GetOutgoingWebhook(getOutgoingWebhookOptions *GetOutgoingWebhookOptions) (result OutgoingWebhookIntf, response *core.DetailedResponse, err error) {
	result, response, err = logs.GetOutgoingWebhookWithContext(context.Background(), getOutgoingWebhookOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// GetOutgoingWebhookWithContext is an alternate form of the GetOutgoingWebhook method which supports a Context parameter
func (logs *LogsV0) GetOutgoingWebhookWithContext(ctx context.Context, getOutgoingWebhookOptions *GetOutgoingWebhookOptions) (result OutgoingWebhookIntf, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getOutgoingWebhookOptions, "getOutgoingWebhookOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(getOutgoingWebhookOptions, "getOutgoingWebhookOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*getOutgoingWebhookOptions.ID),
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/outgoing_webhooks/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range getOutgoingWebhookOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "GetOutgoingWebhook")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "get_outgoing_webhook", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalOutgoingWebhook)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// UpdateOutgoingWebhook : Update an Outbound Integration
// Update an Outbound Integration.
func (logs *LogsV0) UpdateOutgoingWebhook(updateOutgoingWebhookOptions *UpdateOutgoingWebhookOptions) (result OutgoingWebhookIntf, response *core.DetailedResponse, err error) {
	result, response, err = logs.UpdateOutgoingWebhookWithContext(context.Background(), updateOutgoingWebhookOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// UpdateOutgoingWebhookWithContext is an alternate form of the UpdateOutgoingWebhook method which supports a Context parameter
func (logs *LogsV0) UpdateOutgoingWebhookWithContext(ctx context.Context, updateOutgoingWebhookOptions *UpdateOutgoingWebhookOptions) (result OutgoingWebhookIntf, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateOutgoingWebhookOptions, "updateOutgoingWebhookOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(updateOutgoingWebhookOptions, "updateOutgoingWebhookOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*updateOutgoingWebhookOptions.ID),
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/outgoing_webhooks/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range updateOutgoingWebhookOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "UpdateOutgoingWebhook")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(updateOutgoingWebhookOptions.OutgoingWebhookPrototype)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "update_outgoing_webhook", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalOutgoingWebhook)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// DeleteOutgoingWebhook : Delete an Outbound Integration
// Delete an Outbound Integration.
func (logs *LogsV0) DeleteOutgoingWebhook(deleteOutgoingWebhookOptions *DeleteOutgoingWebhookOptions) (response *core.DetailedResponse, err error) {
	response, err = logs.DeleteOutgoingWebhookWithContext(context.Background(), deleteOutgoingWebhookOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// DeleteOutgoingWebhookWithContext is an alternate form of the DeleteOutgoingWebhook method which supports a Context parameter
func (logs *LogsV0) DeleteOutgoingWebhookWithContext(ctx context.Context, deleteOutgoingWebhookOptions *DeleteOutgoingWebhookOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteOutgoingWebhookOptions, "deleteOutgoingWebhookOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(deleteOutgoingWebhookOptions, "deleteOutgoingWebhookOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*deleteOutgoingWebhookOptions.ID),
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/outgoing_webhooks/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range deleteOutgoingWebhookOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "DeleteOutgoingWebhook")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	response, err = logs.Service.Request(request, nil)
	if err != nil {
		core.EnrichHTTPProblem(err, "delete_outgoing_webhook", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}

	return
}

// GetPolicy : Gets policy by id
// Gets policy by id.
func (logs *LogsV0) GetPolicy(getPolicyOptions *GetPolicyOptions) (result PolicyIntf, response *core.DetailedResponse, err error) {
	result, response, err = logs.GetPolicyWithContext(context.Background(), getPolicyOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// GetPolicyWithContext is an alternate form of the GetPolicy method which supports a Context parameter
func (logs *LogsV0) GetPolicyWithContext(ctx context.Context, getPolicyOptions *GetPolicyOptions) (result PolicyIntf, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getPolicyOptions, "getPolicyOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(getPolicyOptions, "getPolicyOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*getPolicyOptions.ID),
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/policies/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range getPolicyOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "GetPolicy")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "get_policy", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalPolicy)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// UpdatePolicy : Updates an existing policy
// Updates an existing policy.
func (logs *LogsV0) UpdatePolicy(updatePolicyOptions *UpdatePolicyOptions) (result PolicyIntf, response *core.DetailedResponse, err error) {
	result, response, err = logs.UpdatePolicyWithContext(context.Background(), updatePolicyOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// UpdatePolicyWithContext is an alternate form of the UpdatePolicy method which supports a Context parameter
func (logs *LogsV0) UpdatePolicyWithContext(ctx context.Context, updatePolicyOptions *UpdatePolicyOptions) (result PolicyIntf, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updatePolicyOptions, "updatePolicyOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(updatePolicyOptions, "updatePolicyOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*updatePolicyOptions.ID),
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/policies/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range updatePolicyOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "UpdatePolicy")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(updatePolicyOptions.PolicyPrototype)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "update_policy", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalPolicy)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// DeletePolicy : Deletes an existing policy
// Deletes an existing policy.
func (logs *LogsV0) DeletePolicy(deletePolicyOptions *DeletePolicyOptions) (response *core.DetailedResponse, err error) {
	response, err = logs.DeletePolicyWithContext(context.Background(), deletePolicyOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// DeletePolicyWithContext is an alternate form of the DeletePolicy method which supports a Context parameter
func (logs *LogsV0) DeletePolicyWithContext(ctx context.Context, deletePolicyOptions *DeletePolicyOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deletePolicyOptions, "deletePolicyOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(deletePolicyOptions, "deletePolicyOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*deletePolicyOptions.ID),
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/policies/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range deletePolicyOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "DeletePolicy")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	response, err = logs.Service.Request(request, nil)
	if err != nil {
		core.EnrichHTTPProblem(err, "delete_policy", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}

	return
}

// GetCompanyPolicies : Gets policies
// Gets policies.
func (logs *LogsV0) GetCompanyPolicies(getCompanyPoliciesOptions *GetCompanyPoliciesOptions) (result *PolicyCollection, response *core.DetailedResponse, err error) {
	result, response, err = logs.GetCompanyPoliciesWithContext(context.Background(), getCompanyPoliciesOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// GetCompanyPoliciesWithContext is an alternate form of the GetCompanyPolicies method which supports a Context parameter
func (logs *LogsV0) GetCompanyPoliciesWithContext(ctx context.Context, getCompanyPoliciesOptions *GetCompanyPoliciesOptions) (result *PolicyCollection, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(getCompanyPoliciesOptions, "getCompanyPoliciesOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/policies`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range getCompanyPoliciesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "GetCompanyPolicies")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if getCompanyPoliciesOptions.EnabledOnly != nil {
		builder.AddQuery("enabled_only", fmt.Sprint(*getCompanyPoliciesOptions.EnabledOnly))
	}
	if getCompanyPoliciesOptions.SourceType != nil {
		builder.AddQuery("source_type", fmt.Sprint(*getCompanyPoliciesOptions.SourceType))
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "get_company_policies", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalPolicyCollection)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// CreatePolicy : Creates a new policy
// Creates a new policy.
func (logs *LogsV0) CreatePolicy(createPolicyOptions *CreatePolicyOptions) (result PolicyIntf, response *core.DetailedResponse, err error) {
	result, response, err = logs.CreatePolicyWithContext(context.Background(), createPolicyOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// CreatePolicyWithContext is an alternate form of the CreatePolicy method which supports a Context parameter
func (logs *LogsV0) CreatePolicyWithContext(ctx context.Context, createPolicyOptions *CreatePolicyOptions) (result PolicyIntf, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createPolicyOptions, "createPolicyOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(createPolicyOptions, "createPolicyOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/policies`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range createPolicyOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "CreatePolicy")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createPolicyOptions.PolicyPrototype)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "create_policy", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalPolicy)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// CreateDashboard : Creates a new dashboard
// Creates a new dashboard.
func (logs *LogsV0) CreateDashboard(createDashboardOptions *CreateDashboardOptions) (result DashboardIntf, response *core.DetailedResponse, err error) {
	result, response, err = logs.CreateDashboardWithContext(context.Background(), createDashboardOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// CreateDashboardWithContext is an alternate form of the CreateDashboard method which supports a Context parameter
func (logs *LogsV0) CreateDashboardWithContext(ctx context.Context, createDashboardOptions *CreateDashboardOptions) (result DashboardIntf, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createDashboardOptions, "createDashboardOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(createDashboardOptions, "createDashboardOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/dashboards`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range createDashboardOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "CreateDashboard")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createDashboardOptions.Dashboard)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "create_dashboard", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDashboard)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// GetDashboard : Gets an existing dashboard
// Gets an existing dashboard.
func (logs *LogsV0) GetDashboard(getDashboardOptions *GetDashboardOptions) (result DashboardIntf, response *core.DetailedResponse, err error) {
	result, response, err = logs.GetDashboardWithContext(context.Background(), getDashboardOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// GetDashboardWithContext is an alternate form of the GetDashboard method which supports a Context parameter
func (logs *LogsV0) GetDashboardWithContext(ctx context.Context, getDashboardOptions *GetDashboardOptions) (result DashboardIntf, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getDashboardOptions, "getDashboardOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(getDashboardOptions, "getDashboardOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"dashboard_id": *getDashboardOptions.DashboardID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/dashboards/{dashboard_id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range getDashboardOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "GetDashboard")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "get_dashboard", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDashboard)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// ReplaceDashboard : Replaces an existing dashboard
// Replaces an existing dashboard.
func (logs *LogsV0) ReplaceDashboard(replaceDashboardOptions *ReplaceDashboardOptions) (result DashboardIntf, response *core.DetailedResponse, err error) {
	result, response, err = logs.ReplaceDashboardWithContext(context.Background(), replaceDashboardOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// ReplaceDashboardWithContext is an alternate form of the ReplaceDashboard method which supports a Context parameter
func (logs *LogsV0) ReplaceDashboardWithContext(ctx context.Context, replaceDashboardOptions *ReplaceDashboardOptions) (result DashboardIntf, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceDashboardOptions, "replaceDashboardOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(replaceDashboardOptions, "replaceDashboardOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"dashboard_id": *replaceDashboardOptions.DashboardID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/dashboards/{dashboard_id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range replaceDashboardOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "ReplaceDashboard")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(replaceDashboardOptions.Dashboard)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "replace_dashboard", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDashboard)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// DeleteDashboard : Deletes an existing dashboard
// Deletes an existing dashboard.
func (logs *LogsV0) DeleteDashboard(deleteDashboardOptions *DeleteDashboardOptions) (response *core.DetailedResponse, err error) {
	response, err = logs.DeleteDashboardWithContext(context.Background(), deleteDashboardOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// DeleteDashboardWithContext is an alternate form of the DeleteDashboard method which supports a Context parameter
func (logs *LogsV0) DeleteDashboardWithContext(ctx context.Context, deleteDashboardOptions *DeleteDashboardOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteDashboardOptions, "deleteDashboardOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(deleteDashboardOptions, "deleteDashboardOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"dashboard_id": *deleteDashboardOptions.DashboardID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/dashboards/{dashboard_id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range deleteDashboardOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "DeleteDashboard")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	response, err = logs.Service.Request(request, nil)
	if err != nil {
		core.EnrichHTTPProblem(err, "delete_dashboard", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}

	return
}

// PinDashboard : Add dashboard to the favorite folder
// Add dashboard to the favorite folder.
func (logs *LogsV0) PinDashboard(pinDashboardOptions *PinDashboardOptions) (result *PinDashboardResponse, response *core.DetailedResponse, err error) {
	result, response, err = logs.PinDashboardWithContext(context.Background(), pinDashboardOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// PinDashboardWithContext is an alternate form of the PinDashboard method which supports a Context parameter
func (logs *LogsV0) PinDashboardWithContext(ctx context.Context, pinDashboardOptions *PinDashboardOptions) (result *PinDashboardResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(pinDashboardOptions, "pinDashboardOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(pinDashboardOptions, "pinDashboardOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"dashboard_id": *pinDashboardOptions.DashboardID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/dashboards/{dashboard_id}/pinned`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range pinDashboardOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "PinDashboard")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "pin_dashboard", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalPinDashboardResponse)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// UnpinDashboard : Remove dashboard to the favorite folder
// Remove dashboard to the favorite folder.
func (logs *LogsV0) UnpinDashboard(unpinDashboardOptions *UnpinDashboardOptions) (response *core.DetailedResponse, err error) {
	response, err = logs.UnpinDashboardWithContext(context.Background(), unpinDashboardOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// UnpinDashboardWithContext is an alternate form of the UnpinDashboard method which supports a Context parameter
func (logs *LogsV0) UnpinDashboardWithContext(ctx context.Context, unpinDashboardOptions *UnpinDashboardOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(unpinDashboardOptions, "unpinDashboardOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(unpinDashboardOptions, "unpinDashboardOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"dashboard_id": *unpinDashboardOptions.DashboardID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/dashboards/{dashboard_id}/pinned`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range unpinDashboardOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "UnpinDashboard")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	response, err = logs.Service.Request(request, nil)
	if err != nil {
		core.EnrichHTTPProblem(err, "unpin_dashboard", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}

	return
}

// ReplaceDefaultDashboard : Set dashboard as the default dashboard for the user
// Set dashboard as the default dashboard for the user.
func (logs *LogsV0) ReplaceDefaultDashboard(replaceDefaultDashboardOptions *ReplaceDefaultDashboardOptions) (result *ReplaceDefaultDashboardResponse, response *core.DetailedResponse, err error) {
	result, response, err = logs.ReplaceDefaultDashboardWithContext(context.Background(), replaceDefaultDashboardOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// ReplaceDefaultDashboardWithContext is an alternate form of the ReplaceDefaultDashboard method which supports a Context parameter
func (logs *LogsV0) ReplaceDefaultDashboardWithContext(ctx context.Context, replaceDefaultDashboardOptions *ReplaceDefaultDashboardOptions) (result *ReplaceDefaultDashboardResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceDefaultDashboardOptions, "replaceDefaultDashboardOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(replaceDefaultDashboardOptions, "replaceDefaultDashboardOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"dashboard_id": *replaceDefaultDashboardOptions.DashboardID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/dashboards/{dashboard_id}/default`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range replaceDefaultDashboardOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "ReplaceDefaultDashboard")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "replace_default_dashboard", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalReplaceDefaultDashboardResponse)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// AssignDashboardFolder : Assign a dashboard to a folder
// Assign a dashboard to a folder.
func (logs *LogsV0) AssignDashboardFolder(assignDashboardFolderOptions *AssignDashboardFolderOptions) (result *AssignDashboardFolderResponse, response *core.DetailedResponse, err error) {
	result, response, err = logs.AssignDashboardFolderWithContext(context.Background(), assignDashboardFolderOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// AssignDashboardFolderWithContext is an alternate form of the AssignDashboardFolder method which supports a Context parameter
func (logs *LogsV0) AssignDashboardFolderWithContext(ctx context.Context, assignDashboardFolderOptions *AssignDashboardFolderOptions) (result *AssignDashboardFolderResponse, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(assignDashboardFolderOptions, "assignDashboardFolderOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(assignDashboardFolderOptions, "assignDashboardFolderOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"dashboard_id": *assignDashboardFolderOptions.DashboardID,
		"folder_id": *assignDashboardFolderOptions.FolderID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/dashboards/{dashboard_id}/folder/{folder_id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range assignDashboardFolderOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "AssignDashboardFolder")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "assign_dashboard_folder", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalAssignDashboardFolderResponse)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// ListDashboardFolders : List all dashboard folders
// List all dashboard folders.
func (logs *LogsV0) ListDashboardFolders(listDashboardFoldersOptions *ListDashboardFoldersOptions) (result *DashboardFolderCollection, response *core.DetailedResponse, err error) {
	result, response, err = logs.ListDashboardFoldersWithContext(context.Background(), listDashboardFoldersOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// ListDashboardFoldersWithContext is an alternate form of the ListDashboardFolders method which supports a Context parameter
func (logs *LogsV0) ListDashboardFoldersWithContext(ctx context.Context, listDashboardFoldersOptions *ListDashboardFoldersOptions) (result *DashboardFolderCollection, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listDashboardFoldersOptions, "listDashboardFoldersOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/folders`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range listDashboardFoldersOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "ListDashboardFolders")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "list_dashboard_folders", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDashboardFolderCollection)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// CreateDashboardFolder : Create a dashboard folder
// Create a dashboard folder.
func (logs *LogsV0) CreateDashboardFolder(createDashboardFolderOptions *CreateDashboardFolderOptions) (result *DashboardFolder, response *core.DetailedResponse, err error) {
	result, response, err = logs.CreateDashboardFolderWithContext(context.Background(), createDashboardFolderOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// CreateDashboardFolderWithContext is an alternate form of the CreateDashboardFolder method which supports a Context parameter
func (logs *LogsV0) CreateDashboardFolderWithContext(ctx context.Context, createDashboardFolderOptions *CreateDashboardFolderOptions) (result *DashboardFolder, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createDashboardFolderOptions, "createDashboardFolderOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(createDashboardFolderOptions, "createDashboardFolderOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/folders`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range createDashboardFolderOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "CreateDashboardFolder")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if createDashboardFolderOptions.Name != nil {
		body["name"] = createDashboardFolderOptions.Name
	}
	if createDashboardFolderOptions.ID != nil {
		body["id"] = createDashboardFolderOptions.ID
	}
	if createDashboardFolderOptions.ParentID != nil {
		body["parent_id"] = createDashboardFolderOptions.ParentID
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "create_dashboard_folder", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDashboardFolder)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// ReplaceDashboardFolder : Update a dashboard folder
// Update a dashboard folder.
func (logs *LogsV0) ReplaceDashboardFolder(replaceDashboardFolderOptions *ReplaceDashboardFolderOptions) (result *DashboardFolder, response *core.DetailedResponse, err error) {
	result, response, err = logs.ReplaceDashboardFolderWithContext(context.Background(), replaceDashboardFolderOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// ReplaceDashboardFolderWithContext is an alternate form of the ReplaceDashboardFolder method which supports a Context parameter
func (logs *LogsV0) ReplaceDashboardFolderWithContext(ctx context.Context, replaceDashboardFolderOptions *ReplaceDashboardFolderOptions) (result *DashboardFolder, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceDashboardFolderOptions, "replaceDashboardFolderOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(replaceDashboardFolderOptions, "replaceDashboardFolderOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"folder_id": fmt.Sprint(*replaceDashboardFolderOptions.FolderID),
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/folders/{folder_id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range replaceDashboardFolderOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "ReplaceDashboardFolder")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if replaceDashboardFolderOptions.Name != nil {
		body["name"] = replaceDashboardFolderOptions.Name
	}
	if replaceDashboardFolderOptions.ID != nil {
		body["id"] = replaceDashboardFolderOptions.ID
	}
	if replaceDashboardFolderOptions.ParentID != nil {
		body["parent_id"] = replaceDashboardFolderOptions.ParentID
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "replace_dashboard_folder", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDashboardFolder)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// DeleteDashboardFolder : Delete a dashboard folder
// Delete a dashboard folder.
func (logs *LogsV0) DeleteDashboardFolder(deleteDashboardFolderOptions *DeleteDashboardFolderOptions) (response *core.DetailedResponse, err error) {
	response, err = logs.DeleteDashboardFolderWithContext(context.Background(), deleteDashboardFolderOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// DeleteDashboardFolderWithContext is an alternate form of the DeleteDashboardFolder method which supports a Context parameter
func (logs *LogsV0) DeleteDashboardFolderWithContext(ctx context.Context, deleteDashboardFolderOptions *DeleteDashboardFolderOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteDashboardFolderOptions, "deleteDashboardFolderOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(deleteDashboardFolderOptions, "deleteDashboardFolderOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"folder_id": fmt.Sprint(*deleteDashboardFolderOptions.FolderID),
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/folders/{folder_id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range deleteDashboardFolderOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "DeleteDashboardFolder")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	response, err = logs.Service.Request(request, nil)
	if err != nil {
		core.EnrichHTTPProblem(err, "delete_dashboard_folder", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}

	return
}

// ListE2m : Lists event to metrics definitions
// Lists event to metrics definitions.
func (logs *LogsV0) ListE2m(listE2mOptions *ListE2mOptions) (result *Event2MetricCollection, response *core.DetailedResponse, err error) {
	result, response, err = logs.ListE2mWithContext(context.Background(), listE2mOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// ListE2mWithContext is an alternate form of the ListE2m method which supports a Context parameter
func (logs *LogsV0) ListE2mWithContext(ctx context.Context, listE2mOptions *ListE2mOptions) (result *Event2MetricCollection, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listE2mOptions, "listE2mOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/events2metrics`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range listE2mOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "ListE2m")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "list_e2m", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalEvent2MetricCollection)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// CreateE2m : Creates event to metrics definitions
// Creates event to metrics definitions.
func (logs *LogsV0) CreateE2m(createE2mOptions *CreateE2mOptions) (result Event2MetricIntf, response *core.DetailedResponse, err error) {
	result, response, err = logs.CreateE2mWithContext(context.Background(), createE2mOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// CreateE2mWithContext is an alternate form of the CreateE2m method which supports a Context parameter
func (logs *LogsV0) CreateE2mWithContext(ctx context.Context, createE2mOptions *CreateE2mOptions) (result Event2MetricIntf, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createE2mOptions, "createE2mOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(createE2mOptions, "createE2mOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/events2metrics`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range createE2mOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "CreateE2m")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(createE2mOptions.Event2MetricPrototype)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "create_e2m", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalEvent2Metric)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// GetE2m : Gets event to metrics definitions by id
// Gets event to metrics definitions by id.
func (logs *LogsV0) GetE2m(getE2mOptions *GetE2mOptions) (result Event2MetricIntf, response *core.DetailedResponse, err error) {
	result, response, err = logs.GetE2mWithContext(context.Background(), getE2mOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// GetE2mWithContext is an alternate form of the GetE2m method which supports a Context parameter
func (logs *LogsV0) GetE2mWithContext(ctx context.Context, getE2mOptions *GetE2mOptions) (result Event2MetricIntf, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getE2mOptions, "getE2mOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(getE2mOptions, "getE2mOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": *getE2mOptions.ID,
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/events2metrics/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range getE2mOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "GetE2m")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "get_e2m", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalEvent2Metric)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// ReplaceE2m : Updates event to metrics definitions
// Updates event to metrics definitions.
func (logs *LogsV0) ReplaceE2m(replaceE2mOptions *ReplaceE2mOptions) (result Event2MetricIntf, response *core.DetailedResponse, err error) {
	result, response, err = logs.ReplaceE2mWithContext(context.Background(), replaceE2mOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// ReplaceE2mWithContext is an alternate form of the ReplaceE2m method which supports a Context parameter
func (logs *LogsV0) ReplaceE2mWithContext(ctx context.Context, replaceE2mOptions *ReplaceE2mOptions) (result Event2MetricIntf, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceE2mOptions, "replaceE2mOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(replaceE2mOptions, "replaceE2mOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": *replaceE2mOptions.ID,
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/events2metrics/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range replaceE2mOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "ReplaceE2m")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	_, err = builder.SetBodyContentJSON(replaceE2mOptions.Event2MetricPrototype)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "replace_e2m", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalEvent2Metric)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// DeleteE2m : Deletes event to metrics definitions by id
// Deletes event to metrics definitions by id.
func (logs *LogsV0) DeleteE2m(deleteE2mOptions *DeleteE2mOptions) (response *core.DetailedResponse, err error) {
	response, err = logs.DeleteE2mWithContext(context.Background(), deleteE2mOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// DeleteE2mWithContext is an alternate form of the DeleteE2m method which supports a Context parameter
func (logs *LogsV0) DeleteE2mWithContext(ctx context.Context, deleteE2mOptions *DeleteE2mOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteE2mOptions, "deleteE2mOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(deleteE2mOptions, "deleteE2mOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": *deleteE2mOptions.ID,
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/events2metrics/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range deleteE2mOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "DeleteE2m")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	response, err = logs.Service.Request(request, nil)
	if err != nil {
		core.EnrichHTTPProblem(err, "delete_e2m", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}

	return
}

// ListViews : Lists all company public views
// Lists all company public views.
func (logs *LogsV0) ListViews(listViewsOptions *ListViewsOptions) (result *ViewCollection, response *core.DetailedResponse, err error) {
	result, response, err = logs.ListViewsWithContext(context.Background(), listViewsOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// ListViewsWithContext is an alternate form of the ListViews method which supports a Context parameter
func (logs *LogsV0) ListViewsWithContext(ctx context.Context, listViewsOptions *ListViewsOptions) (result *ViewCollection, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listViewsOptions, "listViewsOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/views`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range listViewsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "ListViews")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "list_views", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalViewCollection)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// CreateView : Creates a new view
// Creates a new view.
func (logs *LogsV0) CreateView(createViewOptions *CreateViewOptions) (result *View, response *core.DetailedResponse, err error) {
	result, response, err = logs.CreateViewWithContext(context.Background(), createViewOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// CreateViewWithContext is an alternate form of the CreateView method which supports a Context parameter
func (logs *LogsV0) CreateViewWithContext(ctx context.Context, createViewOptions *CreateViewOptions) (result *View, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createViewOptions, "createViewOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(createViewOptions, "createViewOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/views`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range createViewOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "CreateView")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if createViewOptions.Name != nil {
		body["name"] = createViewOptions.Name
	}
	if createViewOptions.TimeSelection != nil {
		body["time_selection"] = createViewOptions.TimeSelection
	}
	if createViewOptions.SearchQuery != nil {
		body["search_query"] = createViewOptions.SearchQuery
	}
	if createViewOptions.Filters != nil {
		body["filters"] = createViewOptions.Filters
	}
	if createViewOptions.FolderID != nil {
		body["folder_id"] = createViewOptions.FolderID
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "create_view", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalView)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// GetView : Gets a view by ID
// Gets a view by ID.
func (logs *LogsV0) GetView(getViewOptions *GetViewOptions) (result *View, response *core.DetailedResponse, err error) {
	result, response, err = logs.GetViewWithContext(context.Background(), getViewOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// GetViewWithContext is an alternate form of the GetView method which supports a Context parameter
func (logs *LogsV0) GetViewWithContext(ctx context.Context, getViewOptions *GetViewOptions) (result *View, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getViewOptions, "getViewOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(getViewOptions, "getViewOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*getViewOptions.ID),
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/views/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range getViewOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "GetView")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "get_view", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalView)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// ReplaceView : Replaces an existing view
// Replaces an existing view.
func (logs *LogsV0) ReplaceView(replaceViewOptions *ReplaceViewOptions) (result *View, response *core.DetailedResponse, err error) {
	result, response, err = logs.ReplaceViewWithContext(context.Background(), replaceViewOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// ReplaceViewWithContext is an alternate form of the ReplaceView method which supports a Context parameter
func (logs *LogsV0) ReplaceViewWithContext(ctx context.Context, replaceViewOptions *ReplaceViewOptions) (result *View, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceViewOptions, "replaceViewOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(replaceViewOptions, "replaceViewOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*replaceViewOptions.ID),
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/views/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range replaceViewOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "ReplaceView")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if replaceViewOptions.Name != nil {
		body["name"] = replaceViewOptions.Name
	}
	if replaceViewOptions.TimeSelection != nil {
		body["time_selection"] = replaceViewOptions.TimeSelection
	}
	if replaceViewOptions.SearchQuery != nil {
		body["search_query"] = replaceViewOptions.SearchQuery
	}
	if replaceViewOptions.Filters != nil {
		body["filters"] = replaceViewOptions.Filters
	}
	if replaceViewOptions.FolderID != nil {
		body["folder_id"] = replaceViewOptions.FolderID
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "replace_view", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalView)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// DeleteView : Deletes a view by ID
// Deletes a view by ID.
func (logs *LogsV0) DeleteView(deleteViewOptions *DeleteViewOptions) (response *core.DetailedResponse, err error) {
	response, err = logs.DeleteViewWithContext(context.Background(), deleteViewOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// DeleteViewWithContext is an alternate form of the DeleteView method which supports a Context parameter
func (logs *LogsV0) DeleteViewWithContext(ctx context.Context, deleteViewOptions *DeleteViewOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteViewOptions, "deleteViewOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(deleteViewOptions, "deleteViewOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*deleteViewOptions.ID),
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/views/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range deleteViewOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "DeleteView")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	response, err = logs.Service.Request(request, nil)
	if err != nil {
		core.EnrichHTTPProblem(err, "delete_view", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}

	return
}

// ListViewFolders : List view's folders
// List view's folders.
func (logs *LogsV0) ListViewFolders(listViewFoldersOptions *ListViewFoldersOptions) (result *ViewFolderCollection, response *core.DetailedResponse, err error) {
	result, response, err = logs.ListViewFoldersWithContext(context.Background(), listViewFoldersOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// ListViewFoldersWithContext is an alternate form of the ListViewFolders method which supports a Context parameter
func (logs *LogsV0) ListViewFoldersWithContext(ctx context.Context, listViewFoldersOptions *ListViewFoldersOptions) (result *ViewFolderCollection, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listViewFoldersOptions, "listViewFoldersOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/view_folders`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range listViewFoldersOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "ListViewFolders")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "list_view_folders", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalViewFolderCollection)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// CreateViewFolder : Create view folder
// Create view folder.
func (logs *LogsV0) CreateViewFolder(createViewFolderOptions *CreateViewFolderOptions) (result *ViewFolder, response *core.DetailedResponse, err error) {
	result, response, err = logs.CreateViewFolderWithContext(context.Background(), createViewFolderOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// CreateViewFolderWithContext is an alternate form of the CreateViewFolder method which supports a Context parameter
func (logs *LogsV0) CreateViewFolderWithContext(ctx context.Context, createViewFolderOptions *CreateViewFolderOptions) (result *ViewFolder, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createViewFolderOptions, "createViewFolderOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(createViewFolderOptions, "createViewFolderOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/view_folders`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range createViewFolderOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "CreateViewFolder")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if createViewFolderOptions.Name != nil {
		body["name"] = createViewFolderOptions.Name
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "create_view_folder", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalViewFolder)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// GetViewFolder : Get view folder
// Get view folder.
func (logs *LogsV0) GetViewFolder(getViewFolderOptions *GetViewFolderOptions) (result *ViewFolder, response *core.DetailedResponse, err error) {
	result, response, err = logs.GetViewFolderWithContext(context.Background(), getViewFolderOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// GetViewFolderWithContext is an alternate form of the GetViewFolder method which supports a Context parameter
func (logs *LogsV0) GetViewFolderWithContext(ctx context.Context, getViewFolderOptions *GetViewFolderOptions) (result *ViewFolder, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(getViewFolderOptions, "getViewFolderOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(getViewFolderOptions, "getViewFolderOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*getViewFolderOptions.ID),
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/view_folders/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range getViewFolderOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "GetViewFolder")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "get_view_folder", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalViewFolder)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// ReplaceViewFolder : Replaces an existing view folder
// Replaces an existing view folder.
func (logs *LogsV0) ReplaceViewFolder(replaceViewFolderOptions *ReplaceViewFolderOptions) (result *ViewFolder, response *core.DetailedResponse, err error) {
	result, response, err = logs.ReplaceViewFolderWithContext(context.Background(), replaceViewFolderOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// ReplaceViewFolderWithContext is an alternate form of the ReplaceViewFolder method which supports a Context parameter
func (logs *LogsV0) ReplaceViewFolderWithContext(ctx context.Context, replaceViewFolderOptions *ReplaceViewFolderOptions) (result *ViewFolder, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(replaceViewFolderOptions, "replaceViewFolderOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(replaceViewFolderOptions, "replaceViewFolderOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*replaceViewFolderOptions.ID),
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/view_folders/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range replaceViewFolderOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "ReplaceViewFolder")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if replaceViewFolderOptions.Name != nil {
		body["name"] = replaceViewFolderOptions.Name
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "replace_view_folder", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalViewFolder)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// DeleteViewFolder : Deletes a view folder by ID
// Deletes a view folder by ID.
func (logs *LogsV0) DeleteViewFolder(deleteViewFolderOptions *DeleteViewFolderOptions) (response *core.DetailedResponse, err error) {
	response, err = logs.DeleteViewFolderWithContext(context.Background(), deleteViewFolderOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// DeleteViewFolderWithContext is an alternate form of the DeleteViewFolder method which supports a Context parameter
func (logs *LogsV0) DeleteViewFolderWithContext(ctx context.Context, deleteViewFolderOptions *DeleteViewFolderOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteViewFolderOptions, "deleteViewFolderOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(deleteViewFolderOptions, "deleteViewFolderOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*deleteViewFolderOptions.ID),
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/view_folders/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range deleteViewFolderOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "DeleteViewFolder")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	response, err = logs.Service.Request(request, nil)
	if err != nil {
		core.EnrichHTTPProblem(err, "delete_view_folder", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}

	return
}

// ListDataAccessRules : List service instance's Data Access Rules with provided ids
// List service instance's Data Access Rules with provided ids.
func (logs *LogsV0) ListDataAccessRules(listDataAccessRulesOptions *ListDataAccessRulesOptions) (result *DataAccessRuleCollection, response *core.DetailedResponse, err error) {
	result, response, err = logs.ListDataAccessRulesWithContext(context.Background(), listDataAccessRulesOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// ListDataAccessRulesWithContext is an alternate form of the ListDataAccessRules method which supports a Context parameter
func (logs *LogsV0) ListDataAccessRulesWithContext(ctx context.Context, listDataAccessRulesOptions *ListDataAccessRulesOptions) (result *DataAccessRuleCollection, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(listDataAccessRulesOptions, "listDataAccessRulesOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/data_access_rules`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range listDataAccessRulesOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "ListDataAccessRules")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	if listDataAccessRulesOptions.ID != nil {
		err = builder.AddQuerySlice("id", listDataAccessRulesOptions.ID)
		if err != nil {
			err = core.SDKErrorf(err, "", "add-query-slice-error", common.GetComponentInfo())
			return
		}
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "list_data_access_rules", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDataAccessRuleCollection)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// CreateDataAccessRule : Create a Data Access Rule
// Create a Data Access Rule.
func (logs *LogsV0) CreateDataAccessRule(createDataAccessRuleOptions *CreateDataAccessRuleOptions) (result *DataAccessRule, response *core.DetailedResponse, err error) {
	result, response, err = logs.CreateDataAccessRuleWithContext(context.Background(), createDataAccessRuleOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// CreateDataAccessRuleWithContext is an alternate form of the CreateDataAccessRule method which supports a Context parameter
func (logs *LogsV0) CreateDataAccessRuleWithContext(ctx context.Context, createDataAccessRuleOptions *CreateDataAccessRuleOptions) (result *DataAccessRule, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createDataAccessRuleOptions, "createDataAccessRuleOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(createDataAccessRuleOptions, "createDataAccessRuleOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/data_access_rules`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range createDataAccessRuleOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "CreateDataAccessRule")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if createDataAccessRuleOptions.DisplayName != nil {
		body["display_name"] = createDataAccessRuleOptions.DisplayName
	}
	if createDataAccessRuleOptions.Filters != nil {
		body["filters"] = createDataAccessRuleOptions.Filters
	}
	if createDataAccessRuleOptions.DefaultExpression != nil {
		body["default_expression"] = createDataAccessRuleOptions.DefaultExpression
	}
	if createDataAccessRuleOptions.Description != nil {
		body["description"] = createDataAccessRuleOptions.Description
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "create_data_access_rule", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDataAccessRule)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// UpdateDataAccessRule : Update a Data Access Rule
// Update a Data Access Rule.
func (logs *LogsV0) UpdateDataAccessRule(updateDataAccessRuleOptions *UpdateDataAccessRuleOptions) (result *DataAccessRule, response *core.DetailedResponse, err error) {
	result, response, err = logs.UpdateDataAccessRuleWithContext(context.Background(), updateDataAccessRuleOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// UpdateDataAccessRuleWithContext is an alternate form of the UpdateDataAccessRule method which supports a Context parameter
func (logs *LogsV0) UpdateDataAccessRuleWithContext(ctx context.Context, updateDataAccessRuleOptions *UpdateDataAccessRuleOptions) (result *DataAccessRule, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateDataAccessRuleOptions, "updateDataAccessRuleOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(updateDataAccessRuleOptions, "updateDataAccessRuleOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*updateDataAccessRuleOptions.ID),
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/data_access_rules/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range updateDataAccessRuleOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "UpdateDataAccessRule")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if updateDataAccessRuleOptions.DisplayName != nil {
		body["display_name"] = updateDataAccessRuleOptions.DisplayName
	}
	if updateDataAccessRuleOptions.Filters != nil {
		body["filters"] = updateDataAccessRuleOptions.Filters
	}
	if updateDataAccessRuleOptions.DefaultExpression != nil {
		body["default_expression"] = updateDataAccessRuleOptions.DefaultExpression
	}
	if updateDataAccessRuleOptions.Description != nil {
		body["description"] = updateDataAccessRuleOptions.Description
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "update_data_access_rule", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDataAccessRule)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// DeleteDataAccessRule : Delete a Data Access Rule
// Delete a Data Access Rule.
func (logs *LogsV0) DeleteDataAccessRule(deleteDataAccessRuleOptions *DeleteDataAccessRuleOptions) (response *core.DetailedResponse, err error) {
	response, err = logs.DeleteDataAccessRuleWithContext(context.Background(), deleteDataAccessRuleOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// DeleteDataAccessRuleWithContext is an alternate form of the DeleteDataAccessRule method which supports a Context parameter
func (logs *LogsV0) DeleteDataAccessRuleWithContext(ctx context.Context, deleteDataAccessRuleOptions *DeleteDataAccessRuleOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(deleteDataAccessRuleOptions, "deleteDataAccessRuleOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(deleteDataAccessRuleOptions, "deleteDataAccessRuleOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*deleteDataAccessRuleOptions.ID),
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/data_access_rules/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range deleteDataAccessRuleOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "DeleteDataAccessRule")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	response, err = logs.Service.Request(request, nil)
	if err != nil {
		core.EnrichHTTPProblem(err, "delete_data_access_rule", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}

	return
}

// GetEnrichments : List all enrichments
// List all enrichments.
func (logs *LogsV0) GetEnrichments(getEnrichmentsOptions *GetEnrichmentsOptions) (result *EntrichmentCollection, response *core.DetailedResponse, err error) {
	result, response, err = logs.GetEnrichmentsWithContext(context.Background(), getEnrichmentsOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// GetEnrichmentsWithContext is an alternate form of the GetEnrichments method which supports a Context parameter
func (logs *LogsV0) GetEnrichmentsWithContext(ctx context.Context, getEnrichmentsOptions *GetEnrichmentsOptions) (result *EntrichmentCollection, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(getEnrichmentsOptions, "getEnrichmentsOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/enrichments`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range getEnrichmentsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "GetEnrichments")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "get_enrichments", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalEntrichmentCollection)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// CreateEnrichment : Create an enrichment
// Create an enrichment.
func (logs *LogsV0) CreateEnrichment(createEnrichmentOptions *CreateEnrichmentOptions) (result *Enrichment, response *core.DetailedResponse, err error) {
	result, response, err = logs.CreateEnrichmentWithContext(context.Background(), createEnrichmentOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// CreateEnrichmentWithContext is an alternate form of the CreateEnrichment method which supports a Context parameter
func (logs *LogsV0) CreateEnrichmentWithContext(ctx context.Context, createEnrichmentOptions *CreateEnrichmentOptions) (result *Enrichment, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(createEnrichmentOptions, "createEnrichmentOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(createEnrichmentOptions, "createEnrichmentOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.POST)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/enrichments`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range createEnrichmentOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "CreateEnrichment")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if createEnrichmentOptions.FieldName != nil {
		body["field_name"] = createEnrichmentOptions.FieldName
	}
	if createEnrichmentOptions.EnrichmentType != nil {
		body["enrichment_type"] = createEnrichmentOptions.EnrichmentType
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "create_enrichment", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalEnrichment)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// RemoveEnrichments : Delete enrichments
// Delete enrichments.
func (logs *LogsV0) RemoveEnrichments(removeEnrichmentsOptions *RemoveEnrichmentsOptions) (response *core.DetailedResponse, err error) {
	response, err = logs.RemoveEnrichmentsWithContext(context.Background(), removeEnrichmentsOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// RemoveEnrichmentsWithContext is an alternate form of the RemoveEnrichments method which supports a Context parameter
func (logs *LogsV0) RemoveEnrichmentsWithContext(ctx context.Context, removeEnrichmentsOptions *RemoveEnrichmentsOptions) (response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(removeEnrichmentsOptions, "removeEnrichmentsOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(removeEnrichmentsOptions, "removeEnrichmentsOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	pathParamsMap := map[string]string{
		"id": fmt.Sprint(*removeEnrichmentsOptions.ID),
	}

	builder := core.NewRequestBuilder(core.DELETE)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/enrichments/{id}`, pathParamsMap)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range removeEnrichmentsOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "RemoveEnrichments")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	response, err = logs.Service.Request(request, nil)
	if err != nil {
		core.EnrichHTTPProblem(err, "remove_enrichments", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}

	return
}

// GetDataUsageMetricsExportStatus : Get data usage metrics export status
// Get data usage metrics export status.
func (logs *LogsV0) GetDataUsageMetricsExportStatus(getDataUsageMetricsExportStatusOptions *GetDataUsageMetricsExportStatusOptions) (result *DataUsageMetricsExportStatus, response *core.DetailedResponse, err error) {
	result, response, err = logs.GetDataUsageMetricsExportStatusWithContext(context.Background(), getDataUsageMetricsExportStatusOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// GetDataUsageMetricsExportStatusWithContext is an alternate form of the GetDataUsageMetricsExportStatus method which supports a Context parameter
func (logs *LogsV0) GetDataUsageMetricsExportStatusWithContext(ctx context.Context, getDataUsageMetricsExportStatusOptions *GetDataUsageMetricsExportStatusOptions) (result *DataUsageMetricsExportStatus, response *core.DetailedResponse, err error) {
	err = core.ValidateStruct(getDataUsageMetricsExportStatusOptions, "getDataUsageMetricsExportStatusOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.GET)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/data_usage`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range getDataUsageMetricsExportStatusOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "GetDataUsageMetricsExportStatus")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "get_data_usage_metrics_export_status", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDataUsageMetricsExportStatus)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}

// UpdateDataUsageMetricsExportStatus : Update data usage metrics export status
// Update data usage metrics export status.
func (logs *LogsV0) UpdateDataUsageMetricsExportStatus(updateDataUsageMetricsExportStatusOptions *UpdateDataUsageMetricsExportStatusOptions) (result *DataUsageMetricsExportStatus, response *core.DetailedResponse, err error) {
	result, response, err = logs.UpdateDataUsageMetricsExportStatusWithContext(context.Background(), updateDataUsageMetricsExportStatusOptions)
	err = core.RepurposeSDKProblem(err, "")
	return
}

// UpdateDataUsageMetricsExportStatusWithContext is an alternate form of the UpdateDataUsageMetricsExportStatus method which supports a Context parameter
func (logs *LogsV0) UpdateDataUsageMetricsExportStatusWithContext(ctx context.Context, updateDataUsageMetricsExportStatusOptions *UpdateDataUsageMetricsExportStatusOptions) (result *DataUsageMetricsExportStatus, response *core.DetailedResponse, err error) {
	err = core.ValidateNotNil(updateDataUsageMetricsExportStatusOptions, "updateDataUsageMetricsExportStatusOptions cannot be nil")
	if err != nil {
		err = core.SDKErrorf(err, "", "unexpected-nil-param", common.GetComponentInfo())
		return
	}
	err = core.ValidateStruct(updateDataUsageMetricsExportStatusOptions, "updateDataUsageMetricsExportStatusOptions")
	if err != nil {
		err = core.SDKErrorf(err, "", "struct-validation-error", common.GetComponentInfo())
		return
	}

	builder := core.NewRequestBuilder(core.PUT)
	builder = builder.WithContext(ctx)
	builder.EnableGzipCompression = logs.GetEnableGzipCompression()
	_, err = builder.ResolveRequestURL(logs.Service.Options.URL, `/v1/data_usage`, nil)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-resolve-error", common.GetComponentInfo())
		return
	}

	for headerName, headerValue := range updateDataUsageMetricsExportStatusOptions.Headers {
		builder.AddHeader(headerName, headerValue)
	}

	sdkHeaders := common.GetSdkHeaders("logs", "V0", "UpdateDataUsageMetricsExportStatus")
	for headerName, headerValue := range sdkHeaders {
		builder.AddHeader(headerName, headerValue)
	}
	builder.AddHeader("Accept", "application/json")
	builder.AddHeader("Content-Type", "application/json")

	body := make(map[string]interface{})
	if updateDataUsageMetricsExportStatusOptions.Enabled != nil {
		body["enabled"] = updateDataUsageMetricsExportStatusOptions.Enabled
	}
	_, err = builder.SetBodyContentJSON(body)
	if err != nil {
		err = core.SDKErrorf(err, "", "set-json-body-error", common.GetComponentInfo())
		return
	}

	request, err := builder.Build()
	if err != nil {
		err = core.SDKErrorf(err, "", "build-error", common.GetComponentInfo())
		return
	}

	var rawResponse map[string]json.RawMessage
	response, err = logs.Service.Request(request, &rawResponse)
	if err != nil {
		core.EnrichHTTPProblem(err, "update_data_usage_metrics_export_status", getServiceComponentInfo())
		err = core.SDKErrorf(err, "", "http-request-err", common.GetComponentInfo())
		return
	}
	if rawResponse != nil {
		err = core.UnmarshalModel(rawResponse, "", &result, UnmarshalDataUsageMetricsExportStatus)
		if err != nil {
			err = core.SDKErrorf(err, "", "unmarshal-resp-error", common.GetComponentInfo())
			return
		}
		response.Result = result
	}

	return
}
func getServiceComponentInfo() *core.ProblemComponent {
	return core.NewProblemComponent(DefaultServiceName, "0.1.0")
}

// Alert : Alert resource model.
type Alert struct {
	// Alert ID.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Alert name.
	Name *string `json:"name" validate:"required"`

	// Alert description.
	Description *string `json:"description,omitempty"`

	// Alert is active.
	IsActive *bool `json:"is_active" validate:"required"`

	// Alert severity.
	Severity *string `json:"severity" validate:"required"`

	// Alert expiration date.
	Expiration *AlertsV1Date `json:"expiration,omitempty"`

	// Alert condition.
	Condition AlertsV2AlertConditionIntf `json:"condition" validate:"required"`

	// Alert notification groups.
	NotificationGroups []AlertsV2AlertNotificationGroups `json:"notification_groups" validate:"required"`

	// Alert filters.
	Filters *AlertsV1AlertFilters `json:"filters" validate:"required"`

	// When should the alert be active.
	ActiveWhen *AlertsV1AlertActiveWhen `json:"active_when,omitempty"`

	// JSON keys to include in the alert notification, if left empty get the full log text in the alert notification.
	NotificationPayloadFilters []string `json:"notification_payload_filters,omitempty"`

	// The Meta labels to add to the alert.
	MetaLabels []AlertsV1MetaLabel `json:"meta_labels,omitempty"`

	// The Meta labels to add to the alert as string with ':' separator.
	MetaLabelsStrings []string `json:"meta_labels_strings,omitempty"`

	// Alert unique identifier.
	UniqueIdentifier *strfmt.UUID `json:"unique_identifier,omitempty"`

	// Incident settings, will create the incident based on this configuration.
	IncidentSettings *AlertsV2AlertIncidentSettings `json:"incident_settings,omitempty"`
}

// Constants associated with the Alert.Severity property.
// Alert severity.
const (
	Alert_Severity_Critical = "critical"
	Alert_Severity_Error = "error"
	Alert_Severity_InfoOrUnspecified = "info_or_unspecified"
	Alert_Severity_Warning = "warning"
)

// UnmarshalAlert unmarshals an instance of Alert from the specified map of raw messages.
func UnmarshalAlert(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Alert)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "is_active", &obj.IsActive)
	if err != nil {
		err = core.SDKErrorf(err, "", "is_active-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "severity", &obj.Severity)
	if err != nil {
		err = core.SDKErrorf(err, "", "severity-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "expiration", &obj.Expiration, UnmarshalAlertsV1Date)
	if err != nil {
		err = core.SDKErrorf(err, "", "expiration-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "condition", &obj.Condition, UnmarshalAlertsV2AlertCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "condition-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "notification_groups", &obj.NotificationGroups, UnmarshalAlertsV2AlertNotificationGroups)
	if err != nil {
		err = core.SDKErrorf(err, "", "notification_groups-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalAlertsV1AlertFilters)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "active_when", &obj.ActiveWhen, UnmarshalAlertsV1AlertActiveWhen)
	if err != nil {
		err = core.SDKErrorf(err, "", "active_when-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "notification_payload_filters", &obj.NotificationPayloadFilters)
	if err != nil {
		err = core.SDKErrorf(err, "", "notification_payload_filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "meta_labels", &obj.MetaLabels, UnmarshalAlertsV1MetaLabel)
	if err != nil {
		err = core.SDKErrorf(err, "", "meta_labels-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "meta_labels_strings", &obj.MetaLabelsStrings)
	if err != nil {
		err = core.SDKErrorf(err, "", "meta_labels_strings-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "unique_identifier", &obj.UniqueIdentifier)
	if err != nil {
		err = core.SDKErrorf(err, "", "unique_identifier-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "incident_settings", &obj.IncidentSettings, UnmarshalAlertsV2AlertIncidentSettings)
	if err != nil {
		err = core.SDKErrorf(err, "", "incident_settings-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertCollection : Alerts collection.
type AlertCollection struct {
	// Alerts.
	Alerts []Alert `json:"alerts,omitempty"`
}

// UnmarshalAlertCollection unmarshals an instance of AlertCollection from the specified map of raw messages.
func UnmarshalAlertCollection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertCollection)
	err = core.UnmarshalModel(m, "alerts", &obj.Alerts, UnmarshalAlert)
	if err != nil {
		err = core.SDKErrorf(err, "", "alerts-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1AlertActiveTimeframe : Activity timeframes of the alert.
type AlertsV1AlertActiveTimeframe struct {
	// Days of the week for activity.
	DaysOfWeek []string `json:"days_of_week" validate:"required"`

	// Time range in the day of the week.
	Range *AlertsV1TimeRange `json:"range" validate:"required"`
}

// Constants associated with the AlertsV1AlertActiveTimeframe.DaysOfWeek property.
// Days of the week for activity.
const (
	AlertsV1AlertActiveTimeframe_DaysOfWeek_Friday = "friday"
	AlertsV1AlertActiveTimeframe_DaysOfWeek_MondayOrUnspecified = "monday_or_unspecified"
	AlertsV1AlertActiveTimeframe_DaysOfWeek_Saturday = "saturday"
	AlertsV1AlertActiveTimeframe_DaysOfWeek_Sunday = "sunday"
	AlertsV1AlertActiveTimeframe_DaysOfWeek_Thursday = "thursday"
	AlertsV1AlertActiveTimeframe_DaysOfWeek_Tuesday = "tuesday"
	AlertsV1AlertActiveTimeframe_DaysOfWeek_Wednesday = "wednesday"
)

// NewAlertsV1AlertActiveTimeframe : Instantiate AlertsV1AlertActiveTimeframe (Generic Model Constructor)
func (*LogsV0) NewAlertsV1AlertActiveTimeframe(daysOfWeek []string, rangeVar *AlertsV1TimeRange) (_model *AlertsV1AlertActiveTimeframe, err error) {
	_model = &AlertsV1AlertActiveTimeframe{
		DaysOfWeek: daysOfWeek,
		Range: rangeVar,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV1AlertActiveTimeframe unmarshals an instance of AlertsV1AlertActiveTimeframe from the specified map of raw messages.
func UnmarshalAlertsV1AlertActiveTimeframe(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1AlertActiveTimeframe)
	err = core.UnmarshalPrimitive(m, "days_of_week", &obj.DaysOfWeek)
	if err != nil {
		err = core.SDKErrorf(err, "", "days_of_week-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "range", &obj.Range, UnmarshalAlertsV1TimeRange)
	if err != nil {
		err = core.SDKErrorf(err, "", "range-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1AlertActiveWhen : When should the alert be active.
type AlertsV1AlertActiveWhen struct {
	// Activity timeframes of the alert.
	Timeframes []AlertsV1AlertActiveTimeframe `json:"timeframes" validate:"required"`
}

// NewAlertsV1AlertActiveWhen : Instantiate AlertsV1AlertActiveWhen (Generic Model Constructor)
func (*LogsV0) NewAlertsV1AlertActiveWhen(timeframes []AlertsV1AlertActiveTimeframe) (_model *AlertsV1AlertActiveWhen, err error) {
	_model = &AlertsV1AlertActiveWhen{
		Timeframes: timeframes,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV1AlertActiveWhen unmarshals an instance of AlertsV1AlertActiveWhen from the specified map of raw messages.
func UnmarshalAlertsV1AlertActiveWhen(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1AlertActiveWhen)
	err = core.UnmarshalModel(m, "timeframes", &obj.Timeframes, UnmarshalAlertsV1AlertActiveTimeframe)
	if err != nil {
		err = core.SDKErrorf(err, "", "timeframes-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1AlertFilters : Alert filters.
type AlertsV1AlertFilters struct {
	// The severity of the logs to filter.
	Severities []string `json:"severities,omitempty"`

	// The metadata filters.
	Metadata *AlertsV1AlertFiltersMetadataFilters `json:"metadata,omitempty"`

	// The alias of the filter.
	Alias *string `json:"alias,omitempty"`

	// The text to filter.
	Text *string `json:"text,omitempty"`

	// The ratio alerts.
	RatioAlerts []AlertsV1AlertFiltersRatioAlert `json:"ratio_alerts,omitempty"`

	// The type of the filter.
	FilterType *string `json:"filter_type,omitempty"`
}

// Constants associated with the AlertsV1AlertFilters.Severities property.
// The severity of the logs to filter.
const (
	AlertsV1AlertFilters_Severities_Critical = "critical"
	AlertsV1AlertFilters_Severities_DebugOrUnspecified = "debug_or_unspecified"
	AlertsV1AlertFilters_Severities_Error = "error"
	AlertsV1AlertFilters_Severities_Info = "info"
	AlertsV1AlertFilters_Severities_Verbose = "verbose"
	AlertsV1AlertFilters_Severities_Warning = "warning"
)

// Constants associated with the AlertsV1AlertFilters.FilterType property.
// The type of the filter.
const (
	AlertsV1AlertFilters_FilterType_Flow = "flow"
	AlertsV1AlertFilters_FilterType_Metric = "metric"
	AlertsV1AlertFilters_FilterType_Ratio = "ratio"
	AlertsV1AlertFilters_FilterType_Template = "template"
	AlertsV1AlertFilters_FilterType_TextOrUnspecified = "text_or_unspecified"
	AlertsV1AlertFilters_FilterType_TimeRelative = "time_relative"
	AlertsV1AlertFilters_FilterType_UniqueCount = "unique_count"
)

// UnmarshalAlertsV1AlertFilters unmarshals an instance of AlertsV1AlertFilters from the specified map of raw messages.
func UnmarshalAlertsV1AlertFilters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1AlertFilters)
	err = core.UnmarshalPrimitive(m, "severities", &obj.Severities)
	if err != nil {
		err = core.SDKErrorf(err, "", "severities-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metadata", &obj.Metadata, UnmarshalAlertsV1AlertFiltersMetadataFilters)
	if err != nil {
		err = core.SDKErrorf(err, "", "metadata-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "alias", &obj.Alias)
	if err != nil {
		err = core.SDKErrorf(err, "", "alias-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "text", &obj.Text)
	if err != nil {
		err = core.SDKErrorf(err, "", "text-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "ratio_alerts", &obj.RatioAlerts, UnmarshalAlertsV1AlertFiltersRatioAlert)
	if err != nil {
		err = core.SDKErrorf(err, "", "ratio_alerts-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "filter_type", &obj.FilterType)
	if err != nil {
		err = core.SDKErrorf(err, "", "filter_type-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1AlertFiltersMetadataFilters : The metadata filters.
type AlertsV1AlertFiltersMetadataFilters struct {
	// The applications to filter.
	Applications []string `json:"applications,omitempty"`

	// The subsystems to filter.
	Subsystems []string `json:"subsystems,omitempty"`
}

// UnmarshalAlertsV1AlertFiltersMetadataFilters unmarshals an instance of AlertsV1AlertFiltersMetadataFilters from the specified map of raw messages.
func UnmarshalAlertsV1AlertFiltersMetadataFilters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1AlertFiltersMetadataFilters)
	err = core.UnmarshalPrimitive(m, "applications", &obj.Applications)
	if err != nil {
		err = core.SDKErrorf(err, "", "applications-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "subsystems", &obj.Subsystems)
	if err != nil {
		err = core.SDKErrorf(err, "", "subsystems-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1AlertFiltersRatioAlert : The ratio alerts.
type AlertsV1AlertFiltersRatioAlert struct {
	// The alias of the filter.
	Alias *string `json:"alias" validate:"required"`

	// The text to filter.
	Text *string `json:"text,omitempty"`

	// The severities to filter.
	Severities []string `json:"severities,omitempty"`

	// The applications to filter.
	Applications []string `json:"applications,omitempty"`

	// The subsystems to filter.
	Subsystems []string `json:"subsystems,omitempty"`

	// The group by fields.
	GroupBy []string `json:"group_by,omitempty"`
}

// Constants associated with the AlertsV1AlertFiltersRatioAlert.Severities property.
// The severity of the logs to filter.
const (
	AlertsV1AlertFiltersRatioAlert_Severities_Critical = "critical"
	AlertsV1AlertFiltersRatioAlert_Severities_DebugOrUnspecified = "debug_or_unspecified"
	AlertsV1AlertFiltersRatioAlert_Severities_Error = "error"
	AlertsV1AlertFiltersRatioAlert_Severities_Info = "info"
	AlertsV1AlertFiltersRatioAlert_Severities_Verbose = "verbose"
	AlertsV1AlertFiltersRatioAlert_Severities_Warning = "warning"
)

// NewAlertsV1AlertFiltersRatioAlert : Instantiate AlertsV1AlertFiltersRatioAlert (Generic Model Constructor)
func (*LogsV0) NewAlertsV1AlertFiltersRatioAlert(alias string) (_model *AlertsV1AlertFiltersRatioAlert, err error) {
	_model = &AlertsV1AlertFiltersRatioAlert{
		Alias: core.StringPtr(alias),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV1AlertFiltersRatioAlert unmarshals an instance of AlertsV1AlertFiltersRatioAlert from the specified map of raw messages.
func UnmarshalAlertsV1AlertFiltersRatioAlert(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1AlertFiltersRatioAlert)
	err = core.UnmarshalPrimitive(m, "alias", &obj.Alias)
	if err != nil {
		err = core.SDKErrorf(err, "", "alias-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "text", &obj.Text)
	if err != nil {
		err = core.SDKErrorf(err, "", "text-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "severities", &obj.Severities)
	if err != nil {
		err = core.SDKErrorf(err, "", "severities-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "applications", &obj.Applications)
	if err != nil {
		err = core.SDKErrorf(err, "", "applications-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "subsystems", &obj.Subsystems)
	if err != nil {
		err = core.SDKErrorf(err, "", "subsystems-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "group_by", &obj.GroupBy)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_by-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1Date : Alert expiration date.
type AlertsV1Date struct {
	// Year.
	Year *int64 `json:"year,omitempty"`

	// Month of the year.
	Month *int64 `json:"month,omitempty"`

	// Day of the month.
	Day *int64 `json:"day,omitempty"`
}

// UnmarshalAlertsV1Date unmarshals an instance of AlertsV1Date from the specified map of raw messages.
func UnmarshalAlertsV1Date(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1Date)
	err = core.UnmarshalPrimitive(m, "year", &obj.Year)
	if err != nil {
		err = core.SDKErrorf(err, "", "year-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "month", &obj.Month)
	if err != nil {
		err = core.SDKErrorf(err, "", "month-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "day", &obj.Day)
	if err != nil {
		err = core.SDKErrorf(err, "", "day-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1FlowAlert : List of alerts.
type AlertsV1FlowAlert struct {
	// The alert ID.
	ID *string `json:"id,omitempty"`

	// The alert not.
	Not *bool `json:"not,omitempty"`
}

// UnmarshalAlertsV1FlowAlert unmarshals an instance of AlertsV1FlowAlert from the specified map of raw messages.
func UnmarshalAlertsV1FlowAlert(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1FlowAlert)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "not", &obj.Not)
	if err != nil {
		err = core.SDKErrorf(err, "", "not-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1FlowAlerts : List of alerts.
type AlertsV1FlowAlerts struct {
	// Operator for the alerts.
	Op *string `json:"op,omitempty"`

	// List of alerts.
	Values []AlertsV1FlowAlert `json:"values,omitempty"`
}

// Constants associated with the AlertsV1FlowAlerts.Op property.
// Operator for the alerts.
const (
	AlertsV1FlowAlerts_Op_And = "and"
	AlertsV1FlowAlerts_Op_Or = "or"
)

// UnmarshalAlertsV1FlowAlerts unmarshals an instance of AlertsV1FlowAlerts from the specified map of raw messages.
func UnmarshalAlertsV1FlowAlerts(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1FlowAlerts)
	err = core.UnmarshalPrimitive(m, "op", &obj.Op)
	if err != nil {
		err = core.SDKErrorf(err, "", "op-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "values", &obj.Values, UnmarshalAlertsV1FlowAlert)
	if err != nil {
		err = core.SDKErrorf(err, "", "values-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1FlowGroup : List of groups of alerts.
type AlertsV1FlowGroup struct {
	// List of alerts.
	Alerts *AlertsV1FlowAlerts `json:"alerts,omitempty"`

	// Operator for the alerts.
	NextOp *string `json:"next_op,omitempty"`
}

// Constants associated with the AlertsV1FlowGroup.NextOp property.
// Operator for the alerts.
const (
	AlertsV1FlowGroup_NextOp_And = "and"
	AlertsV1FlowGroup_NextOp_Or = "or"
)

// UnmarshalAlertsV1FlowGroup unmarshals an instance of AlertsV1FlowGroup from the specified map of raw messages.
func UnmarshalAlertsV1FlowGroup(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1FlowGroup)
	err = core.UnmarshalModel(m, "alerts", &obj.Alerts, UnmarshalAlertsV1FlowAlerts)
	if err != nil {
		err = core.SDKErrorf(err, "", "alerts-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "next_op", &obj.NextOp)
	if err != nil {
		err = core.SDKErrorf(err, "", "next_op-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1FlowStage : The Flow alert condition parameters.
type AlertsV1FlowStage struct {
	// List of groups of alerts.
	Groups []AlertsV1FlowGroup `json:"groups,omitempty"`

	// Timeframe for the flow.
	Timeframe *AlertsV1FlowTimeframe `json:"timeframe,omitempty"`
}

// UnmarshalAlertsV1FlowStage unmarshals an instance of AlertsV1FlowStage from the specified map of raw messages.
func UnmarshalAlertsV1FlowStage(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1FlowStage)
	err = core.UnmarshalModel(m, "groups", &obj.Groups, UnmarshalAlertsV1FlowGroup)
	if err != nil {
		err = core.SDKErrorf(err, "", "groups-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "timeframe", &obj.Timeframe, UnmarshalAlertsV1FlowTimeframe)
	if err != nil {
		err = core.SDKErrorf(err, "", "timeframe-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1FlowTimeframe : Timeframe for the flow.
type AlertsV1FlowTimeframe struct {
	// Timeframe in milliseconds.
	Ms *int64 `json:"ms,omitempty"`
}

// UnmarshalAlertsV1FlowTimeframe unmarshals an instance of AlertsV1FlowTimeframe from the specified map of raw messages.
func UnmarshalAlertsV1FlowTimeframe(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1FlowTimeframe)
	err = core.UnmarshalPrimitive(m, "ms", &obj.Ms)
	if err != nil {
		err = core.SDKErrorf(err, "", "ms-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1MetaLabel : The Meta labels to add to the alert.
type AlertsV1MetaLabel struct {
	// The key of the label.
	Key *string `json:"key,omitempty"`

	// The value of the label.
	Value *string `json:"value,omitempty"`
}

// UnmarshalAlertsV1MetaLabel unmarshals an instance of AlertsV1MetaLabel from the specified map of raw messages.
func UnmarshalAlertsV1MetaLabel(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1MetaLabel)
	err = core.UnmarshalPrimitive(m, "key", &obj.Key)
	if err != nil {
		err = core.SDKErrorf(err, "", "key-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		err = core.SDKErrorf(err, "", "value-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1MetricAlertConditionParameters : The lucene metric alert parameters if it is a lucene metric alert.
type AlertsV1MetricAlertConditionParameters struct {
	// The metric field of the metric alert.
	MetricField *string `json:"metric_field" validate:"required"`

	// The metric source of the metric alert.
	MetricSource *string `json:"metric_source" validate:"required"`

	// The arithmetic operator of the metric promql alert.
	ArithmeticOperator *string `json:"arithmetic_operator" validate:"required"`

	// The arithmetic operator modifier of the metric promql alert.
	ArithmeticOperatorModifier *int64 `json:"arithmetic_operator_modifier,omitempty"`

	// The threshold percentage.
	SampleThresholdPercentage *int64 `json:"sample_threshold_percentage,omitempty"`

	// Non null percentage of the evaluation.
	NonNullPercentage *int64 `json:"non_null_percentage,omitempty"`

	// Should we swap null values with zero.
	SwapNullValues *bool `json:"swap_null_values,omitempty"`
}

// Constants associated with the AlertsV1MetricAlertConditionParameters.MetricSource property.
// The metric source of the metric alert.
const (
	AlertsV1MetricAlertConditionParameters_MetricSource_Logs2metricsOrUnspecified = "logs2metrics_or_unspecified"
	AlertsV1MetricAlertConditionParameters_MetricSource_Prometheus = "prometheus"
)

// Constants associated with the AlertsV1MetricAlertConditionParameters.ArithmeticOperator property.
// The arithmetic operator of the metric promql alert.
const (
	AlertsV1MetricAlertConditionParameters_ArithmeticOperator_AvgOrUnspecified = "avg_or_unspecified"
	AlertsV1MetricAlertConditionParameters_ArithmeticOperator_Count = "count"
	AlertsV1MetricAlertConditionParameters_ArithmeticOperator_Max = "max"
	AlertsV1MetricAlertConditionParameters_ArithmeticOperator_Min = "min"
	AlertsV1MetricAlertConditionParameters_ArithmeticOperator_Percentile = "percentile"
	AlertsV1MetricAlertConditionParameters_ArithmeticOperator_Sum = "sum"
)

// NewAlertsV1MetricAlertConditionParameters : Instantiate AlertsV1MetricAlertConditionParameters (Generic Model Constructor)
func (*LogsV0) NewAlertsV1MetricAlertConditionParameters(metricField string, metricSource string, arithmeticOperator string) (_model *AlertsV1MetricAlertConditionParameters, err error) {
	_model = &AlertsV1MetricAlertConditionParameters{
		MetricField: core.StringPtr(metricField),
		MetricSource: core.StringPtr(metricSource),
		ArithmeticOperator: core.StringPtr(arithmeticOperator),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV1MetricAlertConditionParameters unmarshals an instance of AlertsV1MetricAlertConditionParameters from the specified map of raw messages.
func UnmarshalAlertsV1MetricAlertConditionParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1MetricAlertConditionParameters)
	err = core.UnmarshalPrimitive(m, "metric_field", &obj.MetricField)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_field-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "metric_source", &obj.MetricSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_source-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "arithmetic_operator", &obj.ArithmeticOperator)
	if err != nil {
		err = core.SDKErrorf(err, "", "arithmetic_operator-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "arithmetic_operator_modifier", &obj.ArithmeticOperatorModifier)
	if err != nil {
		err = core.SDKErrorf(err, "", "arithmetic_operator_modifier-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "sample_threshold_percentage", &obj.SampleThresholdPercentage)
	if err != nil {
		err = core.SDKErrorf(err, "", "sample_threshold_percentage-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "non_null_percentage", &obj.NonNullPercentage)
	if err != nil {
		err = core.SDKErrorf(err, "", "non_null_percentage-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "swap_null_values", &obj.SwapNullValues)
	if err != nil {
		err = core.SDKErrorf(err, "", "swap_null_values-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1MetricAlertPromqlConditionParameters : The promql metric alert parameters if is is a promql metric alert.
type AlertsV1MetricAlertPromqlConditionParameters struct {
	// The promql text of the metric alert by fields for the alert condition.
	PromqlText *string `json:"promql_text" validate:"required"`

	// The arithmetic operator of the metric promql alert.
	ArithmeticOperatorModifier *int64 `json:"arithmetic_operator_modifier,omitempty"`

	// The threshold percentage.
	SampleThresholdPercentage *int64 `json:"sample_threshold_percentage" validate:"required"`

	// Non null percentage of the evaluation.
	NonNullPercentage *int64 `json:"non_null_percentage,omitempty"`

	// Should we swap null values with zero.
	SwapNullValues *bool `json:"swap_null_values,omitempty"`
}

// NewAlertsV1MetricAlertPromqlConditionParameters : Instantiate AlertsV1MetricAlertPromqlConditionParameters (Generic Model Constructor)
func (*LogsV0) NewAlertsV1MetricAlertPromqlConditionParameters(promqlText string, sampleThresholdPercentage int64) (_model *AlertsV1MetricAlertPromqlConditionParameters, err error) {
	_model = &AlertsV1MetricAlertPromqlConditionParameters{
		PromqlText: core.StringPtr(promqlText),
		SampleThresholdPercentage: core.Int64Ptr(sampleThresholdPercentage),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV1MetricAlertPromqlConditionParameters unmarshals an instance of AlertsV1MetricAlertPromqlConditionParameters from the specified map of raw messages.
func UnmarshalAlertsV1MetricAlertPromqlConditionParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1MetricAlertPromqlConditionParameters)
	err = core.UnmarshalPrimitive(m, "promql_text", &obj.PromqlText)
	if err != nil {
		err = core.SDKErrorf(err, "", "promql_text-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "arithmetic_operator_modifier", &obj.ArithmeticOperatorModifier)
	if err != nil {
		err = core.SDKErrorf(err, "", "arithmetic_operator_modifier-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "sample_threshold_percentage", &obj.SampleThresholdPercentage)
	if err != nil {
		err = core.SDKErrorf(err, "", "sample_threshold_percentage-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "non_null_percentage", &obj.NonNullPercentage)
	if err != nil {
		err = core.SDKErrorf(err, "", "non_null_percentage-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "swap_null_values", &obj.SwapNullValues)
	if err != nil {
		err = core.SDKErrorf(err, "", "swap_null_values-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1RelatedExtendedData : Deadman configuration.
type AlertsV1RelatedExtendedData struct {
	// Cleanup deadman duration.
	CleanupDeadmanDuration *string `json:"cleanup_deadman_duration,omitempty"`

	// Should we trigger deadman.
	ShouldTriggerDeadman *bool `json:"should_trigger_deadman,omitempty"`
}

// Constants associated with the AlertsV1RelatedExtendedData.CleanupDeadmanDuration property.
// Cleanup deadman duration.
const (
	AlertsV1RelatedExtendedData_CleanupDeadmanDuration_CleanupDeadmanDuration10min = "cleanup_deadman_duration_10min"
	AlertsV1RelatedExtendedData_CleanupDeadmanDuration_CleanupDeadmanDuration12h = "cleanup_deadman_duration_12h"
	AlertsV1RelatedExtendedData_CleanupDeadmanDuration_CleanupDeadmanDuration1h = "cleanup_deadman_duration_1h"
	AlertsV1RelatedExtendedData_CleanupDeadmanDuration_CleanupDeadmanDuration24h = "cleanup_deadman_duration_24h"
	AlertsV1RelatedExtendedData_CleanupDeadmanDuration_CleanupDeadmanDuration2h = "cleanup_deadman_duration_2h"
	AlertsV1RelatedExtendedData_CleanupDeadmanDuration_CleanupDeadmanDuration5min = "cleanup_deadman_duration_5min"
	AlertsV1RelatedExtendedData_CleanupDeadmanDuration_CleanupDeadmanDuration6h = "cleanup_deadman_duration_6h"
	AlertsV1RelatedExtendedData_CleanupDeadmanDuration_CleanupDeadmanDurationNeverOrUnspecified = "cleanup_deadman_duration_never_or_unspecified"
)

// UnmarshalAlertsV1RelatedExtendedData unmarshals an instance of AlertsV1RelatedExtendedData from the specified map of raw messages.
func UnmarshalAlertsV1RelatedExtendedData(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1RelatedExtendedData)
	err = core.UnmarshalPrimitive(m, "cleanup_deadman_duration", &obj.CleanupDeadmanDuration)
	if err != nil {
		err = core.SDKErrorf(err, "", "cleanup_deadman_duration-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "should_trigger_deadman", &obj.ShouldTriggerDeadman)
	if err != nil {
		err = core.SDKErrorf(err, "", "should_trigger_deadman-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1Time : Start time.
type AlertsV1Time struct {
	// Hours of the day.
	Hours *int64 `json:"hours,omitempty"`

	// Minutes of the hour.
	Minutes *int64 `json:"minutes,omitempty"`

	// Seconds of the minute.
	Seconds *int64 `json:"seconds,omitempty"`
}

// UnmarshalAlertsV1Time unmarshals an instance of AlertsV1Time from the specified map of raw messages.
func UnmarshalAlertsV1Time(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1Time)
	err = core.UnmarshalPrimitive(m, "hours", &obj.Hours)
	if err != nil {
		err = core.SDKErrorf(err, "", "hours-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "minutes", &obj.Minutes)
	if err != nil {
		err = core.SDKErrorf(err, "", "minutes-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "seconds", &obj.Seconds)
	if err != nil {
		err = core.SDKErrorf(err, "", "seconds-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV1TimeRange : Time range in the day of the week.
type AlertsV1TimeRange struct {
	// Start time.
	Start *AlertsV1Time `json:"start" validate:"required"`

	// Start time.
	End *AlertsV1Time `json:"end" validate:"required"`
}

// NewAlertsV1TimeRange : Instantiate AlertsV1TimeRange (Generic Model Constructor)
func (*LogsV0) NewAlertsV1TimeRange(start *AlertsV1Time, end *AlertsV1Time) (_model *AlertsV1TimeRange, err error) {
	_model = &AlertsV1TimeRange{
		Start: start,
		End: end,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV1TimeRange unmarshals an instance of AlertsV1TimeRange from the specified map of raw messages.
func UnmarshalAlertsV1TimeRange(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV1TimeRange)
	err = core.UnmarshalModel(m, "start", &obj.Start, UnmarshalAlertsV1Time)
	if err != nil {
		err = core.SDKErrorf(err, "", "start-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "end", &obj.End, UnmarshalAlertsV1Time)
	if err != nil {
		err = core.SDKErrorf(err, "", "end-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertCondition : Alert condition.
// Models which "extend" this model:
// - AlertsV2AlertConditionConditionImmediate
// - AlertsV2AlertConditionConditionLessThan
// - AlertsV2AlertConditionConditionMoreThan
// - AlertsV2AlertConditionConditionMoreThanUsual
// - AlertsV2AlertConditionConditionNewValue
// - AlertsV2AlertConditionConditionFlow
// - AlertsV2AlertConditionConditionUniqueCount
// - AlertsV2AlertConditionConditionLessThanUsual
type AlertsV2AlertCondition struct {
	// Condition for immediate standard alert.
	Immediate *AlertsV2ImmediateConditionEmpty `json:"immediate,omitempty"`

	// Condition for less than alert.
	LessThan *AlertsV2LessThanCondition `json:"less_than,omitempty"`

	// Condition for more than alert.
	MoreThan *AlertsV2MoreThanCondition `json:"more_than,omitempty"`

	// Condition for more than usual alert.
	MoreThanUsual *AlertsV2MoreThanUsualCondition `json:"more_than_usual,omitempty"`

	// Condition for new value alert.
	NewValue *AlertsV2NewValueCondition `json:"new_value,omitempty"`

	// Condition for flow alert.
	Flow *AlertsV2FlowCondition `json:"flow,omitempty"`

	// Condition for unique count alert.
	UniqueCount *AlertsV2UniqueCountCondition `json:"unique_count,omitempty"`

	// Condition for less than usual alert.
	LessThanUsual *AlertsV2LessThanUsualCondition `json:"less_than_usual,omitempty"`
}
func (*AlertsV2AlertCondition) isaAlertsV2AlertCondition() bool {
	return true
}

type AlertsV2AlertConditionIntf interface {
	isaAlertsV2AlertCondition() bool
}

// UnmarshalAlertsV2AlertCondition unmarshals an instance of AlertsV2AlertCondition from the specified map of raw messages.
func UnmarshalAlertsV2AlertCondition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertCondition)
	err = core.UnmarshalModel(m, "immediate", &obj.Immediate, UnmarshalAlertsV2ImmediateConditionEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "immediate-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "less_than", &obj.LessThan, UnmarshalAlertsV2LessThanCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "less_than-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "more_than", &obj.MoreThan, UnmarshalAlertsV2MoreThanCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "more_than-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "more_than_usual", &obj.MoreThanUsual, UnmarshalAlertsV2MoreThanUsualCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "more_than_usual-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "new_value", &obj.NewValue, UnmarshalAlertsV2NewValueCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "new_value-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "flow", &obj.Flow, UnmarshalAlertsV2FlowCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "flow-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "unique_count", &obj.UniqueCount, UnmarshalAlertsV2UniqueCountCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "unique_count-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "less_than_usual", &obj.LessThanUsual, UnmarshalAlertsV2LessThanUsualCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "less_than_usual-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertIncidentSettings : Incident settings, will create the incident based on this configuration.
type AlertsV2AlertIncidentSettings struct {
	// The retriggering period of the alert in seconds.
	RetriggeringPeriodSeconds *int64 `json:"retriggering_period_seconds,omitempty"`

	// Notify on setting.
	NotifyOn *string `json:"notify_on,omitempty"`

	// Use these settings for all notificaion webhook.
	UseAsNotificationSettings *bool `json:"use_as_notification_settings,omitempty"`
}

// Constants associated with the AlertsV2AlertIncidentSettings.NotifyOn property.
// Notify on setting.
const (
	AlertsV2AlertIncidentSettings_NotifyOn_TriggeredAndResolved = "triggered_and_resolved"
	AlertsV2AlertIncidentSettings_NotifyOn_TriggeredOnly = "triggered_only"
)

// UnmarshalAlertsV2AlertIncidentSettings unmarshals an instance of AlertsV2AlertIncidentSettings from the specified map of raw messages.
func UnmarshalAlertsV2AlertIncidentSettings(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertIncidentSettings)
	err = core.UnmarshalPrimitive(m, "retriggering_period_seconds", &obj.RetriggeringPeriodSeconds)
	if err != nil {
		err = core.SDKErrorf(err, "", "retriggering_period_seconds-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "notify_on", &obj.NotifyOn)
	if err != nil {
		err = core.SDKErrorf(err, "", "notify_on-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "use_as_notification_settings", &obj.UseAsNotificationSettings)
	if err != nil {
		err = core.SDKErrorf(err, "", "use_as_notification_settings-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertNotification : Webhook target settings for the the notification.
// Models which "extend" this model:
// - AlertsV2AlertNotificationIntegrationTypeIntegrationID
// - AlertsV2AlertNotificationIntegrationTypeRecipients
type AlertsV2AlertNotification struct {
	// Retriggering period of the alert in seconds.
	RetriggeringPeriodSeconds *int64 `json:"retriggering_period_seconds,omitempty"`

	// Notify on setting.
	NotifyOn *string `json:"notify_on,omitempty"`

	// Integration ID.
	IntegrationID *int64 `json:"integration_id,omitempty"`

	// Recipients.
	Recipients *AlertsV2Recipients `json:"recipients,omitempty"`
}

// Constants associated with the AlertsV2AlertNotification.NotifyOn property.
// Notify on setting.
const (
	AlertsV2AlertNotification_NotifyOn_TriggeredAndResolved = "triggered_and_resolved"
	AlertsV2AlertNotification_NotifyOn_TriggeredOnly = "triggered_only"
)
func (*AlertsV2AlertNotification) isaAlertsV2AlertNotification() bool {
	return true
}

type AlertsV2AlertNotificationIntf interface {
	isaAlertsV2AlertNotification() bool
}

// UnmarshalAlertsV2AlertNotification unmarshals an instance of AlertsV2AlertNotification from the specified map of raw messages.
func UnmarshalAlertsV2AlertNotification(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertNotification)
	err = core.UnmarshalPrimitive(m, "retriggering_period_seconds", &obj.RetriggeringPeriodSeconds)
	if err != nil {
		err = core.SDKErrorf(err, "", "retriggering_period_seconds-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "notify_on", &obj.NotifyOn)
	if err != nil {
		err = core.SDKErrorf(err, "", "notify_on-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "integration_id", &obj.IntegrationID)
	if err != nil {
		err = core.SDKErrorf(err, "", "integration_id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "recipients", &obj.Recipients, UnmarshalAlertsV2Recipients)
	if err != nil {
		err = core.SDKErrorf(err, "", "recipients-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertNotificationGroups : Alert notification groups.
type AlertsV2AlertNotificationGroups struct {
	// Group by fields to group the values by.
	GroupByFields []string `json:"group_by_fields,omitempty"`

	// Webhook target settings for the the notification.
	Notifications []AlertsV2AlertNotificationIntf `json:"notifications,omitempty"`
}

// UnmarshalAlertsV2AlertNotificationGroups unmarshals an instance of AlertsV2AlertNotificationGroups from the specified map of raw messages.
func UnmarshalAlertsV2AlertNotificationGroups(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertNotificationGroups)
	err = core.UnmarshalPrimitive(m, "group_by_fields", &obj.GroupByFields)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_by_fields-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "notifications", &obj.Notifications, UnmarshalAlertsV2AlertNotification)
	if err != nil {
		err = core.SDKErrorf(err, "", "notifications-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2ConditionParameters : The Less than alert condition parameters.
type AlertsV2ConditionParameters struct {
	// The threshold for the alert condition.
	Threshold *float64 `json:"threshold" validate:"required"`

	// The timeframe for the alert condition.
	Timeframe *string `json:"timeframe" validate:"required"`

	// The group by fields for the alert condition.
	GroupBy []string `json:"group_by,omitempty"`

	// The lucene metric alert parameters if it is a lucene metric alert.
	MetricAlertParameters *AlertsV1MetricAlertConditionParameters `json:"metric_alert_parameters,omitempty"`

	// The promql metric alert parameters if is is a promql metric alert.
	MetricAlertPromqlParameters *AlertsV1MetricAlertPromqlConditionParameters `json:"metric_alert_promql_parameters,omitempty"`

	// Should the evaluation ignore infinity value.
	IgnoreInfinity *bool `json:"ignore_infinity,omitempty"`

	// The relative timeframe for time relative alerts.
	RelativeTimeframe *string `json:"relative_timeframe,omitempty"`

	// Cardinality fields for unique count alert.
	CardinalityFields []string `json:"cardinality_fields,omitempty"`

	// Deadman configuration.
	RelatedExtendedData *AlertsV1RelatedExtendedData `json:"related_extended_data,omitempty"`
}

// Constants associated with the AlertsV2ConditionParameters.Timeframe property.
// The timeframe for the alert condition.
const (
	AlertsV2ConditionParameters_Timeframe_Timeframe10Min = "timeframe_10_min"
	AlertsV2ConditionParameters_Timeframe_Timeframe12H = "timeframe_12_h"
	AlertsV2ConditionParameters_Timeframe_Timeframe15Min = "timeframe_15_min"
	AlertsV2ConditionParameters_Timeframe_Timeframe1H = "timeframe_1_h"
	AlertsV2ConditionParameters_Timeframe_Timeframe1M = "timeframe_1_m"
	AlertsV2ConditionParameters_Timeframe_Timeframe1Min = "timeframe_1_min"
	AlertsV2ConditionParameters_Timeframe_Timeframe1W = "timeframe_1_w"
	AlertsV2ConditionParameters_Timeframe_Timeframe20Min = "timeframe_20_min"
	AlertsV2ConditionParameters_Timeframe_Timeframe24H = "timeframe_24_h"
	AlertsV2ConditionParameters_Timeframe_Timeframe2H = "timeframe_2_h"
	AlertsV2ConditionParameters_Timeframe_Timeframe2M = "timeframe_2_m"
	AlertsV2ConditionParameters_Timeframe_Timeframe2Min = "timeframe_2_min"
	AlertsV2ConditionParameters_Timeframe_Timeframe30Min = "timeframe_30_min"
	AlertsV2ConditionParameters_Timeframe_Timeframe36H = "timeframe_36_h"
	AlertsV2ConditionParameters_Timeframe_Timeframe3H = "timeframe_3_h"
	AlertsV2ConditionParameters_Timeframe_Timeframe3M = "timeframe_3_m"
	AlertsV2ConditionParameters_Timeframe_Timeframe48H = "timeframe_48_h"
	AlertsV2ConditionParameters_Timeframe_Timeframe4H = "timeframe_4_h"
	AlertsV2ConditionParameters_Timeframe_Timeframe5MinOrUnspecified = "timeframe_5_min_or_unspecified"
	AlertsV2ConditionParameters_Timeframe_Timeframe6H = "timeframe_6_h"
	AlertsV2ConditionParameters_Timeframe_Timeframe72H = "timeframe_72_h"
)

// Constants associated with the AlertsV2ConditionParameters.RelativeTimeframe property.
// The relative timeframe for time relative alerts.
const (
	AlertsV2ConditionParameters_RelativeTimeframe_Day = "day"
	AlertsV2ConditionParameters_RelativeTimeframe_HourOrUnspecified = "hour_or_unspecified"
	AlertsV2ConditionParameters_RelativeTimeframe_Month = "month"
	AlertsV2ConditionParameters_RelativeTimeframe_Week = "week"
)

// NewAlertsV2ConditionParameters : Instantiate AlertsV2ConditionParameters (Generic Model Constructor)
func (*LogsV0) NewAlertsV2ConditionParameters(threshold float64, timeframe string) (_model *AlertsV2ConditionParameters, err error) {
	_model = &AlertsV2ConditionParameters{
		Threshold: core.Float64Ptr(threshold),
		Timeframe: core.StringPtr(timeframe),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV2ConditionParameters unmarshals an instance of AlertsV2ConditionParameters from the specified map of raw messages.
func UnmarshalAlertsV2ConditionParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2ConditionParameters)
	err = core.UnmarshalPrimitive(m, "threshold", &obj.Threshold)
	if err != nil {
		err = core.SDKErrorf(err, "", "threshold-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "timeframe", &obj.Timeframe)
	if err != nil {
		err = core.SDKErrorf(err, "", "timeframe-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "group_by", &obj.GroupBy)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_by-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metric_alert_parameters", &obj.MetricAlertParameters, UnmarshalAlertsV1MetricAlertConditionParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_alert_parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metric_alert_promql_parameters", &obj.MetricAlertPromqlParameters, UnmarshalAlertsV1MetricAlertPromqlConditionParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_alert_promql_parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "ignore_infinity", &obj.IgnoreInfinity)
	if err != nil {
		err = core.SDKErrorf(err, "", "ignore_infinity-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "relative_timeframe", &obj.RelativeTimeframe)
	if err != nil {
		err = core.SDKErrorf(err, "", "relative_timeframe-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "cardinality_fields", &obj.CardinalityFields)
	if err != nil {
		err = core.SDKErrorf(err, "", "cardinality_fields-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "related_extended_data", &obj.RelatedExtendedData, UnmarshalAlertsV1RelatedExtendedData)
	if err != nil {
		err = core.SDKErrorf(err, "", "related_extended_data-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2FlowCondition : Condition for flow alert.
type AlertsV2FlowCondition struct {
	// The Flow alert condition parameters.
	Stages []AlertsV1FlowStage `json:"stages,omitempty"`

	// The Less than alert condition parameters.
	Parameters *AlertsV2ConditionParameters `json:"parameters,omitempty"`

	// Should suppression be enforced on the flow alert.
	EnforceSuppression *bool `json:"enforce_suppression,omitempty"`
}

// UnmarshalAlertsV2FlowCondition unmarshals an instance of AlertsV2FlowCondition from the specified map of raw messages.
func UnmarshalAlertsV2FlowCondition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2FlowCondition)
	err = core.UnmarshalModel(m, "stages", &obj.Stages, UnmarshalAlertsV1FlowStage)
	if err != nil {
		err = core.SDKErrorf(err, "", "stages-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "parameters", &obj.Parameters, UnmarshalAlertsV2ConditionParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "enforce_suppression", &obj.EnforceSuppression)
	if err != nil {
		err = core.SDKErrorf(err, "", "enforce_suppression-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2ImmediateConditionEmpty : Condition for immediate standard alert.
type AlertsV2ImmediateConditionEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of AlertsV2ImmediateConditionEmpty
func (o *AlertsV2ImmediateConditionEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of AlertsV2ImmediateConditionEmpty
func (o *AlertsV2ImmediateConditionEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of AlertsV2ImmediateConditionEmpty
func (o *AlertsV2ImmediateConditionEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of AlertsV2ImmediateConditionEmpty
func (o *AlertsV2ImmediateConditionEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of AlertsV2ImmediateConditionEmpty
func (o *AlertsV2ImmediateConditionEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV2ImmediateConditionEmpty unmarshals an instance of AlertsV2ImmediateConditionEmpty from the specified map of raw messages.
func UnmarshalAlertsV2ImmediateConditionEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2ImmediateConditionEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2LessThanCondition : Condition for less than alert.
type AlertsV2LessThanCondition struct {
	// The Less than alert condition parameters.
	Parameters *AlertsV2ConditionParameters `json:"parameters" validate:"required"`
}

// NewAlertsV2LessThanCondition : Instantiate AlertsV2LessThanCondition (Generic Model Constructor)
func (*LogsV0) NewAlertsV2LessThanCondition(parameters *AlertsV2ConditionParameters) (_model *AlertsV2LessThanCondition, err error) {
	_model = &AlertsV2LessThanCondition{
		Parameters: parameters,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV2LessThanCondition unmarshals an instance of AlertsV2LessThanCondition from the specified map of raw messages.
func UnmarshalAlertsV2LessThanCondition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2LessThanCondition)
	err = core.UnmarshalModel(m, "parameters", &obj.Parameters, UnmarshalAlertsV2ConditionParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2LessThanUsualCondition : Condition for less than usual alert.
type AlertsV2LessThanUsualCondition struct {
	// The Less than alert condition parameters.
	Parameters *AlertsV2ConditionParameters `json:"parameters" validate:"required"`
}

// NewAlertsV2LessThanUsualCondition : Instantiate AlertsV2LessThanUsualCondition (Generic Model Constructor)
func (*LogsV0) NewAlertsV2LessThanUsualCondition(parameters *AlertsV2ConditionParameters) (_model *AlertsV2LessThanUsualCondition, err error) {
	_model = &AlertsV2LessThanUsualCondition{
		Parameters: parameters,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV2LessThanUsualCondition unmarshals an instance of AlertsV2LessThanUsualCondition from the specified map of raw messages.
func UnmarshalAlertsV2LessThanUsualCondition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2LessThanUsualCondition)
	err = core.UnmarshalModel(m, "parameters", &obj.Parameters, UnmarshalAlertsV2ConditionParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2MoreThanCondition : Condition for more than alert.
type AlertsV2MoreThanCondition struct {
	// The Less than alert condition parameters.
	Parameters *AlertsV2ConditionParameters `json:"parameters" validate:"required"`

	// The evaluation window for the alert condition.
	EvaluationWindow *string `json:"evaluation_window,omitempty"`
}

// Constants associated with the AlertsV2MoreThanCondition.EvaluationWindow property.
// The evaluation window for the alert condition.
const (
	AlertsV2MoreThanCondition_EvaluationWindow_Dynamic = "dynamic"
	AlertsV2MoreThanCondition_EvaluationWindow_RollingOrUnspecified = "rolling_or_unspecified"
)

// NewAlertsV2MoreThanCondition : Instantiate AlertsV2MoreThanCondition (Generic Model Constructor)
func (*LogsV0) NewAlertsV2MoreThanCondition(parameters *AlertsV2ConditionParameters) (_model *AlertsV2MoreThanCondition, err error) {
	_model = &AlertsV2MoreThanCondition{
		Parameters: parameters,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV2MoreThanCondition unmarshals an instance of AlertsV2MoreThanCondition from the specified map of raw messages.
func UnmarshalAlertsV2MoreThanCondition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2MoreThanCondition)
	err = core.UnmarshalModel(m, "parameters", &obj.Parameters, UnmarshalAlertsV2ConditionParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "evaluation_window", &obj.EvaluationWindow)
	if err != nil {
		err = core.SDKErrorf(err, "", "evaluation_window-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2MoreThanUsualCondition : Condition for more than usual alert.
type AlertsV2MoreThanUsualCondition struct {
	// The Less than alert condition parameters.
	Parameters *AlertsV2ConditionParameters `json:"parameters" validate:"required"`
}

// NewAlertsV2MoreThanUsualCondition : Instantiate AlertsV2MoreThanUsualCondition (Generic Model Constructor)
func (*LogsV0) NewAlertsV2MoreThanUsualCondition(parameters *AlertsV2ConditionParameters) (_model *AlertsV2MoreThanUsualCondition, err error) {
	_model = &AlertsV2MoreThanUsualCondition{
		Parameters: parameters,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV2MoreThanUsualCondition unmarshals an instance of AlertsV2MoreThanUsualCondition from the specified map of raw messages.
func UnmarshalAlertsV2MoreThanUsualCondition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2MoreThanUsualCondition)
	err = core.UnmarshalModel(m, "parameters", &obj.Parameters, UnmarshalAlertsV2ConditionParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2NewValueCondition : Condition for new value alert.
type AlertsV2NewValueCondition struct {
	// The Less than alert condition parameters.
	Parameters *AlertsV2ConditionParameters `json:"parameters" validate:"required"`
}

// NewAlertsV2NewValueCondition : Instantiate AlertsV2NewValueCondition (Generic Model Constructor)
func (*LogsV0) NewAlertsV2NewValueCondition(parameters *AlertsV2ConditionParameters) (_model *AlertsV2NewValueCondition, err error) {
	_model = &AlertsV2NewValueCondition{
		Parameters: parameters,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV2NewValueCondition unmarshals an instance of AlertsV2NewValueCondition from the specified map of raw messages.
func UnmarshalAlertsV2NewValueCondition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2NewValueCondition)
	err = core.UnmarshalModel(m, "parameters", &obj.Parameters, UnmarshalAlertsV2ConditionParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2Recipients : Recipients.
type AlertsV2Recipients struct {
	// Email addresses.
	Emails []string `json:"emails,omitempty"`
}

// UnmarshalAlertsV2Recipients unmarshals an instance of AlertsV2Recipients from the specified map of raw messages.
func UnmarshalAlertsV2Recipients(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2Recipients)
	err = core.UnmarshalPrimitive(m, "emails", &obj.Emails)
	if err != nil {
		err = core.SDKErrorf(err, "", "emails-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2UniqueCountCondition : Condition for unique count alert.
type AlertsV2UniqueCountCondition struct {
	// The Less than alert condition parameters.
	Parameters *AlertsV2ConditionParameters `json:"parameters" validate:"required"`
}

// NewAlertsV2UniqueCountCondition : Instantiate AlertsV2UniqueCountCondition (Generic Model Constructor)
func (*LogsV0) NewAlertsV2UniqueCountCondition(parameters *AlertsV2ConditionParameters) (_model *AlertsV2UniqueCountCondition, err error) {
	_model = &AlertsV2UniqueCountCondition{
		Parameters: parameters,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalAlertsV2UniqueCountCondition unmarshals an instance of AlertsV2UniqueCountCondition from the specified map of raw messages.
func UnmarshalAlertsV2UniqueCountCondition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2UniqueCountCondition)
	err = core.UnmarshalModel(m, "parameters", &obj.Parameters, UnmarshalAlertsV2ConditionParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotation : List of annotations that can be applied to the dashboard's visual elements.
type ApisDashboardsV1AstAnnotation struct {
	// Unique identifier within the dashboard.
	Href *strfmt.UUID `json:"href,omitempty"`

	// Unique identifier within the dashboard.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Name of the annotation.
	Name *string `json:"name" validate:"required"`

	// Whether the annotation is enabled.
	Enabled *bool `json:"enabled" validate:"required"`

	// Source of the annotation events.
	Source ApisDashboardsV1AstAnnotationSourceIntf `json:"source" validate:"required"`
}

// NewApisDashboardsV1AstAnnotation : Instantiate ApisDashboardsV1AstAnnotation (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstAnnotation(id *strfmt.UUID, name string, enabled bool, source ApisDashboardsV1AstAnnotationSourceIntf) (_model *ApisDashboardsV1AstAnnotation, err error) {
	_model = &ApisDashboardsV1AstAnnotation{
		ID: id,
		Name: core.StringPtr(name),
		Enabled: core.BoolPtr(enabled),
		Source: source,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstAnnotation unmarshals an instance of ApisDashboardsV1AstAnnotation from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotation(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotation)
	err = core.UnmarshalPrimitive(m, "href", &obj.Href)
	if err != nil {
		err = core.SDKErrorf(err, "", "href-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "enabled", &obj.Enabled)
	if err != nil {
		err = core.SDKErrorf(err, "", "enabled-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "source", &obj.Source, UnmarshalApisDashboardsV1AstAnnotationSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "source-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationLogsSource : Logs source.
type ApisDashboardsV1AstAnnotationLogsSource struct {
	// Lucene query.
	LuceneQuery *ApisDashboardsV1CommonLuceneQuery `json:"lucene_query" validate:"required"`

	// Strategy for turning logs data into annotations.
	Strategy ApisDashboardsV1AstAnnotationLogsSourceStrategyIntf `json:"strategy" validate:"required"`

	// Template for the annotation message.
	MessageTemplate *string `json:"message_template,omitempty"`

	// Labels to display in the annotation.
	LabelFields []ApisDashboardsV1CommonObservationField `json:"label_fields,omitempty"`
}

// NewApisDashboardsV1AstAnnotationLogsSource : Instantiate ApisDashboardsV1AstAnnotationLogsSource (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstAnnotationLogsSource(luceneQuery *ApisDashboardsV1CommonLuceneQuery, strategy ApisDashboardsV1AstAnnotationLogsSourceStrategyIntf) (_model *ApisDashboardsV1AstAnnotationLogsSource, err error) {
	_model = &ApisDashboardsV1AstAnnotationLogsSource{
		LuceneQuery: luceneQuery,
		Strategy: strategy,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstAnnotationLogsSource unmarshals an instance of ApisDashboardsV1AstAnnotationLogsSource from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationLogsSource(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationLogsSource)
	err = core.UnmarshalModel(m, "lucene_query", &obj.LuceneQuery, UnmarshalApisDashboardsV1CommonLuceneQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "lucene_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "strategy", &obj.Strategy, UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategy)
	if err != nil {
		err = core.SDKErrorf(err, "", "strategy-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "message_template", &obj.MessageTemplate)
	if err != nil {
		err = core.SDKErrorf(err, "", "message_template-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "label_fields", &obj.LabelFields, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "label_fields-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationLogsSourceStrategy : Strategy for turning logs data into annotations.
// Models which "extend" this model:
// - ApisDashboardsV1AstAnnotationLogsSourceStrategyValueInstant
// - ApisDashboardsV1AstAnnotationLogsSourceStrategyValueRange
// - ApisDashboardsV1AstAnnotationLogsSourceStrategyValueDuration
type ApisDashboardsV1AstAnnotationLogsSourceStrategy struct {
	// Event timestamp is extracted from the log entry.
	Instant *ApisDashboardsV1AstAnnotationLogsSourceStrategyInstant `json:"instant,omitempty"`

	// Event start and end timestamps are extracted from the log entry.
	Range *ApisDashboardsV1AstAnnotationLogsSourceStrategyRange `json:"range,omitempty"`

	// Event start timestamp and duration are extracted from the log entry.
	Duration *ApisDashboardsV1AstAnnotationLogsSourceStrategyDuration `json:"duration,omitempty"`
}
func (*ApisDashboardsV1AstAnnotationLogsSourceStrategy) isaApisDashboardsV1AstAnnotationLogsSourceStrategy() bool {
	return true
}

type ApisDashboardsV1AstAnnotationLogsSourceStrategyIntf interface {
	isaApisDashboardsV1AstAnnotationLogsSourceStrategy() bool
}

// UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategy unmarshals an instance of ApisDashboardsV1AstAnnotationLogsSourceStrategy from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategy(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationLogsSourceStrategy)
	err = core.UnmarshalModel(m, "instant", &obj.Instant, UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyInstant)
	if err != nil {
		err = core.SDKErrorf(err, "", "instant-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "range", &obj.Range, UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyRange)
	if err != nil {
		err = core.SDKErrorf(err, "", "range-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "duration", &obj.Duration, UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyDuration)
	if err != nil {
		err = core.SDKErrorf(err, "", "duration-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationLogsSourceStrategyDuration : Event start timestamp and duration are extracted from the log entry.
type ApisDashboardsV1AstAnnotationLogsSourceStrategyDuration struct {
	// Field to count distinct values of.
	StartTimestampField *ApisDashboardsV1CommonObservationField `json:"start_timestamp_field" validate:"required"`

	// Field to count distinct values of.
	DurationField *ApisDashboardsV1CommonObservationField `json:"duration_field" validate:"required"`
}

// NewApisDashboardsV1AstAnnotationLogsSourceStrategyDuration : Instantiate ApisDashboardsV1AstAnnotationLogsSourceStrategyDuration (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstAnnotationLogsSourceStrategyDuration(startTimestampField *ApisDashboardsV1CommonObservationField, durationField *ApisDashboardsV1CommonObservationField) (_model *ApisDashboardsV1AstAnnotationLogsSourceStrategyDuration, err error) {
	_model = &ApisDashboardsV1AstAnnotationLogsSourceStrategyDuration{
		StartTimestampField: startTimestampField,
		DurationField: durationField,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyDuration unmarshals an instance of ApisDashboardsV1AstAnnotationLogsSourceStrategyDuration from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyDuration(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationLogsSourceStrategyDuration)
	err = core.UnmarshalModel(m, "start_timestamp_field", &obj.StartTimestampField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "start_timestamp_field-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "duration_field", &obj.DurationField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "duration_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationLogsSourceStrategyInstant : Event timestamp is extracted from the log entry.
type ApisDashboardsV1AstAnnotationLogsSourceStrategyInstant struct {
	// Field to count distinct values of.
	TimestampField *ApisDashboardsV1CommonObservationField `json:"timestamp_field" validate:"required"`
}

// NewApisDashboardsV1AstAnnotationLogsSourceStrategyInstant : Instantiate ApisDashboardsV1AstAnnotationLogsSourceStrategyInstant (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstAnnotationLogsSourceStrategyInstant(timestampField *ApisDashboardsV1CommonObservationField) (_model *ApisDashboardsV1AstAnnotationLogsSourceStrategyInstant, err error) {
	_model = &ApisDashboardsV1AstAnnotationLogsSourceStrategyInstant{
		TimestampField: timestampField,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyInstant unmarshals an instance of ApisDashboardsV1AstAnnotationLogsSourceStrategyInstant from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyInstant(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationLogsSourceStrategyInstant)
	err = core.UnmarshalModel(m, "timestamp_field", &obj.TimestampField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "timestamp_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationLogsSourceStrategyRange : Event start and end timestamps are extracted from the log entry.
type ApisDashboardsV1AstAnnotationLogsSourceStrategyRange struct {
	// Field to count distinct values of.
	StartTimestampField *ApisDashboardsV1CommonObservationField `json:"start_timestamp_field" validate:"required"`

	// Field to count distinct values of.
	EndTimestampField *ApisDashboardsV1CommonObservationField `json:"end_timestamp_field" validate:"required"`
}

// NewApisDashboardsV1AstAnnotationLogsSourceStrategyRange : Instantiate ApisDashboardsV1AstAnnotationLogsSourceStrategyRange (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstAnnotationLogsSourceStrategyRange(startTimestampField *ApisDashboardsV1CommonObservationField, endTimestampField *ApisDashboardsV1CommonObservationField) (_model *ApisDashboardsV1AstAnnotationLogsSourceStrategyRange, err error) {
	_model = &ApisDashboardsV1AstAnnotationLogsSourceStrategyRange{
		StartTimestampField: startTimestampField,
		EndTimestampField: endTimestampField,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyRange unmarshals an instance of ApisDashboardsV1AstAnnotationLogsSourceStrategyRange from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyRange(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationLogsSourceStrategyRange)
	err = core.UnmarshalModel(m, "start_timestamp_field", &obj.StartTimestampField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "start_timestamp_field-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "end_timestamp_field", &obj.EndTimestampField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "end_timestamp_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationMetricsSource : Metrics source.
type ApisDashboardsV1AstAnnotationMetricsSource struct {
	// PromQL query.
	PromqlQuery *ApisDashboardsV1CommonPromQlQuery `json:"promql_query,omitempty"`

	// Strategy for turning metrics data into annotations.
	Strategy *ApisDashboardsV1AstAnnotationMetricsSourceStrategy `json:"strategy,omitempty"`

	// Template for the annotation message.
	MessageTemplate *string `json:"message_template,omitempty"`

	// Labels to display in the annotation.
	Labels []string `json:"labels,omitempty"`
}

// UnmarshalApisDashboardsV1AstAnnotationMetricsSource unmarshals an instance of ApisDashboardsV1AstAnnotationMetricsSource from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationMetricsSource(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationMetricsSource)
	err = core.UnmarshalModel(m, "promql_query", &obj.PromqlQuery, UnmarshalApisDashboardsV1CommonPromQlQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "promql_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "strategy", &obj.Strategy, UnmarshalApisDashboardsV1AstAnnotationMetricsSourceStrategy)
	if err != nil {
		err = core.SDKErrorf(err, "", "strategy-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "message_template", &obj.MessageTemplate)
	if err != nil {
		err = core.SDKErrorf(err, "", "message_template-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "labels", &obj.Labels)
	if err != nil {
		err = core.SDKErrorf(err, "", "labels-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty : Take first data point and use its value as annotation timestamp (instead of point own timestamp).
type ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty
func (o *ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty
func (o *ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty
func (o *ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty
func (o *ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty
func (o *ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty unmarshals an instance of ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationMetricsSourceStrategy : Strategy for turning metrics data into annotations.
type ApisDashboardsV1AstAnnotationMetricsSourceStrategy struct {
	// Take first data point and use its value as annotation timestamp (instead of point own timestamp).
	StartTimeMetric *ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty `json:"start_time_metric,omitempty"`
}

// UnmarshalApisDashboardsV1AstAnnotationMetricsSourceStrategy unmarshals an instance of ApisDashboardsV1AstAnnotationMetricsSourceStrategy from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationMetricsSourceStrategy(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
	err = core.UnmarshalModel(m, "start_time_metric", &obj.StartTimeMetric, UnmarshalApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "start_time_metric-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationSource : Source of the annotation events.
// Models which "extend" this model:
// - ApisDashboardsV1AstAnnotationSourceValueMetrics
// - ApisDashboardsV1AstAnnotationSourceValueLogs
type ApisDashboardsV1AstAnnotationSource struct {
	// Metrics source.
	Metrics *ApisDashboardsV1AstAnnotationMetricsSource `json:"metrics,omitempty"`

	// Logs source.
	Logs *ApisDashboardsV1AstAnnotationLogsSource `json:"logs,omitempty"`
}
func (*ApisDashboardsV1AstAnnotationSource) isaApisDashboardsV1AstAnnotationSource() bool {
	return true
}

type ApisDashboardsV1AstAnnotationSourceIntf interface {
	isaApisDashboardsV1AstAnnotationSource() bool
}

// UnmarshalApisDashboardsV1AstAnnotationSource unmarshals an instance of ApisDashboardsV1AstAnnotationSource from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationSource(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationSource)
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstAnnotationMetricsSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstAnnotationLogsSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty : Auto refresh interval is set to five minutes.
type ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty unmarshals an instance of ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstDashboardAutoRefreshOffEmpty : Auto refresh interval is set to off.
type ApisDashboardsV1AstDashboardAutoRefreshOffEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ApisDashboardsV1AstDashboardAutoRefreshOffEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshOffEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ApisDashboardsV1AstDashboardAutoRefreshOffEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshOffEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ApisDashboardsV1AstDashboardAutoRefreshOffEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshOffEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ApisDashboardsV1AstDashboardAutoRefreshOffEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshOffEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ApisDashboardsV1AstDashboardAutoRefreshOffEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshOffEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstDashboardAutoRefreshOffEmpty unmarshals an instance of ApisDashboardsV1AstDashboardAutoRefreshOffEmpty from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstDashboardAutoRefreshOffEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstDashboardAutoRefreshOffEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty : Auto refresh interval is set to two minutes.
type ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty
func (o *ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty unmarshals an instance of ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilter : List of filters that can be applied to the dashboard's data.
type ApisDashboardsV1AstFilter struct {
	// Filters to be applied to query results.
	Source ApisDashboardsV1AstFilterSourceIntf `json:"source,omitempty"`

	// Indicates if the filter is currently enabled or not.
	Enabled *bool `json:"enabled,omitempty"`

	// Indicates if the filter's UI representation should be collapsed or expanded.
	Collapsed *bool `json:"collapsed,omitempty"`
}

// UnmarshalApisDashboardsV1AstFilter unmarshals an instance of ApisDashboardsV1AstFilter from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilter(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilter)
	err = core.UnmarshalModel(m, "source", &obj.Source, UnmarshalApisDashboardsV1AstFilterSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "source-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "enabled", &obj.Enabled)
	if err != nil {
		err = core.SDKErrorf(err, "", "enabled-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "collapsed", &obj.Collapsed)
	if err != nil {
		err = core.SDKErrorf(err, "", "collapsed-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterEquals : Equality comparison.
type ApisDashboardsV1AstFilterEquals struct {
	// Selection criteria for the equality comparison.
	Selection ApisDashboardsV1AstFilterEqualsSelectionIntf `json:"selection,omitempty"`
}

// UnmarshalApisDashboardsV1AstFilterEquals unmarshals an instance of ApisDashboardsV1AstFilterEquals from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterEquals(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterEquals)
	err = core.UnmarshalModel(m, "selection", &obj.Selection, UnmarshalApisDashboardsV1AstFilterEqualsSelection)
	if err != nil {
		err = core.SDKErrorf(err, "", "selection-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterEqualsSelection : Selection criteria for the equality comparison.
// Models which "extend" this model:
// - ApisDashboardsV1AstFilterEqualsSelectionValueAll
// - ApisDashboardsV1AstFilterEqualsSelectionValueList
type ApisDashboardsV1AstFilterEqualsSelection struct {
	// Represents a selection of all values.
	All *ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty `json:"all,omitempty"`

	// Represents a selection from a list of values.
	List *ApisDashboardsV1AstFilterEqualsSelectionListSelection `json:"list,omitempty"`
}
func (*ApisDashboardsV1AstFilterEqualsSelection) isaApisDashboardsV1AstFilterEqualsSelection() bool {
	return true
}

type ApisDashboardsV1AstFilterEqualsSelectionIntf interface {
	isaApisDashboardsV1AstFilterEqualsSelection() bool
}

// UnmarshalApisDashboardsV1AstFilterEqualsSelection unmarshals an instance of ApisDashboardsV1AstFilterEqualsSelection from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterEqualsSelection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterEqualsSelection)
	err = core.UnmarshalModel(m, "all", &obj.All, UnmarshalApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "all-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "list", &obj.List, UnmarshalApisDashboardsV1AstFilterEqualsSelectionListSelection)
	if err != nil {
		err = core.SDKErrorf(err, "", "list-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty : Represents a selection of all values.
type ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty
func (o *ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty
func (o *ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty
func (o *ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty
func (o *ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty
func (o *ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty unmarshals an instance of ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterEqualsSelectionListSelection : Represents a selection from a list of values.
type ApisDashboardsV1AstFilterEqualsSelectionListSelection struct {
	// List of values for the selection.
	Values []string `json:"values,omitempty"`
}

// UnmarshalApisDashboardsV1AstFilterEqualsSelectionListSelection unmarshals an instance of ApisDashboardsV1AstFilterEqualsSelectionListSelection from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterEqualsSelectionListSelection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterEqualsSelectionListSelection)
	err = core.UnmarshalPrimitive(m, "values", &obj.Values)
	if err != nil {
		err = core.SDKErrorf(err, "", "values-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterLogsFilter : Extra filtering on top of the Lucene query.
type ApisDashboardsV1AstFilterLogsFilter struct {
	// Operator to use for filtering the logs.
	Operator ApisDashboardsV1AstFilterOperatorIntf `json:"operator,omitempty"`

	// Field to count distinct values of.
	ObservationField *ApisDashboardsV1CommonObservationField `json:"observation_field,omitempty"`
}

// UnmarshalApisDashboardsV1AstFilterLogsFilter unmarshals an instance of ApisDashboardsV1AstFilterLogsFilter from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterLogsFilter(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterLogsFilter)
	err = core.UnmarshalModel(m, "operator", &obj.Operator, UnmarshalApisDashboardsV1AstFilterOperator)
	if err != nil {
		err = core.SDKErrorf(err, "", "operator-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "observation_field", &obj.ObservationField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "observation_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterMetricsFilter : Filtering to be applied to query results.
type ApisDashboardsV1AstFilterMetricsFilter struct {
	// Label associated with the metric.
	Label *string `json:"label,omitempty"`

	// Operator to use for filtering the logs.
	Operator ApisDashboardsV1AstFilterOperatorIntf `json:"operator,omitempty"`
}

// UnmarshalApisDashboardsV1AstFilterMetricsFilter unmarshals an instance of ApisDashboardsV1AstFilterMetricsFilter from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterMetricsFilter(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterMetricsFilter)
	err = core.UnmarshalPrimitive(m, "label", &obj.Label)
	if err != nil {
		err = core.SDKErrorf(err, "", "label-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "operator", &obj.Operator, UnmarshalApisDashboardsV1AstFilterOperator)
	if err != nil {
		err = core.SDKErrorf(err, "", "operator-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterNotEquals : Non-equality comparison.
type ApisDashboardsV1AstFilterNotEquals struct {
	// Selection criteria for the non-equality comparison.
	Selection *ApisDashboardsV1AstFilterNotEqualsSelection `json:"selection,omitempty"`
}

// UnmarshalApisDashboardsV1AstFilterNotEquals unmarshals an instance of ApisDashboardsV1AstFilterNotEquals from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterNotEquals(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterNotEquals)
	err = core.UnmarshalModel(m, "selection", &obj.Selection, UnmarshalApisDashboardsV1AstFilterNotEqualsSelection)
	if err != nil {
		err = core.SDKErrorf(err, "", "selection-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterNotEqualsSelection : Selection criteria for the non-equality comparison.
type ApisDashboardsV1AstFilterNotEqualsSelection struct {
	// Represents a selection from a list of values.
	List *ApisDashboardsV1AstFilterNotEqualsSelectionListSelection `json:"list,omitempty"`
}

// UnmarshalApisDashboardsV1AstFilterNotEqualsSelection unmarshals an instance of ApisDashboardsV1AstFilterNotEqualsSelection from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterNotEqualsSelection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterNotEqualsSelection)
	err = core.UnmarshalModel(m, "list", &obj.List, UnmarshalApisDashboardsV1AstFilterNotEqualsSelectionListSelection)
	if err != nil {
		err = core.SDKErrorf(err, "", "list-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterNotEqualsSelectionListSelection : Represents a selection from a list of values.
type ApisDashboardsV1AstFilterNotEqualsSelectionListSelection struct {
	// List of values for the selection.
	Values []string `json:"values,omitempty"`
}

// UnmarshalApisDashboardsV1AstFilterNotEqualsSelectionListSelection unmarshals an instance of ApisDashboardsV1AstFilterNotEqualsSelectionListSelection from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterNotEqualsSelectionListSelection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterNotEqualsSelectionListSelection)
	err = core.UnmarshalPrimitive(m, "values", &obj.Values)
	if err != nil {
		err = core.SDKErrorf(err, "", "values-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterOperator : Operator to use for filtering the logs.
// Models which "extend" this model:
// - ApisDashboardsV1AstFilterOperatorValueEquals
// - ApisDashboardsV1AstFilterOperatorValueNotEquals
type ApisDashboardsV1AstFilterOperator struct {
	// Equality comparison.
	Equals *ApisDashboardsV1AstFilterEquals `json:"equals,omitempty"`

	// Non-equality comparison.
	NotEquals *ApisDashboardsV1AstFilterNotEquals `json:"not_equals,omitempty"`
}
func (*ApisDashboardsV1AstFilterOperator) isaApisDashboardsV1AstFilterOperator() bool {
	return true
}

type ApisDashboardsV1AstFilterOperatorIntf interface {
	isaApisDashboardsV1AstFilterOperator() bool
}

// UnmarshalApisDashboardsV1AstFilterOperator unmarshals an instance of ApisDashboardsV1AstFilterOperator from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterOperator(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterOperator)
	err = core.UnmarshalModel(m, "equals", &obj.Equals, UnmarshalApisDashboardsV1AstFilterEquals)
	if err != nil {
		err = core.SDKErrorf(err, "", "equals-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "not_equals", &obj.NotEquals, UnmarshalApisDashboardsV1AstFilterNotEquals)
	if err != nil {
		err = core.SDKErrorf(err, "", "not_equals-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterSource : Filters to be applied to query results.
// Models which "extend" this model:
// - ApisDashboardsV1AstFilterSourceValueLogs
// - ApisDashboardsV1AstFilterSourceValueMetrics
type ApisDashboardsV1AstFilterSource struct {
	// Extra filtering on top of the Lucene query.
	Logs *ApisDashboardsV1AstFilterLogsFilter `json:"logs,omitempty"`

	// Filtering to be applied to query results.
	Metrics *ApisDashboardsV1AstFilterMetricsFilter `json:"metrics,omitempty"`
}
func (*ApisDashboardsV1AstFilterSource) isaApisDashboardsV1AstFilterSource() bool {
	return true
}

type ApisDashboardsV1AstFilterSourceIntf interface {
	isaApisDashboardsV1AstFilterSource() bool
}

// UnmarshalApisDashboardsV1AstFilterSource unmarshals an instance of ApisDashboardsV1AstFilterSource from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterSource(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterSource)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstFilterLogsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstFilterMetricsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFolderPath : Path of the folder containing the dashboard.
type ApisDashboardsV1AstFolderPath struct {
	// The segments of the folder path.
	Segments []string `json:"segments,omitempty"`
}

// UnmarshalApisDashboardsV1AstFolderPath unmarshals an instance of ApisDashboardsV1AstFolderPath from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFolderPath(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFolderPath)
	err = core.UnmarshalPrimitive(m, "segments", &obj.Segments)
	if err != nil {
		err = core.SDKErrorf(err, "", "segments-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstLayout : Layout configuration for the dashboard's visual elements.
type ApisDashboardsV1AstLayout struct {
	// The sections of the layout.
	Sections []ApisDashboardsV1AstSection `json:"sections,omitempty"`
}

// UnmarshalApisDashboardsV1AstLayout unmarshals an instance of ApisDashboardsV1AstLayout from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstLayout(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstLayout)
	err = core.UnmarshalModel(m, "sections", &obj.Sections, UnmarshalApisDashboardsV1AstSection)
	if err != nil {
		err = core.SDKErrorf(err, "", "sections-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstMultiSelect : Multi-select value.
type ApisDashboardsV1AstMultiSelect struct {
	// Variable value source.
	Source ApisDashboardsV1AstMultiSelectSourceIntf `json:"source" validate:"required"`

	// State of what is currently selected.
	Selection ApisDashboardsV1AstMultiSelectSelectionIntf `json:"selection" validate:"required"`

	// The direction of the order: ascending or descending.
	ValuesOrderDirection *string `json:"values_order_direction" validate:"required"`
}

// Constants associated with the ApisDashboardsV1AstMultiSelect.ValuesOrderDirection property.
// The direction of the order: ascending or descending.
const (
	ApisDashboardsV1AstMultiSelect_ValuesOrderDirection_Asc = "asc"
	ApisDashboardsV1AstMultiSelect_ValuesOrderDirection_Desc = "desc"
	ApisDashboardsV1AstMultiSelect_ValuesOrderDirection_Unspecified = "unspecified"
)

// NewApisDashboardsV1AstMultiSelect : Instantiate ApisDashboardsV1AstMultiSelect (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstMultiSelect(source ApisDashboardsV1AstMultiSelectSourceIntf, selection ApisDashboardsV1AstMultiSelectSelectionIntf, valuesOrderDirection string) (_model *ApisDashboardsV1AstMultiSelect, err error) {
	_model = &ApisDashboardsV1AstMultiSelect{
		Source: source,
		Selection: selection,
		ValuesOrderDirection: core.StringPtr(valuesOrderDirection),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstMultiSelect unmarshals an instance of ApisDashboardsV1AstMultiSelect from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstMultiSelect(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstMultiSelect)
	err = core.UnmarshalModel(m, "source", &obj.Source, UnmarshalApisDashboardsV1AstMultiSelectSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "source-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "selection", &obj.Selection, UnmarshalApisDashboardsV1AstMultiSelectSelection)
	if err != nil {
		err = core.SDKErrorf(err, "", "selection-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "values_order_direction", &obj.ValuesOrderDirection)
	if err != nil {
		err = core.SDKErrorf(err, "", "values_order_direction-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstMultiSelectConstantListSource : List of constant values.
type ApisDashboardsV1AstMultiSelectConstantListSource struct {
	// List of constant values.
	Values []string `json:"values" validate:"required"`
}

// NewApisDashboardsV1AstMultiSelectConstantListSource : Instantiate ApisDashboardsV1AstMultiSelectConstantListSource (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstMultiSelectConstantListSource(values []string) (_model *ApisDashboardsV1AstMultiSelectConstantListSource, err error) {
	_model = &ApisDashboardsV1AstMultiSelectConstantListSource{
		Values: values,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstMultiSelectConstantListSource unmarshals an instance of ApisDashboardsV1AstMultiSelectConstantListSource from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstMultiSelectConstantListSource(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstMultiSelectConstantListSource)
	err = core.UnmarshalPrimitive(m, "values", &obj.Values)
	if err != nil {
		err = core.SDKErrorf(err, "", "values-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstMultiSelectLogsPathSource : Unique values for a given logs path.
type ApisDashboardsV1AstMultiSelectLogsPathSource struct {
	// Field to count distinct values of.
	ObservationField *ApisDashboardsV1CommonObservationField `json:"observation_field" validate:"required"`
}

// NewApisDashboardsV1AstMultiSelectLogsPathSource : Instantiate ApisDashboardsV1AstMultiSelectLogsPathSource (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstMultiSelectLogsPathSource(observationField *ApisDashboardsV1CommonObservationField) (_model *ApisDashboardsV1AstMultiSelectLogsPathSource, err error) {
	_model = &ApisDashboardsV1AstMultiSelectLogsPathSource{
		ObservationField: observationField,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstMultiSelectLogsPathSource unmarshals an instance of ApisDashboardsV1AstMultiSelectLogsPathSource from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstMultiSelectLogsPathSource(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstMultiSelectLogsPathSource)
	err = core.UnmarshalModel(m, "observation_field", &obj.ObservationField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "observation_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstMultiSelectMetricLabelSource : Unique values for a given metric label.
type ApisDashboardsV1AstMultiSelectMetricLabelSource struct {
	// Metric name to source unique values from.
	MetricName *string `json:"metric_name" validate:"required"`

	// Metric label to source unique values from.
	Label *string `json:"label" validate:"required"`
}

// NewApisDashboardsV1AstMultiSelectMetricLabelSource : Instantiate ApisDashboardsV1AstMultiSelectMetricLabelSource (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstMultiSelectMetricLabelSource(metricName string, label string) (_model *ApisDashboardsV1AstMultiSelectMetricLabelSource, err error) {
	_model = &ApisDashboardsV1AstMultiSelectMetricLabelSource{
		MetricName: core.StringPtr(metricName),
		Label: core.StringPtr(label),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstMultiSelectMetricLabelSource unmarshals an instance of ApisDashboardsV1AstMultiSelectMetricLabelSource from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstMultiSelectMetricLabelSource(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstMultiSelectMetricLabelSource)
	err = core.UnmarshalPrimitive(m, "metric_name", &obj.MetricName)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "label", &obj.Label)
	if err != nil {
		err = core.SDKErrorf(err, "", "label-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstMultiSelectSelection : State of what is currently selected.
// Models which "extend" this model:
// - ApisDashboardsV1AstMultiSelectSelectionValueAll
// - ApisDashboardsV1AstMultiSelectSelectionValueList
type ApisDashboardsV1AstMultiSelectSelection struct {
	// All values are selected, usually translated to wildcard (*).
	All *ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty `json:"all,omitempty"`

	// Specific values are selected.
	List *ApisDashboardsV1AstMultiSelectSelectionListSelection `json:"list,omitempty"`
}
func (*ApisDashboardsV1AstMultiSelectSelection) isaApisDashboardsV1AstMultiSelectSelection() bool {
	return true
}

type ApisDashboardsV1AstMultiSelectSelectionIntf interface {
	isaApisDashboardsV1AstMultiSelectSelection() bool
}

// UnmarshalApisDashboardsV1AstMultiSelectSelection unmarshals an instance of ApisDashboardsV1AstMultiSelectSelection from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstMultiSelectSelection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstMultiSelectSelection)
	err = core.UnmarshalModel(m, "all", &obj.All, UnmarshalApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "all-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "list", &obj.List, UnmarshalApisDashboardsV1AstMultiSelectSelectionListSelection)
	if err != nil {
		err = core.SDKErrorf(err, "", "list-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty : All values are selected, usually translated to wildcard (*).
type ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty
func (o *ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty
func (o *ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty
func (o *ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty
func (o *ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty
func (o *ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty unmarshals an instance of ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstMultiSelectSelectionListSelection : Specific values are selected.
type ApisDashboardsV1AstMultiSelectSelectionListSelection struct {
	// Selected values.
	Values []string `json:"values,omitempty"`
}

// UnmarshalApisDashboardsV1AstMultiSelectSelectionListSelection unmarshals an instance of ApisDashboardsV1AstMultiSelectSelectionListSelection from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstMultiSelectSelectionListSelection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstMultiSelectSelectionListSelection)
	err = core.UnmarshalPrimitive(m, "values", &obj.Values)
	if err != nil {
		err = core.SDKErrorf(err, "", "values-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstMultiSelectSource : Variable value source.
// Models which "extend" this model:
// - ApisDashboardsV1AstMultiSelectSourceValueLogsPath
// - ApisDashboardsV1AstMultiSelectSourceValueMetricLabel
// - ApisDashboardsV1AstMultiSelectSourceValueConstantList
type ApisDashboardsV1AstMultiSelectSource struct {
	// Unique values for a given logs path.
	LogsPath *ApisDashboardsV1AstMultiSelectLogsPathSource `json:"logs_path,omitempty"`

	// Unique values for a given metric label.
	MetricLabel *ApisDashboardsV1AstMultiSelectMetricLabelSource `json:"metric_label,omitempty"`

	// List of constant values.
	ConstantList *ApisDashboardsV1AstMultiSelectConstantListSource `json:"constant_list,omitempty"`
}
func (*ApisDashboardsV1AstMultiSelectSource) isaApisDashboardsV1AstMultiSelectSource() bool {
	return true
}

type ApisDashboardsV1AstMultiSelectSourceIntf interface {
	isaApisDashboardsV1AstMultiSelectSource() bool
}

// UnmarshalApisDashboardsV1AstMultiSelectSource unmarshals an instance of ApisDashboardsV1AstMultiSelectSource from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstMultiSelectSource(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstMultiSelectSource)
	err = core.UnmarshalModel(m, "logs_path", &obj.LogsPath, UnmarshalApisDashboardsV1AstMultiSelectLogsPathSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs_path-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metric_label", &obj.MetricLabel, UnmarshalApisDashboardsV1AstMultiSelectMetricLabelSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_label-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "constant_list", &obj.ConstantList, UnmarshalApisDashboardsV1AstMultiSelectConstantListSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "constant_list-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstRow : The rows of the section.
type ApisDashboardsV1AstRow struct {
	// The unique identifier of the row within the layout.
	Href *string `json:"href,omitempty"`

	// Unique identifier of the folder containing the dashboard.
	ID *ApisDashboardsV1UUID `json:"id" validate:"required"`

	// The appearance of the row, such as height.
	Appearance *ApisDashboardsV1AstRowAppearance `json:"appearance" validate:"required"`

	// The widgets of the row.
	Widgets []ApisDashboardsV1AstWidget `json:"widgets,omitempty"`
}

// NewApisDashboardsV1AstRow : Instantiate ApisDashboardsV1AstRow (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstRow(id *ApisDashboardsV1UUID, appearance *ApisDashboardsV1AstRowAppearance) (_model *ApisDashboardsV1AstRow, err error) {
	_model = &ApisDashboardsV1AstRow{
		ID: id,
		Appearance: appearance,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstRow unmarshals an instance of ApisDashboardsV1AstRow from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstRow(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstRow)
	err = core.UnmarshalPrimitive(m, "href", &obj.Href)
	if err != nil {
		err = core.SDKErrorf(err, "", "href-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "id", &obj.ID, UnmarshalApisDashboardsV1UUID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "appearance", &obj.Appearance, UnmarshalApisDashboardsV1AstRowAppearance)
	if err != nil {
		err = core.SDKErrorf(err, "", "appearance-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "widgets", &obj.Widgets, UnmarshalApisDashboardsV1AstWidget)
	if err != nil {
		err = core.SDKErrorf(err, "", "widgets-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstRowAppearance : The appearance of the row, such as height.
type ApisDashboardsV1AstRowAppearance struct {
	// The height of the row.
	Height *int64 `json:"height" validate:"required"`
}

// NewApisDashboardsV1AstRowAppearance : Instantiate ApisDashboardsV1AstRowAppearance (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstRowAppearance(height int64) (_model *ApisDashboardsV1AstRowAppearance, err error) {
	_model = &ApisDashboardsV1AstRowAppearance{
		Height: core.Int64Ptr(height),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstRowAppearance unmarshals an instance of ApisDashboardsV1AstRowAppearance from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstRowAppearance(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstRowAppearance)
	err = core.UnmarshalPrimitive(m, "height", &obj.Height)
	if err != nil {
		err = core.SDKErrorf(err, "", "height-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstSection : The sections of the layout.
type ApisDashboardsV1AstSection struct {
	// The unique identifier of the section within the layout.
	Href *string `json:"href,omitempty"`

	// Unique identifier of the folder containing the dashboard.
	ID *ApisDashboardsV1UUID `json:"id" validate:"required"`

	// The rows of the section.
	Rows []ApisDashboardsV1AstRow `json:"rows,omitempty"`
}

// NewApisDashboardsV1AstSection : Instantiate ApisDashboardsV1AstSection (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstSection(id *ApisDashboardsV1UUID) (_model *ApisDashboardsV1AstSection, err error) {
	_model = &ApisDashboardsV1AstSection{
		ID: id,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstSection unmarshals an instance of ApisDashboardsV1AstSection from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstSection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstSection)
	err = core.UnmarshalPrimitive(m, "href", &obj.Href)
	if err != nil {
		err = core.SDKErrorf(err, "", "href-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "id", &obj.ID, UnmarshalApisDashboardsV1UUID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "rows", &obj.Rows, UnmarshalApisDashboardsV1AstRow)
	if err != nil {
		err = core.SDKErrorf(err, "", "rows-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstVariable : List of variables that can be used within the dashboard for dynamic content.
type ApisDashboardsV1AstVariable struct {
	// Name of the variable which can be used in templates.
	Name *string `json:"name" validate:"required"`

	// Definition.
	Definition ApisDashboardsV1AstVariableDefinitionIntf `json:"definition" validate:"required"`

	// Name used in variable UI.
	DisplayName *string `json:"display_name" validate:"required"`
}

// NewApisDashboardsV1AstVariable : Instantiate ApisDashboardsV1AstVariable (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstVariable(name string, definition ApisDashboardsV1AstVariableDefinitionIntf, displayName string) (_model *ApisDashboardsV1AstVariable, err error) {
	_model = &ApisDashboardsV1AstVariable{
		Name: core.StringPtr(name),
		Definition: definition,
		DisplayName: core.StringPtr(displayName),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstVariable unmarshals an instance of ApisDashboardsV1AstVariable from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstVariable(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstVariable)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "definition", &obj.Definition, UnmarshalApisDashboardsV1AstVariableDefinition)
	if err != nil {
		err = core.SDKErrorf(err, "", "definition-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "display_name", &obj.DisplayName)
	if err != nil {
		err = core.SDKErrorf(err, "", "display_name-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstVariableDefinition : Definition.
// Models which "extend" this model:
// - ApisDashboardsV1AstVariableDefinitionValueMultiSelect
type ApisDashboardsV1AstVariableDefinition struct {
	// Multi-select value.
	MultiSelect *ApisDashboardsV1AstMultiSelect `json:"multi_select,omitempty"`
}
func (*ApisDashboardsV1AstVariableDefinition) isaApisDashboardsV1AstVariableDefinition() bool {
	return true
}

type ApisDashboardsV1AstVariableDefinitionIntf interface {
	isaApisDashboardsV1AstVariableDefinition() bool
}

// UnmarshalApisDashboardsV1AstVariableDefinition unmarshals an instance of ApisDashboardsV1AstVariableDefinition from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstVariableDefinition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstVariableDefinition)
	err = core.UnmarshalModel(m, "multi_select", &obj.MultiSelect, UnmarshalApisDashboardsV1AstMultiSelect)
	if err != nil {
		err = core.SDKErrorf(err, "", "multi_select-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidget : The widgets of the row.
type ApisDashboardsV1AstWidget struct {
	// Widget identifier within the dashboard.
	Href *string `json:"href,omitempty"`

	// Unique identifier of the folder containing the dashboard.
	ID *ApisDashboardsV1UUID `json:"id" validate:"required"`

	// Widget title.
	Title *string `json:"title" validate:"required"`

	// Widget description.
	Description *string `json:"description,omitempty"`

	// Widget definition, contains the widget type and its configuration.
	Definition ApisDashboardsV1AstWidgetDefinitionIntf `json:"definition" validate:"required"`

	// Creation timestamp.
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Last update timestamp.
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`
}

// NewApisDashboardsV1AstWidget : Instantiate ApisDashboardsV1AstWidget (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidget(id *ApisDashboardsV1UUID, title string, definition ApisDashboardsV1AstWidgetDefinitionIntf) (_model *ApisDashboardsV1AstWidget, err error) {
	_model = &ApisDashboardsV1AstWidget{
		ID: id,
		Title: core.StringPtr(title),
		Definition: definition,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidget unmarshals an instance of ApisDashboardsV1AstWidget from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidget(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidget)
	err = core.UnmarshalPrimitive(m, "href", &obj.Href)
	if err != nil {
		err = core.SDKErrorf(err, "", "href-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "id", &obj.ID, UnmarshalApisDashboardsV1UUID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "title", &obj.Title)
	if err != nil {
		err = core.SDKErrorf(err, "", "title-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "definition", &obj.Definition, UnmarshalApisDashboardsV1AstWidgetDefinition)
	if err != nil {
		err = core.SDKErrorf(err, "", "definition-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		err = core.SDKErrorf(err, "", "created_at-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		err = core.SDKErrorf(err, "", "updated_at-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetDefinition : Widget definition, contains the widget type and its configuration.
// Models which "extend" this model:
// - ApisDashboardsV1AstWidgetDefinitionValueLineChart
// - ApisDashboardsV1AstWidgetDefinitionValueDataTable
// - ApisDashboardsV1AstWidgetDefinitionValueGauge
// - ApisDashboardsV1AstWidgetDefinitionValuePieChart
// - ApisDashboardsV1AstWidgetDefinitionValueBarChart
// - ApisDashboardsV1AstWidgetDefinitionValueHorizontalBarChart
// - ApisDashboardsV1AstWidgetDefinitionValueMarkdown
type ApisDashboardsV1AstWidgetDefinition struct {
	// Line chart widget.
	LineChart *ApisDashboardsV1AstWidgetsLineChart `json:"line_chart,omitempty"`

	// Data table widget.
	DataTable *ApisDashboardsV1AstWidgetsDataTable `json:"data_table,omitempty"`

	// Gauge widget.
	Gauge *ApisDashboardsV1AstWidgetsGauge `json:"gauge,omitempty"`

	// Pie chart widget.
	PieChart *ApisDashboardsV1AstWidgetsPieChart `json:"pie_chart,omitempty"`

	// Bar chart widget.
	BarChart *ApisDashboardsV1AstWidgetsBarChart `json:"bar_chart,omitempty"`

	// Horizontal bar chart widget.
	HorizontalBarChart *ApisDashboardsV1AstWidgetsHorizontalBarChart `json:"horizontal_bar_chart,omitempty"`

	// Markdown widget.
	Markdown *ApisDashboardsV1AstWidgetsMarkdown `json:"markdown,omitempty"`
}
func (*ApisDashboardsV1AstWidgetDefinition) isaApisDashboardsV1AstWidgetDefinition() bool {
	return true
}

type ApisDashboardsV1AstWidgetDefinitionIntf interface {
	isaApisDashboardsV1AstWidgetDefinition() bool
}

// UnmarshalApisDashboardsV1AstWidgetDefinition unmarshals an instance of ApisDashboardsV1AstWidgetDefinition from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetDefinition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetDefinition)
	err = core.UnmarshalModel(m, "line_chart", &obj.LineChart, UnmarshalApisDashboardsV1AstWidgetsLineChart)
	if err != nil {
		err = core.SDKErrorf(err, "", "line_chart-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "data_table", &obj.DataTable, UnmarshalApisDashboardsV1AstWidgetsDataTable)
	if err != nil {
		err = core.SDKErrorf(err, "", "data_table-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "gauge", &obj.Gauge, UnmarshalApisDashboardsV1AstWidgetsGauge)
	if err != nil {
		err = core.SDKErrorf(err, "", "gauge-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "pie_chart", &obj.PieChart, UnmarshalApisDashboardsV1AstWidgetsPieChart)
	if err != nil {
		err = core.SDKErrorf(err, "", "pie_chart-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "bar_chart", &obj.BarChart, UnmarshalApisDashboardsV1AstWidgetsBarChart)
	if err != nil {
		err = core.SDKErrorf(err, "", "bar_chart-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "horizontal_bar_chart", &obj.HorizontalBarChart, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChart)
	if err != nil {
		err = core.SDKErrorf(err, "", "horizontal_bar_chart-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "markdown", &obj.Markdown, UnmarshalApisDashboardsV1AstWidgetsMarkdown)
	if err != nil {
		err = core.SDKErrorf(err, "", "markdown-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChart : Bar chart widget.
type ApisDashboardsV1AstWidgetsBarChart struct {
	// Data source specific query, defines from where and how to fetch the data.
	Query ApisDashboardsV1AstWidgetsBarChartQueryIntf `json:"query" validate:"required"`

	// Maximum number of bars to present in the chart.
	MaxBarsPerChart *int64 `json:"max_bars_per_chart" validate:"required"`

	// Template for bar labels.
	GroupNameTemplate *string `json:"group_name_template" validate:"required"`

	// Stack definition.
	StackDefinition *ApisDashboardsV1AstWidgetsBarChartStackDefinition `json:"stack_definition" validate:"required"`

	// Scale type.
	ScaleType *string `json:"scale_type" validate:"required"`

	// Coloring mode.
	ColorsBy ApisDashboardsV1AstWidgetsCommonColorsByIntf `json:"colors_by" validate:"required"`

	// X axis mode.
	XAxis ApisDashboardsV1AstWidgetsBarChartXAxisIntf `json:"x_axis" validate:"required"`

	// Unit of the data.
	Unit *string `json:"unit" validate:"required"`

	// Sorting mode.
	SortBy *string `json:"sort_by" validate:"required"`

	// Supported vaues: classic, severity, cold, negative, green, red, blue.
	ColorScheme *string `json:"color_scheme" validate:"required"`

	// Data mode type.
	DataModeType *string `json:"data_mode_type,omitempty"`
}

// Constants associated with the ApisDashboardsV1AstWidgetsBarChart.ScaleType property.
// Scale type.
const (
	ApisDashboardsV1AstWidgetsBarChart_ScaleType_Linear = "linear"
	ApisDashboardsV1AstWidgetsBarChart_ScaleType_Logarithmic = "logarithmic"
	ApisDashboardsV1AstWidgetsBarChart_ScaleType_Unspecified = "unspecified"
)

// Constants associated with the ApisDashboardsV1AstWidgetsBarChart.Unit property.
// Unit of the data.
const (
	ApisDashboardsV1AstWidgetsBarChart_Unit_Bytes = "bytes"
	ApisDashboardsV1AstWidgetsBarChart_Unit_BytesIec = "bytes_iec"
	ApisDashboardsV1AstWidgetsBarChart_Unit_Eur = "eur"
	ApisDashboardsV1AstWidgetsBarChart_Unit_EurCents = "eur_cents"
	ApisDashboardsV1AstWidgetsBarChart_Unit_Gbytes = "gbytes"
	ApisDashboardsV1AstWidgetsBarChart_Unit_Gibytes = "gibytes"
	ApisDashboardsV1AstWidgetsBarChart_Unit_Kbytes = "kbytes"
	ApisDashboardsV1AstWidgetsBarChart_Unit_Kibytes = "kibytes"
	ApisDashboardsV1AstWidgetsBarChart_Unit_Mbytes = "mbytes"
	ApisDashboardsV1AstWidgetsBarChart_Unit_Mibytes = "mibytes"
	ApisDashboardsV1AstWidgetsBarChart_Unit_Microseconds = "microseconds"
	ApisDashboardsV1AstWidgetsBarChart_Unit_Milliseconds = "milliseconds"
	ApisDashboardsV1AstWidgetsBarChart_Unit_Seconds = "seconds"
	ApisDashboardsV1AstWidgetsBarChart_Unit_Unspecified = "unspecified"
	ApisDashboardsV1AstWidgetsBarChart_Unit_Usd = "usd"
	ApisDashboardsV1AstWidgetsBarChart_Unit_UsdCents = "usd_cents"
)

// Constants associated with the ApisDashboardsV1AstWidgetsBarChart.SortBy property.
// Sorting mode.
const (
	ApisDashboardsV1AstWidgetsBarChart_SortBy_Name = "name"
	ApisDashboardsV1AstWidgetsBarChart_SortBy_Unspecified = "unspecified"
	ApisDashboardsV1AstWidgetsBarChart_SortBy_Value = "value"
)

// Constants associated with the ApisDashboardsV1AstWidgetsBarChart.DataModeType property.
// Data mode type.
const (
	ApisDashboardsV1AstWidgetsBarChart_DataModeType_Archive = "archive"
	ApisDashboardsV1AstWidgetsBarChart_DataModeType_HighUnspecified = "high_unspecified"
)

// NewApisDashboardsV1AstWidgetsBarChart : Instantiate ApisDashboardsV1AstWidgetsBarChart (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsBarChart(query ApisDashboardsV1AstWidgetsBarChartQueryIntf, maxBarsPerChart int64, groupNameTemplate string, stackDefinition *ApisDashboardsV1AstWidgetsBarChartStackDefinition, scaleType string, colorsBy ApisDashboardsV1AstWidgetsCommonColorsByIntf, xAxis ApisDashboardsV1AstWidgetsBarChartXAxisIntf, unit string, sortBy string, colorScheme string) (_model *ApisDashboardsV1AstWidgetsBarChart, err error) {
	_model = &ApisDashboardsV1AstWidgetsBarChart{
		Query: query,
		MaxBarsPerChart: core.Int64Ptr(maxBarsPerChart),
		GroupNameTemplate: core.StringPtr(groupNameTemplate),
		StackDefinition: stackDefinition,
		ScaleType: core.StringPtr(scaleType),
		ColorsBy: colorsBy,
		XAxis: xAxis,
		Unit: core.StringPtr(unit),
		SortBy: core.StringPtr(sortBy),
		ColorScheme: core.StringPtr(colorScheme),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsBarChart unmarshals an instance of ApisDashboardsV1AstWidgetsBarChart from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChart(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChart)
	err = core.UnmarshalModel(m, "query", &obj.Query, UnmarshalApisDashboardsV1AstWidgetsBarChartQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "max_bars_per_chart", &obj.MaxBarsPerChart)
	if err != nil {
		err = core.SDKErrorf(err, "", "max_bars_per_chart-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "group_name_template", &obj.GroupNameTemplate)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_name_template-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "stack_definition", &obj.StackDefinition, UnmarshalApisDashboardsV1AstWidgetsBarChartStackDefinition)
	if err != nil {
		err = core.SDKErrorf(err, "", "stack_definition-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "scale_type", &obj.ScaleType)
	if err != nil {
		err = core.SDKErrorf(err, "", "scale_type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "colors_by", &obj.ColorsBy, UnmarshalApisDashboardsV1AstWidgetsCommonColorsBy)
	if err != nil {
		err = core.SDKErrorf(err, "", "colors_by-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "x_axis", &obj.XAxis, UnmarshalApisDashboardsV1AstWidgetsBarChartXAxis)
	if err != nil {
		err = core.SDKErrorf(err, "", "x_axis-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "unit", &obj.Unit)
	if err != nil {
		err = core.SDKErrorf(err, "", "unit-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "sort_by", &obj.SortBy)
	if err != nil {
		err = core.SDKErrorf(err, "", "sort_by-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "color_scheme", &obj.ColorScheme)
	if err != nil {
		err = core.SDKErrorf(err, "", "color_scheme-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "data_mode_type", &obj.DataModeType)
	if err != nil {
		err = core.SDKErrorf(err, "", "data_mode_type-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChartDataprimeQuery : Query based on Dataprime language.
type ApisDashboardsV1AstWidgetsBarChartDataprimeQuery struct {
	// Dataprime query.
	DataprimeQuery *ApisDashboardsV1CommonDataprimeQuery `json:"dataprime_query" validate:"required"`

	// Extra filter on top of the Dataprime query.
	Filters []ApisDashboardsV1AstFilterSourceIntf `json:"filters,omitempty"`

	// Fields to group by.
	GroupNames []string `json:"group_names,omitempty"`

	// Field to stack by.
	StackedGroupName *string `json:"stacked_group_name,omitempty"`
}

// NewApisDashboardsV1AstWidgetsBarChartDataprimeQuery : Instantiate ApisDashboardsV1AstWidgetsBarChartDataprimeQuery (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsBarChartDataprimeQuery(dataprimeQuery *ApisDashboardsV1CommonDataprimeQuery) (_model *ApisDashboardsV1AstWidgetsBarChartDataprimeQuery, err error) {
	_model = &ApisDashboardsV1AstWidgetsBarChartDataprimeQuery{
		DataprimeQuery: dataprimeQuery,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsBarChartDataprimeQuery unmarshals an instance of ApisDashboardsV1AstWidgetsBarChartDataprimeQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChartDataprimeQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChartDataprimeQuery)
	err = core.UnmarshalModel(m, "dataprime_query", &obj.DataprimeQuery, UnmarshalApisDashboardsV1CommonDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "group_names", &obj.GroupNames)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_names-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "stacked_group_name", &obj.StackedGroupName)
	if err != nil {
		err = core.SDKErrorf(err, "", "stacked_group_name-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChartLogsQuery : Logs specific query.
type ApisDashboardsV1AstWidgetsBarChartLogsQuery struct {
	// Lucene query.
	LuceneQuery *ApisDashboardsV1AstWidgetsCommonLuceneQuery `json:"lucene_query,omitempty"`

	// Aggregations.
	Aggregation ApisDashboardsV1CommonLogsAggregationIntf `json:"aggregation" validate:"required"`

	// Extra filter on top of Lucene query.
	Filters []ApisDashboardsV1AstFilterLogsFilter `json:"filters,omitempty"`

	// Fiel to group by.
	GroupNamesFields []ApisDashboardsV1CommonObservationField `json:"group_names_fields,omitempty"`

	// Field to count distinct values of.
	StackedGroupNameField *ApisDashboardsV1CommonObservationField `json:"stacked_group_name_field,omitempty"`
}

// NewApisDashboardsV1AstWidgetsBarChartLogsQuery : Instantiate ApisDashboardsV1AstWidgetsBarChartLogsQuery (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsBarChartLogsQuery(aggregation ApisDashboardsV1CommonLogsAggregationIntf) (_model *ApisDashboardsV1AstWidgetsBarChartLogsQuery, err error) {
	_model = &ApisDashboardsV1AstWidgetsBarChartLogsQuery{
		Aggregation: aggregation,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsBarChartLogsQuery unmarshals an instance of ApisDashboardsV1AstWidgetsBarChartLogsQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChartLogsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChartLogsQuery)
	err = core.UnmarshalModel(m, "lucene_query", &obj.LuceneQuery, UnmarshalApisDashboardsV1AstWidgetsCommonLuceneQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "lucene_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "aggregation", &obj.Aggregation, UnmarshalApisDashboardsV1CommonLogsAggregation)
	if err != nil {
		err = core.SDKErrorf(err, "", "aggregation-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterLogsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "group_names_fields", &obj.GroupNamesFields, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_names_fields-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "stacked_group_name_field", &obj.StackedGroupNameField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "stacked_group_name_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChartMetricsQuery : Metrics specific query.
type ApisDashboardsV1AstWidgetsBarChartMetricsQuery struct {
	// PromQL query.
	PromqlQuery *ApisDashboardsV1AstWidgetsCommonPromQlQuery `json:"promql_query,omitempty"`

	// Extra filter on top of the PromQL query.
	Filters []ApisDashboardsV1AstFilterMetricsFilter `json:"filters,omitempty"`

	// Labels to group by.
	GroupNames []string `json:"group_names,omitempty"`

	// Label to stack by.
	StackedGroupName *string `json:"stacked_group_name,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsBarChartMetricsQuery unmarshals an instance of ApisDashboardsV1AstWidgetsBarChartMetricsQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChartMetricsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChartMetricsQuery)
	err = core.UnmarshalModel(m, "promql_query", &obj.PromqlQuery, UnmarshalApisDashboardsV1AstWidgetsCommonPromQlQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "promql_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterMetricsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "group_names", &obj.GroupNames)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_names-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "stacked_group_name", &obj.StackedGroupName)
	if err != nil {
		err = core.SDKErrorf(err, "", "stacked_group_name-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChartQuery : Data source specific query, defines from where and how to fetch the data.
// Models which "extend" this model:
// - ApisDashboardsV1AstWidgetsBarChartQueryValueLogs
// - ApisDashboardsV1AstWidgetsBarChartQueryValueMetrics
// - ApisDashboardsV1AstWidgetsBarChartQueryValueDataprime
type ApisDashboardsV1AstWidgetsBarChartQuery struct {
	// Logs specific query.
	Logs *ApisDashboardsV1AstWidgetsBarChartLogsQuery `json:"logs,omitempty"`

	// Metrics specific query.
	Metrics *ApisDashboardsV1AstWidgetsBarChartMetricsQuery `json:"metrics,omitempty"`

	// Query based on Dataprime language.
	Dataprime *ApisDashboardsV1AstWidgetsBarChartDataprimeQuery `json:"dataprime,omitempty"`
}
func (*ApisDashboardsV1AstWidgetsBarChartQuery) isaApisDashboardsV1AstWidgetsBarChartQuery() bool {
	return true
}

type ApisDashboardsV1AstWidgetsBarChartQueryIntf interface {
	isaApisDashboardsV1AstWidgetsBarChartQuery() bool
}

// UnmarshalApisDashboardsV1AstWidgetsBarChartQuery unmarshals an instance of ApisDashboardsV1AstWidgetsBarChartQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChartQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChartQuery)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstWidgetsBarChartLogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstWidgetsBarChartMetricsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "dataprime", &obj.Dataprime, UnmarshalApisDashboardsV1AstWidgetsBarChartDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChartStackDefinition : Stack definition.
type ApisDashboardsV1AstWidgetsBarChartStackDefinition struct {
	// Maximum number of slices per bar.
	MaxSlicesPerBar *int64 `json:"max_slices_per_bar,omitempty"`

	// Template for stack slice label.
	StackNameTemplate *string `json:"stack_name_template,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsBarChartStackDefinition unmarshals an instance of ApisDashboardsV1AstWidgetsBarChartStackDefinition from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChartStackDefinition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChartStackDefinition)
	err = core.UnmarshalPrimitive(m, "max_slices_per_bar", &obj.MaxSlicesPerBar)
	if err != nil {
		err = core.SDKErrorf(err, "", "max_slices_per_bar-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "stack_name_template", &obj.StackNameTemplate)
	if err != nil {
		err = core.SDKErrorf(err, "", "stack_name_template-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChartXAxis : X axis mode.
// Models which "extend" this model:
// - ApisDashboardsV1AstWidgetsBarChartXAxisTypeValue
// - ApisDashboardsV1AstWidgetsBarChartXAxisTypeTime
type ApisDashboardsV1AstWidgetsBarChartXAxis struct {
	// Categorical axis.
	Value *ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty `json:"value,omitempty"`

	// Time based axis.
	Time *ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime `json:"time,omitempty"`
}
func (*ApisDashboardsV1AstWidgetsBarChartXAxis) isaApisDashboardsV1AstWidgetsBarChartXAxis() bool {
	return true
}

type ApisDashboardsV1AstWidgetsBarChartXAxisIntf interface {
	isaApisDashboardsV1AstWidgetsBarChartXAxis() bool
}

// UnmarshalApisDashboardsV1AstWidgetsBarChartXAxis unmarshals an instance of ApisDashboardsV1AstWidgetsBarChartXAxis from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChartXAxis(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChartXAxis)
	err = core.UnmarshalModel(m, "value", &obj.Value, UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "value-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "time", &obj.Time, UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime)
	if err != nil {
		err = core.SDKErrorf(err, "", "time-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime : Time based axis.
type ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime struct {
	// Time interval.
	Interval *string `json:"interval,omitempty"`

	// Buckets presented.
	BucketsPresented *int64 `json:"buckets_presented,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime unmarshals an instance of ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime)
	err = core.UnmarshalPrimitive(m, "interval", &obj.Interval)
	if err != nil {
		err = core.SDKErrorf(err, "", "interval-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "buckets_presented", &obj.BucketsPresented)
	if err != nil {
		err = core.SDKErrorf(err, "", "buckets_presented-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty : Categorical axis.
type ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty
func (o *ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty
func (o *ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty
func (o *ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty
func (o *ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty
func (o *ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty unmarshals an instance of ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsCommonColorsBy : Coloring mode.
// Models which "extend" this model:
// - ApisDashboardsV1AstWidgetsCommonColorsByValueStack
// - ApisDashboardsV1AstWidgetsCommonColorsByValueGroupBy
// - ApisDashboardsV1AstWidgetsCommonColorsByValueAggregation
type ApisDashboardsV1AstWidgetsCommonColorsBy struct {
	// Each stack will have the same color across all groups.
	Stack *ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty `json:"stack,omitempty"`

	// Each group will have different color and stack color will be derived from group color.
	GroupBy *ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty `json:"group_by,omitempty"`

	// Each aggregation will have different color and stack color will be derived from aggregation color.
	Aggregation *ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty `json:"aggregation,omitempty"`
}
func (*ApisDashboardsV1AstWidgetsCommonColorsBy) isaApisDashboardsV1AstWidgetsCommonColorsBy() bool {
	return true
}

type ApisDashboardsV1AstWidgetsCommonColorsByIntf interface {
	isaApisDashboardsV1AstWidgetsCommonColorsBy() bool
}

// UnmarshalApisDashboardsV1AstWidgetsCommonColorsBy unmarshals an instance of ApisDashboardsV1AstWidgetsCommonColorsBy from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsCommonColorsBy(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsCommonColorsBy)
	err = core.UnmarshalModel(m, "stack", &obj.Stack, UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "stack-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "group_by", &obj.GroupBy, UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_by-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "aggregation", &obj.Aggregation, UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "aggregation-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty : Each aggregation will have different color and stack color will be derived from aggregation color.
type ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty unmarshals an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty : Each group will have different color and stack color will be derived from group color.
type ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty unmarshals an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty : Each stack will have the same color across all groups.
type ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty
func (o *ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty unmarshals an instance of ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsCommonLegend : Legend configuration.
type ApisDashboardsV1AstWidgetsCommonLegend struct {
	// Whether to show the legend or not.
	IsVisible *bool `json:"is_visible" validate:"required"`

	// The columns to show in the legend.
	Columns []string `json:"columns,omitempty"`

	// Whether to group by the query or not.
	GroupByQuery *bool `json:"group_by_query" validate:"required"`
}

// Constants associated with the ApisDashboardsV1AstWidgetsCommonLegend.Columns property.
// The columns to show in the legend.
const (
	ApisDashboardsV1AstWidgetsCommonLegend_Columns_Avg = "avg"
	ApisDashboardsV1AstWidgetsCommonLegend_Columns_Last = "last"
	ApisDashboardsV1AstWidgetsCommonLegend_Columns_Max = "max"
	ApisDashboardsV1AstWidgetsCommonLegend_Columns_Min = "min"
	ApisDashboardsV1AstWidgetsCommonLegend_Columns_Name = "name"
	ApisDashboardsV1AstWidgetsCommonLegend_Columns_Sum = "sum"
	ApisDashboardsV1AstWidgetsCommonLegend_Columns_Unspecified = "unspecified"
)

// NewApisDashboardsV1AstWidgetsCommonLegend : Instantiate ApisDashboardsV1AstWidgetsCommonLegend (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsCommonLegend(isVisible bool, groupByQuery bool) (_model *ApisDashboardsV1AstWidgetsCommonLegend, err error) {
	_model = &ApisDashboardsV1AstWidgetsCommonLegend{
		IsVisible: core.BoolPtr(isVisible),
		GroupByQuery: core.BoolPtr(groupByQuery),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsCommonLegend unmarshals an instance of ApisDashboardsV1AstWidgetsCommonLegend from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsCommonLegend(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsCommonLegend)
	err = core.UnmarshalPrimitive(m, "is_visible", &obj.IsVisible)
	if err != nil {
		err = core.SDKErrorf(err, "", "is_visible-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "columns", &obj.Columns)
	if err != nil {
		err = core.SDKErrorf(err, "", "columns-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "group_by_query", &obj.GroupByQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_by_query-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsCommonLuceneQuery : Lucene query.
type ApisDashboardsV1AstWidgetsCommonLuceneQuery struct {
	// The query string.
	Value *string `json:"value,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsCommonLuceneQuery unmarshals an instance of ApisDashboardsV1AstWidgetsCommonLuceneQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsCommonLuceneQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsCommonLuceneQuery)
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		err = core.SDKErrorf(err, "", "value-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsCommonPromQlQuery : PromQL query.
type ApisDashboardsV1AstWidgetsCommonPromQlQuery struct {
	// The query string.
	Value *string `json:"value,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsCommonPromQlQuery unmarshals an instance of ApisDashboardsV1AstWidgetsCommonPromQlQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsCommonPromQlQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsCommonPromQlQuery)
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		err = core.SDKErrorf(err, "", "value-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsDataTable : Data table widget.
type ApisDashboardsV1AstWidgetsDataTable struct {
	// Data source specific query, defines from where and how to fetch the data.
	Query ApisDashboardsV1AstWidgetsDataTableQueryIntf `json:"query" validate:"required"`

	// Number of results per page.
	ResultsPerPage *int64 `json:"results_per_page" validate:"required"`

	// Display style for table rows.
	RowStyle *string `json:"row_style" validate:"required"`

	// Columns to display, their order and width.
	Columns []ApisDashboardsV1AstWidgetsDataTableColumn `json:"columns,omitempty"`

	// Column used for ordering the results.
	OrderBy *ApisDashboardsV1CommonOrderingField `json:"order_by,omitempty"`

	// Data mode type.
	DataModeType *string `json:"data_mode_type,omitempty"`
}

// Constants associated with the ApisDashboardsV1AstWidgetsDataTable.RowStyle property.
// Display style for table rows.
const (
	ApisDashboardsV1AstWidgetsDataTable_RowStyle_Condensed = "condensed"
	ApisDashboardsV1AstWidgetsDataTable_RowStyle_JSON = "json"
	ApisDashboardsV1AstWidgetsDataTable_RowStyle_List = "list"
	ApisDashboardsV1AstWidgetsDataTable_RowStyle_OneLine = "one_line"
	ApisDashboardsV1AstWidgetsDataTable_RowStyle_TwoLine = "two_line"
	ApisDashboardsV1AstWidgetsDataTable_RowStyle_Unspecified = "unspecified"
)

// Constants associated with the ApisDashboardsV1AstWidgetsDataTable.DataModeType property.
// Data mode type.
const (
	ApisDashboardsV1AstWidgetsDataTable_DataModeType_Archive = "archive"
	ApisDashboardsV1AstWidgetsDataTable_DataModeType_HighUnspecified = "high_unspecified"
)

// NewApisDashboardsV1AstWidgetsDataTable : Instantiate ApisDashboardsV1AstWidgetsDataTable (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsDataTable(query ApisDashboardsV1AstWidgetsDataTableQueryIntf, resultsPerPage int64, rowStyle string) (_model *ApisDashboardsV1AstWidgetsDataTable, err error) {
	_model = &ApisDashboardsV1AstWidgetsDataTable{
		Query: query,
		ResultsPerPage: core.Int64Ptr(resultsPerPage),
		RowStyle: core.StringPtr(rowStyle),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsDataTable unmarshals an instance of ApisDashboardsV1AstWidgetsDataTable from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsDataTable(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsDataTable)
	err = core.UnmarshalModel(m, "query", &obj.Query, UnmarshalApisDashboardsV1AstWidgetsDataTableQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "results_per_page", &obj.ResultsPerPage)
	if err != nil {
		err = core.SDKErrorf(err, "", "results_per_page-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "row_style", &obj.RowStyle)
	if err != nil {
		err = core.SDKErrorf(err, "", "row_style-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "columns", &obj.Columns, UnmarshalApisDashboardsV1AstWidgetsDataTableColumn)
	if err != nil {
		err = core.SDKErrorf(err, "", "columns-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "order_by", &obj.OrderBy, UnmarshalApisDashboardsV1CommonOrderingField)
	if err != nil {
		err = core.SDKErrorf(err, "", "order_by-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "data_mode_type", &obj.DataModeType)
	if err != nil {
		err = core.SDKErrorf(err, "", "data_mode_type-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsDataTableColumn : Columns to display, their order and width.
type ApisDashboardsV1AstWidgetsDataTableColumn struct {
	// References a field in result set. In case of aggregation, it references the aggregation identifier.
	Field *string `json:"field" validate:"required"`

	// Column width.
	Width *int64 `json:"width,omitempty"`
}

// NewApisDashboardsV1AstWidgetsDataTableColumn : Instantiate ApisDashboardsV1AstWidgetsDataTableColumn (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsDataTableColumn(field string) (_model *ApisDashboardsV1AstWidgetsDataTableColumn, err error) {
	_model = &ApisDashboardsV1AstWidgetsDataTableColumn{
		Field: core.StringPtr(field),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsDataTableColumn unmarshals an instance of ApisDashboardsV1AstWidgetsDataTableColumn from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsDataTableColumn(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsDataTableColumn)
	err = core.UnmarshalPrimitive(m, "field", &obj.Field)
	if err != nil {
		err = core.SDKErrorf(err, "", "field-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "width", &obj.Width)
	if err != nil {
		err = core.SDKErrorf(err, "", "width-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsDataTableDataprimeQuery : Query based on Dataprime language.
type ApisDashboardsV1AstWidgetsDataTableDataprimeQuery struct {
	// Dataprime query.
	DataprimeQuery *ApisDashboardsV1CommonDataprimeQuery `json:"dataprime_query" validate:"required"`

	// Extra filtering on top of the Dataprime query.
	Filters []ApisDashboardsV1AstFilterSourceIntf `json:"filters,omitempty"`
}

// NewApisDashboardsV1AstWidgetsDataTableDataprimeQuery : Instantiate ApisDashboardsV1AstWidgetsDataTableDataprimeQuery (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsDataTableDataprimeQuery(dataprimeQuery *ApisDashboardsV1CommonDataprimeQuery) (_model *ApisDashboardsV1AstWidgetsDataTableDataprimeQuery, err error) {
	_model = &ApisDashboardsV1AstWidgetsDataTableDataprimeQuery{
		DataprimeQuery: dataprimeQuery,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsDataTableDataprimeQuery unmarshals an instance of ApisDashboardsV1AstWidgetsDataTableDataprimeQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsDataTableDataprimeQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsDataTableDataprimeQuery)
	err = core.UnmarshalModel(m, "dataprime_query", &obj.DataprimeQuery, UnmarshalApisDashboardsV1CommonDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsDataTableLogsQuery : Logs specific query.
type ApisDashboardsV1AstWidgetsDataTableLogsQuery struct {
	// Lucene query.
	LuceneQuery *ApisDashboardsV1AstWidgetsCommonLuceneQuery `json:"lucene_query,omitempty"`

	// Extra filtering on top of the Lucene query.
	Filters []ApisDashboardsV1AstFilterLogsFilter `json:"filters,omitempty"`

	// Grouping and aggregation.
	Grouping *ApisDashboardsV1AstWidgetsDataTableLogsQueryGrouping `json:"grouping,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQuery unmarshals an instance of ApisDashboardsV1AstWidgetsDataTableLogsQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsDataTableLogsQuery)
	err = core.UnmarshalModel(m, "lucene_query", &obj.LuceneQuery, UnmarshalApisDashboardsV1AstWidgetsCommonLuceneQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "lucene_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterLogsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "grouping", &obj.Grouping, UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQueryGrouping)
	if err != nil {
		err = core.SDKErrorf(err, "", "grouping-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation : Aggregations.
type ApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation struct {
	// Aggregation identifier, must be unique within grouping configuration.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Aggregation name, used as column name.
	Name *string `json:"name" validate:"required"`

	// Whether the aggregation is visible.
	IsVisible *bool `json:"is_visible" validate:"required"`

	// Aggregations.
	Aggregation ApisDashboardsV1CommonLogsAggregationIntf `json:"aggregation" validate:"required"`
}

// NewApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation : Instantiate ApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation(id *strfmt.UUID, name string, isVisible bool, aggregation ApisDashboardsV1CommonLogsAggregationIntf) (_model *ApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation, err error) {
	_model = &ApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation{
		ID: id,
		Name: core.StringPtr(name),
		IsVisible: core.BoolPtr(isVisible),
		Aggregation: aggregation,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation unmarshals an instance of ApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "is_visible", &obj.IsVisible)
	if err != nil {
		err = core.SDKErrorf(err, "", "is_visible-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "aggregation", &obj.Aggregation, UnmarshalApisDashboardsV1CommonLogsAggregation)
	if err != nil {
		err = core.SDKErrorf(err, "", "aggregation-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsDataTableLogsQueryGrouping : Grouping and aggregation.
type ApisDashboardsV1AstWidgetsDataTableLogsQueryGrouping struct {
	// Aggregations.
	Aggregations []ApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation `json:"aggregations,omitempty"`

	// Fields to group by.
	GroupBys []ApisDashboardsV1CommonObservationField `json:"group_bys,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQueryGrouping unmarshals an instance of ApisDashboardsV1AstWidgetsDataTableLogsQueryGrouping from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQueryGrouping(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsDataTableLogsQueryGrouping)
	err = core.UnmarshalModel(m, "aggregations", &obj.Aggregations, UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation)
	if err != nil {
		err = core.SDKErrorf(err, "", "aggregations-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "group_bys", &obj.GroupBys, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_bys-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsDataTableMetricsQuery : Metrics specific query.
type ApisDashboardsV1AstWidgetsDataTableMetricsQuery struct {
	// PromQL query.
	PromqlQuery *ApisDashboardsV1AstWidgetsCommonPromQlQuery `json:"promql_query" validate:"required"`

	// Extra filtering on top of the PromQL query.
	Filters []ApisDashboardsV1AstFilterMetricsFilter `json:"filters,omitempty"`
}

// NewApisDashboardsV1AstWidgetsDataTableMetricsQuery : Instantiate ApisDashboardsV1AstWidgetsDataTableMetricsQuery (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsDataTableMetricsQuery(promqlQuery *ApisDashboardsV1AstWidgetsCommonPromQlQuery) (_model *ApisDashboardsV1AstWidgetsDataTableMetricsQuery, err error) {
	_model = &ApisDashboardsV1AstWidgetsDataTableMetricsQuery{
		PromqlQuery: promqlQuery,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsDataTableMetricsQuery unmarshals an instance of ApisDashboardsV1AstWidgetsDataTableMetricsQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsDataTableMetricsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsDataTableMetricsQuery)
	err = core.UnmarshalModel(m, "promql_query", &obj.PromqlQuery, UnmarshalApisDashboardsV1AstWidgetsCommonPromQlQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "promql_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterMetricsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsDataTableQuery : Data source specific query, defines from where and how to fetch the data.
// Models which "extend" this model:
// - ApisDashboardsV1AstWidgetsDataTableQueryValueLogs
// - ApisDashboardsV1AstWidgetsDataTableQueryValueMetrics
// - ApisDashboardsV1AstWidgetsDataTableQueryValueDataprime
type ApisDashboardsV1AstWidgetsDataTableQuery struct {
	// Logs specific query.
	Logs *ApisDashboardsV1AstWidgetsDataTableLogsQuery `json:"logs,omitempty"`

	// Metrics specific query.
	Metrics *ApisDashboardsV1AstWidgetsDataTableMetricsQuery `json:"metrics,omitempty"`

	// Query based on Dataprime language.
	Dataprime *ApisDashboardsV1AstWidgetsDataTableDataprimeQuery `json:"dataprime,omitempty"`
}
func (*ApisDashboardsV1AstWidgetsDataTableQuery) isaApisDashboardsV1AstWidgetsDataTableQuery() bool {
	return true
}

type ApisDashboardsV1AstWidgetsDataTableQueryIntf interface {
	isaApisDashboardsV1AstWidgetsDataTableQuery() bool
}

// UnmarshalApisDashboardsV1AstWidgetsDataTableQuery unmarshals an instance of ApisDashboardsV1AstWidgetsDataTableQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsDataTableQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsDataTableQuery)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstWidgetsDataTableMetricsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "dataprime", &obj.Dataprime, UnmarshalApisDashboardsV1AstWidgetsDataTableDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsGauge : Gauge widget.
type ApisDashboardsV1AstWidgetsGauge struct {
	// Data source specific query, defines from where and how to fetch the data.
	Query ApisDashboardsV1AstWidgetsGaugeQueryIntf `json:"query" validate:"required"`

	// Minimum value of the gauge.
	Min *float64 `json:"min" validate:"required"`

	// Maximum value of the gauge.
	Max *float64 `json:"max" validate:"required"`

	// Show inner arc (styling).
	ShowInnerArc *bool `json:"show_inner_arc" validate:"required"`

	// Show outer arc (styling).
	ShowOuterArc *bool `json:"show_outer_arc" validate:"required"`

	// Query result value interpretation.
	Unit *string `json:"unit" validate:"required"`

	// Thresholds for the gauge, values at which the gauge changes color.
	Thresholds []ApisDashboardsV1AstWidgetsGaugeThreshold `json:"thresholds,omitempty"`

	// Data mode type.
	DataModeType *string `json:"data_mode_type,omitempty"`

	// What threshold color should be applied to: value or background.
	ThresholdBy *string `json:"threshold_by" validate:"required"`
}

// Constants associated with the ApisDashboardsV1AstWidgetsGauge.Unit property.
// Query result value interpretation.
const (
	ApisDashboardsV1AstWidgetsGauge_Unit_Bytes = "bytes"
	ApisDashboardsV1AstWidgetsGauge_Unit_BytesIec = "bytes_iec"
	ApisDashboardsV1AstWidgetsGauge_Unit_Eur = "eur"
	ApisDashboardsV1AstWidgetsGauge_Unit_EurCents = "eur_cents"
	ApisDashboardsV1AstWidgetsGauge_Unit_Gbytes = "gbytes"
	ApisDashboardsV1AstWidgetsGauge_Unit_Gibytes = "gibytes"
	ApisDashboardsV1AstWidgetsGauge_Unit_Kbytes = "kbytes"
	ApisDashboardsV1AstWidgetsGauge_Unit_Kibytes = "kibytes"
	ApisDashboardsV1AstWidgetsGauge_Unit_Mbytes = "mbytes"
	ApisDashboardsV1AstWidgetsGauge_Unit_Mibytes = "mibytes"
	ApisDashboardsV1AstWidgetsGauge_Unit_Microseconds = "microseconds"
	ApisDashboardsV1AstWidgetsGauge_Unit_Milliseconds = "milliseconds"
	ApisDashboardsV1AstWidgetsGauge_Unit_Number = "number"
	ApisDashboardsV1AstWidgetsGauge_Unit_Percent = "percent"
	ApisDashboardsV1AstWidgetsGauge_Unit_Seconds = "seconds"
	ApisDashboardsV1AstWidgetsGauge_Unit_Unspecified = "unspecified"
	ApisDashboardsV1AstWidgetsGauge_Unit_Usd = "usd"
	ApisDashboardsV1AstWidgetsGauge_Unit_UsdCents = "usd_cents"
)

// Constants associated with the ApisDashboardsV1AstWidgetsGauge.DataModeType property.
// Data mode type.
const (
	ApisDashboardsV1AstWidgetsGauge_DataModeType_Archive = "archive"
	ApisDashboardsV1AstWidgetsGauge_DataModeType_HighUnspecified = "high_unspecified"
)

// Constants associated with the ApisDashboardsV1AstWidgetsGauge.ThresholdBy property.
// What threshold color should be applied to: value or background.
const (
	ApisDashboardsV1AstWidgetsGauge_ThresholdBy_Background = "background"
	ApisDashboardsV1AstWidgetsGauge_ThresholdBy_Unspecified = "unspecified"
	ApisDashboardsV1AstWidgetsGauge_ThresholdBy_Value = "value"
)

// NewApisDashboardsV1AstWidgetsGauge : Instantiate ApisDashboardsV1AstWidgetsGauge (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsGauge(query ApisDashboardsV1AstWidgetsGaugeQueryIntf, min float64, max float64, showInnerArc bool, showOuterArc bool, unit string, thresholdBy string) (_model *ApisDashboardsV1AstWidgetsGauge, err error) {
	_model = &ApisDashboardsV1AstWidgetsGauge{
		Query: query,
		Min: core.Float64Ptr(min),
		Max: core.Float64Ptr(max),
		ShowInnerArc: core.BoolPtr(showInnerArc),
		ShowOuterArc: core.BoolPtr(showOuterArc),
		Unit: core.StringPtr(unit),
		ThresholdBy: core.StringPtr(thresholdBy),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsGauge unmarshals an instance of ApisDashboardsV1AstWidgetsGauge from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsGauge(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsGauge)
	err = core.UnmarshalModel(m, "query", &obj.Query, UnmarshalApisDashboardsV1AstWidgetsGaugeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "min", &obj.Min)
	if err != nil {
		err = core.SDKErrorf(err, "", "min-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "max", &obj.Max)
	if err != nil {
		err = core.SDKErrorf(err, "", "max-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "show_inner_arc", &obj.ShowInnerArc)
	if err != nil {
		err = core.SDKErrorf(err, "", "show_inner_arc-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "show_outer_arc", &obj.ShowOuterArc)
	if err != nil {
		err = core.SDKErrorf(err, "", "show_outer_arc-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "unit", &obj.Unit)
	if err != nil {
		err = core.SDKErrorf(err, "", "unit-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "thresholds", &obj.Thresholds, UnmarshalApisDashboardsV1AstWidgetsGaugeThreshold)
	if err != nil {
		err = core.SDKErrorf(err, "", "thresholds-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "data_mode_type", &obj.DataModeType)
	if err != nil {
		err = core.SDKErrorf(err, "", "data_mode_type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "threshold_by", &obj.ThresholdBy)
	if err != nil {
		err = core.SDKErrorf(err, "", "threshold_by-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsGaugeDataprimeQuery : Query based on Dataprime language.
type ApisDashboardsV1AstWidgetsGaugeDataprimeQuery struct {
	// Dataprime query.
	DataprimeQuery *ApisDashboardsV1CommonDataprimeQuery `json:"dataprime_query" validate:"required"`

	// Extra filters applied on top of Dataprime query.
	Filters []ApisDashboardsV1AstFilterSourceIntf `json:"filters,omitempty"`
}

// NewApisDashboardsV1AstWidgetsGaugeDataprimeQuery : Instantiate ApisDashboardsV1AstWidgetsGaugeDataprimeQuery (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsGaugeDataprimeQuery(dataprimeQuery *ApisDashboardsV1CommonDataprimeQuery) (_model *ApisDashboardsV1AstWidgetsGaugeDataprimeQuery, err error) {
	_model = &ApisDashboardsV1AstWidgetsGaugeDataprimeQuery{
		DataprimeQuery: dataprimeQuery,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsGaugeDataprimeQuery unmarshals an instance of ApisDashboardsV1AstWidgetsGaugeDataprimeQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsGaugeDataprimeQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsGaugeDataprimeQuery)
	err = core.UnmarshalModel(m, "dataprime_query", &obj.DataprimeQuery, UnmarshalApisDashboardsV1CommonDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsGaugeLogsQuery : Logs specific query.
type ApisDashboardsV1AstWidgetsGaugeLogsQuery struct {
	// Lucene query.
	LuceneQuery *ApisDashboardsV1AstWidgetsCommonLuceneQuery `json:"lucene_query,omitempty"`

	// Aggregations.
	LogsAggregation ApisDashboardsV1CommonLogsAggregationIntf `json:"logs_aggregation,omitempty"`

	// Extra filters applied on top of Lucene query.
	Filters []ApisDashboardsV1AstFilterLogsFilter `json:"filters,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsGaugeLogsQuery unmarshals an instance of ApisDashboardsV1AstWidgetsGaugeLogsQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsGaugeLogsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsGaugeLogsQuery)
	err = core.UnmarshalModel(m, "lucene_query", &obj.LuceneQuery, UnmarshalApisDashboardsV1AstWidgetsCommonLuceneQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "lucene_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "logs_aggregation", &obj.LogsAggregation, UnmarshalApisDashboardsV1CommonLogsAggregation)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs_aggregation-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterLogsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsGaugeMetricsQuery : Metrics specific query.
type ApisDashboardsV1AstWidgetsGaugeMetricsQuery struct {
	// PromQL query.
	PromqlQuery *ApisDashboardsV1AstWidgetsCommonPromQlQuery `json:"promql_query" validate:"required"`

	// Aggregation. When AGGREGATION_UNSPECIFIED is selected, widget uses instant query. Otherwise, it uses range query.
	Aggregation *string `json:"aggregation" validate:"required"`

	// Extra filters applied on top of PromQL query.
	Filters []ApisDashboardsV1AstFilterMetricsFilter `json:"filters,omitempty"`
}

// Constants associated with the ApisDashboardsV1AstWidgetsGaugeMetricsQuery.Aggregation property.
// Aggregation. When AGGREGATION_UNSPECIFIED is selected, widget uses instant query. Otherwise, it uses range query.
const (
	ApisDashboardsV1AstWidgetsGaugeMetricsQuery_Aggregation_Avg = "avg"
	ApisDashboardsV1AstWidgetsGaugeMetricsQuery_Aggregation_Last = "last"
	ApisDashboardsV1AstWidgetsGaugeMetricsQuery_Aggregation_Max = "max"
	ApisDashboardsV1AstWidgetsGaugeMetricsQuery_Aggregation_Min = "min"
	ApisDashboardsV1AstWidgetsGaugeMetricsQuery_Aggregation_Sum = "sum"
	ApisDashboardsV1AstWidgetsGaugeMetricsQuery_Aggregation_Unspecified = "unspecified"
)

// NewApisDashboardsV1AstWidgetsGaugeMetricsQuery : Instantiate ApisDashboardsV1AstWidgetsGaugeMetricsQuery (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsGaugeMetricsQuery(promqlQuery *ApisDashboardsV1AstWidgetsCommonPromQlQuery, aggregation string) (_model *ApisDashboardsV1AstWidgetsGaugeMetricsQuery, err error) {
	_model = &ApisDashboardsV1AstWidgetsGaugeMetricsQuery{
		PromqlQuery: promqlQuery,
		Aggregation: core.StringPtr(aggregation),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsGaugeMetricsQuery unmarshals an instance of ApisDashboardsV1AstWidgetsGaugeMetricsQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsGaugeMetricsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsGaugeMetricsQuery)
	err = core.UnmarshalModel(m, "promql_query", &obj.PromqlQuery, UnmarshalApisDashboardsV1AstWidgetsCommonPromQlQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "promql_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "aggregation", &obj.Aggregation)
	if err != nil {
		err = core.SDKErrorf(err, "", "aggregation-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterMetricsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsGaugeQuery : Data source specific query, defines from where and how to fetch the data.
// Models which "extend" this model:
// - ApisDashboardsV1AstWidgetsGaugeQueryValueMetrics
// - ApisDashboardsV1AstWidgetsGaugeQueryValueLogs
// - ApisDashboardsV1AstWidgetsGaugeQueryValueDataprime
type ApisDashboardsV1AstWidgetsGaugeQuery struct {
	// Metrics specific query.
	Metrics *ApisDashboardsV1AstWidgetsGaugeMetricsQuery `json:"metrics,omitempty"`

	// Logs specific query.
	Logs *ApisDashboardsV1AstWidgetsGaugeLogsQuery `json:"logs,omitempty"`

	// Query based on Dataprime language.
	Dataprime *ApisDashboardsV1AstWidgetsGaugeDataprimeQuery `json:"dataprime,omitempty"`
}
func (*ApisDashboardsV1AstWidgetsGaugeQuery) isaApisDashboardsV1AstWidgetsGaugeQuery() bool {
	return true
}

type ApisDashboardsV1AstWidgetsGaugeQueryIntf interface {
	isaApisDashboardsV1AstWidgetsGaugeQuery() bool
}

// UnmarshalApisDashboardsV1AstWidgetsGaugeQuery unmarshals an instance of ApisDashboardsV1AstWidgetsGaugeQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsGaugeQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsGaugeQuery)
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstWidgetsGaugeMetricsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstWidgetsGaugeLogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "dataprime", &obj.Dataprime, UnmarshalApisDashboardsV1AstWidgetsGaugeDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsGaugeThreshold : Thresholds for the gauge, values at which the gauge changes color.
type ApisDashboardsV1AstWidgetsGaugeThreshold struct {
	// Value at which the color should change.
	From *float64 `json:"from" validate:"required"`

	// Color.
	Color *string `json:"color" validate:"required"`
}

// NewApisDashboardsV1AstWidgetsGaugeThreshold : Instantiate ApisDashboardsV1AstWidgetsGaugeThreshold (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsGaugeThreshold(from float64, color string) (_model *ApisDashboardsV1AstWidgetsGaugeThreshold, err error) {
	_model = &ApisDashboardsV1AstWidgetsGaugeThreshold{
		From: core.Float64Ptr(from),
		Color: core.StringPtr(color),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsGaugeThreshold unmarshals an instance of ApisDashboardsV1AstWidgetsGaugeThreshold from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsGaugeThreshold(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsGaugeThreshold)
	err = core.UnmarshalPrimitive(m, "from", &obj.From)
	if err != nil {
		err = core.SDKErrorf(err, "", "from-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "color", &obj.Color)
	if err != nil {
		err = core.SDKErrorf(err, "", "color-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChart : Horizontal bar chart widget.
type ApisDashboardsV1AstWidgetsHorizontalBarChart struct {
	// Data source specific query, defines from where and how to fetch the data.
	Query ApisDashboardsV1AstWidgetsHorizontalBarChartQueryIntf `json:"query,omitempty"`

	// Maximum number of bars to display in the chart.
	MaxBarsPerChart *int64 `json:"max_bars_per_chart,omitempty"`

	// Template for bar labels.
	GroupNameTemplate *string `json:"group_name_template,omitempty"`

	// Stack definition.
	StackDefinition *ApisDashboardsV1AstWidgetsHorizontalBarChartStackDefinition `json:"stack_definition,omitempty"`

	// Scale type.
	ScaleType *string `json:"scale_type,omitempty"`

	// Coloring mode.
	ColorsBy ApisDashboardsV1AstWidgetsCommonColorsByIntf `json:"colors_by,omitempty"`

	// Unit of the data.
	Unit *string `json:"unit,omitempty"`

	// Whether to display values on the bars.
	DisplayOnBar *bool `json:"display_on_bar,omitempty"`

	// Y-axis view mode.
	YAxisViewBy ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByIntf `json:"y_axis_view_by,omitempty"`

	// Sorting mode.
	SortBy *string `json:"sort_by,omitempty"`

	// Color scheme name.
	ColorScheme *string `json:"color_scheme" validate:"required"`

	// Data mode type.
	DataModeType *string `json:"data_mode_type,omitempty"`
}

// Constants associated with the ApisDashboardsV1AstWidgetsHorizontalBarChart.ScaleType property.
// Scale type.
const (
	ApisDashboardsV1AstWidgetsHorizontalBarChart_ScaleType_Linear = "linear"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_ScaleType_Logarithmic = "logarithmic"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_ScaleType_Unspecified = "unspecified"
)

// Constants associated with the ApisDashboardsV1AstWidgetsHorizontalBarChart.Unit property.
// Unit of the data.
const (
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_Bytes = "bytes"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_BytesIec = "bytes_iec"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_Eur = "eur"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_EurCents = "eur_cents"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_Gbytes = "gbytes"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_Gibytes = "gibytes"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_Kbytes = "kbytes"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_Kibytes = "kibytes"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_Mbytes = "mbytes"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_Mibytes = "mibytes"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_Microseconds = "microseconds"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_Milliseconds = "milliseconds"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_Seconds = "seconds"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_Unspecified = "unspecified"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_Usd = "usd"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_Unit_UsdCents = "usd_cents"
)

// Constants associated with the ApisDashboardsV1AstWidgetsHorizontalBarChart.SortBy property.
// Sorting mode.
const (
	ApisDashboardsV1AstWidgetsHorizontalBarChart_SortBy_Name = "name"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_SortBy_Unspecified = "unspecified"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_SortBy_Value = "value"
)

// Constants associated with the ApisDashboardsV1AstWidgetsHorizontalBarChart.DataModeType property.
// Data mode type.
const (
	ApisDashboardsV1AstWidgetsHorizontalBarChart_DataModeType_Archive = "archive"
	ApisDashboardsV1AstWidgetsHorizontalBarChart_DataModeType_HighUnspecified = "high_unspecified"
)

// NewApisDashboardsV1AstWidgetsHorizontalBarChart : Instantiate ApisDashboardsV1AstWidgetsHorizontalBarChart (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsHorizontalBarChart(colorScheme string) (_model *ApisDashboardsV1AstWidgetsHorizontalBarChart, err error) {
	_model = &ApisDashboardsV1AstWidgetsHorizontalBarChart{
		ColorScheme: core.StringPtr(colorScheme),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChart unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChart from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChart(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChart)
	err = core.UnmarshalModel(m, "query", &obj.Query, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "max_bars_per_chart", &obj.MaxBarsPerChart)
	if err != nil {
		err = core.SDKErrorf(err, "", "max_bars_per_chart-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "group_name_template", &obj.GroupNameTemplate)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_name_template-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "stack_definition", &obj.StackDefinition, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartStackDefinition)
	if err != nil {
		err = core.SDKErrorf(err, "", "stack_definition-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "scale_type", &obj.ScaleType)
	if err != nil {
		err = core.SDKErrorf(err, "", "scale_type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "colors_by", &obj.ColorsBy, UnmarshalApisDashboardsV1AstWidgetsCommonColorsBy)
	if err != nil {
		err = core.SDKErrorf(err, "", "colors_by-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "unit", &obj.Unit)
	if err != nil {
		err = core.SDKErrorf(err, "", "unit-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "display_on_bar", &obj.DisplayOnBar)
	if err != nil {
		err = core.SDKErrorf(err, "", "display_on_bar-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "y_axis_view_by", &obj.YAxisViewBy, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy)
	if err != nil {
		err = core.SDKErrorf(err, "", "y_axis_view_by-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "sort_by", &obj.SortBy)
	if err != nil {
		err = core.SDKErrorf(err, "", "sort_by-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "color_scheme", &obj.ColorScheme)
	if err != nil {
		err = core.SDKErrorf(err, "", "color_scheme-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "data_mode_type", &obj.DataModeType)
	if err != nil {
		err = core.SDKErrorf(err, "", "data_mode_type-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery : Dataprime specific query.
type ApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery struct {
	// Dataprime query.
	DataprimeQuery *ApisDashboardsV1CommonDataprimeQuery `json:"dataprime_query,omitempty"`

	// Extra filter on top of the Dataprime query.
	Filters []ApisDashboardsV1AstFilterSourceIntf `json:"filters,omitempty"`

	// Fields to group by.
	GroupNames []string `json:"group_names,omitempty"`

	// Field to stack by.
	StackedGroupName *string `json:"stacked_group_name,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery)
	err = core.UnmarshalModel(m, "dataprime_query", &obj.DataprimeQuery, UnmarshalApisDashboardsV1CommonDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "group_names", &obj.GroupNames)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_names-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "stacked_group_name", &obj.StackedGroupName)
	if err != nil {
		err = core.SDKErrorf(err, "", "stacked_group_name-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery : Logs specific query.
type ApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery struct {
	// Lucene query.
	LuceneQuery *ApisDashboardsV1AstWidgetsCommonLuceneQuery `json:"lucene_query,omitempty"`

	// Aggregations.
	Aggregation ApisDashboardsV1CommonLogsAggregationIntf `json:"aggregation,omitempty"`

	// Extra filter on top of the Lucene query.
	Filters []ApisDashboardsV1AstFilterLogsFilter `json:"filters,omitempty"`

	// Fields to group by.
	GroupNamesFields []ApisDashboardsV1CommonObservationField `json:"group_names_fields,omitempty"`

	// Field to count distinct values of.
	StackedGroupNameField *ApisDashboardsV1CommonObservationField `json:"stacked_group_name_field,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery)
	err = core.UnmarshalModel(m, "lucene_query", &obj.LuceneQuery, UnmarshalApisDashboardsV1AstWidgetsCommonLuceneQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "lucene_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "aggregation", &obj.Aggregation, UnmarshalApisDashboardsV1CommonLogsAggregation)
	if err != nil {
		err = core.SDKErrorf(err, "", "aggregation-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterLogsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "group_names_fields", &obj.GroupNamesFields, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_names_fields-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "stacked_group_name_field", &obj.StackedGroupNameField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "stacked_group_name_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery : Metrics specific query.
type ApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery struct {
	// PromQL query.
	PromqlQuery *ApisDashboardsV1AstWidgetsCommonPromQlQuery `json:"promql_query,omitempty"`

	// Extra filter on top of the PromQL query.
	Filters []ApisDashboardsV1AstFilterMetricsFilter `json:"filters,omitempty"`

	// Labels to group by.
	GroupNames []string `json:"group_names,omitempty"`

	// Label to stack by.
	StackedGroupName *string `json:"stacked_group_name,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery)
	err = core.UnmarshalModel(m, "promql_query", &obj.PromqlQuery, UnmarshalApisDashboardsV1AstWidgetsCommonPromQlQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "promql_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterMetricsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "group_names", &obj.GroupNames)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_names-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "stacked_group_name", &obj.StackedGroupName)
	if err != nil {
		err = core.SDKErrorf(err, "", "stacked_group_name-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChartQuery : Data source specific query, defines from where and how to fetch the data.
// Models which "extend" this model:
// - ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueLogs
// - ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueMetrics
// - ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueDataprime
type ApisDashboardsV1AstWidgetsHorizontalBarChartQuery struct {
	// Logs specific query.
	Logs *ApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery `json:"logs,omitempty"`

	// Metrics specific query.
	Metrics *ApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery `json:"metrics,omitempty"`

	// Dataprime specific query.
	Dataprime *ApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery `json:"dataprime,omitempty"`
}
func (*ApisDashboardsV1AstWidgetsHorizontalBarChartQuery) isaApisDashboardsV1AstWidgetsHorizontalBarChartQuery() bool {
	return true
}

type ApisDashboardsV1AstWidgetsHorizontalBarChartQueryIntf interface {
	isaApisDashboardsV1AstWidgetsHorizontalBarChartQuery() bool
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQuery unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChartQuery)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "dataprime", &obj.Dataprime, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChartStackDefinition : Stack definition.
type ApisDashboardsV1AstWidgetsHorizontalBarChartStackDefinition struct {
	// Maximum number of slices per bar.
	MaxSlicesPerBar *int64 `json:"max_slices_per_bar,omitempty"`

	// Template for stack slice label.
	StackNameTemplate *string `json:"stack_name_template,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartStackDefinition unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartStackDefinition from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartStackDefinition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChartStackDefinition)
	err = core.UnmarshalPrimitive(m, "max_slices_per_bar", &obj.MaxSlicesPerBar)
	if err != nil {
		err = core.SDKErrorf(err, "", "max_slices_per_bar-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "stack_name_template", &obj.StackNameTemplate)
	if err != nil {
		err = core.SDKErrorf(err, "", "stack_name_template-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy : Y-axis view mode.
// Models which "extend" this model:
// - ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewCategory
// - ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewValue
type ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy struct {
	// View by category.
	Category *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty `json:"category,omitempty"`

	// View by value.
	Value *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty `json:"value,omitempty"`
}
func (*ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy) isaApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy() bool {
	return true
}

type ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByIntf interface {
	isaApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy() bool
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy)
	err = core.UnmarshalModel(m, "category", &obj.Category, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "category-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "value", &obj.Value, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "value-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty : View by category.
type ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty
func (o *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty
func (o *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty
func (o *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty
func (o *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty
func (o *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty : View by value.
type ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty
func (o *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty
func (o *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty
func (o *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty
func (o *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty
func (o *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsLineChart : Line chart widget.
type ApisDashboardsV1AstWidgetsLineChart struct {
	// Legend configuration.
	Legend *ApisDashboardsV1AstWidgetsCommonLegend `json:"legend" validate:"required"`

	// Tooltip configuration.
	Tooltip *ApisDashboardsV1AstWidgetsLineChartTooltip `json:"tooltip" validate:"required"`

	// Query definitions.
	QueryDefinitions []ApisDashboardsV1AstWidgetsLineChartQueryDefinition `json:"query_definitions,omitempty"`

	// Stacked lines.
	StackedLine *string `json:"stacked_line,omitempty"`
}

// Constants associated with the ApisDashboardsV1AstWidgetsLineChart.StackedLine property.
// Stacked lines.
const (
	ApisDashboardsV1AstWidgetsLineChart_StackedLine_Absolute = "absolute"
	ApisDashboardsV1AstWidgetsLineChart_StackedLine_Relative = "relative"
	ApisDashboardsV1AstWidgetsLineChart_StackedLine_Unspecified = "unspecified"
)

// NewApisDashboardsV1AstWidgetsLineChart : Instantiate ApisDashboardsV1AstWidgetsLineChart (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsLineChart(legend *ApisDashboardsV1AstWidgetsCommonLegend, tooltip *ApisDashboardsV1AstWidgetsLineChartTooltip) (_model *ApisDashboardsV1AstWidgetsLineChart, err error) {
	_model = &ApisDashboardsV1AstWidgetsLineChart{
		Legend: legend,
		Tooltip: tooltip,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsLineChart unmarshals an instance of ApisDashboardsV1AstWidgetsLineChart from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsLineChart(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsLineChart)
	err = core.UnmarshalModel(m, "legend", &obj.Legend, UnmarshalApisDashboardsV1AstWidgetsCommonLegend)
	if err != nil {
		err = core.SDKErrorf(err, "", "legend-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "tooltip", &obj.Tooltip, UnmarshalApisDashboardsV1AstWidgetsLineChartTooltip)
	if err != nil {
		err = core.SDKErrorf(err, "", "tooltip-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "query_definitions", &obj.QueryDefinitions, UnmarshalApisDashboardsV1AstWidgetsLineChartQueryDefinition)
	if err != nil {
		err = core.SDKErrorf(err, "", "query_definitions-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "stacked_line", &obj.StackedLine)
	if err != nil {
		err = core.SDKErrorf(err, "", "stacked_line-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsLineChartDataprimeQuery : Dataprime language based query.
type ApisDashboardsV1AstWidgetsLineChartDataprimeQuery struct {
	// Dataprime query.
	DataprimeQuery *ApisDashboardsV1CommonDataprimeQuery `json:"dataprime_query" validate:"required"`

	// Filters to be applied to query results.
	Filters []ApisDashboardsV1AstFilterSourceIntf `json:"filters,omitempty"`
}

// NewApisDashboardsV1AstWidgetsLineChartDataprimeQuery : Instantiate ApisDashboardsV1AstWidgetsLineChartDataprimeQuery (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsLineChartDataprimeQuery(dataprimeQuery *ApisDashboardsV1CommonDataprimeQuery) (_model *ApisDashboardsV1AstWidgetsLineChartDataprimeQuery, err error) {
	_model = &ApisDashboardsV1AstWidgetsLineChartDataprimeQuery{
		DataprimeQuery: dataprimeQuery,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsLineChartDataprimeQuery unmarshals an instance of ApisDashboardsV1AstWidgetsLineChartDataprimeQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsLineChartDataprimeQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsLineChartDataprimeQuery)
	err = core.UnmarshalModel(m, "dataprime_query", &obj.DataprimeQuery, UnmarshalApisDashboardsV1CommonDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsLineChartLogsQuery : Logs specific query.
type ApisDashboardsV1AstWidgetsLineChartLogsQuery struct {
	// Lucene query.
	LuceneQuery *ApisDashboardsV1AstWidgetsCommonLuceneQuery `json:"lucene_query,omitempty"`

	// Group by fields (deprecated).
	GroupBy []string `json:"group_by,omitempty"`

	// Aggregations.
	Aggregations []ApisDashboardsV1CommonLogsAggregationIntf `json:"aggregations,omitempty"`

	// Extra filtering on top of the Lucene query.
	Filters []ApisDashboardsV1AstFilterLogsFilter `json:"filters,omitempty"`

	// Group by fields.
	GroupBys []ApisDashboardsV1CommonObservationField `json:"group_bys,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsLineChartLogsQuery unmarshals an instance of ApisDashboardsV1AstWidgetsLineChartLogsQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsLineChartLogsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsLineChartLogsQuery)
	err = core.UnmarshalModel(m, "lucene_query", &obj.LuceneQuery, UnmarshalApisDashboardsV1AstWidgetsCommonLuceneQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "lucene_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "group_by", &obj.GroupBy)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_by-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "aggregations", &obj.Aggregations, UnmarshalApisDashboardsV1CommonLogsAggregation)
	if err != nil {
		err = core.SDKErrorf(err, "", "aggregations-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterLogsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "group_bys", &obj.GroupBys, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_bys-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsLineChartMetricsQuery : Metrics specific query.
type ApisDashboardsV1AstWidgetsLineChartMetricsQuery struct {
	// PromQL query.
	PromqlQuery *ApisDashboardsV1AstWidgetsCommonPromQlQuery `json:"promql_query,omitempty"`

	// Filtering to be applied to query results.
	Filters []ApisDashboardsV1AstFilterMetricsFilter `json:"filters,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsLineChartMetricsQuery unmarshals an instance of ApisDashboardsV1AstWidgetsLineChartMetricsQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsLineChartMetricsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsLineChartMetricsQuery)
	err = core.UnmarshalModel(m, "promql_query", &obj.PromqlQuery, UnmarshalApisDashboardsV1AstWidgetsCommonPromQlQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "promql_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterMetricsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsLineChartQuery : Data source specific query, defines from where and how to fetch the data.
// Models which "extend" this model:
// - ApisDashboardsV1AstWidgetsLineChartQueryValueLogs
// - ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics
// - ApisDashboardsV1AstWidgetsLineChartQueryValueDataprime
type ApisDashboardsV1AstWidgetsLineChartQuery struct {
	// Logs specific query.
	Logs *ApisDashboardsV1AstWidgetsLineChartLogsQuery `json:"logs,omitempty"`

	// Metrics specific query.
	Metrics *ApisDashboardsV1AstWidgetsLineChartMetricsQuery `json:"metrics,omitempty"`

	// Dataprime language based query.
	Dataprime *ApisDashboardsV1AstWidgetsLineChartDataprimeQuery `json:"dataprime,omitempty"`
}
func (*ApisDashboardsV1AstWidgetsLineChartQuery) isaApisDashboardsV1AstWidgetsLineChartQuery() bool {
	return true
}

type ApisDashboardsV1AstWidgetsLineChartQueryIntf interface {
	isaApisDashboardsV1AstWidgetsLineChartQuery() bool
}

// UnmarshalApisDashboardsV1AstWidgetsLineChartQuery unmarshals an instance of ApisDashboardsV1AstWidgetsLineChartQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsLineChartQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsLineChartQuery)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstWidgetsLineChartLogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstWidgetsLineChartMetricsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "dataprime", &obj.Dataprime, UnmarshalApisDashboardsV1AstWidgetsLineChartDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsLineChartQueryDefinition : Query definitions.
type ApisDashboardsV1AstWidgetsLineChartQueryDefinition struct {
	// Unique identifier of the query within the widget.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Data source specific query, defines from where and how to fetch the data.
	Query ApisDashboardsV1AstWidgetsLineChartQueryIntf `json:"query" validate:"required"`

	// Template for series name in legend and tooltip.
	SeriesNameTemplate *string `json:"series_name_template,omitempty"`

	// Maximum number of series to display.
	SeriesCountLimit *string `json:"series_count_limit,omitempty"`

	// Unit of the data.
	Unit *string `json:"unit,omitempty"`

	// Scale type.
	ScaleType *string `json:"scale_type,omitempty"`

	// Query name.
	Name *string `json:"name,omitempty"`

	// Whether data for this query should be visible on the chart.
	IsVisible *bool `json:"is_visible" validate:"required"`

	// Color scheme for the series.
	ColorScheme *string `json:"color_scheme,omitempty"`

	// Resolution of the data.
	Resolution *ApisDashboardsV1AstWidgetsLineChartResolution `json:"resolution" validate:"required"`

	// Data mode type.
	DataModeType *string `json:"data_mode_type,omitempty"`
}

// Constants associated with the ApisDashboardsV1AstWidgetsLineChartQueryDefinition.Unit property.
// Unit of the data.
const (
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_Bytes = "bytes"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_BytesIec = "bytes_iec"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_Eur = "eur"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_EurCents = "eur_cents"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_Gbytes = "gbytes"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_Gibytes = "gibytes"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_Kbytes = "kbytes"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_Kibytes = "kibytes"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_Mbytes = "mbytes"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_Mibytes = "mibytes"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_Microseconds = "microseconds"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_Milliseconds = "milliseconds"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_Seconds = "seconds"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_Unspecified = "unspecified"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_Usd = "usd"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_Unit_UsdCents = "usd_cents"
)

// Constants associated with the ApisDashboardsV1AstWidgetsLineChartQueryDefinition.ScaleType property.
// Scale type.
const (
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_ScaleType_Linear = "linear"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_ScaleType_Logarithmic = "logarithmic"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_ScaleType_Unspecified = "unspecified"
)

// Constants associated with the ApisDashboardsV1AstWidgetsLineChartQueryDefinition.DataModeType property.
// Data mode type.
const (
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_DataModeType_Archive = "archive"
	ApisDashboardsV1AstWidgetsLineChartQueryDefinition_DataModeType_HighUnspecified = "high_unspecified"
)

// NewApisDashboardsV1AstWidgetsLineChartQueryDefinition : Instantiate ApisDashboardsV1AstWidgetsLineChartQueryDefinition (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsLineChartQueryDefinition(id *strfmt.UUID, query ApisDashboardsV1AstWidgetsLineChartQueryIntf, isVisible bool, resolution *ApisDashboardsV1AstWidgetsLineChartResolution) (_model *ApisDashboardsV1AstWidgetsLineChartQueryDefinition, err error) {
	_model = &ApisDashboardsV1AstWidgetsLineChartQueryDefinition{
		ID: id,
		Query: query,
		IsVisible: core.BoolPtr(isVisible),
		Resolution: resolution,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsLineChartQueryDefinition unmarshals an instance of ApisDashboardsV1AstWidgetsLineChartQueryDefinition from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsLineChartQueryDefinition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "query", &obj.Query, UnmarshalApisDashboardsV1AstWidgetsLineChartQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "series_name_template", &obj.SeriesNameTemplate)
	if err != nil {
		err = core.SDKErrorf(err, "", "series_name_template-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "series_count_limit", &obj.SeriesCountLimit)
	if err != nil {
		err = core.SDKErrorf(err, "", "series_count_limit-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "unit", &obj.Unit)
	if err != nil {
		err = core.SDKErrorf(err, "", "unit-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "scale_type", &obj.ScaleType)
	if err != nil {
		err = core.SDKErrorf(err, "", "scale_type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "is_visible", &obj.IsVisible)
	if err != nil {
		err = core.SDKErrorf(err, "", "is_visible-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "color_scheme", &obj.ColorScheme)
	if err != nil {
		err = core.SDKErrorf(err, "", "color_scheme-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "resolution", &obj.Resolution, UnmarshalApisDashboardsV1AstWidgetsLineChartResolution)
	if err != nil {
		err = core.SDKErrorf(err, "", "resolution-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "data_mode_type", &obj.DataModeType)
	if err != nil {
		err = core.SDKErrorf(err, "", "data_mode_type-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsLineChartResolution : Resolution of the data.
type ApisDashboardsV1AstWidgetsLineChartResolution struct {
	// Interval between data points.
	Interval *string `json:"interval,omitempty"`

	// Maximum number of data points to fetch.
	BucketsPresented *int64 `json:"buckets_presented,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsLineChartResolution unmarshals an instance of ApisDashboardsV1AstWidgetsLineChartResolution from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsLineChartResolution(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsLineChartResolution)
	err = core.UnmarshalPrimitive(m, "interval", &obj.Interval)
	if err != nil {
		err = core.SDKErrorf(err, "", "interval-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "buckets_presented", &obj.BucketsPresented)
	if err != nil {
		err = core.SDKErrorf(err, "", "buckets_presented-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsLineChartTooltip : Tooltip configuration.
type ApisDashboardsV1AstWidgetsLineChartTooltip struct {
	// Whether to show labels in the tooltip.
	ShowLabels *bool `json:"show_labels,omitempty"`

	// Tooltip type.
	Type *string `json:"type,omitempty"`
}

// Constants associated with the ApisDashboardsV1AstWidgetsLineChartTooltip.Type property.
// Tooltip type.
const (
	ApisDashboardsV1AstWidgetsLineChartTooltip_Type_All = "all"
	ApisDashboardsV1AstWidgetsLineChartTooltip_Type_Single = "single"
	ApisDashboardsV1AstWidgetsLineChartTooltip_Type_Unspecified = "unspecified"
)

// UnmarshalApisDashboardsV1AstWidgetsLineChartTooltip unmarshals an instance of ApisDashboardsV1AstWidgetsLineChartTooltip from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsLineChartTooltip(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsLineChartTooltip)
	err = core.UnmarshalPrimitive(m, "show_labels", &obj.ShowLabels)
	if err != nil {
		err = core.SDKErrorf(err, "", "show_labels-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		err = core.SDKErrorf(err, "", "type-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsMarkdown : Markdown widget.
type ApisDashboardsV1AstWidgetsMarkdown struct {
	// Markdown text to render.
	MarkdownText *string `json:"markdown_text" validate:"required"`

	// Tooltip text on hover.
	TooltipText *string `json:"tooltip_text,omitempty"`
}

// NewApisDashboardsV1AstWidgetsMarkdown : Instantiate ApisDashboardsV1AstWidgetsMarkdown (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsMarkdown(markdownText string) (_model *ApisDashboardsV1AstWidgetsMarkdown, err error) {
	_model = &ApisDashboardsV1AstWidgetsMarkdown{
		MarkdownText: core.StringPtr(markdownText),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsMarkdown unmarshals an instance of ApisDashboardsV1AstWidgetsMarkdown from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsMarkdown(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsMarkdown)
	err = core.UnmarshalPrimitive(m, "markdown_text", &obj.MarkdownText)
	if err != nil {
		err = core.SDKErrorf(err, "", "markdown_text-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "tooltip_text", &obj.TooltipText)
	if err != nil {
		err = core.SDKErrorf(err, "", "tooltip_text-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsPieChart : Pie chart widget.
type ApisDashboardsV1AstWidgetsPieChart struct {
	// Data source specific query, defines from where and how to fetch the data.
	Query ApisDashboardsV1AstWidgetsPieChartQueryIntf `json:"query" validate:"required"`

	// Maximum number of slices to display in the chart.
	MaxSlicesPerChart *int64 `json:"max_slices_per_chart" validate:"required"`

	// Minimum percentage of a slice to be displayed.
	MinSlicePercentage *int64 `json:"min_slice_percentage" validate:"required"`

	// Stack definition.
	StackDefinition *ApisDashboardsV1AstWidgetsPieChartStackDefinition `json:"stack_definition" validate:"required"`

	// Label settings.
	LabelDefinition *ApisDashboardsV1AstWidgetsPieChartLabelDefinition `json:"label_definition" validate:"required"`

	// Controls whether to show the legend.
	ShowLegend *bool `json:"show_legend" validate:"required"`

	// Template for group labels.
	GroupNameTemplate *string `json:"group_name_template,omitempty"`

	// Unit of the data.
	Unit *string `json:"unit,omitempty"`

	// Color scheme name.
	ColorScheme *string `json:"color_scheme" validate:"required"`

	// Data mode type.
	DataModeType *string `json:"data_mode_type,omitempty"`
}

// Constants associated with the ApisDashboardsV1AstWidgetsPieChart.Unit property.
// Unit of the data.
const (
	ApisDashboardsV1AstWidgetsPieChart_Unit_Bytes = "bytes"
	ApisDashboardsV1AstWidgetsPieChart_Unit_BytesIec = "bytes_iec"
	ApisDashboardsV1AstWidgetsPieChart_Unit_Eur = "eur"
	ApisDashboardsV1AstWidgetsPieChart_Unit_EurCents = "eur_cents"
	ApisDashboardsV1AstWidgetsPieChart_Unit_Gbytes = "gbytes"
	ApisDashboardsV1AstWidgetsPieChart_Unit_Gibytes = "gibytes"
	ApisDashboardsV1AstWidgetsPieChart_Unit_Kbytes = "kbytes"
	ApisDashboardsV1AstWidgetsPieChart_Unit_Kibytes = "kibytes"
	ApisDashboardsV1AstWidgetsPieChart_Unit_Mbytes = "mbytes"
	ApisDashboardsV1AstWidgetsPieChart_Unit_Mibytes = "mibytes"
	ApisDashboardsV1AstWidgetsPieChart_Unit_Microseconds = "microseconds"
	ApisDashboardsV1AstWidgetsPieChart_Unit_Milliseconds = "milliseconds"
	ApisDashboardsV1AstWidgetsPieChart_Unit_Seconds = "seconds"
	ApisDashboardsV1AstWidgetsPieChart_Unit_Unspecified = "unspecified"
	ApisDashboardsV1AstWidgetsPieChart_Unit_Usd = "usd"
	ApisDashboardsV1AstWidgetsPieChart_Unit_UsdCents = "usd_cents"
)

// Constants associated with the ApisDashboardsV1AstWidgetsPieChart.DataModeType property.
// Data mode type.
const (
	ApisDashboardsV1AstWidgetsPieChart_DataModeType_Archive = "archive"
	ApisDashboardsV1AstWidgetsPieChart_DataModeType_HighUnspecified = "high_unspecified"
)

// NewApisDashboardsV1AstWidgetsPieChart : Instantiate ApisDashboardsV1AstWidgetsPieChart (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsPieChart(query ApisDashboardsV1AstWidgetsPieChartQueryIntf, maxSlicesPerChart int64, minSlicePercentage int64, stackDefinition *ApisDashboardsV1AstWidgetsPieChartStackDefinition, labelDefinition *ApisDashboardsV1AstWidgetsPieChartLabelDefinition, showLegend bool, colorScheme string) (_model *ApisDashboardsV1AstWidgetsPieChart, err error) {
	_model = &ApisDashboardsV1AstWidgetsPieChart{
		Query: query,
		MaxSlicesPerChart: core.Int64Ptr(maxSlicesPerChart),
		MinSlicePercentage: core.Int64Ptr(minSlicePercentage),
		StackDefinition: stackDefinition,
		LabelDefinition: labelDefinition,
		ShowLegend: core.BoolPtr(showLegend),
		ColorScheme: core.StringPtr(colorScheme),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsPieChart unmarshals an instance of ApisDashboardsV1AstWidgetsPieChart from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsPieChart(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsPieChart)
	err = core.UnmarshalModel(m, "query", &obj.Query, UnmarshalApisDashboardsV1AstWidgetsPieChartQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "max_slices_per_chart", &obj.MaxSlicesPerChart)
	if err != nil {
		err = core.SDKErrorf(err, "", "max_slices_per_chart-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "min_slice_percentage", &obj.MinSlicePercentage)
	if err != nil {
		err = core.SDKErrorf(err, "", "min_slice_percentage-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "stack_definition", &obj.StackDefinition, UnmarshalApisDashboardsV1AstWidgetsPieChartStackDefinition)
	if err != nil {
		err = core.SDKErrorf(err, "", "stack_definition-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "label_definition", &obj.LabelDefinition, UnmarshalApisDashboardsV1AstWidgetsPieChartLabelDefinition)
	if err != nil {
		err = core.SDKErrorf(err, "", "label_definition-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "show_legend", &obj.ShowLegend)
	if err != nil {
		err = core.SDKErrorf(err, "", "show_legend-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "group_name_template", &obj.GroupNameTemplate)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_name_template-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "unit", &obj.Unit)
	if err != nil {
		err = core.SDKErrorf(err, "", "unit-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "color_scheme", &obj.ColorScheme)
	if err != nil {
		err = core.SDKErrorf(err, "", "color_scheme-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "data_mode_type", &obj.DataModeType)
	if err != nil {
		err = core.SDKErrorf(err, "", "data_mode_type-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsPieChartDataprimeQuery : Query based on Dataprime language.
type ApisDashboardsV1AstWidgetsPieChartDataprimeQuery struct {
	// Dataprime query.
	DataprimeQuery *ApisDashboardsV1CommonDataprimeQuery `json:"dataprime_query" validate:"required"`

	// Extra filters on top of Dataprime query.
	Filters []ApisDashboardsV1AstFilterSourceIntf `json:"filters,omitempty"`

	// Fields to group by.
	GroupNames []string `json:"group_names,omitempty"`

	// Field to stack by.
	StackedGroupName *string `json:"stacked_group_name,omitempty"`
}

// NewApisDashboardsV1AstWidgetsPieChartDataprimeQuery : Instantiate ApisDashboardsV1AstWidgetsPieChartDataprimeQuery (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsPieChartDataprimeQuery(dataprimeQuery *ApisDashboardsV1CommonDataprimeQuery) (_model *ApisDashboardsV1AstWidgetsPieChartDataprimeQuery, err error) {
	_model = &ApisDashboardsV1AstWidgetsPieChartDataprimeQuery{
		DataprimeQuery: dataprimeQuery,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsPieChartDataprimeQuery unmarshals an instance of ApisDashboardsV1AstWidgetsPieChartDataprimeQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsPieChartDataprimeQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsPieChartDataprimeQuery)
	err = core.UnmarshalModel(m, "dataprime_query", &obj.DataprimeQuery, UnmarshalApisDashboardsV1CommonDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "group_names", &obj.GroupNames)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_names-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "stacked_group_name", &obj.StackedGroupName)
	if err != nil {
		err = core.SDKErrorf(err, "", "stacked_group_name-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsPieChartLabelDefinition : Label settings.
type ApisDashboardsV1AstWidgetsPieChartLabelDefinition struct {
	// Source of the label.
	LabelSource *string `json:"label_source,omitempty"`

	// Controls whether to show the label.
	IsVisible *bool `json:"is_visible,omitempty"`

	// Controls whether to show the name.
	ShowName *bool `json:"show_name,omitempty"`

	// Controls whether to show the value.
	ShowValue *bool `json:"show_value,omitempty"`

	// Controls whether to show the percentage.
	ShowPercentage *bool `json:"show_percentage,omitempty"`
}

// Constants associated with the ApisDashboardsV1AstWidgetsPieChartLabelDefinition.LabelSource property.
// Source of the label.
const (
	ApisDashboardsV1AstWidgetsPieChartLabelDefinition_LabelSource_Inner = "inner"
	ApisDashboardsV1AstWidgetsPieChartLabelDefinition_LabelSource_Stack = "stack"
	ApisDashboardsV1AstWidgetsPieChartLabelDefinition_LabelSource_Unspecified = "unspecified"
)

// UnmarshalApisDashboardsV1AstWidgetsPieChartLabelDefinition unmarshals an instance of ApisDashboardsV1AstWidgetsPieChartLabelDefinition from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsPieChartLabelDefinition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsPieChartLabelDefinition)
	err = core.UnmarshalPrimitive(m, "label_source", &obj.LabelSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "label_source-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "is_visible", &obj.IsVisible)
	if err != nil {
		err = core.SDKErrorf(err, "", "is_visible-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "show_name", &obj.ShowName)
	if err != nil {
		err = core.SDKErrorf(err, "", "show_name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "show_value", &obj.ShowValue)
	if err != nil {
		err = core.SDKErrorf(err, "", "show_value-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "show_percentage", &obj.ShowPercentage)
	if err != nil {
		err = core.SDKErrorf(err, "", "show_percentage-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsPieChartLogsQuery : Logs specific query.
type ApisDashboardsV1AstWidgetsPieChartLogsQuery struct {
	// Lucene query.
	LuceneQuery *ApisDashboardsV1AstWidgetsCommonLuceneQuery `json:"lucene_query,omitempty"`

	// Aggregations.
	Aggregation ApisDashboardsV1CommonLogsAggregationIntf `json:"aggregation" validate:"required"`

	// Extra filters on top of Lucene query.
	Filters []ApisDashboardsV1AstFilterLogsFilter `json:"filters,omitempty"`

	// Fields to group by.
	GroupNamesFields []ApisDashboardsV1CommonObservationField `json:"group_names_fields,omitempty"`

	// Field to count distinct values of.
	StackedGroupNameField *ApisDashboardsV1CommonObservationField `json:"stacked_group_name_field,omitempty"`
}

// NewApisDashboardsV1AstWidgetsPieChartLogsQuery : Instantiate ApisDashboardsV1AstWidgetsPieChartLogsQuery (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsPieChartLogsQuery(aggregation ApisDashboardsV1CommonLogsAggregationIntf) (_model *ApisDashboardsV1AstWidgetsPieChartLogsQuery, err error) {
	_model = &ApisDashboardsV1AstWidgetsPieChartLogsQuery{
		Aggregation: aggregation,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsPieChartLogsQuery unmarshals an instance of ApisDashboardsV1AstWidgetsPieChartLogsQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsPieChartLogsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsPieChartLogsQuery)
	err = core.UnmarshalModel(m, "lucene_query", &obj.LuceneQuery, UnmarshalApisDashboardsV1AstWidgetsCommonLuceneQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "lucene_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "aggregation", &obj.Aggregation, UnmarshalApisDashboardsV1CommonLogsAggregation)
	if err != nil {
		err = core.SDKErrorf(err, "", "aggregation-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterLogsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "group_names_fields", &obj.GroupNamesFields, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_names_fields-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "stacked_group_name_field", &obj.StackedGroupNameField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "stacked_group_name_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsPieChartMetricsQuery : Metrics specific query.
type ApisDashboardsV1AstWidgetsPieChartMetricsQuery struct {
	// PromQL query.
	PromqlQuery *ApisDashboardsV1AstWidgetsCommonPromQlQuery `json:"promql_query" validate:"required"`

	// Extra filters on top of PromQL query.
	Filters []ApisDashboardsV1AstFilterMetricsFilter `json:"filters,omitempty"`

	// Fields to group by.
	GroupNames []string `json:"group_names,omitempty"`

	// Field to stack by.
	StackedGroupName *string `json:"stacked_group_name,omitempty"`
}

// NewApisDashboardsV1AstWidgetsPieChartMetricsQuery : Instantiate ApisDashboardsV1AstWidgetsPieChartMetricsQuery (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1AstWidgetsPieChartMetricsQuery(promqlQuery *ApisDashboardsV1AstWidgetsCommonPromQlQuery) (_model *ApisDashboardsV1AstWidgetsPieChartMetricsQuery, err error) {
	_model = &ApisDashboardsV1AstWidgetsPieChartMetricsQuery{
		PromqlQuery: promqlQuery,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1AstWidgetsPieChartMetricsQuery unmarshals an instance of ApisDashboardsV1AstWidgetsPieChartMetricsQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsPieChartMetricsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsPieChartMetricsQuery)
	err = core.UnmarshalModel(m, "promql_query", &obj.PromqlQuery, UnmarshalApisDashboardsV1AstWidgetsCommonPromQlQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "promql_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilterMetricsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "group_names", &obj.GroupNames)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_names-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "stacked_group_name", &obj.StackedGroupName)
	if err != nil {
		err = core.SDKErrorf(err, "", "stacked_group_name-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsPieChartQuery : Data source specific query, defines from where and how to fetch the data.
// Models which "extend" this model:
// - ApisDashboardsV1AstWidgetsPieChartQueryValueLogs
// - ApisDashboardsV1AstWidgetsPieChartQueryValueMetrics
// - ApisDashboardsV1AstWidgetsPieChartQueryValueDataprime
type ApisDashboardsV1AstWidgetsPieChartQuery struct {
	// Logs specific query.
	Logs *ApisDashboardsV1AstWidgetsPieChartLogsQuery `json:"logs,omitempty"`

	// Metrics specific query.
	Metrics *ApisDashboardsV1AstWidgetsPieChartMetricsQuery `json:"metrics,omitempty"`

	// Query based on Dataprime language.
	Dataprime *ApisDashboardsV1AstWidgetsPieChartDataprimeQuery `json:"dataprime,omitempty"`
}
func (*ApisDashboardsV1AstWidgetsPieChartQuery) isaApisDashboardsV1AstWidgetsPieChartQuery() bool {
	return true
}

type ApisDashboardsV1AstWidgetsPieChartQueryIntf interface {
	isaApisDashboardsV1AstWidgetsPieChartQuery() bool
}

// UnmarshalApisDashboardsV1AstWidgetsPieChartQuery unmarshals an instance of ApisDashboardsV1AstWidgetsPieChartQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsPieChartQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsPieChartQuery)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstWidgetsPieChartLogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstWidgetsPieChartMetricsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "dataprime", &obj.Dataprime, UnmarshalApisDashboardsV1AstWidgetsPieChartDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsPieChartStackDefinition : Stack definition.
type ApisDashboardsV1AstWidgetsPieChartStackDefinition struct {
	// Maximum number of slices per stack.
	MaxSlicesPerStack *int64 `json:"max_slices_per_stack,omitempty"`

	// Template for stack labels.
	StackNameTemplate *string `json:"stack_name_template,omitempty"`
}

// UnmarshalApisDashboardsV1AstWidgetsPieChartStackDefinition unmarshals an instance of ApisDashboardsV1AstWidgetsPieChartStackDefinition from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsPieChartStackDefinition(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsPieChartStackDefinition)
	err = core.UnmarshalPrimitive(m, "max_slices_per_stack", &obj.MaxSlicesPerStack)
	if err != nil {
		err = core.SDKErrorf(err, "", "max_slices_per_stack-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "stack_name_template", &obj.StackNameTemplate)
	if err != nil {
		err = core.SDKErrorf(err, "", "stack_name_template-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonDataprimeQuery : Dataprime query.
type ApisDashboardsV1CommonDataprimeQuery struct {
	// The query string.
	Text *string `json:"text,omitempty"`
}

// UnmarshalApisDashboardsV1CommonDataprimeQuery unmarshals an instance of ApisDashboardsV1CommonDataprimeQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonDataprimeQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonDataprimeQuery)
	err = core.UnmarshalPrimitive(m, "text", &obj.Text)
	if err != nil {
		err = core.SDKErrorf(err, "", "text-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregation : Aggregations.
// Models which "extend" this model:
// - ApisDashboardsV1CommonLogsAggregationValueCount
// - ApisDashboardsV1CommonLogsAggregationValueCountDistinct
// - ApisDashboardsV1CommonLogsAggregationValueSum
// - ApisDashboardsV1CommonLogsAggregationValueAverage
// - ApisDashboardsV1CommonLogsAggregationValueMin
// - ApisDashboardsV1CommonLogsAggregationValueMax
// - ApisDashboardsV1CommonLogsAggregationValuePercentile
type ApisDashboardsV1CommonLogsAggregation struct {
	// Count the number of entries.
	Count *ApisDashboardsV1CommonLogsAggregationCountEmpty `json:"count,omitempty"`

	// Count the number of distinct values of log field.
	CountDistinct *ApisDashboardsV1CommonLogsAggregationCountDistinct `json:"count_distinct,omitempty"`

	// Sum values of log field.
	Sum *ApisDashboardsV1CommonLogsAggregationSum `json:"sum,omitempty"`

	// Calculate average value of log field.
	Average *ApisDashboardsV1CommonLogsAggregationAverage `json:"average,omitempty"`

	// Calculate minimum value of log field.
	Min *ApisDashboardsV1CommonLogsAggregationMin `json:"min,omitempty"`

	// Calculate maximum value of log field.
	Max *ApisDashboardsV1CommonLogsAggregationMax `json:"max,omitempty"`

	// Calculate percentile value of log field.
	Percentile *ApisDashboardsV1CommonLogsAggregationPercentile `json:"percentile,omitempty"`
}
func (*ApisDashboardsV1CommonLogsAggregation) isaApisDashboardsV1CommonLogsAggregation() bool {
	return true
}

type ApisDashboardsV1CommonLogsAggregationIntf interface {
	isaApisDashboardsV1CommonLogsAggregation() bool
}

// UnmarshalApisDashboardsV1CommonLogsAggregation unmarshals an instance of ApisDashboardsV1CommonLogsAggregation from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregation(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregation)
	err = core.UnmarshalModel(m, "count", &obj.Count, UnmarshalApisDashboardsV1CommonLogsAggregationCountEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "count-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "count_distinct", &obj.CountDistinct, UnmarshalApisDashboardsV1CommonLogsAggregationCountDistinct)
	if err != nil {
		err = core.SDKErrorf(err, "", "count_distinct-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "sum", &obj.Sum, UnmarshalApisDashboardsV1CommonLogsAggregationSum)
	if err != nil {
		err = core.SDKErrorf(err, "", "sum-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "average", &obj.Average, UnmarshalApisDashboardsV1CommonLogsAggregationAverage)
	if err != nil {
		err = core.SDKErrorf(err, "", "average-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "min", &obj.Min, UnmarshalApisDashboardsV1CommonLogsAggregationMin)
	if err != nil {
		err = core.SDKErrorf(err, "", "min-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "max", &obj.Max, UnmarshalApisDashboardsV1CommonLogsAggregationMax)
	if err != nil {
		err = core.SDKErrorf(err, "", "max-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "percentile", &obj.Percentile, UnmarshalApisDashboardsV1CommonLogsAggregationPercentile)
	if err != nil {
		err = core.SDKErrorf(err, "", "percentile-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationAverage : Calculate average value of log field.
type ApisDashboardsV1CommonLogsAggregationAverage struct {
	// Field to count distinct values of.
	ObservationField *ApisDashboardsV1CommonObservationField `json:"observation_field" validate:"required"`
}

// NewApisDashboardsV1CommonLogsAggregationAverage : Instantiate ApisDashboardsV1CommonLogsAggregationAverage (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1CommonLogsAggregationAverage(observationField *ApisDashboardsV1CommonObservationField) (_model *ApisDashboardsV1CommonLogsAggregationAverage, err error) {
	_model = &ApisDashboardsV1CommonLogsAggregationAverage{
		ObservationField: observationField,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1CommonLogsAggregationAverage unmarshals an instance of ApisDashboardsV1CommonLogsAggregationAverage from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationAverage(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationAverage)
	err = core.UnmarshalModel(m, "observation_field", &obj.ObservationField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "observation_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationCountDistinct : Count the number of distinct values of log field.
type ApisDashboardsV1CommonLogsAggregationCountDistinct struct {
	// Field to count distinct values of.
	ObservationField *ApisDashboardsV1CommonObservationField `json:"observation_field" validate:"required"`
}

// NewApisDashboardsV1CommonLogsAggregationCountDistinct : Instantiate ApisDashboardsV1CommonLogsAggregationCountDistinct (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1CommonLogsAggregationCountDistinct(observationField *ApisDashboardsV1CommonObservationField) (_model *ApisDashboardsV1CommonLogsAggregationCountDistinct, err error) {
	_model = &ApisDashboardsV1CommonLogsAggregationCountDistinct{
		ObservationField: observationField,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1CommonLogsAggregationCountDistinct unmarshals an instance of ApisDashboardsV1CommonLogsAggregationCountDistinct from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationCountDistinct(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationCountDistinct)
	err = core.UnmarshalModel(m, "observation_field", &obj.ObservationField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "observation_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationCountEmpty : Count the number of entries.
type ApisDashboardsV1CommonLogsAggregationCountEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ApisDashboardsV1CommonLogsAggregationCountEmpty
func (o *ApisDashboardsV1CommonLogsAggregationCountEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ApisDashboardsV1CommonLogsAggregationCountEmpty
func (o *ApisDashboardsV1CommonLogsAggregationCountEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ApisDashboardsV1CommonLogsAggregationCountEmpty
func (o *ApisDashboardsV1CommonLogsAggregationCountEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ApisDashboardsV1CommonLogsAggregationCountEmpty
func (o *ApisDashboardsV1CommonLogsAggregationCountEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ApisDashboardsV1CommonLogsAggregationCountEmpty
func (o *ApisDashboardsV1CommonLogsAggregationCountEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1CommonLogsAggregationCountEmpty unmarshals an instance of ApisDashboardsV1CommonLogsAggregationCountEmpty from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationCountEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationCountEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationMax : Calculate maximum value of log field.
type ApisDashboardsV1CommonLogsAggregationMax struct {
	// Field to count distinct values of.
	ObservationField *ApisDashboardsV1CommonObservationField `json:"observation_field" validate:"required"`
}

// NewApisDashboardsV1CommonLogsAggregationMax : Instantiate ApisDashboardsV1CommonLogsAggregationMax (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1CommonLogsAggregationMax(observationField *ApisDashboardsV1CommonObservationField) (_model *ApisDashboardsV1CommonLogsAggregationMax, err error) {
	_model = &ApisDashboardsV1CommonLogsAggregationMax{
		ObservationField: observationField,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1CommonLogsAggregationMax unmarshals an instance of ApisDashboardsV1CommonLogsAggregationMax from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationMax(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationMax)
	err = core.UnmarshalModel(m, "observation_field", &obj.ObservationField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "observation_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationMin : Calculate minimum value of log field.
type ApisDashboardsV1CommonLogsAggregationMin struct {
	// Field to count distinct values of.
	ObservationField *ApisDashboardsV1CommonObservationField `json:"observation_field" validate:"required"`
}

// NewApisDashboardsV1CommonLogsAggregationMin : Instantiate ApisDashboardsV1CommonLogsAggregationMin (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1CommonLogsAggregationMin(observationField *ApisDashboardsV1CommonObservationField) (_model *ApisDashboardsV1CommonLogsAggregationMin, err error) {
	_model = &ApisDashboardsV1CommonLogsAggregationMin{
		ObservationField: observationField,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1CommonLogsAggregationMin unmarshals an instance of ApisDashboardsV1CommonLogsAggregationMin from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationMin(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationMin)
	err = core.UnmarshalModel(m, "observation_field", &obj.ObservationField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "observation_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationPercentile : Calculate percentile value of log field.
type ApisDashboardsV1CommonLogsAggregationPercentile struct {
	// Value in range (0, 100].
	Percent *float64 `json:"percent" validate:"required"`

	// Field to count distinct values of.
	ObservationField *ApisDashboardsV1CommonObservationField `json:"observation_field" validate:"required"`
}

// NewApisDashboardsV1CommonLogsAggregationPercentile : Instantiate ApisDashboardsV1CommonLogsAggregationPercentile (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1CommonLogsAggregationPercentile(percent float64, observationField *ApisDashboardsV1CommonObservationField) (_model *ApisDashboardsV1CommonLogsAggregationPercentile, err error) {
	_model = &ApisDashboardsV1CommonLogsAggregationPercentile{
		Percent: core.Float64Ptr(percent),
		ObservationField: observationField,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1CommonLogsAggregationPercentile unmarshals an instance of ApisDashboardsV1CommonLogsAggregationPercentile from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationPercentile(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationPercentile)
	err = core.UnmarshalPrimitive(m, "percent", &obj.Percent)
	if err != nil {
		err = core.SDKErrorf(err, "", "percent-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "observation_field", &obj.ObservationField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "observation_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationSum : Sum values of log field.
type ApisDashboardsV1CommonLogsAggregationSum struct {
	// Field to count distinct values of.
	ObservationField *ApisDashboardsV1CommonObservationField `json:"observation_field" validate:"required"`
}

// NewApisDashboardsV1CommonLogsAggregationSum : Instantiate ApisDashboardsV1CommonLogsAggregationSum (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1CommonLogsAggregationSum(observationField *ApisDashboardsV1CommonObservationField) (_model *ApisDashboardsV1CommonLogsAggregationSum, err error) {
	_model = &ApisDashboardsV1CommonLogsAggregationSum{
		ObservationField: observationField,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1CommonLogsAggregationSum unmarshals an instance of ApisDashboardsV1CommonLogsAggregationSum from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationSum(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationSum)
	err = core.UnmarshalModel(m, "observation_field", &obj.ObservationField, UnmarshalApisDashboardsV1CommonObservationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "observation_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLuceneQuery : Lucene query.
type ApisDashboardsV1CommonLuceneQuery struct {
	// The Lucene query string.
	Value *string `json:"value,omitempty"`
}

// UnmarshalApisDashboardsV1CommonLuceneQuery unmarshals an instance of ApisDashboardsV1CommonLuceneQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLuceneQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLuceneQuery)
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		err = core.SDKErrorf(err, "", "value-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonObservationField : Field to count distinct values of.
type ApisDashboardsV1CommonObservationField struct {
	// Path within the dataset scope.
	Keypath []string `json:"keypath,omitempty"`

	// Scope of the dataset.
	Scope *string `json:"scope,omitempty"`
}

// Constants associated with the ApisDashboardsV1CommonObservationField.Scope property.
// Scope of the dataset.
const (
	ApisDashboardsV1CommonObservationField_Scope_Label = "label"
	ApisDashboardsV1CommonObservationField_Scope_Metadata = "metadata"
	ApisDashboardsV1CommonObservationField_Scope_Unspecified = "unspecified"
	ApisDashboardsV1CommonObservationField_Scope_UserData = "user_data"
)

// UnmarshalApisDashboardsV1CommonObservationField unmarshals an instance of ApisDashboardsV1CommonObservationField from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonObservationField(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonObservationField)
	err = core.UnmarshalPrimitive(m, "keypath", &obj.Keypath)
	if err != nil {
		err = core.SDKErrorf(err, "", "keypath-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "scope", &obj.Scope)
	if err != nil {
		err = core.SDKErrorf(err, "", "scope-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonOrderingField : Column used for ordering the results.
type ApisDashboardsV1CommonOrderingField struct {
	// The field to order by.
	Field *string `json:"field,omitempty"`

	// The direction of the order: ascending or descending.
	OrderDirection *string `json:"order_direction,omitempty"`
}

// Constants associated with the ApisDashboardsV1CommonOrderingField.OrderDirection property.
// The direction of the order: ascending or descending.
const (
	ApisDashboardsV1CommonOrderingField_OrderDirection_Asc = "asc"
	ApisDashboardsV1CommonOrderingField_OrderDirection_Desc = "desc"
	ApisDashboardsV1CommonOrderingField_OrderDirection_Unspecified = "unspecified"
)

// UnmarshalApisDashboardsV1CommonOrderingField unmarshals an instance of ApisDashboardsV1CommonOrderingField from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonOrderingField(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonOrderingField)
	err = core.UnmarshalPrimitive(m, "field", &obj.Field)
	if err != nil {
		err = core.SDKErrorf(err, "", "field-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "order_direction", &obj.OrderDirection)
	if err != nil {
		err = core.SDKErrorf(err, "", "order_direction-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonPromQlQuery : PromQL query.
type ApisDashboardsV1CommonPromQlQuery struct {
	// The PromQL query string.
	Value *string `json:"value,omitempty"`
}

// UnmarshalApisDashboardsV1CommonPromQlQuery unmarshals an instance of ApisDashboardsV1CommonPromQlQuery from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonPromQlQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonPromQlQuery)
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		err = core.SDKErrorf(err, "", "value-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonTimeFrame : Absolute time frame specifying a fixed start and end time.
type ApisDashboardsV1CommonTimeFrame struct {
	// From is the start of the time frame.
	From *strfmt.DateTime `json:"from,omitempty"`

	// To is the end of the time frame.
	To *strfmt.DateTime `json:"to,omitempty"`
}

// UnmarshalApisDashboardsV1CommonTimeFrame unmarshals an instance of ApisDashboardsV1CommonTimeFrame from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonTimeFrame(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonTimeFrame)
	err = core.UnmarshalPrimitive(m, "from", &obj.From)
	if err != nil {
		err = core.SDKErrorf(err, "", "from-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "to", &obj.To)
	if err != nil {
		err = core.SDKErrorf(err, "", "to-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1UUID : Unique identifier of the folder containing the dashboard.
type ApisDashboardsV1UUID struct {
	// The UUID value.
	Value *strfmt.UUID `json:"value" validate:"required"`
}

// NewApisDashboardsV1UUID : Instantiate ApisDashboardsV1UUID (Generic Model Constructor)
func (*LogsV0) NewApisDashboardsV1UUID(value *strfmt.UUID) (_model *ApisDashboardsV1UUID, err error) {
	_model = &ApisDashboardsV1UUID{
		Value: value,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisDashboardsV1UUID unmarshals an instance of ApisDashboardsV1UUID from the specified map of raw messages.
func UnmarshalApisDashboardsV1UUID(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1UUID)
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		err = core.SDKErrorf(err, "", "value-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisEvents2metricsV2Aggregation : Represents Aggregation type list.
// Models which "extend" this model:
// - ApisEvents2metricsV2AggregationAggMetadataSamples
// - ApisEvents2metricsV2AggregationAggMetadataHistogram
type ApisEvents2metricsV2Aggregation struct {
	// Is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// Aggregation type.
	AggType *string `json:"agg_type,omitempty"`

	// Target metric field alias name.
	TargetMetricName *string `json:"target_metric_name,omitempty"`

	// E2M sample type metadata.
	Samples *ApisEvents2metricsV2E2mAggSamples `json:"samples,omitempty"`

	// E2M aggregate histogram type metadata.
	Histogram *ApisEvents2metricsV2E2mAggHistogram `json:"histogram,omitempty"`
}

// Constants associated with the ApisEvents2metricsV2Aggregation.AggType property.
// Aggregation type.
const (
	ApisEvents2metricsV2Aggregation_AggType_Avg = "avg"
	ApisEvents2metricsV2Aggregation_AggType_Count = "count"
	ApisEvents2metricsV2Aggregation_AggType_Histogram = "histogram"
	ApisEvents2metricsV2Aggregation_AggType_Max = "max"
	ApisEvents2metricsV2Aggregation_AggType_Min = "min"
	ApisEvents2metricsV2Aggregation_AggType_Samples = "samples"
	ApisEvents2metricsV2Aggregation_AggType_Sum = "sum"
	ApisEvents2metricsV2Aggregation_AggType_Unspecified = "unspecified"
)
func (*ApisEvents2metricsV2Aggregation) isaApisEvents2metricsV2Aggregation() bool {
	return true
}

type ApisEvents2metricsV2AggregationIntf interface {
	isaApisEvents2metricsV2Aggregation() bool
}

// UnmarshalApisEvents2metricsV2Aggregation unmarshals an instance of ApisEvents2metricsV2Aggregation from the specified map of raw messages.
func UnmarshalApisEvents2metricsV2Aggregation(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisEvents2metricsV2Aggregation)
	err = core.UnmarshalPrimitive(m, "enabled", &obj.Enabled)
	if err != nil {
		err = core.SDKErrorf(err, "", "enabled-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "agg_type", &obj.AggType)
	if err != nil {
		err = core.SDKErrorf(err, "", "agg_type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "target_metric_name", &obj.TargetMetricName)
	if err != nil {
		err = core.SDKErrorf(err, "", "target_metric_name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "samples", &obj.Samples, UnmarshalApisEvents2metricsV2E2mAggSamples)
	if err != nil {
		err = core.SDKErrorf(err, "", "samples-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "histogram", &obj.Histogram, UnmarshalApisEvents2metricsV2E2mAggHistogram)
	if err != nil {
		err = core.SDKErrorf(err, "", "histogram-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisEvents2metricsV2E2mAggHistogram : E2M aggregate histogram type metadata.
type ApisEvents2metricsV2E2mAggHistogram struct {
	// Buckets of the E2M.
	Buckets []float32 `json:"buckets,omitempty"`
}

// UnmarshalApisEvents2metricsV2E2mAggHistogram unmarshals an instance of ApisEvents2metricsV2E2mAggHistogram from the specified map of raw messages.
func UnmarshalApisEvents2metricsV2E2mAggHistogram(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisEvents2metricsV2E2mAggHistogram)
	err = core.UnmarshalPrimitive(m, "buckets", &obj.Buckets)
	if err != nil {
		err = core.SDKErrorf(err, "", "buckets-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisEvents2metricsV2E2mAggSamples : E2M sample type metadata.
type ApisEvents2metricsV2E2mAggSamples struct {
	// Sample type min/max.
	SampleType *string `json:"sample_type,omitempty"`
}

// Constants associated with the ApisEvents2metricsV2E2mAggSamples.SampleType property.
// Sample type min/max.
const (
	ApisEvents2metricsV2E2mAggSamples_SampleType_Max = "max"
	ApisEvents2metricsV2E2mAggSamples_SampleType_Min = "min"
	ApisEvents2metricsV2E2mAggSamples_SampleType_Unspecified = "unspecified"
)

// UnmarshalApisEvents2metricsV2E2mAggSamples unmarshals an instance of ApisEvents2metricsV2E2mAggSamples from the specified map of raw messages.
func UnmarshalApisEvents2metricsV2E2mAggSamples(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisEvents2metricsV2E2mAggSamples)
	err = core.UnmarshalPrimitive(m, "sample_type", &obj.SampleType)
	if err != nil {
		err = core.SDKErrorf(err, "", "sample_type-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisEvents2metricsV2E2mPermutations : Represents the limit of the permutations and if the limit was exceeded.
type ApisEvents2metricsV2E2mPermutations struct {
	// E2M permutation limit.
	Limit *int64 `json:"limit,omitempty"`

	// Flag to indicate if limit was exceeded.
	HasExceededLimit *bool `json:"has_exceeded_limit,omitempty"`
}

// UnmarshalApisEvents2metricsV2E2mPermutations unmarshals an instance of ApisEvents2metricsV2E2mPermutations from the specified map of raw messages.
func UnmarshalApisEvents2metricsV2E2mPermutations(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisEvents2metricsV2E2mPermutations)
	err = core.UnmarshalPrimitive(m, "limit", &obj.Limit)
	if err != nil {
		err = core.SDKErrorf(err, "", "limit-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "has_exceeded_limit", &obj.HasExceededLimit)
	if err != nil {
		err = core.SDKErrorf(err, "", "has_exceeded_limit-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisEvents2metricsV2MetricField : E2M metric fields.
type ApisEvents2metricsV2MetricField struct {
	// Target metric field alias name.
	TargetBaseMetricName *string `json:"target_base_metric_name,omitempty"`

	// Source field.
	SourceField *string `json:"source_field,omitempty"`

	// Represents Aggregation type list.
	Aggregations []ApisEvents2metricsV2AggregationIntf `json:"aggregations,omitempty"`
}

// UnmarshalApisEvents2metricsV2MetricField unmarshals an instance of ApisEvents2metricsV2MetricField from the specified map of raw messages.
func UnmarshalApisEvents2metricsV2MetricField(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisEvents2metricsV2MetricField)
	err = core.UnmarshalPrimitive(m, "target_base_metric_name", &obj.TargetBaseMetricName)
	if err != nil {
		err = core.SDKErrorf(err, "", "target_base_metric_name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "source_field", &obj.SourceField)
	if err != nil {
		err = core.SDKErrorf(err, "", "source_field-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "aggregations", &obj.Aggregations, UnmarshalApisEvents2metricsV2Aggregation)
	if err != nil {
		err = core.SDKErrorf(err, "", "aggregations-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisEvents2metricsV2MetricLabel : E2M metric labels.
type ApisEvents2metricsV2MetricLabel struct {
	// Metric label target alias name.
	TargetLabel *string `json:"target_label,omitempty"`

	// Metric label source field.
	SourceField *string `json:"source_field,omitempty"`
}

// UnmarshalApisEvents2metricsV2MetricLabel unmarshals an instance of ApisEvents2metricsV2MetricLabel from the specified map of raw messages.
func UnmarshalApisEvents2metricsV2MetricLabel(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisEvents2metricsV2MetricLabel)
	err = core.UnmarshalPrimitive(m, "target_label", &obj.TargetLabel)
	if err != nil {
		err = core.SDKErrorf(err, "", "target_label-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "source_field", &obj.SourceField)
	if err != nil {
		err = core.SDKErrorf(err, "", "source_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisLogs2metricsV2LogsQuery : E2M logs query.
type ApisLogs2metricsV2LogsQuery struct {
	// Lucene query.
	Lucene *string `json:"lucene,omitempty"`

	// Alias.
	Alias *string `json:"alias,omitempty"`

	// Application name filters.
	ApplicationnameFilters []string `json:"applicationname_filters,omitempty"`

	// Subsystem names filters.
	SubsystemnameFilters []string `json:"subsystemname_filters,omitempty"`

	// Severity type filters.
	SeverityFilters []string `json:"severity_filters,omitempty"`
}

// Constants associated with the ApisLogs2metricsV2LogsQuery.SeverityFilters property.
// Severity type filters.
const (
	ApisLogs2metricsV2LogsQuery_SeverityFilters_Critical = "critical"
	ApisLogs2metricsV2LogsQuery_SeverityFilters_Debug = "debug"
	ApisLogs2metricsV2LogsQuery_SeverityFilters_Error = "error"
	ApisLogs2metricsV2LogsQuery_SeverityFilters_Info = "info"
	ApisLogs2metricsV2LogsQuery_SeverityFilters_Unspecified = "unspecified"
	ApisLogs2metricsV2LogsQuery_SeverityFilters_Verbose = "verbose"
	ApisLogs2metricsV2LogsQuery_SeverityFilters_Warning = "warning"
)

// UnmarshalApisLogs2metricsV2LogsQuery unmarshals an instance of ApisLogs2metricsV2LogsQuery from the specified map of raw messages.
func UnmarshalApisLogs2metricsV2LogsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisLogs2metricsV2LogsQuery)
	err = core.UnmarshalPrimitive(m, "lucene", &obj.Lucene)
	if err != nil {
		err = core.SDKErrorf(err, "", "lucene-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "alias", &obj.Alias)
	if err != nil {
		err = core.SDKErrorf(err, "", "alias-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "applicationname_filters", &obj.ApplicationnameFilters)
	if err != nil {
		err = core.SDKErrorf(err, "", "applicationname_filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "subsystemname_filters", &obj.SubsystemnameFilters)
	if err != nil {
		err = core.SDKErrorf(err, "", "subsystemname_filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "severity_filters", &obj.SeverityFilters)
	if err != nil {
		err = core.SDKErrorf(err, "", "severity_filters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisViewsV1CustomTimeSelection : Custom time selection.
type ApisViewsV1CustomTimeSelection struct {
	// Custom time selection start timestamp.
	FromTime *strfmt.DateTime `json:"from_time" validate:"required"`

	// Custom time selection end timestamp.
	ToTime *strfmt.DateTime `json:"to_time" validate:"required"`
}

// NewApisViewsV1CustomTimeSelection : Instantiate ApisViewsV1CustomTimeSelection (Generic Model Constructor)
func (*LogsV0) NewApisViewsV1CustomTimeSelection(fromTime *strfmt.DateTime, toTime *strfmt.DateTime) (_model *ApisViewsV1CustomTimeSelection, err error) {
	_model = &ApisViewsV1CustomTimeSelection{
		FromTime: fromTime,
		ToTime: toTime,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisViewsV1CustomTimeSelection unmarshals an instance of ApisViewsV1CustomTimeSelection from the specified map of raw messages.
func UnmarshalApisViewsV1CustomTimeSelection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisViewsV1CustomTimeSelection)
	err = core.UnmarshalPrimitive(m, "from_time", &obj.FromTime)
	if err != nil {
		err = core.SDKErrorf(err, "", "from_time-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "to_time", &obj.ToTime)
	if err != nil {
		err = core.SDKErrorf(err, "", "to_time-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisViewsV1Filter : Selected filters.
type ApisViewsV1Filter struct {
	// Filter name.
	Name *string `json:"name" validate:"required"`

	// Filter selected values.
	SelectedValues map[string]bool `json:"selected_values" validate:"required"`
}

// NewApisViewsV1Filter : Instantiate ApisViewsV1Filter (Generic Model Constructor)
func (*LogsV0) NewApisViewsV1Filter(name string, selectedValues map[string]bool) (_model *ApisViewsV1Filter, err error) {
	_model = &ApisViewsV1Filter{
		Name: core.StringPtr(name),
		SelectedValues: selectedValues,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisViewsV1Filter unmarshals an instance of ApisViewsV1Filter from the specified map of raw messages.
func UnmarshalApisViewsV1Filter(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisViewsV1Filter)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "selected_values", &obj.SelectedValues)
	if err != nil {
		err = core.SDKErrorf(err, "", "selected_values-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisViewsV1QuickTimeSelection : Quick time selection.
type ApisViewsV1QuickTimeSelection struct {
	// Quick time selection caption.
	Caption *string `json:"caption" validate:"required"`

	// Quick time selection amount of seconds.
	Seconds *int64 `json:"seconds" validate:"required"`
}

// NewApisViewsV1QuickTimeSelection : Instantiate ApisViewsV1QuickTimeSelection (Generic Model Constructor)
func (*LogsV0) NewApisViewsV1QuickTimeSelection(caption string, seconds int64) (_model *ApisViewsV1QuickTimeSelection, err error) {
	_model = &ApisViewsV1QuickTimeSelection{
		Caption: core.StringPtr(caption),
		Seconds: core.Int64Ptr(seconds),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisViewsV1QuickTimeSelection unmarshals an instance of ApisViewsV1QuickTimeSelection from the specified map of raw messages.
func UnmarshalApisViewsV1QuickTimeSelection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisViewsV1QuickTimeSelection)
	err = core.UnmarshalPrimitive(m, "caption", &obj.Caption)
	if err != nil {
		err = core.SDKErrorf(err, "", "caption-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "seconds", &obj.Seconds)
	if err != nil {
		err = core.SDKErrorf(err, "", "seconds-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisViewsV1SearchQuery : View search query.
type ApisViewsV1SearchQuery struct {
	// View search query.
	Query *string `json:"query" validate:"required"`
}

// NewApisViewsV1SearchQuery : Instantiate ApisViewsV1SearchQuery (Generic Model Constructor)
func (*LogsV0) NewApisViewsV1SearchQuery(query string) (_model *ApisViewsV1SearchQuery, err error) {
	_model = &ApisViewsV1SearchQuery{
		Query: core.StringPtr(query),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalApisViewsV1SearchQuery unmarshals an instance of ApisViewsV1SearchQuery from the specified map of raw messages.
func UnmarshalApisViewsV1SearchQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisViewsV1SearchQuery)
	err = core.UnmarshalPrimitive(m, "query", &obj.Query)
	if err != nil {
		err = core.SDKErrorf(err, "", "query-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisViewsV1SelectedFilters : View selected filters.
type ApisViewsV1SelectedFilters struct {
	// Selected filters.
	Filters []ApisViewsV1Filter `json:"filters,omitempty"`
}

// UnmarshalApisViewsV1SelectedFilters unmarshals an instance of ApisViewsV1SelectedFilters from the specified map of raw messages.
func UnmarshalApisViewsV1SelectedFilters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisViewsV1SelectedFilters)
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisViewsV1Filter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisViewsV1TimeSelection : View time selection.
// Models which "extend" this model:
// - ApisViewsV1TimeSelectionSelectionTypeQuickSelection
// - ApisViewsV1TimeSelectionSelectionTypeCustomSelection
type ApisViewsV1TimeSelection struct {
	// Quick time selection.
	QuickSelection *ApisViewsV1QuickTimeSelection `json:"quick_selection,omitempty"`

	// Custom time selection.
	CustomSelection *ApisViewsV1CustomTimeSelection `json:"custom_selection,omitempty"`
}
func (*ApisViewsV1TimeSelection) isaApisViewsV1TimeSelection() bool {
	return true
}

type ApisViewsV1TimeSelectionIntf interface {
	isaApisViewsV1TimeSelection() bool
}

// UnmarshalApisViewsV1TimeSelection unmarshals an instance of ApisViewsV1TimeSelection from the specified map of raw messages.
func UnmarshalApisViewsV1TimeSelection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisViewsV1TimeSelection)
	err = core.UnmarshalModel(m, "quick_selection", &obj.QuickSelection, UnmarshalApisViewsV1QuickTimeSelection)
	if err != nil {
		err = core.SDKErrorf(err, "", "quick_selection-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "custom_selection", &obj.CustomSelection, UnmarshalApisViewsV1CustomTimeSelection)
	if err != nil {
		err = core.SDKErrorf(err, "", "custom_selection-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AssignDashboardFolderOptions : The AssignDashboardFolder options.
type AssignDashboardFolderOptions struct {
	// The ID of the dashboard.
	DashboardID *string `json:"dashboard_id" validate:"required,ne="`

	// The folder ID could be null to assign the dashboard to root.
	FolderID *string `json:"folder_id" validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewAssignDashboardFolderOptions : Instantiate AssignDashboardFolderOptions
func (*LogsV0) NewAssignDashboardFolderOptions(dashboardID string, folderID string) *AssignDashboardFolderOptions {
	return &AssignDashboardFolderOptions{
		DashboardID: core.StringPtr(dashboardID),
		FolderID: core.StringPtr(folderID),
	}
}

// SetDashboardID : Allow user to set DashboardID
func (_options *AssignDashboardFolderOptions) SetDashboardID(dashboardID string) *AssignDashboardFolderOptions {
	_options.DashboardID = core.StringPtr(dashboardID)
	return _options
}

// SetFolderID : Allow user to set FolderID
func (_options *AssignDashboardFolderOptions) SetFolderID(folderID string) *AssignDashboardFolderOptions {
	_options.FolderID = core.StringPtr(folderID)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *AssignDashboardFolderOptions) SetHeaders(param map[string]string) *AssignDashboardFolderOptions {
	options.Headers = param
	return options
}

// AssignDashboardFolderResponse : Response for AssignDashboardFolder.
type AssignDashboardFolderResponse struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of AssignDashboardFolderResponse
func (o *AssignDashboardFolderResponse) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of AssignDashboardFolderResponse
func (o *AssignDashboardFolderResponse) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of AssignDashboardFolderResponse
func (o *AssignDashboardFolderResponse) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of AssignDashboardFolderResponse
func (o *AssignDashboardFolderResponse) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of AssignDashboardFolderResponse
func (o *AssignDashboardFolderResponse) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalAssignDashboardFolderResponse unmarshals an instance of AssignDashboardFolderResponse from the specified map of raw messages.
func UnmarshalAssignDashboardFolderResponse(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AssignDashboardFolderResponse)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// CreateAlertOptions : The CreateAlert options.
type CreateAlertOptions struct {
	// Alert name.
	Name *string `json:"name" validate:"required"`

	// Alert is active.
	IsActive *bool `json:"is_active" validate:"required"`

	// Alert severity.
	Severity *string `json:"severity" validate:"required"`

	// Alert condition.
	Condition AlertsV2AlertConditionIntf `json:"condition" validate:"required"`

	// Alert notification groups.
	NotificationGroups []AlertsV2AlertNotificationGroups `json:"notification_groups" validate:"required"`

	// Alert filters.
	Filters *AlertsV1AlertFilters `json:"filters" validate:"required"`

	// Alert description.
	Description *string `json:"description,omitempty"`

	// Alert expiration date.
	Expiration *AlertsV1Date `json:"expiration,omitempty"`

	// When should the alert be active.
	ActiveWhen *AlertsV1AlertActiveWhen `json:"active_when,omitempty"`

	// JSON keys to include in the alert notification, if left empty get the full log text in the alert notification.
	NotificationPayloadFilters []string `json:"notification_payload_filters,omitempty"`

	// The Meta labels to add to the alert.
	MetaLabels []AlertsV1MetaLabel `json:"meta_labels,omitempty"`

	// The Meta labels to add to the alert as string with ':' separator.
	MetaLabelsStrings []string `json:"meta_labels_strings,omitempty"`

	// Incident settings, will create the incident based on this configuration.
	IncidentSettings *AlertsV2AlertIncidentSettings `json:"incident_settings,omitempty"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the CreateAlertOptions.Severity property.
// Alert severity.
const (
	CreateAlertOptions_Severity_Critical = "critical"
	CreateAlertOptions_Severity_Error = "error"
	CreateAlertOptions_Severity_InfoOrUnspecified = "info_or_unspecified"
	CreateAlertOptions_Severity_Warning = "warning"
)

// NewCreateAlertOptions : Instantiate CreateAlertOptions
func (*LogsV0) NewCreateAlertOptions(name string, isActive bool, severity string, condition AlertsV2AlertConditionIntf, notificationGroups []AlertsV2AlertNotificationGroups, filters *AlertsV1AlertFilters) *CreateAlertOptions {
	return &CreateAlertOptions{
		Name: core.StringPtr(name),
		IsActive: core.BoolPtr(isActive),
		Severity: core.StringPtr(severity),
		Condition: condition,
		NotificationGroups: notificationGroups,
		Filters: filters,
	}
}

// SetName : Allow user to set Name
func (_options *CreateAlertOptions) SetName(name string) *CreateAlertOptions {
	_options.Name = core.StringPtr(name)
	return _options
}

// SetIsActive : Allow user to set IsActive
func (_options *CreateAlertOptions) SetIsActive(isActive bool) *CreateAlertOptions {
	_options.IsActive = core.BoolPtr(isActive)
	return _options
}

// SetSeverity : Allow user to set Severity
func (_options *CreateAlertOptions) SetSeverity(severity string) *CreateAlertOptions {
	_options.Severity = core.StringPtr(severity)
	return _options
}

// SetCondition : Allow user to set Condition
func (_options *CreateAlertOptions) SetCondition(condition AlertsV2AlertConditionIntf) *CreateAlertOptions {
	_options.Condition = condition
	return _options
}

// SetNotificationGroups : Allow user to set NotificationGroups
func (_options *CreateAlertOptions) SetNotificationGroups(notificationGroups []AlertsV2AlertNotificationGroups) *CreateAlertOptions {
	_options.NotificationGroups = notificationGroups
	return _options
}

// SetFilters : Allow user to set Filters
func (_options *CreateAlertOptions) SetFilters(filters *AlertsV1AlertFilters) *CreateAlertOptions {
	_options.Filters = filters
	return _options
}

// SetDescription : Allow user to set Description
func (_options *CreateAlertOptions) SetDescription(description string) *CreateAlertOptions {
	_options.Description = core.StringPtr(description)
	return _options
}

// SetExpiration : Allow user to set Expiration
func (_options *CreateAlertOptions) SetExpiration(expiration *AlertsV1Date) *CreateAlertOptions {
	_options.Expiration = expiration
	return _options
}

// SetActiveWhen : Allow user to set ActiveWhen
func (_options *CreateAlertOptions) SetActiveWhen(activeWhen *AlertsV1AlertActiveWhen) *CreateAlertOptions {
	_options.ActiveWhen = activeWhen
	return _options
}

// SetNotificationPayloadFilters : Allow user to set NotificationPayloadFilters
func (_options *CreateAlertOptions) SetNotificationPayloadFilters(notificationPayloadFilters []string) *CreateAlertOptions {
	_options.NotificationPayloadFilters = notificationPayloadFilters
	return _options
}

// SetMetaLabels : Allow user to set MetaLabels
func (_options *CreateAlertOptions) SetMetaLabels(metaLabels []AlertsV1MetaLabel) *CreateAlertOptions {
	_options.MetaLabels = metaLabels
	return _options
}

// SetMetaLabelsStrings : Allow user to set MetaLabelsStrings
func (_options *CreateAlertOptions) SetMetaLabelsStrings(metaLabelsStrings []string) *CreateAlertOptions {
	_options.MetaLabelsStrings = metaLabelsStrings
	return _options
}

// SetIncidentSettings : Allow user to set IncidentSettings
func (_options *CreateAlertOptions) SetIncidentSettings(incidentSettings *AlertsV2AlertIncidentSettings) *CreateAlertOptions {
	_options.IncidentSettings = incidentSettings
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *CreateAlertOptions) SetHeaders(param map[string]string) *CreateAlertOptions {
	options.Headers = param
	return options
}

// CreateDashboardFolderOptions : The CreateDashboardFolder options.
type CreateDashboardFolderOptions struct {
	// The dashboard folder name, required.
	Name *string `json:"name" validate:"required"`

	// The dashboard folder ID, uuid.
	ID *strfmt.UUID `json:"id,omitempty"`

	// The dashboard folder parent ID, optional. If not set, the folder is a root
	//  folder, if set, the folder is a subfolder of the parent folder and needs to
	//  be a uuid.
	ParentID *strfmt.UUID `json:"parent_id,omitempty"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateDashboardFolderOptions : Instantiate CreateDashboardFolderOptions
func (*LogsV0) NewCreateDashboardFolderOptions(name string) *CreateDashboardFolderOptions {
	return &CreateDashboardFolderOptions{
		Name: core.StringPtr(name),
	}
}

// SetName : Allow user to set Name
func (_options *CreateDashboardFolderOptions) SetName(name string) *CreateDashboardFolderOptions {
	_options.Name = core.StringPtr(name)
	return _options
}

// SetID : Allow user to set ID
func (_options *CreateDashboardFolderOptions) SetID(id *strfmt.UUID) *CreateDashboardFolderOptions {
	_options.ID = id
	return _options
}

// SetParentID : Allow user to set ParentID
func (_options *CreateDashboardFolderOptions) SetParentID(parentID *strfmt.UUID) *CreateDashboardFolderOptions {
	_options.ParentID = parentID
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *CreateDashboardFolderOptions) SetHeaders(param map[string]string) *CreateDashboardFolderOptions {
	options.Headers = param
	return options
}

// CreateDashboardOptions : The CreateDashboard options.
type CreateDashboardOptions struct {
	// Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.
	Dashboard DashboardIntf `json:"Dashboard" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateDashboardOptions : Instantiate CreateDashboardOptions
func (*LogsV0) NewCreateDashboardOptions(dashboard DashboardIntf) *CreateDashboardOptions {
	return &CreateDashboardOptions{
		Dashboard: dashboard,
	}
}

// SetDashboard : Allow user to set Dashboard
func (_options *CreateDashboardOptions) SetDashboard(dashboard DashboardIntf) *CreateDashboardOptions {
	_options.Dashboard = dashboard
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *CreateDashboardOptions) SetHeaders(param map[string]string) *CreateDashboardOptions {
	options.Headers = param
	return options
}

// CreateDataAccessRuleOptions : The CreateDataAccessRule options.
type CreateDataAccessRuleOptions struct {
	// Display Name for new Data Access Rule.
	DisplayName *string `json:"display_name" validate:"required"`

	// Filters for new Data Access Rule.
	Filters []DataAccessRuleFilter `json:"filters" validate:"required"`

	// Default Expression for new Data Access Rule.
	DefaultExpression *string `json:"default_expression" validate:"required"`

	// Description for new Data Access Rule.
	Description *string `json:"description,omitempty"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateDataAccessRuleOptions : Instantiate CreateDataAccessRuleOptions
func (*LogsV0) NewCreateDataAccessRuleOptions(displayName string, filters []DataAccessRuleFilter, defaultExpression string) *CreateDataAccessRuleOptions {
	return &CreateDataAccessRuleOptions{
		DisplayName: core.StringPtr(displayName),
		Filters: filters,
		DefaultExpression: core.StringPtr(defaultExpression),
	}
}

// SetDisplayName : Allow user to set DisplayName
func (_options *CreateDataAccessRuleOptions) SetDisplayName(displayName string) *CreateDataAccessRuleOptions {
	_options.DisplayName = core.StringPtr(displayName)
	return _options
}

// SetFilters : Allow user to set Filters
func (_options *CreateDataAccessRuleOptions) SetFilters(filters []DataAccessRuleFilter) *CreateDataAccessRuleOptions {
	_options.Filters = filters
	return _options
}

// SetDefaultExpression : Allow user to set DefaultExpression
func (_options *CreateDataAccessRuleOptions) SetDefaultExpression(defaultExpression string) *CreateDataAccessRuleOptions {
	_options.DefaultExpression = core.StringPtr(defaultExpression)
	return _options
}

// SetDescription : Allow user to set Description
func (_options *CreateDataAccessRuleOptions) SetDescription(description string) *CreateDataAccessRuleOptions {
	_options.Description = core.StringPtr(description)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *CreateDataAccessRuleOptions) SetHeaders(param map[string]string) *CreateDataAccessRuleOptions {
	options.Headers = param
	return options
}

// CreateE2mOptions : The CreateE2m options.
type CreateE2mOptions struct {
	// E2M Create message.
	Event2MetricPrototype Event2MetricPrototypeIntf `json:"Event2MetricPrototype" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateE2mOptions : Instantiate CreateE2mOptions
func (*LogsV0) NewCreateE2mOptions(event2MetricPrototype Event2MetricPrototypeIntf) *CreateE2mOptions {
	return &CreateE2mOptions{
		Event2MetricPrototype: event2MetricPrototype,
	}
}

// SetEvent2MetricPrototype : Allow user to set Event2MetricPrototype
func (_options *CreateE2mOptions) SetEvent2MetricPrototype(event2MetricPrototype Event2MetricPrototypeIntf) *CreateE2mOptions {
	_options.Event2MetricPrototype = event2MetricPrototype
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *CreateE2mOptions) SetHeaders(param map[string]string) *CreateE2mOptions {
	options.Headers = param
	return options
}

// CreateEnrichmentOptions : The CreateEnrichment options.
type CreateEnrichmentOptions struct {
	// The name of the field to enrich.
	FieldName *string `json:"field_name" validate:"required"`

	// The enrichment type.
	EnrichmentType EnrichmentV1EnrichmentTypeIntf `json:"enrichment_type" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateEnrichmentOptions : Instantiate CreateEnrichmentOptions
func (*LogsV0) NewCreateEnrichmentOptions(fieldName string, enrichmentType EnrichmentV1EnrichmentTypeIntf) *CreateEnrichmentOptions {
	return &CreateEnrichmentOptions{
		FieldName: core.StringPtr(fieldName),
		EnrichmentType: enrichmentType,
	}
}

// SetFieldName : Allow user to set FieldName
func (_options *CreateEnrichmentOptions) SetFieldName(fieldName string) *CreateEnrichmentOptions {
	_options.FieldName = core.StringPtr(fieldName)
	return _options
}

// SetEnrichmentType : Allow user to set EnrichmentType
func (_options *CreateEnrichmentOptions) SetEnrichmentType(enrichmentType EnrichmentV1EnrichmentTypeIntf) *CreateEnrichmentOptions {
	_options.EnrichmentType = enrichmentType
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *CreateEnrichmentOptions) SetHeaders(param map[string]string) *CreateEnrichmentOptions {
	options.Headers = param
	return options
}

// CreateOutgoingWebhookOptions : The CreateOutgoingWebhook options.
type CreateOutgoingWebhookOptions struct {
	// The input data of the Outbound Integration.
	OutgoingWebhookPrototype OutgoingWebhookPrototypeIntf `json:"OutgoingWebhookPrototype" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateOutgoingWebhookOptions : Instantiate CreateOutgoingWebhookOptions
func (*LogsV0) NewCreateOutgoingWebhookOptions(outgoingWebhookPrototype OutgoingWebhookPrototypeIntf) *CreateOutgoingWebhookOptions {
	return &CreateOutgoingWebhookOptions{
		OutgoingWebhookPrototype: outgoingWebhookPrototype,
	}
}

// SetOutgoingWebhookPrototype : Allow user to set OutgoingWebhookPrototype
func (_options *CreateOutgoingWebhookOptions) SetOutgoingWebhookPrototype(outgoingWebhookPrototype OutgoingWebhookPrototypeIntf) *CreateOutgoingWebhookOptions {
	_options.OutgoingWebhookPrototype = outgoingWebhookPrototype
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *CreateOutgoingWebhookOptions) SetHeaders(param map[string]string) *CreateOutgoingWebhookOptions {
	options.Headers = param
	return options
}

// CreatePolicyOptions : The CreatePolicy options.
type CreatePolicyOptions struct {
	// Create policy request.
	PolicyPrototype PolicyPrototypeIntf `json:"PolicyPrototype" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreatePolicyOptions : Instantiate CreatePolicyOptions
func (*LogsV0) NewCreatePolicyOptions(policyPrototype PolicyPrototypeIntf) *CreatePolicyOptions {
	return &CreatePolicyOptions{
		PolicyPrototype: policyPrototype,
	}
}

// SetPolicyPrototype : Allow user to set PolicyPrototype
func (_options *CreatePolicyOptions) SetPolicyPrototype(policyPrototype PolicyPrototypeIntf) *CreatePolicyOptions {
	_options.PolicyPrototype = policyPrototype
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *CreatePolicyOptions) SetHeaders(param map[string]string) *CreatePolicyOptions {
	options.Headers = param
	return options
}

// CreateRuleGroupOptions : The CreateRuleGroup options.
type CreateRuleGroupOptions struct {
	// The name of the rule group.
	Name *string `json:"name" validate:"required"`

	// Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in
	// order.
	RuleSubgroups []RulesV1CreateRuleGroupRequestCreateRuleSubgroup `json:"rule_subgroups" validate:"required"`

	// A description for the rule group, should express what is the rule group purpose.
	Description *string `json:"description,omitempty"`

	// Whether or not the rule is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// Optional rule matchers which if matched will make the rule go through the rule group.
	RuleMatchers []RulesV1RuleMatcherIntf `json:"rule_matchers,omitempty"`

	// The order in which the rule group will be evaluated. The lower the order, the more priority the group will have. Not
	// providing the order will by default create a group with the last order.
	Order *int64 `json:"order,omitempty"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateRuleGroupOptions : Instantiate CreateRuleGroupOptions
func (*LogsV0) NewCreateRuleGroupOptions(name string, ruleSubgroups []RulesV1CreateRuleGroupRequestCreateRuleSubgroup) *CreateRuleGroupOptions {
	return &CreateRuleGroupOptions{
		Name: core.StringPtr(name),
		RuleSubgroups: ruleSubgroups,
	}
}

// SetName : Allow user to set Name
func (_options *CreateRuleGroupOptions) SetName(name string) *CreateRuleGroupOptions {
	_options.Name = core.StringPtr(name)
	return _options
}

// SetRuleSubgroups : Allow user to set RuleSubgroups
func (_options *CreateRuleGroupOptions) SetRuleSubgroups(ruleSubgroups []RulesV1CreateRuleGroupRequestCreateRuleSubgroup) *CreateRuleGroupOptions {
	_options.RuleSubgroups = ruleSubgroups
	return _options
}

// SetDescription : Allow user to set Description
func (_options *CreateRuleGroupOptions) SetDescription(description string) *CreateRuleGroupOptions {
	_options.Description = core.StringPtr(description)
	return _options
}

// SetEnabled : Allow user to set Enabled
func (_options *CreateRuleGroupOptions) SetEnabled(enabled bool) *CreateRuleGroupOptions {
	_options.Enabled = core.BoolPtr(enabled)
	return _options
}

// SetRuleMatchers : Allow user to set RuleMatchers
func (_options *CreateRuleGroupOptions) SetRuleMatchers(ruleMatchers []RulesV1RuleMatcherIntf) *CreateRuleGroupOptions {
	_options.RuleMatchers = ruleMatchers
	return _options
}

// SetOrder : Allow user to set Order
func (_options *CreateRuleGroupOptions) SetOrder(order int64) *CreateRuleGroupOptions {
	_options.Order = core.Int64Ptr(order)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *CreateRuleGroupOptions) SetHeaders(param map[string]string) *CreateRuleGroupOptions {
	options.Headers = param
	return options
}

// CreateViewFolderOptions : The CreateViewFolder options.
type CreateViewFolderOptions struct {
	// View folder name.
	Name *string `json:"name" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateViewFolderOptions : Instantiate CreateViewFolderOptions
func (*LogsV0) NewCreateViewFolderOptions(name string) *CreateViewFolderOptions {
	return &CreateViewFolderOptions{
		Name: core.StringPtr(name),
	}
}

// SetName : Allow user to set Name
func (_options *CreateViewFolderOptions) SetName(name string) *CreateViewFolderOptions {
	_options.Name = core.StringPtr(name)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *CreateViewFolderOptions) SetHeaders(param map[string]string) *CreateViewFolderOptions {
	options.Headers = param
	return options
}

// CreateViewOptions : The CreateView options.
type CreateViewOptions struct {
	// View name.
	Name *string `json:"name" validate:"required"`

	// View time selection.
	TimeSelection ApisViewsV1TimeSelectionIntf `json:"time_selection" validate:"required"`

	// View search query.
	SearchQuery *ApisViewsV1SearchQuery `json:"search_query,omitempty"`

	// View selected filters.
	Filters *ApisViewsV1SelectedFilters `json:"filters,omitempty"`

	// View folder ID.
	FolderID *strfmt.UUID `json:"folder_id,omitempty"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewCreateViewOptions : Instantiate CreateViewOptions
func (*LogsV0) NewCreateViewOptions(name string, timeSelection ApisViewsV1TimeSelectionIntf) *CreateViewOptions {
	return &CreateViewOptions{
		Name: core.StringPtr(name),
		TimeSelection: timeSelection,
	}
}

// SetName : Allow user to set Name
func (_options *CreateViewOptions) SetName(name string) *CreateViewOptions {
	_options.Name = core.StringPtr(name)
	return _options
}

// SetTimeSelection : Allow user to set TimeSelection
func (_options *CreateViewOptions) SetTimeSelection(timeSelection ApisViewsV1TimeSelectionIntf) *CreateViewOptions {
	_options.TimeSelection = timeSelection
	return _options
}

// SetSearchQuery : Allow user to set SearchQuery
func (_options *CreateViewOptions) SetSearchQuery(searchQuery *ApisViewsV1SearchQuery) *CreateViewOptions {
	_options.SearchQuery = searchQuery
	return _options
}

// SetFilters : Allow user to set Filters
func (_options *CreateViewOptions) SetFilters(filters *ApisViewsV1SelectedFilters) *CreateViewOptions {
	_options.Filters = filters
	return _options
}

// SetFolderID : Allow user to set FolderID
func (_options *CreateViewOptions) SetFolderID(folderID *strfmt.UUID) *CreateViewOptions {
	_options.FolderID = folderID
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *CreateViewOptions) SetHeaders(param map[string]string) *CreateViewOptions {
	options.Headers = param
	return options
}

// Dashboard : Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.
// Models which "extend" this model:
// - DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame
// - DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame
// - DashboardApisDashboardsV1AstDashboardFolderFolderID
// - DashboardApisDashboardsV1AstDashboardFolderFolderPath
// - DashboardApisDashboardsV1AstDashboardAutoRefreshOff
// - DashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes
// - DashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes
type Dashboard struct {
	// Unique identifier for the dashboard.
	Href *string `json:"href,omitempty"`

	// Unique identifier for the dashboard.
	ID *string `json:"id,omitempty"`

	// Display name of the dashboard.
	Name *string `json:"name" validate:"required"`

	// Brief description or summary of the dashboard's purpose or content.
	Description *string `json:"description,omitempty"`

	// Layout configuration for the dashboard's visual elements.
	Layout *ApisDashboardsV1AstLayout `json:"layout" validate:"required"`

	// List of variables that can be used within the dashboard for dynamic content.
	Variables []ApisDashboardsV1AstVariable `json:"variables,omitempty"`

	// List of filters that can be applied to the dashboard's data.
	Filters []ApisDashboardsV1AstFilter `json:"filters,omitempty"`

	// List of annotations that can be applied to the dashboard's visual elements.
	Annotations []ApisDashboardsV1AstAnnotation `json:"annotations,omitempty"`

	// Absolute time frame specifying a fixed start and end time.
	AbsoluteTimeFrame *ApisDashboardsV1CommonTimeFrame `json:"absolute_time_frame,omitempty"`

	// Relative time frame specifying a duration from the current time.
	RelativeTimeFrame *string `json:"relative_time_frame,omitempty"`

	// Unique identifier of the folder containing the dashboard.
	FolderID *ApisDashboardsV1UUID `json:"folder_id,omitempty"`

	// Path of the folder containing the dashboard.
	FolderPath *ApisDashboardsV1AstFolderPath `json:"folder_path,omitempty"`

	// Auto refresh interval is set to off.
	False *ApisDashboardsV1AstDashboardAutoRefreshOffEmpty `json:"false,omitempty"`

	// Auto refresh interval is set to two minutes.
	TwoMinutes *ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty `json:"two_minutes,omitempty"`

	// Auto refresh interval is set to five minutes.
	FiveMinutes *ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty `json:"five_minutes,omitempty"`
}
func (*Dashboard) isaDashboard() bool {
	return true
}

type DashboardIntf interface {
	isaDashboard() bool
}

// UnmarshalDashboard unmarshals an instance of Dashboard from the specified map of raw messages.
func UnmarshalDashboard(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Dashboard)
	err = core.UnmarshalPrimitive(m, "href", &obj.Href)
	if err != nil {
		err = core.SDKErrorf(err, "", "href-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "layout", &obj.Layout, UnmarshalApisDashboardsV1AstLayout)
	if err != nil {
		err = core.SDKErrorf(err, "", "layout-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "variables", &obj.Variables, UnmarshalApisDashboardsV1AstVariable)
	if err != nil {
		err = core.SDKErrorf(err, "", "variables-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "annotations", &obj.Annotations, UnmarshalApisDashboardsV1AstAnnotation)
	if err != nil {
		err = core.SDKErrorf(err, "", "annotations-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "absolute_time_frame", &obj.AbsoluteTimeFrame, UnmarshalApisDashboardsV1CommonTimeFrame)
	if err != nil {
		err = core.SDKErrorf(err, "", "absolute_time_frame-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "relative_time_frame", &obj.RelativeTimeFrame)
	if err != nil {
		err = core.SDKErrorf(err, "", "relative_time_frame-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "folder_id", &obj.FolderID, UnmarshalApisDashboardsV1UUID)
	if err != nil {
		err = core.SDKErrorf(err, "", "folder_id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "folder_path", &obj.FolderPath, UnmarshalApisDashboardsV1AstFolderPath)
	if err != nil {
		err = core.SDKErrorf(err, "", "folder_path-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "false", &obj.False, UnmarshalApisDashboardsV1AstDashboardAutoRefreshOffEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "false-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "two_minutes", &obj.TwoMinutes, UnmarshalApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "two_minutes-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "five_minutes", &obj.FiveMinutes, UnmarshalApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "five_minutes-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DashboardFolder : Dashboard folder.
type DashboardFolder struct {
	// The dashboard folder ID, uuid.
	ID *strfmt.UUID `json:"id,omitempty"`

	// The dashboard folder name, required.
	Name *string `json:"name" validate:"required"`

	// The dashboard folder parent ID, optional. If not set, the folder is a root
	//  folder, if set, the folder is a subfolder of the parent folder and needs to
	//  be a uuid.
	ParentID *strfmt.UUID `json:"parent_id,omitempty"`
}

// NewDashboardFolder : Instantiate DashboardFolder (Generic Model Constructor)
func (*LogsV0) NewDashboardFolder(name string) (_model *DashboardFolder, err error) {
	_model = &DashboardFolder{
		Name: core.StringPtr(name),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalDashboardFolder unmarshals an instance of DashboardFolder from the specified map of raw messages.
func UnmarshalDashboardFolder(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DashboardFolder)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "parent_id", &obj.ParentID)
	if err != nil {
		err = core.SDKErrorf(err, "", "parent_id-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DashboardFolderCollection : The list of folders.
type DashboardFolderCollection struct {
	// The list of folders.
	Folders []DashboardFolder `json:"folders,omitempty"`
}

// UnmarshalDashboardFolderCollection unmarshals an instance of DashboardFolderCollection from the specified map of raw messages.
func UnmarshalDashboardFolderCollection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DashboardFolderCollection)
	err = core.UnmarshalModel(m, "folders", &obj.Folders, UnmarshalDashboardFolder)
	if err != nil {
		err = core.SDKErrorf(err, "", "folders-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DataAccessRule : Data Access Rule details.
type DataAccessRule struct {
	// Data Access Rule ID.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Data Access Rule Display Name.
	DisplayName *string `json:"display_name" validate:"required"`

	// Optional Data Access Rule Description.
	Description *string `json:"description,omitempty"`

	// List of filters that the Data Access Rule is composed of.
	Filters []DataAccessRuleFilter `json:"filters,omitempty"`

	// Default expression to use when no filter matches the query.
	DefaultExpression *string `json:"default_expression" validate:"required"`
}

// UnmarshalDataAccessRule unmarshals an instance of DataAccessRule from the specified map of raw messages.
func UnmarshalDataAccessRule(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DataAccessRule)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "display_name", &obj.DisplayName)
	if err != nil {
		err = core.SDKErrorf(err, "", "display_name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalDataAccessRuleFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "default_expression", &obj.DefaultExpression)
	if err != nil {
		err = core.SDKErrorf(err, "", "default_expression-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DataAccessRuleCollection : Get Data Access Rules Response.
type DataAccessRuleCollection struct {
	// Data Access Rule details.
	DataAccessRules []DataAccessRule `json:"data_access_rules" validate:"required"`
}

// UnmarshalDataAccessRuleCollection unmarshals an instance of DataAccessRuleCollection from the specified map of raw messages.
func UnmarshalDataAccessRuleCollection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DataAccessRuleCollection)
	err = core.UnmarshalModel(m, "data_access_rules", &obj.DataAccessRules, UnmarshalDataAccessRule)
	if err != nil {
		err = core.SDKErrorf(err, "", "data_access_rules-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DataAccessRuleFilter : List of filters that the Data Access Rule is composed of.
type DataAccessRuleFilter struct {
	// Filter's Entity Type.
	EntityType *string `json:"entity_type" validate:"required"`

	// Filter's Expression.
	Expression *string `json:"expression" validate:"required"`
}

// Constants associated with the DataAccessRuleFilter.EntityType property.
// Filter's Entity Type.
const (
	DataAccessRuleFilter_EntityType_Logs = "logs"
	DataAccessRuleFilter_EntityType_Unspecified = "unspecified"
)

// NewDataAccessRuleFilter : Instantiate DataAccessRuleFilter (Generic Model Constructor)
func (*LogsV0) NewDataAccessRuleFilter(entityType string, expression string) (_model *DataAccessRuleFilter, err error) {
	_model = &DataAccessRuleFilter{
		EntityType: core.StringPtr(entityType),
		Expression: core.StringPtr(expression),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalDataAccessRuleFilter unmarshals an instance of DataAccessRuleFilter from the specified map of raw messages.
func UnmarshalDataAccessRuleFilter(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DataAccessRuleFilter)
	err = core.UnmarshalPrimitive(m, "entity_type", &obj.EntityType)
	if err != nil {
		err = core.SDKErrorf(err, "", "entity_type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "expression", &obj.Expression)
	if err != nil {
		err = core.SDKErrorf(err, "", "expression-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DataUsageMetricsExportStatus : The data usage metrics export status.
type DataUsageMetricsExportStatus struct {
	// The "enabled" parameter for metrics export.
	Enabled *bool `json:"enabled" validate:"required"`
}

// NewDataUsageMetricsExportStatus : Instantiate DataUsageMetricsExportStatus (Generic Model Constructor)
func (*LogsV0) NewDataUsageMetricsExportStatus(enabled bool) (_model *DataUsageMetricsExportStatus, err error) {
	_model = &DataUsageMetricsExportStatus{
		Enabled: core.BoolPtr(enabled),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalDataUsageMetricsExportStatus unmarshals an instance of DataUsageMetricsExportStatus from the specified map of raw messages.
func UnmarshalDataUsageMetricsExportStatus(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DataUsageMetricsExportStatus)
	err = core.UnmarshalPrimitive(m, "enabled", &obj.Enabled)
	if err != nil {
		err = core.SDKErrorf(err, "", "enabled-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DeleteAlertOptions : The DeleteAlert options.
type DeleteAlertOptions struct {
	// Alert ID.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteAlertOptions : Instantiate DeleteAlertOptions
func (*LogsV0) NewDeleteAlertOptions(id *strfmt.UUID) *DeleteAlertOptions {
	return &DeleteAlertOptions{
		ID: id,
	}
}

// SetID : Allow user to set ID
func (_options *DeleteAlertOptions) SetID(id *strfmt.UUID) *DeleteAlertOptions {
	_options.ID = id
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteAlertOptions) SetHeaders(param map[string]string) *DeleteAlertOptions {
	options.Headers = param
	return options
}

// DeleteDashboardFolderOptions : The DeleteDashboardFolder options.
type DeleteDashboardFolderOptions struct {
	// The folder ID.
	FolderID *strfmt.UUID `json:"folder_id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteDashboardFolderOptions : Instantiate DeleteDashboardFolderOptions
func (*LogsV0) NewDeleteDashboardFolderOptions(folderID *strfmt.UUID) *DeleteDashboardFolderOptions {
	return &DeleteDashboardFolderOptions{
		FolderID: folderID,
	}
}

// SetFolderID : Allow user to set FolderID
func (_options *DeleteDashboardFolderOptions) SetFolderID(folderID *strfmt.UUID) *DeleteDashboardFolderOptions {
	_options.FolderID = folderID
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteDashboardFolderOptions) SetHeaders(param map[string]string) *DeleteDashboardFolderOptions {
	options.Headers = param
	return options
}

// DeleteDashboardOptions : The DeleteDashboard options.
type DeleteDashboardOptions struct {
	// The ID of the dashboard.
	DashboardID *string `json:"dashboard_id" validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteDashboardOptions : Instantiate DeleteDashboardOptions
func (*LogsV0) NewDeleteDashboardOptions(dashboardID string) *DeleteDashboardOptions {
	return &DeleteDashboardOptions{
		DashboardID: core.StringPtr(dashboardID),
	}
}

// SetDashboardID : Allow user to set DashboardID
func (_options *DeleteDashboardOptions) SetDashboardID(dashboardID string) *DeleteDashboardOptions {
	_options.DashboardID = core.StringPtr(dashboardID)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteDashboardOptions) SetHeaders(param map[string]string) *DeleteDashboardOptions {
	options.Headers = param
	return options
}

// DeleteDataAccessRuleOptions : The DeleteDataAccessRule options.
type DeleteDataAccessRuleOptions struct {
	// ID of Data Access Rule to be deleted.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteDataAccessRuleOptions : Instantiate DeleteDataAccessRuleOptions
func (*LogsV0) NewDeleteDataAccessRuleOptions(id *strfmt.UUID) *DeleteDataAccessRuleOptions {
	return &DeleteDataAccessRuleOptions{
		ID: id,
	}
}

// SetID : Allow user to set ID
func (_options *DeleteDataAccessRuleOptions) SetID(id *strfmt.UUID) *DeleteDataAccessRuleOptions {
	_options.ID = id
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteDataAccessRuleOptions) SetHeaders(param map[string]string) *DeleteDataAccessRuleOptions {
	options.Headers = param
	return options
}

// DeleteE2mOptions : The DeleteE2m options.
type DeleteE2mOptions struct {
	// ID of e2m to be deleted.
	ID *string `json:"id" validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteE2mOptions : Instantiate DeleteE2mOptions
func (*LogsV0) NewDeleteE2mOptions(id string) *DeleteE2mOptions {
	return &DeleteE2mOptions{
		ID: core.StringPtr(id),
	}
}

// SetID : Allow user to set ID
func (_options *DeleteE2mOptions) SetID(id string) *DeleteE2mOptions {
	_options.ID = core.StringPtr(id)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteE2mOptions) SetHeaders(param map[string]string) *DeleteE2mOptions {
	options.Headers = param
	return options
}

// DeleteOutgoingWebhookOptions : The DeleteOutgoingWebhook options.
type DeleteOutgoingWebhookOptions struct {
	// The ID of the Outbound Integration to delete.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteOutgoingWebhookOptions : Instantiate DeleteOutgoingWebhookOptions
func (*LogsV0) NewDeleteOutgoingWebhookOptions(id *strfmt.UUID) *DeleteOutgoingWebhookOptions {
	return &DeleteOutgoingWebhookOptions{
		ID: id,
	}
}

// SetID : Allow user to set ID
func (_options *DeleteOutgoingWebhookOptions) SetID(id *strfmt.UUID) *DeleteOutgoingWebhookOptions {
	_options.ID = id
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteOutgoingWebhookOptions) SetHeaders(param map[string]string) *DeleteOutgoingWebhookOptions {
	options.Headers = param
	return options
}

// DeletePolicyOptions : The DeletePolicy options.
type DeletePolicyOptions struct {
	// ID of policy.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeletePolicyOptions : Instantiate DeletePolicyOptions
func (*LogsV0) NewDeletePolicyOptions(id *strfmt.UUID) *DeletePolicyOptions {
	return &DeletePolicyOptions{
		ID: id,
	}
}

// SetID : Allow user to set ID
func (_options *DeletePolicyOptions) SetID(id *strfmt.UUID) *DeletePolicyOptions {
	_options.ID = id
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *DeletePolicyOptions) SetHeaders(param map[string]string) *DeletePolicyOptions {
	options.Headers = param
	return options
}

// DeleteRuleGroupOptions : The DeleteRuleGroup options.
type DeleteRuleGroupOptions struct {
	// The group ID.
	GroupID *strfmt.UUID `json:"group_id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteRuleGroupOptions : Instantiate DeleteRuleGroupOptions
func (*LogsV0) NewDeleteRuleGroupOptions(groupID *strfmt.UUID) *DeleteRuleGroupOptions {
	return &DeleteRuleGroupOptions{
		GroupID: groupID,
	}
}

// SetGroupID : Allow user to set GroupID
func (_options *DeleteRuleGroupOptions) SetGroupID(groupID *strfmt.UUID) *DeleteRuleGroupOptions {
	_options.GroupID = groupID
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteRuleGroupOptions) SetHeaders(param map[string]string) *DeleteRuleGroupOptions {
	options.Headers = param
	return options
}

// DeleteViewFolderOptions : The DeleteViewFolder options.
type DeleteViewFolderOptions struct {
	// Folder ID.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteViewFolderOptions : Instantiate DeleteViewFolderOptions
func (*LogsV0) NewDeleteViewFolderOptions(id *strfmt.UUID) *DeleteViewFolderOptions {
	return &DeleteViewFolderOptions{
		ID: id,
	}
}

// SetID : Allow user to set ID
func (_options *DeleteViewFolderOptions) SetID(id *strfmt.UUID) *DeleteViewFolderOptions {
	_options.ID = id
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteViewFolderOptions) SetHeaders(param map[string]string) *DeleteViewFolderOptions {
	options.Headers = param
	return options
}

// DeleteViewOptions : The DeleteView options.
type DeleteViewOptions struct {
	// View ID.
	ID *int64 `json:"id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewDeleteViewOptions : Instantiate DeleteViewOptions
func (*LogsV0) NewDeleteViewOptions(id int64) *DeleteViewOptions {
	return &DeleteViewOptions{
		ID: core.Int64Ptr(id),
	}
}

// SetID : Allow user to set ID
func (_options *DeleteViewOptions) SetID(id int64) *DeleteViewOptions {
	_options.ID = core.Int64Ptr(id)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *DeleteViewOptions) SetHeaders(param map[string]string) *DeleteViewOptions {
	options.Headers = param
	return options
}

// Enrichment : The enrichments.
type Enrichment struct {
	// The enrichment ID.
	ID *int64 `json:"id" validate:"required"`

	// The enrichment field name.
	FieldName *string `json:"field_name" validate:"required"`

	// The enrichment type.
	EnrichmentType EnrichmentV1EnrichmentTypeIntf `json:"enrichment_type" validate:"required"`
}

// UnmarshalEnrichment unmarshals an instance of Enrichment from the specified map of raw messages.
func UnmarshalEnrichment(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Enrichment)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "field_name", &obj.FieldName)
	if err != nil {
		err = core.SDKErrorf(err, "", "field_name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "enrichment_type", &obj.EnrichmentType, UnmarshalEnrichmentV1EnrichmentType)
	if err != nil {
		err = core.SDKErrorf(err, "", "enrichment_type-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// EnrichmentV1CustomEnrichmentType : The custom enrichment.
type EnrichmentV1CustomEnrichmentType struct {
	// The ID of the custom enrichment.
	ID *int64 `json:"id,omitempty"`
}

// UnmarshalEnrichmentV1CustomEnrichmentType unmarshals an instance of EnrichmentV1CustomEnrichmentType from the specified map of raw messages.
func UnmarshalEnrichmentV1CustomEnrichmentType(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(EnrichmentV1CustomEnrichmentType)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// EnrichmentV1EnrichmentType : The enrichment type.
// Models which "extend" this model:
// - EnrichmentV1EnrichmentTypeTypeGeoIp
// - EnrichmentV1EnrichmentTypeTypeSuspiciousIp
// - EnrichmentV1EnrichmentTypeTypeCustomEnrichment
type EnrichmentV1EnrichmentType struct {
	// The geo ip enrichment.
	GeoIp *EnrichmentV1GeoIpTypeEmpty `json:"geo_ip,omitempty"`

	// The suspicious ip enrichment.
	SuspiciousIp *EnrichmentV1SuspiciousIpTypeEmpty `json:"suspicious_ip,omitempty"`

	// The custom enrichment.
	CustomEnrichment *EnrichmentV1CustomEnrichmentType `json:"custom_enrichment,omitempty"`
}
func (*EnrichmentV1EnrichmentType) isaEnrichmentV1EnrichmentType() bool {
	return true
}

type EnrichmentV1EnrichmentTypeIntf interface {
	isaEnrichmentV1EnrichmentType() bool
}

// UnmarshalEnrichmentV1EnrichmentType unmarshals an instance of EnrichmentV1EnrichmentType from the specified map of raw messages.
func UnmarshalEnrichmentV1EnrichmentType(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(EnrichmentV1EnrichmentType)
	err = core.UnmarshalModel(m, "geo_ip", &obj.GeoIp, UnmarshalEnrichmentV1GeoIpTypeEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "geo_ip-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "suspicious_ip", &obj.SuspiciousIp, UnmarshalEnrichmentV1SuspiciousIpTypeEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "suspicious_ip-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "custom_enrichment", &obj.CustomEnrichment, UnmarshalEnrichmentV1CustomEnrichmentType)
	if err != nil {
		err = core.SDKErrorf(err, "", "custom_enrichment-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// EnrichmentV1GeoIpTypeEmpty : The geo ip enrichment.
type EnrichmentV1GeoIpTypeEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of EnrichmentV1GeoIpTypeEmpty
func (o *EnrichmentV1GeoIpTypeEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of EnrichmentV1GeoIpTypeEmpty
func (o *EnrichmentV1GeoIpTypeEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of EnrichmentV1GeoIpTypeEmpty
func (o *EnrichmentV1GeoIpTypeEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of EnrichmentV1GeoIpTypeEmpty
func (o *EnrichmentV1GeoIpTypeEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of EnrichmentV1GeoIpTypeEmpty
func (o *EnrichmentV1GeoIpTypeEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalEnrichmentV1GeoIpTypeEmpty unmarshals an instance of EnrichmentV1GeoIpTypeEmpty from the specified map of raw messages.
func UnmarshalEnrichmentV1GeoIpTypeEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(EnrichmentV1GeoIpTypeEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// EnrichmentV1SuspiciousIpTypeEmpty : The suspicious ip enrichment.
type EnrichmentV1SuspiciousIpTypeEmpty struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of EnrichmentV1SuspiciousIpTypeEmpty
func (o *EnrichmentV1SuspiciousIpTypeEmpty) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of EnrichmentV1SuspiciousIpTypeEmpty
func (o *EnrichmentV1SuspiciousIpTypeEmpty) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of EnrichmentV1SuspiciousIpTypeEmpty
func (o *EnrichmentV1SuspiciousIpTypeEmpty) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of EnrichmentV1SuspiciousIpTypeEmpty
func (o *EnrichmentV1SuspiciousIpTypeEmpty) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of EnrichmentV1SuspiciousIpTypeEmpty
func (o *EnrichmentV1SuspiciousIpTypeEmpty) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalEnrichmentV1SuspiciousIpTypeEmpty unmarshals an instance of EnrichmentV1SuspiciousIpTypeEmpty from the specified map of raw messages.
func UnmarshalEnrichmentV1SuspiciousIpTypeEmpty(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(EnrichmentV1SuspiciousIpTypeEmpty)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// EntrichmentCollection : The enrichments collection.
type EntrichmentCollection struct {
	// The enrichments.
	Enrichments []Enrichment `json:"enrichments" validate:"required"`
}

// UnmarshalEntrichmentCollection unmarshals an instance of EntrichmentCollection from the specified map of raw messages.
func UnmarshalEntrichmentCollection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(EntrichmentCollection)
	err = core.UnmarshalModel(m, "enrichments", &obj.Enrichments, UnmarshalEnrichment)
	if err != nil {
		err = core.SDKErrorf(err, "", "enrichments-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Event2Metric : E2M represents the Event to metrics base model.
// Models which "extend" this model:
// - Event2MetricApisEvents2metricsV2E2mQueryLogsQuery
type Event2Metric struct {
	// E2M unique ID, required on update requests.
	ID *strfmt.UUID `json:"id,omitempty"`

	// Name of the E2M.
	Name *string `json:"name" validate:"required"`

	// Description of the E2M.
	Description *string `json:"description,omitempty"`

	// E2M create time.
	CreateTime *string `json:"create_time,omitempty"`

	// E2M update time.
	UpdateTime *string `json:"update_time,omitempty"`

	// Represents the limit of the permutations and if the limit was exceeded.
	Permutations *ApisEvents2metricsV2E2mPermutations `json:"permutations,omitempty"`

	// E2M metric labels.
	MetricLabels []ApisEvents2metricsV2MetricLabel `json:"metric_labels,omitempty"`

	// E2M metric fields.
	MetricFields []ApisEvents2metricsV2MetricField `json:"metric_fields,omitempty"`

	// E2M type.
	Type *string `json:"type" validate:"required"`

	// A flag that represents if the e2m is for internal usage.
	IsInternal *bool `json:"is_internal,omitempty"`

	// E2M logs query.
	LogsQuery *ApisLogs2metricsV2LogsQuery `json:"logs_query,omitempty"`
}

// Constants associated with the Event2Metric.Type property.
// E2M type.
const (
	Event2Metric_Type_Logs2metrics = "logs2metrics"
	Event2Metric_Type_Unspecified = "unspecified"
)
func (*Event2Metric) isaEvent2Metric() bool {
	return true
}

type Event2MetricIntf interface {
	isaEvent2Metric() bool
}

// UnmarshalEvent2Metric unmarshals an instance of Event2Metric from the specified map of raw messages.
func UnmarshalEvent2Metric(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Event2Metric)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "create_time", &obj.CreateTime)
	if err != nil {
		err = core.SDKErrorf(err, "", "create_time-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "update_time", &obj.UpdateTime)
	if err != nil {
		err = core.SDKErrorf(err, "", "update_time-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "permutations", &obj.Permutations, UnmarshalApisEvents2metricsV2E2mPermutations)
	if err != nil {
		err = core.SDKErrorf(err, "", "permutations-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metric_labels", &obj.MetricLabels, UnmarshalApisEvents2metricsV2MetricLabel)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_labels-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metric_fields", &obj.MetricFields, UnmarshalApisEvents2metricsV2MetricField)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_fields-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		err = core.SDKErrorf(err, "", "type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "is_internal", &obj.IsInternal)
	if err != nil {
		err = core.SDKErrorf(err, "", "is_internal-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "logs_query", &obj.LogsQuery, UnmarshalApisLogs2metricsV2LogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs_query-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Event2MetricCollection : Represents response of.
type Event2MetricCollection struct {
	// List of event to metrics definitions.
	Events2metrics []Event2MetricIntf `json:"events2metrics,omitempty"`
}

// UnmarshalEvent2MetricCollection unmarshals an instance of Event2MetricCollection from the specified map of raw messages.
func UnmarshalEvent2MetricCollection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Event2MetricCollection)
	err = core.UnmarshalModel(m, "events2metrics", &obj.Events2metrics, UnmarshalEvent2Metric)
	if err != nil {
		err = core.SDKErrorf(err, "", "events2metrics-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Event2MetricPrototype : E2M Create message.
// Models which "extend" this model:
// - Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery
type Event2MetricPrototype struct {
	// Name of E2M to create.
	Name *string `json:"name" validate:"required"`

	// Description of E2M to create.
	Description *string `json:"description,omitempty"`

	// The permutation limit of the E2M.
	PermutationsLimit *int64 `json:"permutations_limit,omitempty"`

	// E2M metric labels.
	MetricLabels []ApisEvents2metricsV2MetricLabel `json:"metric_labels,omitempty"`

	// E2M metric fields.
	MetricFields []ApisEvents2metricsV2MetricField `json:"metric_fields,omitempty"`

	// E2M type.
	Type *string `json:"type,omitempty"`

	// E2M logs query.
	LogsQuery *ApisLogs2metricsV2LogsQuery `json:"logs_query,omitempty"`
}

// Constants associated with the Event2MetricPrototype.Type property.
// E2M type.
const (
	Event2MetricPrototype_Type_Logs2metrics = "logs2metrics"
	Event2MetricPrototype_Type_Unspecified = "unspecified"
)
func (*Event2MetricPrototype) isaEvent2MetricPrototype() bool {
	return true
}

type Event2MetricPrototypeIntf interface {
	isaEvent2MetricPrototype() bool
}

// UnmarshalEvent2MetricPrototype unmarshals an instance of Event2MetricPrototype from the specified map of raw messages.
func UnmarshalEvent2MetricPrototype(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Event2MetricPrototype)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "permutations_limit", &obj.PermutationsLimit)
	if err != nil {
		err = core.SDKErrorf(err, "", "permutations_limit-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metric_labels", &obj.MetricLabels, UnmarshalApisEvents2metricsV2MetricLabel)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_labels-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metric_fields", &obj.MetricFields, UnmarshalApisEvents2metricsV2MetricField)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_fields-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		err = core.SDKErrorf(err, "", "type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "logs_query", &obj.LogsQuery, UnmarshalApisLogs2metricsV2LogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs_query-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// GetAlertOptions : The GetAlert options.
type GetAlertOptions struct {
	// Alert ID.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetAlertOptions : Instantiate GetAlertOptions
func (*LogsV0) NewGetAlertOptions(id *strfmt.UUID) *GetAlertOptions {
	return &GetAlertOptions{
		ID: id,
	}
}

// SetID : Allow user to set ID
func (_options *GetAlertOptions) SetID(id *strfmt.UUID) *GetAlertOptions {
	_options.ID = id
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *GetAlertOptions) SetHeaders(param map[string]string) *GetAlertOptions {
	options.Headers = param
	return options
}

// GetAlertsOptions : The GetAlerts options.
type GetAlertsOptions struct {

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetAlertsOptions : Instantiate GetAlertsOptions
func (*LogsV0) NewGetAlertsOptions() *GetAlertsOptions {
	return &GetAlertsOptions{}
}

// SetHeaders : Allow user to set Headers
func (options *GetAlertsOptions) SetHeaders(param map[string]string) *GetAlertsOptions {
	options.Headers = param
	return options
}

// GetCompanyPoliciesOptions : The GetCompanyPolicies options.
type GetCompanyPoliciesOptions struct {
	// Optionally filter only enabled policies.
	EnabledOnly *bool `json:"enabled_only,omitempty"`

	// Source type to filter policies by.
	SourceType *string `json:"source_type,omitempty"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the GetCompanyPoliciesOptions.SourceType property.
// Source type to filter policies by.
const (
	GetCompanyPoliciesOptions_SourceType_Logs = "logs"
	GetCompanyPoliciesOptions_SourceType_Unspecified = "unspecified"
)

// NewGetCompanyPoliciesOptions : Instantiate GetCompanyPoliciesOptions
func (*LogsV0) NewGetCompanyPoliciesOptions() *GetCompanyPoliciesOptions {
	return &GetCompanyPoliciesOptions{}
}

// SetEnabledOnly : Allow user to set EnabledOnly
func (_options *GetCompanyPoliciesOptions) SetEnabledOnly(enabledOnly bool) *GetCompanyPoliciesOptions {
	_options.EnabledOnly = core.BoolPtr(enabledOnly)
	return _options
}

// SetSourceType : Allow user to set SourceType
func (_options *GetCompanyPoliciesOptions) SetSourceType(sourceType string) *GetCompanyPoliciesOptions {
	_options.SourceType = core.StringPtr(sourceType)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *GetCompanyPoliciesOptions) SetHeaders(param map[string]string) *GetCompanyPoliciesOptions {
	options.Headers = param
	return options
}

// GetDashboardOptions : The GetDashboard options.
type GetDashboardOptions struct {
	// The ID of the dashboard.
	DashboardID *string `json:"dashboard_id" validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetDashboardOptions : Instantiate GetDashboardOptions
func (*LogsV0) NewGetDashboardOptions(dashboardID string) *GetDashboardOptions {
	return &GetDashboardOptions{
		DashboardID: core.StringPtr(dashboardID),
	}
}

// SetDashboardID : Allow user to set DashboardID
func (_options *GetDashboardOptions) SetDashboardID(dashboardID string) *GetDashboardOptions {
	_options.DashboardID = core.StringPtr(dashboardID)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *GetDashboardOptions) SetHeaders(param map[string]string) *GetDashboardOptions {
	options.Headers = param
	return options
}

// GetDataUsageMetricsExportStatusOptions : The GetDataUsageMetricsExportStatus options.
type GetDataUsageMetricsExportStatusOptions struct {

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetDataUsageMetricsExportStatusOptions : Instantiate GetDataUsageMetricsExportStatusOptions
func (*LogsV0) NewGetDataUsageMetricsExportStatusOptions() *GetDataUsageMetricsExportStatusOptions {
	return &GetDataUsageMetricsExportStatusOptions{}
}

// SetHeaders : Allow user to set Headers
func (options *GetDataUsageMetricsExportStatusOptions) SetHeaders(param map[string]string) *GetDataUsageMetricsExportStatusOptions {
	options.Headers = param
	return options
}

// GetE2mOptions : The GetE2m options.
type GetE2mOptions struct {
	// ID of e2m to be deleted.
	ID *string `json:"id" validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetE2mOptions : Instantiate GetE2mOptions
func (*LogsV0) NewGetE2mOptions(id string) *GetE2mOptions {
	return &GetE2mOptions{
		ID: core.StringPtr(id),
	}
}

// SetID : Allow user to set ID
func (_options *GetE2mOptions) SetID(id string) *GetE2mOptions {
	_options.ID = core.StringPtr(id)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *GetE2mOptions) SetHeaders(param map[string]string) *GetE2mOptions {
	options.Headers = param
	return options
}

// GetEnrichmentsOptions : The GetEnrichments options.
type GetEnrichmentsOptions struct {

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetEnrichmentsOptions : Instantiate GetEnrichmentsOptions
func (*LogsV0) NewGetEnrichmentsOptions() *GetEnrichmentsOptions {
	return &GetEnrichmentsOptions{}
}

// SetHeaders : Allow user to set Headers
func (options *GetEnrichmentsOptions) SetHeaders(param map[string]string) *GetEnrichmentsOptions {
	options.Headers = param
	return options
}

// GetOutgoingWebhookOptions : The GetOutgoingWebhook options.
type GetOutgoingWebhookOptions struct {
	// The ID of the Outbound Integration to delete.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetOutgoingWebhookOptions : Instantiate GetOutgoingWebhookOptions
func (*LogsV0) NewGetOutgoingWebhookOptions(id *strfmt.UUID) *GetOutgoingWebhookOptions {
	return &GetOutgoingWebhookOptions{
		ID: id,
	}
}

// SetID : Allow user to set ID
func (_options *GetOutgoingWebhookOptions) SetID(id *strfmt.UUID) *GetOutgoingWebhookOptions {
	_options.ID = id
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *GetOutgoingWebhookOptions) SetHeaders(param map[string]string) *GetOutgoingWebhookOptions {
	options.Headers = param
	return options
}

// GetPolicyOptions : The GetPolicy options.
type GetPolicyOptions struct {
	// ID of policy.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetPolicyOptions : Instantiate GetPolicyOptions
func (*LogsV0) NewGetPolicyOptions(id *strfmt.UUID) *GetPolicyOptions {
	return &GetPolicyOptions{
		ID: id,
	}
}

// SetID : Allow user to set ID
func (_options *GetPolicyOptions) SetID(id *strfmt.UUID) *GetPolicyOptions {
	_options.ID = id
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *GetPolicyOptions) SetHeaders(param map[string]string) *GetPolicyOptions {
	options.Headers = param
	return options
}

// GetRuleGroupOptions : The GetRuleGroup options.
type GetRuleGroupOptions struct {
	// The group ID.
	GroupID *strfmt.UUID `json:"group_id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetRuleGroupOptions : Instantiate GetRuleGroupOptions
func (*LogsV0) NewGetRuleGroupOptions(groupID *strfmt.UUID) *GetRuleGroupOptions {
	return &GetRuleGroupOptions{
		GroupID: groupID,
	}
}

// SetGroupID : Allow user to set GroupID
func (_options *GetRuleGroupOptions) SetGroupID(groupID *strfmt.UUID) *GetRuleGroupOptions {
	_options.GroupID = groupID
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *GetRuleGroupOptions) SetHeaders(param map[string]string) *GetRuleGroupOptions {
	options.Headers = param
	return options
}

// GetViewFolderOptions : The GetViewFolder options.
type GetViewFolderOptions struct {
	// Folder ID.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetViewFolderOptions : Instantiate GetViewFolderOptions
func (*LogsV0) NewGetViewFolderOptions(id *strfmt.UUID) *GetViewFolderOptions {
	return &GetViewFolderOptions{
		ID: id,
	}
}

// SetID : Allow user to set ID
func (_options *GetViewFolderOptions) SetID(id *strfmt.UUID) *GetViewFolderOptions {
	_options.ID = id
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *GetViewFolderOptions) SetHeaders(param map[string]string) *GetViewFolderOptions {
	options.Headers = param
	return options
}

// GetViewOptions : The GetView options.
type GetViewOptions struct {
	// View ID.
	ID *int64 `json:"id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewGetViewOptions : Instantiate GetViewOptions
func (*LogsV0) NewGetViewOptions(id int64) *GetViewOptions {
	return &GetViewOptions{
		ID: core.Int64Ptr(id),
	}
}

// SetID : Allow user to set ID
func (_options *GetViewOptions) SetID(id int64) *GetViewOptions {
	_options.ID = core.Int64Ptr(id)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *GetViewOptions) SetHeaders(param map[string]string) *GetViewOptions {
	options.Headers = param
	return options
}

// ListDashboardFoldersOptions : The ListDashboardFolders options.
type ListDashboardFoldersOptions struct {

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListDashboardFoldersOptions : Instantiate ListDashboardFoldersOptions
func (*LogsV0) NewListDashboardFoldersOptions() *ListDashboardFoldersOptions {
	return &ListDashboardFoldersOptions{}
}

// SetHeaders : Allow user to set Headers
func (options *ListDashboardFoldersOptions) SetHeaders(param map[string]string) *ListDashboardFoldersOptions {
	options.Headers = param
	return options
}

// ListDataAccessRulesOptions : The ListDataAccessRules options.
type ListDataAccessRulesOptions struct {
	// Array of data access rule IDs.
	ID []strfmt.UUID `json:"id,omitempty"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListDataAccessRulesOptions : Instantiate ListDataAccessRulesOptions
func (*LogsV0) NewListDataAccessRulesOptions() *ListDataAccessRulesOptions {
	return &ListDataAccessRulesOptions{}
}

// SetID : Allow user to set ID
func (_options *ListDataAccessRulesOptions) SetID(id []strfmt.UUID) *ListDataAccessRulesOptions {
	_options.ID = id
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *ListDataAccessRulesOptions) SetHeaders(param map[string]string) *ListDataAccessRulesOptions {
	options.Headers = param
	return options
}

// ListE2mOptions : The ListE2m options.
type ListE2mOptions struct {

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListE2mOptions : Instantiate ListE2mOptions
func (*LogsV0) NewListE2mOptions() *ListE2mOptions {
	return &ListE2mOptions{}
}

// SetHeaders : Allow user to set Headers
func (options *ListE2mOptions) SetHeaders(param map[string]string) *ListE2mOptions {
	options.Headers = param
	return options
}

// ListOutgoingWebhooksOptions : The ListOutgoingWebhooks options.
type ListOutgoingWebhooksOptions struct {
	// The type of the deployed Outbound Integrations to list.
	Type *string `json:"type,omitempty"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the ListOutgoingWebhooksOptions.Type property.
// The type of the deployed Outbound Integrations to list.
const (
	ListOutgoingWebhooksOptions_Type_IbmEventNotifications = "ibm_event_notifications"
)

// NewListOutgoingWebhooksOptions : Instantiate ListOutgoingWebhooksOptions
func (*LogsV0) NewListOutgoingWebhooksOptions() *ListOutgoingWebhooksOptions {
	return &ListOutgoingWebhooksOptions{}
}

// SetType : Allow user to set Type
func (_options *ListOutgoingWebhooksOptions) SetType(typeVar string) *ListOutgoingWebhooksOptions {
	_options.Type = core.StringPtr(typeVar)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *ListOutgoingWebhooksOptions) SetHeaders(param map[string]string) *ListOutgoingWebhooksOptions {
	options.Headers = param
	return options
}

// ListRuleGroupsOptions : The ListRuleGroups options.
type ListRuleGroupsOptions struct {

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListRuleGroupsOptions : Instantiate ListRuleGroupsOptions
func (*LogsV0) NewListRuleGroupsOptions() *ListRuleGroupsOptions {
	return &ListRuleGroupsOptions{}
}

// SetHeaders : Allow user to set Headers
func (options *ListRuleGroupsOptions) SetHeaders(param map[string]string) *ListRuleGroupsOptions {
	options.Headers = param
	return options
}

// ListViewFoldersOptions : The ListViewFolders options.
type ListViewFoldersOptions struct {

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListViewFoldersOptions : Instantiate ListViewFoldersOptions
func (*LogsV0) NewListViewFoldersOptions() *ListViewFoldersOptions {
	return &ListViewFoldersOptions{}
}

// SetHeaders : Allow user to set Headers
func (options *ListViewFoldersOptions) SetHeaders(param map[string]string) *ListViewFoldersOptions {
	options.Headers = param
	return options
}

// ListViewsOptions : The ListViews options.
type ListViewsOptions struct {

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewListViewsOptions : Instantiate ListViewsOptions
func (*LogsV0) NewListViewsOptions() *ListViewsOptions {
	return &ListViewsOptions{}
}

// SetHeaders : Allow user to set Headers
func (options *ListViewsOptions) SetHeaders(param map[string]string) *ListViewsOptions {
	options.Headers = param
	return options
}

// OutgoingWebhook : The Outbound Integration.
// Models which "extend" this model:
// - OutgoingWebhooksV1OutgoingWebhookConfigIbmEventNotifications
type OutgoingWebhook struct {
	// The ID of the Outbound Integration.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// The type of the deployed Outbound Integrations to list.
	Type *string `json:"type" validate:"required"`

	// The name of the Outbound Integration.
	Name *string `json:"name" validate:"required"`

	// The URL of the Outbound Integration. Null for IBM Event Notifications integration.
	URL *string `json:"url,omitempty"`

	// The creation time of the Outbound Integration.
	CreatedAt *strfmt.DateTime `json:"created_at" validate:"required"`

	// The update time of the Outbound Integration.
	UpdatedAt *strfmt.DateTime `json:"updated_at" validate:"required"`

	// The external ID of the Outbound Integration, for connecting with other parts of the system.
	ExternalID *int64 `json:"external_id" validate:"required"`

	// The configuration of the IBM Event Notifications Outbound Integration.
	IbmEventNotifications *OutgoingWebhooksV1IbmEventNotificationsConfig `json:"ibm_event_notifications,omitempty"`
}

// Constants associated with the OutgoingWebhook.Type property.
// The type of the deployed Outbound Integrations to list.
const (
	OutgoingWebhook_Type_IbmEventNotifications = "ibm_event_notifications"
)
func (*OutgoingWebhook) isaOutgoingWebhook() bool {
	return true
}

type OutgoingWebhookIntf interface {
	isaOutgoingWebhook() bool
}

// UnmarshalOutgoingWebhook unmarshals an instance of OutgoingWebhook from the specified map of raw messages.
func UnmarshalOutgoingWebhook(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(OutgoingWebhook)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		err = core.SDKErrorf(err, "", "type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "url", &obj.URL)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		err = core.SDKErrorf(err, "", "created_at-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		err = core.SDKErrorf(err, "", "updated_at-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "external_id", &obj.ExternalID)
	if err != nil {
		err = core.SDKErrorf(err, "", "external_id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "ibm_event_notifications", &obj.IbmEventNotifications, UnmarshalOutgoingWebhooksV1IbmEventNotificationsConfig)
	if err != nil {
		err = core.SDKErrorf(err, "", "ibm_event_notifications-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// OutgoingWebhookCollection : Response for listing Outbound Integrations of a specified type.
type OutgoingWebhookCollection struct {
	// The list of deployed Outbound Integrations.
	OutgoingWebhooks []OutgoingWebhookSummary `json:"outgoing_webhooks,omitempty"`
}

// UnmarshalOutgoingWebhookCollection unmarshals an instance of OutgoingWebhookCollection from the specified map of raw messages.
func UnmarshalOutgoingWebhookCollection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(OutgoingWebhookCollection)
	err = core.UnmarshalModel(m, "outgoing_webhooks", &obj.OutgoingWebhooks, UnmarshalOutgoingWebhookSummary)
	if err != nil {
		err = core.SDKErrorf(err, "", "outgoing_webhooks-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// OutgoingWebhookPrototype : The input data of the Outbound Integration.
// Models which "extend" this model:
// - OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications
type OutgoingWebhookPrototype struct {
	// The type of the deployed Outbound Integrations to list.
	Type *string `json:"type" validate:"required"`

	// The name of the Outbound Integration.
	Name *string `json:"name" validate:"required"`

	// The URL of the Outbound Integration. Null for IBM Event Notifications integration.
	URL *string `json:"url,omitempty"`

	// The configuration of the IBM Event Notifications Outbound Integration.
	IbmEventNotifications *OutgoingWebhooksV1IbmEventNotificationsConfig `json:"ibm_event_notifications,omitempty"`
}

// Constants associated with the OutgoingWebhookPrototype.Type property.
// The type of the deployed Outbound Integrations to list.
const (
	OutgoingWebhookPrototype_Type_IbmEventNotifications = "ibm_event_notifications"
)
func (*OutgoingWebhookPrototype) isaOutgoingWebhookPrototype() bool {
	return true
}

type OutgoingWebhookPrototypeIntf interface {
	isaOutgoingWebhookPrototype() bool
}

// UnmarshalOutgoingWebhookPrototype unmarshals an instance of OutgoingWebhookPrototype from the specified map of raw messages.
func UnmarshalOutgoingWebhookPrototype(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(OutgoingWebhookPrototype)
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		err = core.SDKErrorf(err, "", "type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "url", &obj.URL)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "ibm_event_notifications", &obj.IbmEventNotifications, UnmarshalOutgoingWebhooksV1IbmEventNotificationsConfig)
	if err != nil {
		err = core.SDKErrorf(err, "", "ibm_event_notifications-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// OutgoingWebhookSummary : The list of deployed Outbound Integrations.
type OutgoingWebhookSummary struct {
	// The ID of the Outbound Integration.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// The name of the Outbound Integration.
	Name *string `json:"name" validate:"required"`

	// The URL of the Outbound Integration. Null for IBM Event Notifications integration.
	URL *string `json:"url,omitempty"`

	// The creation time of the Outbound Integration.
	CreatedAt *strfmt.DateTime `json:"created_at" validate:"required"`

	// The update time of the Outbound Integration.
	UpdatedAt *strfmt.DateTime `json:"updated_at" validate:"required"`

	// The external ID of the Outbound Integration, for connecting with other parts of the system.
	ExternalID *int64 `json:"external_id" validate:"required"`
}

// UnmarshalOutgoingWebhookSummary unmarshals an instance of OutgoingWebhookSummary from the specified map of raw messages.
func UnmarshalOutgoingWebhookSummary(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(OutgoingWebhookSummary)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "url", &obj.URL)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		err = core.SDKErrorf(err, "", "created_at-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		err = core.SDKErrorf(err, "", "updated_at-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "external_id", &obj.ExternalID)
	if err != nil {
		err = core.SDKErrorf(err, "", "external_id-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// OutgoingWebhooksV1IbmEventNotificationsConfig : The configuration of the IBM Event Notifications Outbound Integration.
type OutgoingWebhooksV1IbmEventNotificationsConfig struct {
	// The ID of the selected IBM Event Notifications instance.
	EventNotificationsInstanceID *strfmt.UUID `json:"event_notifications_instance_id" validate:"required"`

	// The region ID of the selected IBM Event Notifications instance.
	RegionID *string `json:"region_id" validate:"required"`

	// The ID of the created source in the IBM Event Notifications instance. Corresponds to the Cloud Logs instance crn.
	// Not required when creating an Outbound Integration.
	SourceID *string `json:"source_id,omitempty"`

	// The name of the created source in the IBM Event Notifications instance. Not required when creating an Outbound
	// Integration.
	SourceName *string `json:"source_name,omitempty"`
}

// NewOutgoingWebhooksV1IbmEventNotificationsConfig : Instantiate OutgoingWebhooksV1IbmEventNotificationsConfig (Generic Model Constructor)
func (*LogsV0) NewOutgoingWebhooksV1IbmEventNotificationsConfig(eventNotificationsInstanceID *strfmt.UUID, regionID string) (_model *OutgoingWebhooksV1IbmEventNotificationsConfig, err error) {
	_model = &OutgoingWebhooksV1IbmEventNotificationsConfig{
		EventNotificationsInstanceID: eventNotificationsInstanceID,
		RegionID: core.StringPtr(regionID),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalOutgoingWebhooksV1IbmEventNotificationsConfig unmarshals an instance of OutgoingWebhooksV1IbmEventNotificationsConfig from the specified map of raw messages.
func UnmarshalOutgoingWebhooksV1IbmEventNotificationsConfig(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(OutgoingWebhooksV1IbmEventNotificationsConfig)
	err = core.UnmarshalPrimitive(m, "event_notifications_instance_id", &obj.EventNotificationsInstanceID)
	if err != nil {
		err = core.SDKErrorf(err, "", "event_notifications_instance_id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "region_id", &obj.RegionID)
	if err != nil {
		err = core.SDKErrorf(err, "", "region_id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "source_id", &obj.SourceID)
	if err != nil {
		err = core.SDKErrorf(err, "", "source_id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "source_name", &obj.SourceName)
	if err != nil {
		err = core.SDKErrorf(err, "", "source_name-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// PinDashboardOptions : The PinDashboard options.
type PinDashboardOptions struct {
	// The ID of the dashboard.
	DashboardID *string `json:"dashboard_id" validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewPinDashboardOptions : Instantiate PinDashboardOptions
func (*LogsV0) NewPinDashboardOptions(dashboardID string) *PinDashboardOptions {
	return &PinDashboardOptions{
		DashboardID: core.StringPtr(dashboardID),
	}
}

// SetDashboardID : Allow user to set DashboardID
func (_options *PinDashboardOptions) SetDashboardID(dashboardID string) *PinDashboardOptions {
	_options.DashboardID = core.StringPtr(dashboardID)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *PinDashboardOptions) SetHeaders(param map[string]string) *PinDashboardOptions {
	options.Headers = param
	return options
}

// PinDashboardResponse : Response for PinDashboard.
type PinDashboardResponse struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of PinDashboardResponse
func (o *PinDashboardResponse) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of PinDashboardResponse
func (o *PinDashboardResponse) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of PinDashboardResponse
func (o *PinDashboardResponse) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of PinDashboardResponse
func (o *PinDashboardResponse) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of PinDashboardResponse
func (o *PinDashboardResponse) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalPinDashboardResponse unmarshals an instance of PinDashboardResponse from the specified map of raw messages.
func UnmarshalPinDashboardResponse(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(PinDashboardResponse)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Policy : Policy resource model.
// Models which "extend" this model:
// - PolicyQuotaV1PolicySourceTypeRulesLogRules
type Policy struct {
	// Policy ID.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Company ID.
	CompanyID *int64 `json:"company_id" validate:"required"`

	// Name of policy.
	Name *string `json:"name" validate:"required"`

	// Description of policy.
	Description *string `json:"description" validate:"required"`

	// The data pipeline sources that match the policy rules will go through.
	Priority *string `json:"priority,omitempty"`

	// Soft deletion flag.
	Deleted *bool `json:"deleted,omitempty"`

	// Enabled flag.
	Enabled *bool `json:"enabled,omitempty"`

	// Order of policy in relation to other policies.
	Order *int64 `json:"order" validate:"required"`

	// Rule for matching with application.
	ApplicationRule *QuotaV1Rule `json:"application_rule,omitempty"`

	// Rule for matching with application.
	SubsystemRule *QuotaV1Rule `json:"subsystem_rule,omitempty"`

	// Created at date at utc+0.
	CreatedAt *string `json:"created_at" validate:"required"`

	// Updated at date at utc+0.
	UpdatedAt *string `json:"updated_at" validate:"required"`

	// Archive retention definition.
	ArchiveRetention *QuotaV1ArchiveRetention `json:"archive_retention,omitempty"`

	// Log rules.
	LogRules *QuotaV1LogRules `json:"log_rules,omitempty"`
}

// Constants associated with the Policy.Priority property.
// The data pipeline sources that match the policy rules will go through.
const (
	Policy_Priority_TypeBlock = "type_block"
	Policy_Priority_TypeHigh = "type_high"
	Policy_Priority_TypeLow = "type_low"
	Policy_Priority_TypeMedium = "type_medium"
	Policy_Priority_TypeUnspecified = "type_unspecified"
)
func (*Policy) isaPolicy() bool {
	return true
}

type PolicyIntf interface {
	isaPolicy() bool
}

// UnmarshalPolicy unmarshals an instance of Policy from the specified map of raw messages.
func UnmarshalPolicy(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Policy)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "company_id", &obj.CompanyID)
	if err != nil {
		err = core.SDKErrorf(err, "", "company_id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "priority", &obj.Priority)
	if err != nil {
		err = core.SDKErrorf(err, "", "priority-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "deleted", &obj.Deleted)
	if err != nil {
		err = core.SDKErrorf(err, "", "deleted-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "enabled", &obj.Enabled)
	if err != nil {
		err = core.SDKErrorf(err, "", "enabled-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "order", &obj.Order)
	if err != nil {
		err = core.SDKErrorf(err, "", "order-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "application_rule", &obj.ApplicationRule, UnmarshalQuotaV1Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "application_rule-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "subsystem_rule", &obj.SubsystemRule, UnmarshalQuotaV1Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "subsystem_rule-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		err = core.SDKErrorf(err, "", "created_at-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		err = core.SDKErrorf(err, "", "updated_at-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "archive_retention", &obj.ArchiveRetention, UnmarshalQuotaV1ArchiveRetention)
	if err != nil {
		err = core.SDKErrorf(err, "", "archive_retention-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "log_rules", &obj.LogRules, UnmarshalQuotaV1LogRules)
	if err != nil {
		err = core.SDKErrorf(err, "", "log_rules-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// PolicyCollection : Response to get company policies request.
type PolicyCollection struct {
	// Company policies.
	Policies []PolicyIntf `json:"policies,omitempty"`
}

// UnmarshalPolicyCollection unmarshals an instance of PolicyCollection from the specified map of raw messages.
func UnmarshalPolicyCollection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(PolicyCollection)
	err = core.UnmarshalModel(m, "policies", &obj.Policies, UnmarshalPolicy)
	if err != nil {
		err = core.SDKErrorf(err, "", "policies-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// PolicyPrototype : Create policy request.
// Models which "extend" this model:
// - PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules
type PolicyPrototype struct {
	// Policy name.
	Name *string `json:"name" validate:"required"`

	// Policy description.
	Description *string `json:"description,omitempty"`

	// The data pipeline sources that match the policy rules will go through.
	Priority *string `json:"priority" validate:"required"`

	// Rule for matching with application.
	ApplicationRule *QuotaV1Rule `json:"application_rule,omitempty"`

	// Rule for matching with application.
	SubsystemRule *QuotaV1Rule `json:"subsystem_rule,omitempty"`

	// Archive retention definition.
	ArchiveRetention *QuotaV1ArchiveRetention `json:"archive_retention,omitempty"`

	// Log rules.
	LogRules *QuotaV1LogRules `json:"log_rules,omitempty"`
}

// Constants associated with the PolicyPrototype.Priority property.
// The data pipeline sources that match the policy rules will go through.
const (
	PolicyPrototype_Priority_TypeBlock = "type_block"
	PolicyPrototype_Priority_TypeHigh = "type_high"
	PolicyPrototype_Priority_TypeLow = "type_low"
	PolicyPrototype_Priority_TypeMedium = "type_medium"
	PolicyPrototype_Priority_TypeUnspecified = "type_unspecified"
)
func (*PolicyPrototype) isaPolicyPrototype() bool {
	return true
}

type PolicyPrototypeIntf interface {
	isaPolicyPrototype() bool
}

// UnmarshalPolicyPrototype unmarshals an instance of PolicyPrototype from the specified map of raw messages.
func UnmarshalPolicyPrototype(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(PolicyPrototype)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "priority", &obj.Priority)
	if err != nil {
		err = core.SDKErrorf(err, "", "priority-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "application_rule", &obj.ApplicationRule, UnmarshalQuotaV1Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "application_rule-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "subsystem_rule", &obj.SubsystemRule, UnmarshalQuotaV1Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "subsystem_rule-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "archive_retention", &obj.ArchiveRetention, UnmarshalQuotaV1ArchiveRetention)
	if err != nil {
		err = core.SDKErrorf(err, "", "archive_retention-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "log_rules", &obj.LogRules, UnmarshalQuotaV1LogRules)
	if err != nil {
		err = core.SDKErrorf(err, "", "log_rules-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// QuotaV1ArchiveRetention : Archive retention definition.
type QuotaV1ArchiveRetention struct {
	// References archive retention definition.
	ID *strfmt.UUID `json:"id" validate:"required"`
}

// NewQuotaV1ArchiveRetention : Instantiate QuotaV1ArchiveRetention (Generic Model Constructor)
func (*LogsV0) NewQuotaV1ArchiveRetention(id *strfmt.UUID) (_model *QuotaV1ArchiveRetention, err error) {
	_model = &QuotaV1ArchiveRetention{
		ID: id,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalQuotaV1ArchiveRetention unmarshals an instance of QuotaV1ArchiveRetention from the specified map of raw messages.
func UnmarshalQuotaV1ArchiveRetention(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(QuotaV1ArchiveRetention)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// QuotaV1LogRules : Log rules.
type QuotaV1LogRules struct {
	// Source severities to match with.
	Severities []string `json:"severities,omitempty"`
}

// Constants associated with the QuotaV1LogRules.Severities property.
// Source severities to match with.
const (
	QuotaV1LogRules_Severities_Critical = "critical"
	QuotaV1LogRules_Severities_Debug = "debug"
	QuotaV1LogRules_Severities_Error = "error"
	QuotaV1LogRules_Severities_Info = "info"
	QuotaV1LogRules_Severities_Unspecified = "unspecified"
	QuotaV1LogRules_Severities_Verbose = "verbose"
	QuotaV1LogRules_Severities_Warning = "warning"
)

// UnmarshalQuotaV1LogRules unmarshals an instance of QuotaV1LogRules from the specified map of raw messages.
func UnmarshalQuotaV1LogRules(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(QuotaV1LogRules)
	err = core.UnmarshalPrimitive(m, "severities", &obj.Severities)
	if err != nil {
		err = core.SDKErrorf(err, "", "severities-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// QuotaV1Rule : Rule for matching with application.
type QuotaV1Rule struct {
	// Identifier of the rule.
	RuleTypeID *string `json:"rule_type_id" validate:"required"`

	// Value of the rule.
	Name *string `json:"name" validate:"required"`
}

// Constants associated with the QuotaV1Rule.RuleTypeID property.
// Identifier of the rule.
const (
	QuotaV1Rule_RuleTypeID_Includes = "includes"
	QuotaV1Rule_RuleTypeID_Is = "is"
	QuotaV1Rule_RuleTypeID_IsNot = "is_not"
	QuotaV1Rule_RuleTypeID_StartWith = "start_with"
	QuotaV1Rule_RuleTypeID_Unspecified = "unspecified"
)

// NewQuotaV1Rule : Instantiate QuotaV1Rule (Generic Model Constructor)
func (*LogsV0) NewQuotaV1Rule(ruleTypeID string, name string) (_model *QuotaV1Rule, err error) {
	_model = &QuotaV1Rule{
		RuleTypeID: core.StringPtr(ruleTypeID),
		Name: core.StringPtr(name),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalQuotaV1Rule unmarshals an instance of QuotaV1Rule from the specified map of raw messages.
func UnmarshalQuotaV1Rule(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(QuotaV1Rule)
	err = core.UnmarshalPrimitive(m, "rule_type_id", &obj.RuleTypeID)
	if err != nil {
		err = core.SDKErrorf(err, "", "rule_type_id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RemoveEnrichmentsOptions : The RemoveEnrichments options.
type RemoveEnrichmentsOptions struct {
	// The enrichment ID.
	ID *int64 `json:"id" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewRemoveEnrichmentsOptions : Instantiate RemoveEnrichmentsOptions
func (*LogsV0) NewRemoveEnrichmentsOptions(id int64) *RemoveEnrichmentsOptions {
	return &RemoveEnrichmentsOptions{
		ID: core.Int64Ptr(id),
	}
}

// SetID : Allow user to set ID
func (_options *RemoveEnrichmentsOptions) SetID(id int64) *RemoveEnrichmentsOptions {
	_options.ID = core.Int64Ptr(id)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *RemoveEnrichmentsOptions) SetHeaders(param map[string]string) *RemoveEnrichmentsOptions {
	options.Headers = param
	return options
}

// ReplaceDashboardFolderOptions : The ReplaceDashboardFolder options.
type ReplaceDashboardFolderOptions struct {
	// The folder ID.
	FolderID *strfmt.UUID `json:"folder_id" validate:"required"`

	// The dashboard folder name, required.
	Name *string `json:"name" validate:"required"`

	// The dashboard folder ID, uuid.
	ID *strfmt.UUID `json:"id,omitempty"`

	// The dashboard folder parent ID, optional. If not set, the folder is a root
	//  folder, if set, the folder is a subfolder of the parent folder and needs to
	//  be a uuid.
	ParentID *strfmt.UUID `json:"parent_id,omitempty"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceDashboardFolderOptions : Instantiate ReplaceDashboardFolderOptions
func (*LogsV0) NewReplaceDashboardFolderOptions(folderID *strfmt.UUID, name string) *ReplaceDashboardFolderOptions {
	return &ReplaceDashboardFolderOptions{
		FolderID: folderID,
		Name: core.StringPtr(name),
	}
}

// SetFolderID : Allow user to set FolderID
func (_options *ReplaceDashboardFolderOptions) SetFolderID(folderID *strfmt.UUID) *ReplaceDashboardFolderOptions {
	_options.FolderID = folderID
	return _options
}

// SetName : Allow user to set Name
func (_options *ReplaceDashboardFolderOptions) SetName(name string) *ReplaceDashboardFolderOptions {
	_options.Name = core.StringPtr(name)
	return _options
}

// SetID : Allow user to set ID
func (_options *ReplaceDashboardFolderOptions) SetID(id *strfmt.UUID) *ReplaceDashboardFolderOptions {
	_options.ID = id
	return _options
}

// SetParentID : Allow user to set ParentID
func (_options *ReplaceDashboardFolderOptions) SetParentID(parentID *strfmt.UUID) *ReplaceDashboardFolderOptions {
	_options.ParentID = parentID
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceDashboardFolderOptions) SetHeaders(param map[string]string) *ReplaceDashboardFolderOptions {
	options.Headers = param
	return options
}

// ReplaceDashboardOptions : The ReplaceDashboard options.
type ReplaceDashboardOptions struct {
	// The ID of the dashboard.
	DashboardID *string `json:"dashboard_id" validate:"required,ne="`

	// Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.
	Dashboard DashboardIntf `json:"Dashboard" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceDashboardOptions : Instantiate ReplaceDashboardOptions
func (*LogsV0) NewReplaceDashboardOptions(dashboardID string, dashboard DashboardIntf) *ReplaceDashboardOptions {
	return &ReplaceDashboardOptions{
		DashboardID: core.StringPtr(dashboardID),
		Dashboard: dashboard,
	}
}

// SetDashboardID : Allow user to set DashboardID
func (_options *ReplaceDashboardOptions) SetDashboardID(dashboardID string) *ReplaceDashboardOptions {
	_options.DashboardID = core.StringPtr(dashboardID)
	return _options
}

// SetDashboard : Allow user to set Dashboard
func (_options *ReplaceDashboardOptions) SetDashboard(dashboard DashboardIntf) *ReplaceDashboardOptions {
	_options.Dashboard = dashboard
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceDashboardOptions) SetHeaders(param map[string]string) *ReplaceDashboardOptions {
	options.Headers = param
	return options
}

// ReplaceDefaultDashboardOptions : The ReplaceDefaultDashboard options.
type ReplaceDefaultDashboardOptions struct {
	// The ID of the dashboard.
	DashboardID *string `json:"dashboard_id" validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceDefaultDashboardOptions : Instantiate ReplaceDefaultDashboardOptions
func (*LogsV0) NewReplaceDefaultDashboardOptions(dashboardID string) *ReplaceDefaultDashboardOptions {
	return &ReplaceDefaultDashboardOptions{
		DashboardID: core.StringPtr(dashboardID),
	}
}

// SetDashboardID : Allow user to set DashboardID
func (_options *ReplaceDefaultDashboardOptions) SetDashboardID(dashboardID string) *ReplaceDefaultDashboardOptions {
	_options.DashboardID = core.StringPtr(dashboardID)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceDefaultDashboardOptions) SetHeaders(param map[string]string) *ReplaceDefaultDashboardOptions {
	options.Headers = param
	return options
}

// ReplaceDefaultDashboardResponse : Response for ReplaceDefaultDashboard.
type ReplaceDefaultDashboardResponse struct {

	// Allows users to set arbitrary properties
	additionalProperties map[string]interface{}
}

// SetProperty allows the user to set an arbitrary property on an instance of ReplaceDefaultDashboardResponse
func (o *ReplaceDefaultDashboardResponse) SetProperty(key string, value interface{}) {
	if o.additionalProperties == nil {
		o.additionalProperties = make(map[string]interface{})
	}
	o.additionalProperties[key] = value
}

// SetProperties allows the user to set a map of arbitrary properties on an instance of ReplaceDefaultDashboardResponse
func (o *ReplaceDefaultDashboardResponse) SetProperties(m map[string]interface{}) {
	o.additionalProperties = make(map[string]interface{})
	for k, v := range m {
		o.additionalProperties[k] = v
	}
}

// GetProperty allows the user to retrieve an arbitrary property from an instance of ReplaceDefaultDashboardResponse
func (o *ReplaceDefaultDashboardResponse) GetProperty(key string) interface{} {
	return o.additionalProperties[key]
}

// GetProperties allows the user to retrieve the map of arbitrary properties from an instance of ReplaceDefaultDashboardResponse
func (o *ReplaceDefaultDashboardResponse) GetProperties() map[string]interface{} {
	return o.additionalProperties
}

// MarshalJSON performs custom serialization for instances of ReplaceDefaultDashboardResponse
func (o *ReplaceDefaultDashboardResponse) MarshalJSON() (buffer []byte, err error) {
	m := make(map[string]interface{})
	if len(o.additionalProperties) > 0 {
		for k, v := range o.additionalProperties {
			m[k] = v
		}
	}
	buffer, err = json.Marshal(m)
	if err != nil {
		err = core.SDKErrorf(err, "", "model-marshal", common.GetComponentInfo())
	}
	return
}

// UnmarshalReplaceDefaultDashboardResponse unmarshals an instance of ReplaceDefaultDashboardResponse from the specified map of raw messages.
func UnmarshalReplaceDefaultDashboardResponse(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ReplaceDefaultDashboardResponse)
	for k := range m {
		var v interface{}
		e := core.UnmarshalPrimitive(m, k, &v)
		if e != nil {
			err = core.SDKErrorf(e, "", "additional-properties-error", common.GetComponentInfo())
			return
		}
		obj.SetProperty(k, v)
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ReplaceE2mOptions : The ReplaceE2m options.
type ReplaceE2mOptions struct {
	// ID of e2m to be deleted.
	ID *string `json:"id" validate:"required,ne="`

	// E2M Create message.
	Event2MetricPrototype Event2MetricPrototypeIntf `json:"Event2MetricPrototype" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceE2mOptions : Instantiate ReplaceE2mOptions
func (*LogsV0) NewReplaceE2mOptions(id string, event2MetricPrototype Event2MetricPrototypeIntf) *ReplaceE2mOptions {
	return &ReplaceE2mOptions{
		ID: core.StringPtr(id),
		Event2MetricPrototype: event2MetricPrototype,
	}
}

// SetID : Allow user to set ID
func (_options *ReplaceE2mOptions) SetID(id string) *ReplaceE2mOptions {
	_options.ID = core.StringPtr(id)
	return _options
}

// SetEvent2MetricPrototype : Allow user to set Event2MetricPrototype
func (_options *ReplaceE2mOptions) SetEvent2MetricPrototype(event2MetricPrototype Event2MetricPrototypeIntf) *ReplaceE2mOptions {
	_options.Event2MetricPrototype = event2MetricPrototype
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceE2mOptions) SetHeaders(param map[string]string) *ReplaceE2mOptions {
	options.Headers = param
	return options
}

// ReplaceViewFolderOptions : The ReplaceViewFolder options.
type ReplaceViewFolderOptions struct {
	// Folder ID.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// View folder name.
	Name *string `json:"name" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceViewFolderOptions : Instantiate ReplaceViewFolderOptions
func (*LogsV0) NewReplaceViewFolderOptions(id *strfmt.UUID, name string) *ReplaceViewFolderOptions {
	return &ReplaceViewFolderOptions{
		ID: id,
		Name: core.StringPtr(name),
	}
}

// SetID : Allow user to set ID
func (_options *ReplaceViewFolderOptions) SetID(id *strfmt.UUID) *ReplaceViewFolderOptions {
	_options.ID = id
	return _options
}

// SetName : Allow user to set Name
func (_options *ReplaceViewFolderOptions) SetName(name string) *ReplaceViewFolderOptions {
	_options.Name = core.StringPtr(name)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceViewFolderOptions) SetHeaders(param map[string]string) *ReplaceViewFolderOptions {
	options.Headers = param
	return options
}

// ReplaceViewOptions : The ReplaceView options.
type ReplaceViewOptions struct {
	// View ID.
	ID *int64 `json:"id" validate:"required"`

	// View name.
	Name *string `json:"name" validate:"required"`

	// View time selection.
	TimeSelection ApisViewsV1TimeSelectionIntf `json:"time_selection" validate:"required"`

	// View search query.
	SearchQuery *ApisViewsV1SearchQuery `json:"search_query,omitempty"`

	// View selected filters.
	Filters *ApisViewsV1SelectedFilters `json:"filters,omitempty"`

	// View folder ID.
	FolderID *strfmt.UUID `json:"folder_id,omitempty"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewReplaceViewOptions : Instantiate ReplaceViewOptions
func (*LogsV0) NewReplaceViewOptions(id int64, name string, timeSelection ApisViewsV1TimeSelectionIntf) *ReplaceViewOptions {
	return &ReplaceViewOptions{
		ID: core.Int64Ptr(id),
		Name: core.StringPtr(name),
		TimeSelection: timeSelection,
	}
}

// SetID : Allow user to set ID
func (_options *ReplaceViewOptions) SetID(id int64) *ReplaceViewOptions {
	_options.ID = core.Int64Ptr(id)
	return _options
}

// SetName : Allow user to set Name
func (_options *ReplaceViewOptions) SetName(name string) *ReplaceViewOptions {
	_options.Name = core.StringPtr(name)
	return _options
}

// SetTimeSelection : Allow user to set TimeSelection
func (_options *ReplaceViewOptions) SetTimeSelection(timeSelection ApisViewsV1TimeSelectionIntf) *ReplaceViewOptions {
	_options.TimeSelection = timeSelection
	return _options
}

// SetSearchQuery : Allow user to set SearchQuery
func (_options *ReplaceViewOptions) SetSearchQuery(searchQuery *ApisViewsV1SearchQuery) *ReplaceViewOptions {
	_options.SearchQuery = searchQuery
	return _options
}

// SetFilters : Allow user to set Filters
func (_options *ReplaceViewOptions) SetFilters(filters *ApisViewsV1SelectedFilters) *ReplaceViewOptions {
	_options.Filters = filters
	return _options
}

// SetFolderID : Allow user to set FolderID
func (_options *ReplaceViewOptions) SetFolderID(folderID *strfmt.UUID) *ReplaceViewOptions {
	_options.FolderID = folderID
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *ReplaceViewOptions) SetHeaders(param map[string]string) *ReplaceViewOptions {
	options.Headers = param
	return options
}

// RuleGroup : Parsing rule group.
type RuleGroup struct {
	// The ID of the rule group.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// The name of the rule group.
	Name *string `json:"name" validate:"required"`

	// A description for the rule group, should express what is the rule group purpose.
	Description *string `json:"description,omitempty"`

	// Whether or not the rule is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// // Optional rule matchers which if matched will make the rule go through the rule group.
	RuleMatchers []RulesV1RuleMatcherIntf `json:"rule_matchers,omitempty"`

	// Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in
	// order.
	RuleSubgroups []RulesV1RuleSubgroup `json:"rule_subgroups" validate:"required"`

	// // The order in which the rule group will be evaluated. The lower the order, the more priority the group will have.
	// Not providing the order will by default create a group with the last order.
	Order *int64 `json:"order,omitempty"`
}

// UnmarshalRuleGroup unmarshals an instance of RuleGroup from the specified map of raw messages.
func UnmarshalRuleGroup(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RuleGroup)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "enabled", &obj.Enabled)
	if err != nil {
		err = core.SDKErrorf(err, "", "enabled-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "rule_matchers", &obj.RuleMatchers, UnmarshalRulesV1RuleMatcher)
	if err != nil {
		err = core.SDKErrorf(err, "", "rule_matchers-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "rule_subgroups", &obj.RuleSubgroups, UnmarshalRulesV1RuleSubgroup)
	if err != nil {
		err = core.SDKErrorf(err, "", "rule_subgroups-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "order", &obj.Order)
	if err != nil {
		err = core.SDKErrorf(err, "", "order-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RuleGroupCollection : Response model for ListRuleGroups rpc.
type RuleGroupCollection struct {
	// The rule groups.
	Rulegroups []RuleGroup `json:"rulegroups,omitempty"`
}

// UnmarshalRuleGroupCollection unmarshals an instance of RuleGroupCollection from the specified map of raw messages.
func UnmarshalRuleGroupCollection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RuleGroupCollection)
	err = core.UnmarshalModel(m, "rulegroups", &obj.Rulegroups, UnmarshalRuleGroup)
	if err != nil {
		err = core.SDKErrorf(err, "", "rulegroups-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1AllowParameters : Parameters for allow rule.
type RulesV1AllowParameters struct {
	// If true matched logs will be blocked, otherwise matched logs will be kept.
	KeepBlockedLogs *bool `json:"keep_blocked_logs" validate:"required"`

	// Regex which will match the source field and decide if the rule will apply.
	Rule *string `json:"rule" validate:"required"`
}

// NewRulesV1AllowParameters : Instantiate RulesV1AllowParameters (Generic Model Constructor)
func (*LogsV0) NewRulesV1AllowParameters(keepBlockedLogs bool, rule string) (_model *RulesV1AllowParameters, err error) {
	_model = &RulesV1AllowParameters{
		KeepBlockedLogs: core.BoolPtr(keepBlockedLogs),
		Rule: core.StringPtr(rule),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1AllowParameters unmarshals an instance of RulesV1AllowParameters from the specified map of raw messages.
func UnmarshalRulesV1AllowParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1AllowParameters)
	err = core.UnmarshalPrimitive(m, "keep_blocked_logs", &obj.KeepBlockedLogs)
	if err != nil {
		err = core.SDKErrorf(err, "", "keep_blocked_logs-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "rule", &obj.Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "rule-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1ApplicationNameConstraint : ApplicationName constraint.
type RulesV1ApplicationNameConstraint struct {
	// Only logs with this ApplicationName value will match.
	Value *string `json:"value" validate:"required"`
}

// NewRulesV1ApplicationNameConstraint : Instantiate RulesV1ApplicationNameConstraint (Generic Model Constructor)
func (*LogsV0) NewRulesV1ApplicationNameConstraint(value string) (_model *RulesV1ApplicationNameConstraint, err error) {
	_model = &RulesV1ApplicationNameConstraint{
		Value: core.StringPtr(value),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1ApplicationNameConstraint unmarshals an instance of RulesV1ApplicationNameConstraint from the specified map of raw messages.
func UnmarshalRulesV1ApplicationNameConstraint(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1ApplicationNameConstraint)
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		err = core.SDKErrorf(err, "", "value-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1BlockParameters : Parameters for block rule.
type RulesV1BlockParameters struct {
	// If true matched logs will be kept, otherwise matched logs will be blocked.
	KeepBlockedLogs *bool `json:"keep_blocked_logs" validate:"required"`

	// Regex which will match the source field and decide if the rule will apply.
	Rule *string `json:"rule" validate:"required"`
}

// NewRulesV1BlockParameters : Instantiate RulesV1BlockParameters (Generic Model Constructor)
func (*LogsV0) NewRulesV1BlockParameters(keepBlockedLogs bool, rule string) (_model *RulesV1BlockParameters, err error) {
	_model = &RulesV1BlockParameters{
		KeepBlockedLogs: core.BoolPtr(keepBlockedLogs),
		Rule: core.StringPtr(rule),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1BlockParameters unmarshals an instance of RulesV1BlockParameters from the specified map of raw messages.
func UnmarshalRulesV1BlockParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1BlockParameters)
	err = core.UnmarshalPrimitive(m, "keep_blocked_logs", &obj.KeepBlockedLogs)
	if err != nil {
		err = core.SDKErrorf(err, "", "keep_blocked_logs-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "rule", &obj.Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "rule-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1CreateRuleGroupRequestCreateRuleSubgroup : Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in
// order.
type RulesV1CreateRuleGroupRequestCreateRuleSubgroup struct {
	// Rules to run on the log.
	Rules []RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule `json:"rules" validate:"required"`

	// Whether or not the rule subgroup is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// The ordering of the rule subgroup. Lower order will run first. 0 is considered as no value.
	Order *int64 `json:"order" validate:"required"`
}

// NewRulesV1CreateRuleGroupRequestCreateRuleSubgroup : Instantiate RulesV1CreateRuleGroupRequestCreateRuleSubgroup (Generic Model Constructor)
func (*LogsV0) NewRulesV1CreateRuleGroupRequestCreateRuleSubgroup(rules []RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule, order int64) (_model *RulesV1CreateRuleGroupRequestCreateRuleSubgroup, err error) {
	_model = &RulesV1CreateRuleGroupRequestCreateRuleSubgroup{
		Rules: rules,
		Order: core.Int64Ptr(order),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1CreateRuleGroupRequestCreateRuleSubgroup unmarshals an instance of RulesV1CreateRuleGroupRequestCreateRuleSubgroup from the specified map of raw messages.
func UnmarshalRulesV1CreateRuleGroupRequestCreateRuleSubgroup(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
	err = core.UnmarshalModel(m, "rules", &obj.Rules, UnmarshalRulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
	if err != nil {
		err = core.SDKErrorf(err, "", "rules-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "enabled", &obj.Enabled)
	if err != nil {
		err = core.SDKErrorf(err, "", "enabled-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "order", &obj.Order)
	if err != nil {
		err = core.SDKErrorf(err, "", "order-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule : Rules to run on the log.
type RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule struct {
	// Optional rule name.
	Name *string `json:"name,omitempty"`

	// Optional description for the rule.
	Description *string `json:"description,omitempty"`

	// The field on which to execute the rule.
	SourceField *string `json:"source_field" validate:"required"`

	// Parameters for a rule which specifies how it should run.
	Parameters RulesV1RuleParametersIntf `json:"parameters" validate:"required"`

	// Rule parameters which define how the rule will execute.
	Enabled *bool `json:"enabled" validate:"required"`

	// The order in which the rule will execute inside the rule subgroup.
	Order *int64 `json:"order" validate:"required"`
}

// NewRulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule : Instantiate RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule (Generic Model Constructor)
func (*LogsV0) NewRulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule(sourceField string, parameters RulesV1RuleParametersIntf, enabled bool, order int64) (_model *RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule, err error) {
	_model = &RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{
		SourceField: core.StringPtr(sourceField),
		Parameters: parameters,
		Enabled: core.BoolPtr(enabled),
		Order: core.Int64Ptr(order),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule unmarshals an instance of RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule from the specified map of raw messages.
func UnmarshalRulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "source_field", &obj.SourceField)
	if err != nil {
		err = core.SDKErrorf(err, "", "source_field-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "parameters", &obj.Parameters, UnmarshalRulesV1RuleParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "enabled", &obj.Enabled)
	if err != nil {
		err = core.SDKErrorf(err, "", "enabled-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "order", &obj.Order)
	if err != nil {
		err = core.SDKErrorf(err, "", "order-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1ExtractParameters : Parameters for text extraction rule.
type RulesV1ExtractParameters struct {
	// Regex which will parse the source field and extract the json keys from it while retaining the original log.
	Rule *string `json:"rule" validate:"required"`
}

// NewRulesV1ExtractParameters : Instantiate RulesV1ExtractParameters (Generic Model Constructor)
func (*LogsV0) NewRulesV1ExtractParameters(rule string) (_model *RulesV1ExtractParameters, err error) {
	_model = &RulesV1ExtractParameters{
		Rule: core.StringPtr(rule),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1ExtractParameters unmarshals an instance of RulesV1ExtractParameters from the specified map of raw messages.
func UnmarshalRulesV1ExtractParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1ExtractParameters)
	err = core.UnmarshalPrimitive(m, "rule", &obj.Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "rule-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1ExtractTimestampParameters : Parameters for extract timestamp rule.
type RulesV1ExtractTimestampParameters struct {
	// What time format to use on the extracted time.
	Standard *string `json:"standard" validate:"required"`

	// What time format the the source field to extract from has.
	Format *string `json:"format" validate:"required"`
}

// Constants associated with the RulesV1ExtractTimestampParameters.Standard property.
// What time format to use on the extracted time.
const (
	RulesV1ExtractTimestampParameters_Standard_Golang = "golang"
	RulesV1ExtractTimestampParameters_Standard_Javasdf = "javasdf"
	RulesV1ExtractTimestampParameters_Standard_Microts = "microts"
	RulesV1ExtractTimestampParameters_Standard_Millits = "millits"
	RulesV1ExtractTimestampParameters_Standard_Nanots = "nanots"
	RulesV1ExtractTimestampParameters_Standard_Secondsts = "secondsts"
	RulesV1ExtractTimestampParameters_Standard_StrftimeOrUnspecified = "strftime_or_unspecified"
)

// NewRulesV1ExtractTimestampParameters : Instantiate RulesV1ExtractTimestampParameters (Generic Model Constructor)
func (*LogsV0) NewRulesV1ExtractTimestampParameters(standard string, format string) (_model *RulesV1ExtractTimestampParameters, err error) {
	_model = &RulesV1ExtractTimestampParameters{
		Standard: core.StringPtr(standard),
		Format: core.StringPtr(format),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1ExtractTimestampParameters unmarshals an instance of RulesV1ExtractTimestampParameters from the specified map of raw messages.
func UnmarshalRulesV1ExtractTimestampParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1ExtractTimestampParameters)
	err = core.UnmarshalPrimitive(m, "standard", &obj.Standard)
	if err != nil {
		err = core.SDKErrorf(err, "", "standard-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "format", &obj.Format)
	if err != nil {
		err = core.SDKErrorf(err, "", "format-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1JSONExtractParameters : Parameters for json extract rule.
type RulesV1JSONExtractParameters struct {
	// In which metadata field to store the extracted value.
	DestinationField *string `json:"destination_field,omitempty"`
}

// Constants associated with the RulesV1JSONExtractParameters.DestinationField property.
// In which metadata field to store the extracted value.
const (
	RulesV1JSONExtractParameters_DestinationField_CategoryOrUnspecified = "category_or_unspecified"
	RulesV1JSONExtractParameters_DestinationField_Classname = "classname"
	RulesV1JSONExtractParameters_DestinationField_Methodname = "methodname"
	RulesV1JSONExtractParameters_DestinationField_Severity = "severity"
	RulesV1JSONExtractParameters_DestinationField_Threadid = "threadid"
)

// UnmarshalRulesV1JSONExtractParameters unmarshals an instance of RulesV1JSONExtractParameters from the specified map of raw messages.
func UnmarshalRulesV1JSONExtractParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1JSONExtractParameters)
	err = core.UnmarshalPrimitive(m, "destination_field", &obj.DestinationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "destination_field-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1JSONParseParameters : Parameters for json parse rule.
type RulesV1JSONParseParameters struct {
	// Destination field under which to put the json object.
	DestinationField *string `json:"destination_field" validate:"required"`

	// Whether or not to delete the source field after running this rule.
	DeleteSource *bool `json:"delete_source,omitempty"`

	// Destination field in which to put the json stringified content.
	OverrideDest *bool `json:"override_dest" validate:"required"`
}

// NewRulesV1JSONParseParameters : Instantiate RulesV1JSONParseParameters (Generic Model Constructor)
func (*LogsV0) NewRulesV1JSONParseParameters(destinationField string, overrideDest bool) (_model *RulesV1JSONParseParameters, err error) {
	_model = &RulesV1JSONParseParameters{
		DestinationField: core.StringPtr(destinationField),
		OverrideDest: core.BoolPtr(overrideDest),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1JSONParseParameters unmarshals an instance of RulesV1JSONParseParameters from the specified map of raw messages.
func UnmarshalRulesV1JSONParseParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1JSONParseParameters)
	err = core.UnmarshalPrimitive(m, "destination_field", &obj.DestinationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "destination_field-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "delete_source", &obj.DeleteSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "delete_source-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "override_dest", &obj.OverrideDest)
	if err != nil {
		err = core.SDKErrorf(err, "", "override_dest-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1JSONStringifyParameters : Parameters for json stringify rule.
type RulesV1JSONStringifyParameters struct {
	// Destination field in which to put the json stringified content.
	DestinationField *string `json:"destination_field" validate:"required"`

	// Whether or not to delete the source field after running this rule.
	DeleteSource *bool `json:"delete_source,omitempty"`
}

// NewRulesV1JSONStringifyParameters : Instantiate RulesV1JSONStringifyParameters (Generic Model Constructor)
func (*LogsV0) NewRulesV1JSONStringifyParameters(destinationField string) (_model *RulesV1JSONStringifyParameters, err error) {
	_model = &RulesV1JSONStringifyParameters{
		DestinationField: core.StringPtr(destinationField),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1JSONStringifyParameters unmarshals an instance of RulesV1JSONStringifyParameters from the specified map of raw messages.
func UnmarshalRulesV1JSONStringifyParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1JSONStringifyParameters)
	err = core.UnmarshalPrimitive(m, "destination_field", &obj.DestinationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "destination_field-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "delete_source", &obj.DeleteSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "delete_source-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1ParseParameters : Parameters for parse rule.
type RulesV1ParseParameters struct {
	// In which field to put the parsed text.
	DestinationField *string `json:"destination_field" validate:"required"`

	// Regex which will parse the source field and extract the json keys from it while removing the source field.
	Rule *string `json:"rule" validate:"required"`
}

// NewRulesV1ParseParameters : Instantiate RulesV1ParseParameters (Generic Model Constructor)
func (*LogsV0) NewRulesV1ParseParameters(destinationField string, rule string) (_model *RulesV1ParseParameters, err error) {
	_model = &RulesV1ParseParameters{
		DestinationField: core.StringPtr(destinationField),
		Rule: core.StringPtr(rule),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1ParseParameters unmarshals an instance of RulesV1ParseParameters from the specified map of raw messages.
func UnmarshalRulesV1ParseParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1ParseParameters)
	err = core.UnmarshalPrimitive(m, "destination_field", &obj.DestinationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "destination_field-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "rule", &obj.Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "rule-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RemoveFieldsParameters : Parameters for remove fields rule.
type RulesV1RemoveFieldsParameters struct {
	// Json field paths to drop from the log.
	Fields []string `json:"fields" validate:"required"`
}

// NewRulesV1RemoveFieldsParameters : Instantiate RulesV1RemoveFieldsParameters (Generic Model Constructor)
func (*LogsV0) NewRulesV1RemoveFieldsParameters(fields []string) (_model *RulesV1RemoveFieldsParameters, err error) {
	_model = &RulesV1RemoveFieldsParameters{
		Fields: fields,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1RemoveFieldsParameters unmarshals an instance of RulesV1RemoveFieldsParameters from the specified map of raw messages.
func UnmarshalRulesV1RemoveFieldsParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RemoveFieldsParameters)
	err = core.UnmarshalPrimitive(m, "fields", &obj.Fields)
	if err != nil {
		err = core.SDKErrorf(err, "", "fields-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1ReplaceParameters : Parameters for replace rule.
type RulesV1ReplaceParameters struct {
	// In which field to put the modified text.
	DestinationField *string `json:"destination_field" validate:"required"`

	// The value to replace the matched text with.
	ReplaceNewVal *string `json:"replace_new_val" validate:"required"`

	// Regex which will match parts in the text to replace.
	Rule *string `json:"rule" validate:"required"`
}

// NewRulesV1ReplaceParameters : Instantiate RulesV1ReplaceParameters (Generic Model Constructor)
func (*LogsV0) NewRulesV1ReplaceParameters(destinationField string, replaceNewVal string, rule string) (_model *RulesV1ReplaceParameters, err error) {
	_model = &RulesV1ReplaceParameters{
		DestinationField: core.StringPtr(destinationField),
		ReplaceNewVal: core.StringPtr(replaceNewVal),
		Rule: core.StringPtr(rule),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1ReplaceParameters unmarshals an instance of RulesV1ReplaceParameters from the specified map of raw messages.
func UnmarshalRulesV1ReplaceParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1ReplaceParameters)
	err = core.UnmarshalPrimitive(m, "destination_field", &obj.DestinationField)
	if err != nil {
		err = core.SDKErrorf(err, "", "destination_field-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "replace_new_val", &obj.ReplaceNewVal)
	if err != nil {
		err = core.SDKErrorf(err, "", "replace_new_val-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "rule", &obj.Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "rule-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1Rule : Rules to run on the log.
type RulesV1Rule struct {
	// Unique identifier of the rule.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Name of the rule.
	Name *string `json:"name" validate:"required"`

	// Description of the rule.
	Description *string `json:"description,omitempty"`

	// A field on which value to execute the rule.
	SourceField *string `json:"source_field" validate:"required"`

	// Parameters for a rule which specifies how it should run.
	Parameters RulesV1RuleParametersIntf `json:"parameters" validate:"required"`

	// Whether or not to execute the rule.
	Enabled *bool `json:"enabled" validate:"required"`

	// The ordering of the rule subgroup. Lower order will run first. 0 is considered as no value.
	Order *int64 `json:"order" validate:"required"`
}

// UnmarshalRulesV1Rule unmarshals an instance of RulesV1Rule from the specified map of raw messages.
func UnmarshalRulesV1Rule(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1Rule)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "source_field", &obj.SourceField)
	if err != nil {
		err = core.SDKErrorf(err, "", "source_field-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "parameters", &obj.Parameters, UnmarshalRulesV1RuleParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "enabled", &obj.Enabled)
	if err != nil {
		err = core.SDKErrorf(err, "", "enabled-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "order", &obj.Order)
	if err != nil {
		err = core.SDKErrorf(err, "", "order-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleMatcher : // Optional rule matchers which if matched will make the rule go through the rule group.
// Models which "extend" this model:
// - RulesV1RuleMatcherConstraintApplicationName
// - RulesV1RuleMatcherConstraintSubsystemName
// - RulesV1RuleMatcherConstraintSeverity
type RulesV1RuleMatcher struct {
	// ApplicationName constraint.
	ApplicationName *RulesV1ApplicationNameConstraint `json:"application_name,omitempty"`

	// SubsystemName constraint.
	SubsystemName *RulesV1SubsystemNameConstraint `json:"subsystem_name,omitempty"`

	// Severity constraint.
	Severity *RulesV1SeverityConstraint `json:"severity,omitempty"`
}
func (*RulesV1RuleMatcher) isaRulesV1RuleMatcher() bool {
	return true
}

type RulesV1RuleMatcherIntf interface {
	isaRulesV1RuleMatcher() bool
}

// UnmarshalRulesV1RuleMatcher unmarshals an instance of RulesV1RuleMatcher from the specified map of raw messages.
func UnmarshalRulesV1RuleMatcher(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleMatcher)
	err = core.UnmarshalModel(m, "application_name", &obj.ApplicationName, UnmarshalRulesV1ApplicationNameConstraint)
	if err != nil {
		err = core.SDKErrorf(err, "", "application_name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "subsystem_name", &obj.SubsystemName, UnmarshalRulesV1SubsystemNameConstraint)
	if err != nil {
		err = core.SDKErrorf(err, "", "subsystem_name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "severity", &obj.Severity, UnmarshalRulesV1SeverityConstraint)
	if err != nil {
		err = core.SDKErrorf(err, "", "severity-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleParameters : Parameters for a rule which specifies how it should run.
// Models which "extend" this model:
// - RulesV1RuleParametersRuleParametersExtractParameters
// - RulesV1RuleParametersRuleParametersJSONExtractParameters
// - RulesV1RuleParametersRuleParametersReplaceParameters
// - RulesV1RuleParametersRuleParametersParseParameters
// - RulesV1RuleParametersRuleParametersAllowParameters
// - RulesV1RuleParametersRuleParametersBlockParameters
// - RulesV1RuleParametersRuleParametersExtractTimestampParameters
// - RulesV1RuleParametersRuleParametersRemoveFieldsParameters
// - RulesV1RuleParametersRuleParametersJSONStringifyParameters
// - RulesV1RuleParametersRuleParametersJSONParseParameters
type RulesV1RuleParameters struct {
	// Parameters for text extraction rule.
	ExtractParameters *RulesV1ExtractParameters `json:"extract_parameters,omitempty"`

	// Parameters for json extract rule.
	JSONExtractParameters *RulesV1JSONExtractParameters `json:"json_extract_parameters,omitempty"`

	// Parameters for replace rule.
	ReplaceParameters *RulesV1ReplaceParameters `json:"replace_parameters,omitempty"`

	// Parameters for parse rule.
	ParseParameters *RulesV1ParseParameters `json:"parse_parameters,omitempty"`

	// Parameters for allow rule.
	AllowParameters *RulesV1AllowParameters `json:"allow_parameters,omitempty"`

	// Parameters for block rule.
	BlockParameters *RulesV1BlockParameters `json:"block_parameters,omitempty"`

	// Parameters for extract timestamp rule.
	ExtractTimestampParameters *RulesV1ExtractTimestampParameters `json:"extract_timestamp_parameters,omitempty"`

	// Parameters for remove fields rule.
	RemoveFieldsParameters *RulesV1RemoveFieldsParameters `json:"remove_fields_parameters,omitempty"`

	// Parameters for json stringify rule.
	JSONStringifyParameters *RulesV1JSONStringifyParameters `json:"json_stringify_parameters,omitempty"`

	// Parameters for json parse rule.
	JSONParseParameters *RulesV1JSONParseParameters `json:"json_parse_parameters,omitempty"`
}
func (*RulesV1RuleParameters) isaRulesV1RuleParameters() bool {
	return true
}

type RulesV1RuleParametersIntf interface {
	isaRulesV1RuleParameters() bool
}

// UnmarshalRulesV1RuleParameters unmarshals an instance of RulesV1RuleParameters from the specified map of raw messages.
func UnmarshalRulesV1RuleParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleParameters)
	err = core.UnmarshalModel(m, "extract_parameters", &obj.ExtractParameters, UnmarshalRulesV1ExtractParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "extract_parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "json_extract_parameters", &obj.JSONExtractParameters, UnmarshalRulesV1JSONExtractParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "json_extract_parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "replace_parameters", &obj.ReplaceParameters, UnmarshalRulesV1ReplaceParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "replace_parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "parse_parameters", &obj.ParseParameters, UnmarshalRulesV1ParseParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "parse_parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "allow_parameters", &obj.AllowParameters, UnmarshalRulesV1AllowParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "allow_parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "block_parameters", &obj.BlockParameters, UnmarshalRulesV1BlockParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "block_parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "extract_timestamp_parameters", &obj.ExtractTimestampParameters, UnmarshalRulesV1ExtractTimestampParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "extract_timestamp_parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "remove_fields_parameters", &obj.RemoveFieldsParameters, UnmarshalRulesV1RemoveFieldsParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "remove_fields_parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "json_stringify_parameters", &obj.JSONStringifyParameters, UnmarshalRulesV1JSONStringifyParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "json_stringify_parameters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "json_parse_parameters", &obj.JSONParseParameters, UnmarshalRulesV1JSONParseParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "json_parse_parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleSubgroup : Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in
// order.
type RulesV1RuleSubgroup struct {
	// The ID of the rule subgroup.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Rules to run on the log.
	Rules []RulesV1Rule `json:"rules" validate:"required"`

	// Whether or not the rule subgroup is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// The ordering of the rule subgroup. Lower order will run first. 0 is considered as no value.
	Order *int64 `json:"order" validate:"required"`
}

// UnmarshalRulesV1RuleSubgroup unmarshals an instance of RulesV1RuleSubgroup from the specified map of raw messages.
func UnmarshalRulesV1RuleSubgroup(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleSubgroup)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "rules", &obj.Rules, UnmarshalRulesV1Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "rules-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "enabled", &obj.Enabled)
	if err != nil {
		err = core.SDKErrorf(err, "", "enabled-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "order", &obj.Order)
	if err != nil {
		err = core.SDKErrorf(err, "", "order-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1SeverityConstraint : Severity constraint.
type RulesV1SeverityConstraint struct {
	// Only logs with this severity value will match.
	Value *string `json:"value" validate:"required"`
}

// Constants associated with the RulesV1SeverityConstraint.Value property.
// Only logs with this severity value will match.
const (
	RulesV1SeverityConstraint_Value_Critical = "critical"
	RulesV1SeverityConstraint_Value_DebugOrUnspecified = "debug_or_unspecified"
	RulesV1SeverityConstraint_Value_Error = "error"
	RulesV1SeverityConstraint_Value_Info = "info"
	RulesV1SeverityConstraint_Value_Verbose = "verbose"
	RulesV1SeverityConstraint_Value_Warning = "warning"
)

// NewRulesV1SeverityConstraint : Instantiate RulesV1SeverityConstraint (Generic Model Constructor)
func (*LogsV0) NewRulesV1SeverityConstraint(value string) (_model *RulesV1SeverityConstraint, err error) {
	_model = &RulesV1SeverityConstraint{
		Value: core.StringPtr(value),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1SeverityConstraint unmarshals an instance of RulesV1SeverityConstraint from the specified map of raw messages.
func UnmarshalRulesV1SeverityConstraint(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1SeverityConstraint)
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		err = core.SDKErrorf(err, "", "value-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1SubsystemNameConstraint : SubsystemName constraint.
type RulesV1SubsystemNameConstraint struct {
	// Only logs with this SubsystemName value will match.
	Value *string `json:"value" validate:"required"`
}

// NewRulesV1SubsystemNameConstraint : Instantiate RulesV1SubsystemNameConstraint (Generic Model Constructor)
func (*LogsV0) NewRulesV1SubsystemNameConstraint(value string) (_model *RulesV1SubsystemNameConstraint, err error) {
	_model = &RulesV1SubsystemNameConstraint{
		Value: core.StringPtr(value),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

// UnmarshalRulesV1SubsystemNameConstraint unmarshals an instance of RulesV1SubsystemNameConstraint from the specified map of raw messages.
func UnmarshalRulesV1SubsystemNameConstraint(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1SubsystemNameConstraint)
	err = core.UnmarshalPrimitive(m, "value", &obj.Value)
	if err != nil {
		err = core.SDKErrorf(err, "", "value-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// UnpinDashboardOptions : The UnpinDashboard options.
type UnpinDashboardOptions struct {
	// The ID of the dashboard.
	DashboardID *string `json:"dashboard_id" validate:"required,ne="`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUnpinDashboardOptions : Instantiate UnpinDashboardOptions
func (*LogsV0) NewUnpinDashboardOptions(dashboardID string) *UnpinDashboardOptions {
	return &UnpinDashboardOptions{
		DashboardID: core.StringPtr(dashboardID),
	}
}

// SetDashboardID : Allow user to set DashboardID
func (_options *UnpinDashboardOptions) SetDashboardID(dashboardID string) *UnpinDashboardOptions {
	_options.DashboardID = core.StringPtr(dashboardID)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *UnpinDashboardOptions) SetHeaders(param map[string]string) *UnpinDashboardOptions {
	options.Headers = param
	return options
}

// UpdateAlertOptions : The UpdateAlert options.
type UpdateAlertOptions struct {
	// Alert ID.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Alert name.
	Name *string `json:"name" validate:"required"`

	// Alert is active.
	IsActive *bool `json:"is_active" validate:"required"`

	// Alert severity.
	Severity *string `json:"severity" validate:"required"`

	// Alert condition.
	Condition AlertsV2AlertConditionIntf `json:"condition" validate:"required"`

	// Alert notification groups.
	NotificationGroups []AlertsV2AlertNotificationGroups `json:"notification_groups" validate:"required"`

	// Alert filters.
	Filters *AlertsV1AlertFilters `json:"filters" validate:"required"`

	// Alert description.
	Description *string `json:"description,omitempty"`

	// Alert expiration date.
	Expiration *AlertsV1Date `json:"expiration,omitempty"`

	// When should the alert be active.
	ActiveWhen *AlertsV1AlertActiveWhen `json:"active_when,omitempty"`

	// JSON keys to include in the alert notification, if left empty get the full log text in the alert notification.
	NotificationPayloadFilters []string `json:"notification_payload_filters,omitempty"`

	// The Meta labels to add to the alert.
	MetaLabels []AlertsV1MetaLabel `json:"meta_labels,omitempty"`

	// The Meta labels to add to the alert as string with ':' separator.
	MetaLabelsStrings []string `json:"meta_labels_strings,omitempty"`

	// Incident settings, will create the incident based on this configuration.
	IncidentSettings *AlertsV2AlertIncidentSettings `json:"incident_settings,omitempty"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// Constants associated with the UpdateAlertOptions.Severity property.
// Alert severity.
const (
	UpdateAlertOptions_Severity_Critical = "critical"
	UpdateAlertOptions_Severity_Error = "error"
	UpdateAlertOptions_Severity_InfoOrUnspecified = "info_or_unspecified"
	UpdateAlertOptions_Severity_Warning = "warning"
)

// NewUpdateAlertOptions : Instantiate UpdateAlertOptions
func (*LogsV0) NewUpdateAlertOptions(id *strfmt.UUID, name string, isActive bool, severity string, condition AlertsV2AlertConditionIntf, notificationGroups []AlertsV2AlertNotificationGroups, filters *AlertsV1AlertFilters) *UpdateAlertOptions {
	return &UpdateAlertOptions{
		ID: id,
		Name: core.StringPtr(name),
		IsActive: core.BoolPtr(isActive),
		Severity: core.StringPtr(severity),
		Condition: condition,
		NotificationGroups: notificationGroups,
		Filters: filters,
	}
}

// SetID : Allow user to set ID
func (_options *UpdateAlertOptions) SetID(id *strfmt.UUID) *UpdateAlertOptions {
	_options.ID = id
	return _options
}

// SetName : Allow user to set Name
func (_options *UpdateAlertOptions) SetName(name string) *UpdateAlertOptions {
	_options.Name = core.StringPtr(name)
	return _options
}

// SetIsActive : Allow user to set IsActive
func (_options *UpdateAlertOptions) SetIsActive(isActive bool) *UpdateAlertOptions {
	_options.IsActive = core.BoolPtr(isActive)
	return _options
}

// SetSeverity : Allow user to set Severity
func (_options *UpdateAlertOptions) SetSeverity(severity string) *UpdateAlertOptions {
	_options.Severity = core.StringPtr(severity)
	return _options
}

// SetCondition : Allow user to set Condition
func (_options *UpdateAlertOptions) SetCondition(condition AlertsV2AlertConditionIntf) *UpdateAlertOptions {
	_options.Condition = condition
	return _options
}

// SetNotificationGroups : Allow user to set NotificationGroups
func (_options *UpdateAlertOptions) SetNotificationGroups(notificationGroups []AlertsV2AlertNotificationGroups) *UpdateAlertOptions {
	_options.NotificationGroups = notificationGroups
	return _options
}

// SetFilters : Allow user to set Filters
func (_options *UpdateAlertOptions) SetFilters(filters *AlertsV1AlertFilters) *UpdateAlertOptions {
	_options.Filters = filters
	return _options
}

// SetDescription : Allow user to set Description
func (_options *UpdateAlertOptions) SetDescription(description string) *UpdateAlertOptions {
	_options.Description = core.StringPtr(description)
	return _options
}

// SetExpiration : Allow user to set Expiration
func (_options *UpdateAlertOptions) SetExpiration(expiration *AlertsV1Date) *UpdateAlertOptions {
	_options.Expiration = expiration
	return _options
}

// SetActiveWhen : Allow user to set ActiveWhen
func (_options *UpdateAlertOptions) SetActiveWhen(activeWhen *AlertsV1AlertActiveWhen) *UpdateAlertOptions {
	_options.ActiveWhen = activeWhen
	return _options
}

// SetNotificationPayloadFilters : Allow user to set NotificationPayloadFilters
func (_options *UpdateAlertOptions) SetNotificationPayloadFilters(notificationPayloadFilters []string) *UpdateAlertOptions {
	_options.NotificationPayloadFilters = notificationPayloadFilters
	return _options
}

// SetMetaLabels : Allow user to set MetaLabels
func (_options *UpdateAlertOptions) SetMetaLabels(metaLabels []AlertsV1MetaLabel) *UpdateAlertOptions {
	_options.MetaLabels = metaLabels
	return _options
}

// SetMetaLabelsStrings : Allow user to set MetaLabelsStrings
func (_options *UpdateAlertOptions) SetMetaLabelsStrings(metaLabelsStrings []string) *UpdateAlertOptions {
	_options.MetaLabelsStrings = metaLabelsStrings
	return _options
}

// SetIncidentSettings : Allow user to set IncidentSettings
func (_options *UpdateAlertOptions) SetIncidentSettings(incidentSettings *AlertsV2AlertIncidentSettings) *UpdateAlertOptions {
	_options.IncidentSettings = incidentSettings
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateAlertOptions) SetHeaders(param map[string]string) *UpdateAlertOptions {
	options.Headers = param
	return options
}

// UpdateDataAccessRuleOptions : The UpdateDataAccessRule options.
type UpdateDataAccessRuleOptions struct {
	// ID of Data Access Rule to be deleted.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Display Name for new Data Access Rule.
	DisplayName *string `json:"display_name" validate:"required"`

	// Filters for new Data Access Rule.
	Filters []DataAccessRuleFilter `json:"filters" validate:"required"`

	// Default Expression for new Data Access Rule.
	DefaultExpression *string `json:"default_expression" validate:"required"`

	// Description for new Data Access Rule.
	Description *string `json:"description,omitempty"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateDataAccessRuleOptions : Instantiate UpdateDataAccessRuleOptions
func (*LogsV0) NewUpdateDataAccessRuleOptions(id *strfmt.UUID, displayName string, filters []DataAccessRuleFilter, defaultExpression string) *UpdateDataAccessRuleOptions {
	return &UpdateDataAccessRuleOptions{
		ID: id,
		DisplayName: core.StringPtr(displayName),
		Filters: filters,
		DefaultExpression: core.StringPtr(defaultExpression),
	}
}

// SetID : Allow user to set ID
func (_options *UpdateDataAccessRuleOptions) SetID(id *strfmt.UUID) *UpdateDataAccessRuleOptions {
	_options.ID = id
	return _options
}

// SetDisplayName : Allow user to set DisplayName
func (_options *UpdateDataAccessRuleOptions) SetDisplayName(displayName string) *UpdateDataAccessRuleOptions {
	_options.DisplayName = core.StringPtr(displayName)
	return _options
}

// SetFilters : Allow user to set Filters
func (_options *UpdateDataAccessRuleOptions) SetFilters(filters []DataAccessRuleFilter) *UpdateDataAccessRuleOptions {
	_options.Filters = filters
	return _options
}

// SetDefaultExpression : Allow user to set DefaultExpression
func (_options *UpdateDataAccessRuleOptions) SetDefaultExpression(defaultExpression string) *UpdateDataAccessRuleOptions {
	_options.DefaultExpression = core.StringPtr(defaultExpression)
	return _options
}

// SetDescription : Allow user to set Description
func (_options *UpdateDataAccessRuleOptions) SetDescription(description string) *UpdateDataAccessRuleOptions {
	_options.Description = core.StringPtr(description)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateDataAccessRuleOptions) SetHeaders(param map[string]string) *UpdateDataAccessRuleOptions {
	options.Headers = param
	return options
}

// UpdateDataUsageMetricsExportStatusOptions : The UpdateDataUsageMetricsExportStatus options.
type UpdateDataUsageMetricsExportStatusOptions struct {
	// The "enabled" parameter for metrics export.
	Enabled *bool `json:"enabled" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateDataUsageMetricsExportStatusOptions : Instantiate UpdateDataUsageMetricsExportStatusOptions
func (*LogsV0) NewUpdateDataUsageMetricsExportStatusOptions(enabled bool) *UpdateDataUsageMetricsExportStatusOptions {
	return &UpdateDataUsageMetricsExportStatusOptions{
		Enabled: core.BoolPtr(enabled),
	}
}

// SetEnabled : Allow user to set Enabled
func (_options *UpdateDataUsageMetricsExportStatusOptions) SetEnabled(enabled bool) *UpdateDataUsageMetricsExportStatusOptions {
	_options.Enabled = core.BoolPtr(enabled)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateDataUsageMetricsExportStatusOptions) SetHeaders(param map[string]string) *UpdateDataUsageMetricsExportStatusOptions {
	options.Headers = param
	return options
}

// UpdateOutgoingWebhookOptions : The UpdateOutgoingWebhook options.
type UpdateOutgoingWebhookOptions struct {
	// The ID of the Outbound Integration to delete.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// The input data of the Outbound Integration.
	OutgoingWebhookPrototype OutgoingWebhookPrototypeIntf `json:"OutgoingWebhookPrototype" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateOutgoingWebhookOptions : Instantiate UpdateOutgoingWebhookOptions
func (*LogsV0) NewUpdateOutgoingWebhookOptions(id *strfmt.UUID, outgoingWebhookPrototype OutgoingWebhookPrototypeIntf) *UpdateOutgoingWebhookOptions {
	return &UpdateOutgoingWebhookOptions{
		ID: id,
		OutgoingWebhookPrototype: outgoingWebhookPrototype,
	}
}

// SetID : Allow user to set ID
func (_options *UpdateOutgoingWebhookOptions) SetID(id *strfmt.UUID) *UpdateOutgoingWebhookOptions {
	_options.ID = id
	return _options
}

// SetOutgoingWebhookPrototype : Allow user to set OutgoingWebhookPrototype
func (_options *UpdateOutgoingWebhookOptions) SetOutgoingWebhookPrototype(outgoingWebhookPrototype OutgoingWebhookPrototypeIntf) *UpdateOutgoingWebhookOptions {
	_options.OutgoingWebhookPrototype = outgoingWebhookPrototype
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateOutgoingWebhookOptions) SetHeaders(param map[string]string) *UpdateOutgoingWebhookOptions {
	options.Headers = param
	return options
}

// UpdatePolicyOptions : The UpdatePolicy options.
type UpdatePolicyOptions struct {
	// ID of policy.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Create policy request.
	PolicyPrototype PolicyPrototypeIntf `json:"PolicyPrototype" validate:"required"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdatePolicyOptions : Instantiate UpdatePolicyOptions
func (*LogsV0) NewUpdatePolicyOptions(id *strfmt.UUID, policyPrototype PolicyPrototypeIntf) *UpdatePolicyOptions {
	return &UpdatePolicyOptions{
		ID: id,
		PolicyPrototype: policyPrototype,
	}
}

// SetID : Allow user to set ID
func (_options *UpdatePolicyOptions) SetID(id *strfmt.UUID) *UpdatePolicyOptions {
	_options.ID = id
	return _options
}

// SetPolicyPrototype : Allow user to set PolicyPrototype
func (_options *UpdatePolicyOptions) SetPolicyPrototype(policyPrototype PolicyPrototypeIntf) *UpdatePolicyOptions {
	_options.PolicyPrototype = policyPrototype
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *UpdatePolicyOptions) SetHeaders(param map[string]string) *UpdatePolicyOptions {
	options.Headers = param
	return options
}

// UpdateRuleGroupOptions : The UpdateRuleGroup options.
type UpdateRuleGroupOptions struct {
	// The group ID.
	GroupID *strfmt.UUID `json:"group_id" validate:"required"`

	// The name of the rule group.
	Name *string `json:"name" validate:"required"`

	// Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in
	// order.
	RuleSubgroups []RulesV1CreateRuleGroupRequestCreateRuleSubgroup `json:"rule_subgroups" validate:"required"`

	// A description for the rule group, should express what is the rule group purpose.
	Description *string `json:"description,omitempty"`

	// Whether or not the rule is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// Optional rule matchers which if matched will make the rule go through the rule group.
	RuleMatchers []RulesV1RuleMatcherIntf `json:"rule_matchers,omitempty"`

	// The order in which the rule group will be evaluated. The lower the order, the more priority the group will have. Not
	// providing the order will by default create a group with the last order.
	Order *int64 `json:"order,omitempty"`

	// Allows users to set headers on API requests
	Headers map[string]string
}

// NewUpdateRuleGroupOptions : Instantiate UpdateRuleGroupOptions
func (*LogsV0) NewUpdateRuleGroupOptions(groupID *strfmt.UUID, name string, ruleSubgroups []RulesV1CreateRuleGroupRequestCreateRuleSubgroup) *UpdateRuleGroupOptions {
	return &UpdateRuleGroupOptions{
		GroupID: groupID,
		Name: core.StringPtr(name),
		RuleSubgroups: ruleSubgroups,
	}
}

// SetGroupID : Allow user to set GroupID
func (_options *UpdateRuleGroupOptions) SetGroupID(groupID *strfmt.UUID) *UpdateRuleGroupOptions {
	_options.GroupID = groupID
	return _options
}

// SetName : Allow user to set Name
func (_options *UpdateRuleGroupOptions) SetName(name string) *UpdateRuleGroupOptions {
	_options.Name = core.StringPtr(name)
	return _options
}

// SetRuleSubgroups : Allow user to set RuleSubgroups
func (_options *UpdateRuleGroupOptions) SetRuleSubgroups(ruleSubgroups []RulesV1CreateRuleGroupRequestCreateRuleSubgroup) *UpdateRuleGroupOptions {
	_options.RuleSubgroups = ruleSubgroups
	return _options
}

// SetDescription : Allow user to set Description
func (_options *UpdateRuleGroupOptions) SetDescription(description string) *UpdateRuleGroupOptions {
	_options.Description = core.StringPtr(description)
	return _options
}

// SetEnabled : Allow user to set Enabled
func (_options *UpdateRuleGroupOptions) SetEnabled(enabled bool) *UpdateRuleGroupOptions {
	_options.Enabled = core.BoolPtr(enabled)
	return _options
}

// SetRuleMatchers : Allow user to set RuleMatchers
func (_options *UpdateRuleGroupOptions) SetRuleMatchers(ruleMatchers []RulesV1RuleMatcherIntf) *UpdateRuleGroupOptions {
	_options.RuleMatchers = ruleMatchers
	return _options
}

// SetOrder : Allow user to set Order
func (_options *UpdateRuleGroupOptions) SetOrder(order int64) *UpdateRuleGroupOptions {
	_options.Order = core.Int64Ptr(order)
	return _options
}

// SetHeaders : Allow user to set Headers
func (options *UpdateRuleGroupOptions) SetHeaders(param map[string]string) *UpdateRuleGroupOptions {
	options.Headers = param
	return options
}

// View : View.
type View struct {
	// View ID.
	ID *int64 `json:"id" validate:"required"`

	// View name.
	Name *string `json:"name" validate:"required"`

	// View search query.
	SearchQuery *ApisViewsV1SearchQuery `json:"search_query,omitempty"`

	// View time selection.
	TimeSelection ApisViewsV1TimeSelectionIntf `json:"time_selection" validate:"required"`

	// View selected filters.
	Filters *ApisViewsV1SelectedFilters `json:"filters,omitempty"`

	// View folder ID.
	FolderID *strfmt.UUID `json:"folder_id,omitempty"`
}

// UnmarshalView unmarshals an instance of View from the specified map of raw messages.
func UnmarshalView(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(View)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "search_query", &obj.SearchQuery, UnmarshalApisViewsV1SearchQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "search_query-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "time_selection", &obj.TimeSelection, UnmarshalApisViewsV1TimeSelection)
	if err != nil {
		err = core.SDKErrorf(err, "", "time_selection-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisViewsV1SelectedFilters)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "folder_id", &obj.FolderID)
	if err != nil {
		err = core.SDKErrorf(err, "", "folder_id-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ViewCollection : List of views.
type ViewCollection struct {
	// List of views.
	Views []View `json:"views,omitempty"`
}

// UnmarshalViewCollection unmarshals an instance of ViewCollection from the specified map of raw messages.
func UnmarshalViewCollection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ViewCollection)
	err = core.UnmarshalModel(m, "views", &obj.Views, UnmarshalView)
	if err != nil {
		err = core.SDKErrorf(err, "", "views-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ViewFolder : View folder.
type ViewFolder struct {
	// Folder ID.
	ID *strfmt.UUID `json:"id,omitempty"`

	// Folder name.
	Name *string `json:"name" validate:"required"`
}

// UnmarshalViewFolder unmarshals an instance of ViewFolder from the specified map of raw messages.
func UnmarshalViewFolder(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ViewFolder)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ViewFolderCollection : List view's folders response.
type ViewFolderCollection struct {
	// List of view folders.
	ViewFolders []ViewFolder `json:"view_folders,omitempty"`
}

// UnmarshalViewFolderCollection unmarshals an instance of ViewFolderCollection from the specified map of raw messages.
func UnmarshalViewFolderCollection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ViewFolderCollection)
	err = core.UnmarshalModel(m, "view_folders", &obj.ViewFolders, UnmarshalViewFolder)
	if err != nil {
		err = core.SDKErrorf(err, "", "view_folders-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertConditionConditionFlow : AlertsV2AlertConditionConditionFlow struct
// This model "extends" AlertsV2AlertCondition
type AlertsV2AlertConditionConditionFlow struct {
	// Condition for flow alert.
	Flow *AlertsV2FlowCondition `json:"flow,omitempty"`
}

func (*AlertsV2AlertConditionConditionFlow) isaAlertsV2AlertCondition() bool {
	return true
}

// UnmarshalAlertsV2AlertConditionConditionFlow unmarshals an instance of AlertsV2AlertConditionConditionFlow from the specified map of raw messages.
func UnmarshalAlertsV2AlertConditionConditionFlow(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertConditionConditionFlow)
	err = core.UnmarshalModel(m, "flow", &obj.Flow, UnmarshalAlertsV2FlowCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "flow-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertConditionConditionImmediate : AlertsV2AlertConditionConditionImmediate struct
// This model "extends" AlertsV2AlertCondition
type AlertsV2AlertConditionConditionImmediate struct {
	// Condition for immediate standard alert.
	Immediate *AlertsV2ImmediateConditionEmpty `json:"immediate,omitempty"`
}

func (*AlertsV2AlertConditionConditionImmediate) isaAlertsV2AlertCondition() bool {
	return true
}

// UnmarshalAlertsV2AlertConditionConditionImmediate unmarshals an instance of AlertsV2AlertConditionConditionImmediate from the specified map of raw messages.
func UnmarshalAlertsV2AlertConditionConditionImmediate(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertConditionConditionImmediate)
	err = core.UnmarshalModel(m, "immediate", &obj.Immediate, UnmarshalAlertsV2ImmediateConditionEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "immediate-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertConditionConditionLessThan : AlertsV2AlertConditionConditionLessThan struct
// This model "extends" AlertsV2AlertCondition
type AlertsV2AlertConditionConditionLessThan struct {
	// Condition for less than alert.
	LessThan *AlertsV2LessThanCondition `json:"less_than,omitempty"`
}

func (*AlertsV2AlertConditionConditionLessThan) isaAlertsV2AlertCondition() bool {
	return true
}

// UnmarshalAlertsV2AlertConditionConditionLessThan unmarshals an instance of AlertsV2AlertConditionConditionLessThan from the specified map of raw messages.
func UnmarshalAlertsV2AlertConditionConditionLessThan(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertConditionConditionLessThan)
	err = core.UnmarshalModel(m, "less_than", &obj.LessThan, UnmarshalAlertsV2LessThanCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "less_than-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertConditionConditionLessThanUsual : AlertsV2AlertConditionConditionLessThanUsual struct
// This model "extends" AlertsV2AlertCondition
type AlertsV2AlertConditionConditionLessThanUsual struct {
	// Condition for less than usual alert.
	LessThanUsual *AlertsV2LessThanUsualCondition `json:"less_than_usual,omitempty"`
}

func (*AlertsV2AlertConditionConditionLessThanUsual) isaAlertsV2AlertCondition() bool {
	return true
}

// UnmarshalAlertsV2AlertConditionConditionLessThanUsual unmarshals an instance of AlertsV2AlertConditionConditionLessThanUsual from the specified map of raw messages.
func UnmarshalAlertsV2AlertConditionConditionLessThanUsual(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertConditionConditionLessThanUsual)
	err = core.UnmarshalModel(m, "less_than_usual", &obj.LessThanUsual, UnmarshalAlertsV2LessThanUsualCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "less_than_usual-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertConditionConditionMoreThan : AlertsV2AlertConditionConditionMoreThan struct
// This model "extends" AlertsV2AlertCondition
type AlertsV2AlertConditionConditionMoreThan struct {
	// Condition for more than alert.
	MoreThan *AlertsV2MoreThanCondition `json:"more_than,omitempty"`
}

func (*AlertsV2AlertConditionConditionMoreThan) isaAlertsV2AlertCondition() bool {
	return true
}

// UnmarshalAlertsV2AlertConditionConditionMoreThan unmarshals an instance of AlertsV2AlertConditionConditionMoreThan from the specified map of raw messages.
func UnmarshalAlertsV2AlertConditionConditionMoreThan(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertConditionConditionMoreThan)
	err = core.UnmarshalModel(m, "more_than", &obj.MoreThan, UnmarshalAlertsV2MoreThanCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "more_than-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertConditionConditionMoreThanUsual : AlertsV2AlertConditionConditionMoreThanUsual struct
// This model "extends" AlertsV2AlertCondition
type AlertsV2AlertConditionConditionMoreThanUsual struct {
	// Condition for more than usual alert.
	MoreThanUsual *AlertsV2MoreThanUsualCondition `json:"more_than_usual,omitempty"`
}

func (*AlertsV2AlertConditionConditionMoreThanUsual) isaAlertsV2AlertCondition() bool {
	return true
}

// UnmarshalAlertsV2AlertConditionConditionMoreThanUsual unmarshals an instance of AlertsV2AlertConditionConditionMoreThanUsual from the specified map of raw messages.
func UnmarshalAlertsV2AlertConditionConditionMoreThanUsual(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertConditionConditionMoreThanUsual)
	err = core.UnmarshalModel(m, "more_than_usual", &obj.MoreThanUsual, UnmarshalAlertsV2MoreThanUsualCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "more_than_usual-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertConditionConditionNewValue : AlertsV2AlertConditionConditionNewValue struct
// This model "extends" AlertsV2AlertCondition
type AlertsV2AlertConditionConditionNewValue struct {
	// Condition for new value alert.
	NewValue *AlertsV2NewValueCondition `json:"new_value,omitempty"`
}

func (*AlertsV2AlertConditionConditionNewValue) isaAlertsV2AlertCondition() bool {
	return true
}

// UnmarshalAlertsV2AlertConditionConditionNewValue unmarshals an instance of AlertsV2AlertConditionConditionNewValue from the specified map of raw messages.
func UnmarshalAlertsV2AlertConditionConditionNewValue(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertConditionConditionNewValue)
	err = core.UnmarshalModel(m, "new_value", &obj.NewValue, UnmarshalAlertsV2NewValueCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "new_value-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertConditionConditionUniqueCount : AlertsV2AlertConditionConditionUniqueCount struct
// This model "extends" AlertsV2AlertCondition
type AlertsV2AlertConditionConditionUniqueCount struct {
	// Condition for unique count alert.
	UniqueCount *AlertsV2UniqueCountCondition `json:"unique_count,omitempty"`
}

func (*AlertsV2AlertConditionConditionUniqueCount) isaAlertsV2AlertCondition() bool {
	return true
}

// UnmarshalAlertsV2AlertConditionConditionUniqueCount unmarshals an instance of AlertsV2AlertConditionConditionUniqueCount from the specified map of raw messages.
func UnmarshalAlertsV2AlertConditionConditionUniqueCount(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertConditionConditionUniqueCount)
	err = core.UnmarshalModel(m, "unique_count", &obj.UniqueCount, UnmarshalAlertsV2UniqueCountCondition)
	if err != nil {
		err = core.SDKErrorf(err, "", "unique_count-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertNotificationIntegrationTypeIntegrationID : AlertsV2AlertNotificationIntegrationTypeIntegrationID struct
// This model "extends" AlertsV2AlertNotification
type AlertsV2AlertNotificationIntegrationTypeIntegrationID struct {
	// Retriggering period of the alert in seconds.
	RetriggeringPeriodSeconds *int64 `json:"retriggering_period_seconds,omitempty"`

	// Notify on setting.
	NotifyOn *string `json:"notify_on,omitempty"`

	// Integration ID.
	IntegrationID *int64 `json:"integration_id,omitempty"`
}

// Constants associated with the AlertsV2AlertNotificationIntegrationTypeIntegrationID.NotifyOn property.
// Notify on setting.
const (
	AlertsV2AlertNotificationIntegrationTypeIntegrationID_NotifyOn_TriggeredAndResolved = "triggered_and_resolved"
	AlertsV2AlertNotificationIntegrationTypeIntegrationID_NotifyOn_TriggeredOnly = "triggered_only"
)

func (*AlertsV2AlertNotificationIntegrationTypeIntegrationID) isaAlertsV2AlertNotification() bool {
	return true
}

// UnmarshalAlertsV2AlertNotificationIntegrationTypeIntegrationID unmarshals an instance of AlertsV2AlertNotificationIntegrationTypeIntegrationID from the specified map of raw messages.
func UnmarshalAlertsV2AlertNotificationIntegrationTypeIntegrationID(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertNotificationIntegrationTypeIntegrationID)
	err = core.UnmarshalPrimitive(m, "retriggering_period_seconds", &obj.RetriggeringPeriodSeconds)
	if err != nil {
		err = core.SDKErrorf(err, "", "retriggering_period_seconds-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "notify_on", &obj.NotifyOn)
	if err != nil {
		err = core.SDKErrorf(err, "", "notify_on-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "integration_id", &obj.IntegrationID)
	if err != nil {
		err = core.SDKErrorf(err, "", "integration_id-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// AlertsV2AlertNotificationIntegrationTypeRecipients : AlertsV2AlertNotificationIntegrationTypeRecipients struct
// This model "extends" AlertsV2AlertNotification
type AlertsV2AlertNotificationIntegrationTypeRecipients struct {
	// Retriggering period of the alert in seconds.
	RetriggeringPeriodSeconds *int64 `json:"retriggering_period_seconds,omitempty"`

	// Notify on setting.
	NotifyOn *string `json:"notify_on,omitempty"`

	// Recipients.
	Recipients *AlertsV2Recipients `json:"recipients,omitempty"`
}

// Constants associated with the AlertsV2AlertNotificationIntegrationTypeRecipients.NotifyOn property.
// Notify on setting.
const (
	AlertsV2AlertNotificationIntegrationTypeRecipients_NotifyOn_TriggeredAndResolved = "triggered_and_resolved"
	AlertsV2AlertNotificationIntegrationTypeRecipients_NotifyOn_TriggeredOnly = "triggered_only"
)

func (*AlertsV2AlertNotificationIntegrationTypeRecipients) isaAlertsV2AlertNotification() bool {
	return true
}

// UnmarshalAlertsV2AlertNotificationIntegrationTypeRecipients unmarshals an instance of AlertsV2AlertNotificationIntegrationTypeRecipients from the specified map of raw messages.
func UnmarshalAlertsV2AlertNotificationIntegrationTypeRecipients(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(AlertsV2AlertNotificationIntegrationTypeRecipients)
	err = core.UnmarshalPrimitive(m, "retriggering_period_seconds", &obj.RetriggeringPeriodSeconds)
	if err != nil {
		err = core.SDKErrorf(err, "", "retriggering_period_seconds-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "notify_on", &obj.NotifyOn)
	if err != nil {
		err = core.SDKErrorf(err, "", "notify_on-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "recipients", &obj.Recipients, UnmarshalAlertsV2Recipients)
	if err != nil {
		err = core.SDKErrorf(err, "", "recipients-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationLogsSourceStrategyValueDuration : ApisDashboardsV1AstAnnotationLogsSourceStrategyValueDuration struct
// This model "extends" ApisDashboardsV1AstAnnotationLogsSourceStrategy
type ApisDashboardsV1AstAnnotationLogsSourceStrategyValueDuration struct {
	// Event start timestamp and duration are extracted from the log entry.
	Duration *ApisDashboardsV1AstAnnotationLogsSourceStrategyDuration `json:"duration,omitempty"`
}

func (*ApisDashboardsV1AstAnnotationLogsSourceStrategyValueDuration) isaApisDashboardsV1AstAnnotationLogsSourceStrategy() bool {
	return true
}

// UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyValueDuration unmarshals an instance of ApisDashboardsV1AstAnnotationLogsSourceStrategyValueDuration from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyValueDuration(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationLogsSourceStrategyValueDuration)
	err = core.UnmarshalModel(m, "duration", &obj.Duration, UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyDuration)
	if err != nil {
		err = core.SDKErrorf(err, "", "duration-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationLogsSourceStrategyValueInstant : ApisDashboardsV1AstAnnotationLogsSourceStrategyValueInstant struct
// This model "extends" ApisDashboardsV1AstAnnotationLogsSourceStrategy
type ApisDashboardsV1AstAnnotationLogsSourceStrategyValueInstant struct {
	// Event timestamp is extracted from the log entry.
	Instant *ApisDashboardsV1AstAnnotationLogsSourceStrategyInstant `json:"instant,omitempty"`
}

func (*ApisDashboardsV1AstAnnotationLogsSourceStrategyValueInstant) isaApisDashboardsV1AstAnnotationLogsSourceStrategy() bool {
	return true
}

// UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyValueInstant unmarshals an instance of ApisDashboardsV1AstAnnotationLogsSourceStrategyValueInstant from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyValueInstant(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationLogsSourceStrategyValueInstant)
	err = core.UnmarshalModel(m, "instant", &obj.Instant, UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyInstant)
	if err != nil {
		err = core.SDKErrorf(err, "", "instant-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationLogsSourceStrategyValueRange : ApisDashboardsV1AstAnnotationLogsSourceStrategyValueRange struct
// This model "extends" ApisDashboardsV1AstAnnotationLogsSourceStrategy
type ApisDashboardsV1AstAnnotationLogsSourceStrategyValueRange struct {
	// Event start and end timestamps are extracted from the log entry.
	Range *ApisDashboardsV1AstAnnotationLogsSourceStrategyRange `json:"range,omitempty"`
}

func (*ApisDashboardsV1AstAnnotationLogsSourceStrategyValueRange) isaApisDashboardsV1AstAnnotationLogsSourceStrategy() bool {
	return true
}

// UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyValueRange unmarshals an instance of ApisDashboardsV1AstAnnotationLogsSourceStrategyValueRange from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyValueRange(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationLogsSourceStrategyValueRange)
	err = core.UnmarshalModel(m, "range", &obj.Range, UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyRange)
	if err != nil {
		err = core.SDKErrorf(err, "", "range-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationSourceValueLogs : ApisDashboardsV1AstAnnotationSourceValueLogs struct
// This model "extends" ApisDashboardsV1AstAnnotationSource
type ApisDashboardsV1AstAnnotationSourceValueLogs struct {
	// Logs source.
	Logs *ApisDashboardsV1AstAnnotationLogsSource `json:"logs,omitempty"`
}

func (*ApisDashboardsV1AstAnnotationSourceValueLogs) isaApisDashboardsV1AstAnnotationSource() bool {
	return true
}

// UnmarshalApisDashboardsV1AstAnnotationSourceValueLogs unmarshals an instance of ApisDashboardsV1AstAnnotationSourceValueLogs from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationSourceValueLogs(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationSourceValueLogs)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstAnnotationLogsSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstAnnotationSourceValueMetrics : ApisDashboardsV1AstAnnotationSourceValueMetrics struct
// This model "extends" ApisDashboardsV1AstAnnotationSource
type ApisDashboardsV1AstAnnotationSourceValueMetrics struct {
	// Metrics source.
	Metrics *ApisDashboardsV1AstAnnotationMetricsSource `json:"metrics,omitempty"`
}

func (*ApisDashboardsV1AstAnnotationSourceValueMetrics) isaApisDashboardsV1AstAnnotationSource() bool {
	return true
}

// UnmarshalApisDashboardsV1AstAnnotationSourceValueMetrics unmarshals an instance of ApisDashboardsV1AstAnnotationSourceValueMetrics from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstAnnotationSourceValueMetrics(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstAnnotationSourceValueMetrics)
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstAnnotationMetricsSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterEqualsSelectionValueAll : ApisDashboardsV1AstFilterEqualsSelectionValueAll struct
// This model "extends" ApisDashboardsV1AstFilterEqualsSelection
type ApisDashboardsV1AstFilterEqualsSelectionValueAll struct {
	// Represents a selection of all values.
	All *ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty `json:"all,omitempty"`
}

func (*ApisDashboardsV1AstFilterEqualsSelectionValueAll) isaApisDashboardsV1AstFilterEqualsSelection() bool {
	return true
}

// UnmarshalApisDashboardsV1AstFilterEqualsSelectionValueAll unmarshals an instance of ApisDashboardsV1AstFilterEqualsSelectionValueAll from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterEqualsSelectionValueAll(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterEqualsSelectionValueAll)
	err = core.UnmarshalModel(m, "all", &obj.All, UnmarshalApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "all-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterEqualsSelectionValueList : ApisDashboardsV1AstFilterEqualsSelectionValueList struct
// This model "extends" ApisDashboardsV1AstFilterEqualsSelection
type ApisDashboardsV1AstFilterEqualsSelectionValueList struct {
	// Represents a selection from a list of values.
	List *ApisDashboardsV1AstFilterEqualsSelectionListSelection `json:"list,omitempty"`
}

func (*ApisDashboardsV1AstFilterEqualsSelectionValueList) isaApisDashboardsV1AstFilterEqualsSelection() bool {
	return true
}

// UnmarshalApisDashboardsV1AstFilterEqualsSelectionValueList unmarshals an instance of ApisDashboardsV1AstFilterEqualsSelectionValueList from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterEqualsSelectionValueList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterEqualsSelectionValueList)
	err = core.UnmarshalModel(m, "list", &obj.List, UnmarshalApisDashboardsV1AstFilterEqualsSelectionListSelection)
	if err != nil {
		err = core.SDKErrorf(err, "", "list-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterOperatorValueEquals : ApisDashboardsV1AstFilterOperatorValueEquals struct
// This model "extends" ApisDashboardsV1AstFilterOperator
type ApisDashboardsV1AstFilterOperatorValueEquals struct {
	// Equality comparison.
	Equals *ApisDashboardsV1AstFilterEquals `json:"equals,omitempty"`
}

func (*ApisDashboardsV1AstFilterOperatorValueEquals) isaApisDashboardsV1AstFilterOperator() bool {
	return true
}

// UnmarshalApisDashboardsV1AstFilterOperatorValueEquals unmarshals an instance of ApisDashboardsV1AstFilterOperatorValueEquals from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterOperatorValueEquals(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterOperatorValueEquals)
	err = core.UnmarshalModel(m, "equals", &obj.Equals, UnmarshalApisDashboardsV1AstFilterEquals)
	if err != nil {
		err = core.SDKErrorf(err, "", "equals-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterOperatorValueNotEquals : ApisDashboardsV1AstFilterOperatorValueNotEquals struct
// This model "extends" ApisDashboardsV1AstFilterOperator
type ApisDashboardsV1AstFilterOperatorValueNotEquals struct {
	// Non-equality comparison.
	NotEquals *ApisDashboardsV1AstFilterNotEquals `json:"not_equals,omitempty"`
}

func (*ApisDashboardsV1AstFilterOperatorValueNotEquals) isaApisDashboardsV1AstFilterOperator() bool {
	return true
}

// UnmarshalApisDashboardsV1AstFilterOperatorValueNotEquals unmarshals an instance of ApisDashboardsV1AstFilterOperatorValueNotEquals from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterOperatorValueNotEquals(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterOperatorValueNotEquals)
	err = core.UnmarshalModel(m, "not_equals", &obj.NotEquals, UnmarshalApisDashboardsV1AstFilterNotEquals)
	if err != nil {
		err = core.SDKErrorf(err, "", "not_equals-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterSourceValueLogs : ApisDashboardsV1AstFilterSourceValueLogs struct
// This model "extends" ApisDashboardsV1AstFilterSource
type ApisDashboardsV1AstFilterSourceValueLogs struct {
	// Extra filtering on top of the Lucene query.
	Logs *ApisDashboardsV1AstFilterLogsFilter `json:"logs,omitempty"`
}

func (*ApisDashboardsV1AstFilterSourceValueLogs) isaApisDashboardsV1AstFilterSource() bool {
	return true
}

// UnmarshalApisDashboardsV1AstFilterSourceValueLogs unmarshals an instance of ApisDashboardsV1AstFilterSourceValueLogs from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterSourceValueLogs(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterSourceValueLogs)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstFilterLogsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstFilterSourceValueMetrics : ApisDashboardsV1AstFilterSourceValueMetrics struct
// This model "extends" ApisDashboardsV1AstFilterSource
type ApisDashboardsV1AstFilterSourceValueMetrics struct {
	// Filtering to be applied to query results.
	Metrics *ApisDashboardsV1AstFilterMetricsFilter `json:"metrics,omitempty"`
}

func (*ApisDashboardsV1AstFilterSourceValueMetrics) isaApisDashboardsV1AstFilterSource() bool {
	return true
}

// UnmarshalApisDashboardsV1AstFilterSourceValueMetrics unmarshals an instance of ApisDashboardsV1AstFilterSourceValueMetrics from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstFilterSourceValueMetrics(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstFilterSourceValueMetrics)
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstFilterMetricsFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstMultiSelectSelectionValueAll : ApisDashboardsV1AstMultiSelectSelectionValueAll struct
// This model "extends" ApisDashboardsV1AstMultiSelectSelection
type ApisDashboardsV1AstMultiSelectSelectionValueAll struct {
	// All values are selected, usually translated to wildcard (*).
	All *ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty `json:"all,omitempty"`
}

func (*ApisDashboardsV1AstMultiSelectSelectionValueAll) isaApisDashboardsV1AstMultiSelectSelection() bool {
	return true
}

// UnmarshalApisDashboardsV1AstMultiSelectSelectionValueAll unmarshals an instance of ApisDashboardsV1AstMultiSelectSelectionValueAll from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstMultiSelectSelectionValueAll(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstMultiSelectSelectionValueAll)
	err = core.UnmarshalModel(m, "all", &obj.All, UnmarshalApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "all-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstMultiSelectSelectionValueList : ApisDashboardsV1AstMultiSelectSelectionValueList struct
// This model "extends" ApisDashboardsV1AstMultiSelectSelection
type ApisDashboardsV1AstMultiSelectSelectionValueList struct {
	// Specific values are selected.
	List *ApisDashboardsV1AstMultiSelectSelectionListSelection `json:"list,omitempty"`
}

func (*ApisDashboardsV1AstMultiSelectSelectionValueList) isaApisDashboardsV1AstMultiSelectSelection() bool {
	return true
}

// UnmarshalApisDashboardsV1AstMultiSelectSelectionValueList unmarshals an instance of ApisDashboardsV1AstMultiSelectSelectionValueList from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstMultiSelectSelectionValueList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstMultiSelectSelectionValueList)
	err = core.UnmarshalModel(m, "list", &obj.List, UnmarshalApisDashboardsV1AstMultiSelectSelectionListSelection)
	if err != nil {
		err = core.SDKErrorf(err, "", "list-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstMultiSelectSourceValueConstantList : ApisDashboardsV1AstMultiSelectSourceValueConstantList struct
// This model "extends" ApisDashboardsV1AstMultiSelectSource
type ApisDashboardsV1AstMultiSelectSourceValueConstantList struct {
	// List of constant values.
	ConstantList *ApisDashboardsV1AstMultiSelectConstantListSource `json:"constant_list,omitempty"`
}

func (*ApisDashboardsV1AstMultiSelectSourceValueConstantList) isaApisDashboardsV1AstMultiSelectSource() bool {
	return true
}

// UnmarshalApisDashboardsV1AstMultiSelectSourceValueConstantList unmarshals an instance of ApisDashboardsV1AstMultiSelectSourceValueConstantList from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstMultiSelectSourceValueConstantList(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstMultiSelectSourceValueConstantList)
	err = core.UnmarshalModel(m, "constant_list", &obj.ConstantList, UnmarshalApisDashboardsV1AstMultiSelectConstantListSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "constant_list-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstMultiSelectSourceValueLogsPath : ApisDashboardsV1AstMultiSelectSourceValueLogsPath struct
// This model "extends" ApisDashboardsV1AstMultiSelectSource
type ApisDashboardsV1AstMultiSelectSourceValueLogsPath struct {
	// Unique values for a given logs path.
	LogsPath *ApisDashboardsV1AstMultiSelectLogsPathSource `json:"logs_path,omitempty"`
}

func (*ApisDashboardsV1AstMultiSelectSourceValueLogsPath) isaApisDashboardsV1AstMultiSelectSource() bool {
	return true
}

// UnmarshalApisDashboardsV1AstMultiSelectSourceValueLogsPath unmarshals an instance of ApisDashboardsV1AstMultiSelectSourceValueLogsPath from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstMultiSelectSourceValueLogsPath(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
	err = core.UnmarshalModel(m, "logs_path", &obj.LogsPath, UnmarshalApisDashboardsV1AstMultiSelectLogsPathSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs_path-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstMultiSelectSourceValueMetricLabel : ApisDashboardsV1AstMultiSelectSourceValueMetricLabel struct
// This model "extends" ApisDashboardsV1AstMultiSelectSource
type ApisDashboardsV1AstMultiSelectSourceValueMetricLabel struct {
	// Unique values for a given metric label.
	MetricLabel *ApisDashboardsV1AstMultiSelectMetricLabelSource `json:"metric_label,omitempty"`
}

func (*ApisDashboardsV1AstMultiSelectSourceValueMetricLabel) isaApisDashboardsV1AstMultiSelectSource() bool {
	return true
}

// UnmarshalApisDashboardsV1AstMultiSelectSourceValueMetricLabel unmarshals an instance of ApisDashboardsV1AstMultiSelectSourceValueMetricLabel from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstMultiSelectSourceValueMetricLabel(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstMultiSelectSourceValueMetricLabel)
	err = core.UnmarshalModel(m, "metric_label", &obj.MetricLabel, UnmarshalApisDashboardsV1AstMultiSelectMetricLabelSource)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_label-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstVariableDefinitionValueMultiSelect : ApisDashboardsV1AstVariableDefinitionValueMultiSelect struct
// This model "extends" ApisDashboardsV1AstVariableDefinition
type ApisDashboardsV1AstVariableDefinitionValueMultiSelect struct {
	// Multi-select value.
	MultiSelect *ApisDashboardsV1AstMultiSelect `json:"multi_select,omitempty"`
}

func (*ApisDashboardsV1AstVariableDefinitionValueMultiSelect) isaApisDashboardsV1AstVariableDefinition() bool {
	return true
}

// UnmarshalApisDashboardsV1AstVariableDefinitionValueMultiSelect unmarshals an instance of ApisDashboardsV1AstVariableDefinitionValueMultiSelect from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstVariableDefinitionValueMultiSelect(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
	err = core.UnmarshalModel(m, "multi_select", &obj.MultiSelect, UnmarshalApisDashboardsV1AstMultiSelect)
	if err != nil {
		err = core.SDKErrorf(err, "", "multi_select-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetDefinitionValueBarChart : ApisDashboardsV1AstWidgetDefinitionValueBarChart struct
// This model "extends" ApisDashboardsV1AstWidgetDefinition
type ApisDashboardsV1AstWidgetDefinitionValueBarChart struct {
	// Bar chart widget.
	BarChart *ApisDashboardsV1AstWidgetsBarChart `json:"bar_chart,omitempty"`
}

func (*ApisDashboardsV1AstWidgetDefinitionValueBarChart) isaApisDashboardsV1AstWidgetDefinition() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetDefinitionValueBarChart unmarshals an instance of ApisDashboardsV1AstWidgetDefinitionValueBarChart from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetDefinitionValueBarChart(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetDefinitionValueBarChart)
	err = core.UnmarshalModel(m, "bar_chart", &obj.BarChart, UnmarshalApisDashboardsV1AstWidgetsBarChart)
	if err != nil {
		err = core.SDKErrorf(err, "", "bar_chart-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetDefinitionValueDataTable : ApisDashboardsV1AstWidgetDefinitionValueDataTable struct
// This model "extends" ApisDashboardsV1AstWidgetDefinition
type ApisDashboardsV1AstWidgetDefinitionValueDataTable struct {
	// Data table widget.
	DataTable *ApisDashboardsV1AstWidgetsDataTable `json:"data_table,omitempty"`
}

func (*ApisDashboardsV1AstWidgetDefinitionValueDataTable) isaApisDashboardsV1AstWidgetDefinition() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetDefinitionValueDataTable unmarshals an instance of ApisDashboardsV1AstWidgetDefinitionValueDataTable from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetDefinitionValueDataTable(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetDefinitionValueDataTable)
	err = core.UnmarshalModel(m, "data_table", &obj.DataTable, UnmarshalApisDashboardsV1AstWidgetsDataTable)
	if err != nil {
		err = core.SDKErrorf(err, "", "data_table-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetDefinitionValueGauge : ApisDashboardsV1AstWidgetDefinitionValueGauge struct
// This model "extends" ApisDashboardsV1AstWidgetDefinition
type ApisDashboardsV1AstWidgetDefinitionValueGauge struct {
	// Gauge widget.
	Gauge *ApisDashboardsV1AstWidgetsGauge `json:"gauge,omitempty"`
}

func (*ApisDashboardsV1AstWidgetDefinitionValueGauge) isaApisDashboardsV1AstWidgetDefinition() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetDefinitionValueGauge unmarshals an instance of ApisDashboardsV1AstWidgetDefinitionValueGauge from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetDefinitionValueGauge(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetDefinitionValueGauge)
	err = core.UnmarshalModel(m, "gauge", &obj.Gauge, UnmarshalApisDashboardsV1AstWidgetsGauge)
	if err != nil {
		err = core.SDKErrorf(err, "", "gauge-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetDefinitionValueHorizontalBarChart : ApisDashboardsV1AstWidgetDefinitionValueHorizontalBarChart struct
// This model "extends" ApisDashboardsV1AstWidgetDefinition
type ApisDashboardsV1AstWidgetDefinitionValueHorizontalBarChart struct {
	// Horizontal bar chart widget.
	HorizontalBarChart *ApisDashboardsV1AstWidgetsHorizontalBarChart `json:"horizontal_bar_chart,omitempty"`
}

func (*ApisDashboardsV1AstWidgetDefinitionValueHorizontalBarChart) isaApisDashboardsV1AstWidgetDefinition() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetDefinitionValueHorizontalBarChart unmarshals an instance of ApisDashboardsV1AstWidgetDefinitionValueHorizontalBarChart from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetDefinitionValueHorizontalBarChart(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetDefinitionValueHorizontalBarChart)
	err = core.UnmarshalModel(m, "horizontal_bar_chart", &obj.HorizontalBarChart, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChart)
	if err != nil {
		err = core.SDKErrorf(err, "", "horizontal_bar_chart-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetDefinitionValueLineChart : ApisDashboardsV1AstWidgetDefinitionValueLineChart struct
// This model "extends" ApisDashboardsV1AstWidgetDefinition
type ApisDashboardsV1AstWidgetDefinitionValueLineChart struct {
	// Line chart widget.
	LineChart *ApisDashboardsV1AstWidgetsLineChart `json:"line_chart,omitempty"`
}

func (*ApisDashboardsV1AstWidgetDefinitionValueLineChart) isaApisDashboardsV1AstWidgetDefinition() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetDefinitionValueLineChart unmarshals an instance of ApisDashboardsV1AstWidgetDefinitionValueLineChart from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetDefinitionValueLineChart(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetDefinitionValueLineChart)
	err = core.UnmarshalModel(m, "line_chart", &obj.LineChart, UnmarshalApisDashboardsV1AstWidgetsLineChart)
	if err != nil {
		err = core.SDKErrorf(err, "", "line_chart-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetDefinitionValueMarkdown : ApisDashboardsV1AstWidgetDefinitionValueMarkdown struct
// This model "extends" ApisDashboardsV1AstWidgetDefinition
type ApisDashboardsV1AstWidgetDefinitionValueMarkdown struct {
	// Markdown widget.
	Markdown *ApisDashboardsV1AstWidgetsMarkdown `json:"markdown,omitempty"`
}

func (*ApisDashboardsV1AstWidgetDefinitionValueMarkdown) isaApisDashboardsV1AstWidgetDefinition() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetDefinitionValueMarkdown unmarshals an instance of ApisDashboardsV1AstWidgetDefinitionValueMarkdown from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetDefinitionValueMarkdown(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetDefinitionValueMarkdown)
	err = core.UnmarshalModel(m, "markdown", &obj.Markdown, UnmarshalApisDashboardsV1AstWidgetsMarkdown)
	if err != nil {
		err = core.SDKErrorf(err, "", "markdown-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetDefinitionValuePieChart : ApisDashboardsV1AstWidgetDefinitionValuePieChart struct
// This model "extends" ApisDashboardsV1AstWidgetDefinition
type ApisDashboardsV1AstWidgetDefinitionValuePieChart struct {
	// Pie chart widget.
	PieChart *ApisDashboardsV1AstWidgetsPieChart `json:"pie_chart,omitempty"`
}

func (*ApisDashboardsV1AstWidgetDefinitionValuePieChart) isaApisDashboardsV1AstWidgetDefinition() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetDefinitionValuePieChart unmarshals an instance of ApisDashboardsV1AstWidgetDefinitionValuePieChart from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetDefinitionValuePieChart(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetDefinitionValuePieChart)
	err = core.UnmarshalModel(m, "pie_chart", &obj.PieChart, UnmarshalApisDashboardsV1AstWidgetsPieChart)
	if err != nil {
		err = core.SDKErrorf(err, "", "pie_chart-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChartQueryValueDataprime : ApisDashboardsV1AstWidgetsBarChartQueryValueDataprime struct
// This model "extends" ApisDashboardsV1AstWidgetsBarChartQuery
type ApisDashboardsV1AstWidgetsBarChartQueryValueDataprime struct {
	// Query based on Dataprime language.
	Dataprime *ApisDashboardsV1AstWidgetsBarChartDataprimeQuery `json:"dataprime,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsBarChartQueryValueDataprime) isaApisDashboardsV1AstWidgetsBarChartQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsBarChartQueryValueDataprime unmarshals an instance of ApisDashboardsV1AstWidgetsBarChartQueryValueDataprime from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChartQueryValueDataprime(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChartQueryValueDataprime)
	err = core.UnmarshalModel(m, "dataprime", &obj.Dataprime, UnmarshalApisDashboardsV1AstWidgetsBarChartDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChartQueryValueLogs : ApisDashboardsV1AstWidgetsBarChartQueryValueLogs struct
// This model "extends" ApisDashboardsV1AstWidgetsBarChartQuery
type ApisDashboardsV1AstWidgetsBarChartQueryValueLogs struct {
	// Logs specific query.
	Logs *ApisDashboardsV1AstWidgetsBarChartLogsQuery `json:"logs,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsBarChartQueryValueLogs) isaApisDashboardsV1AstWidgetsBarChartQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsBarChartQueryValueLogs unmarshals an instance of ApisDashboardsV1AstWidgetsBarChartQueryValueLogs from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChartQueryValueLogs(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChartQueryValueLogs)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstWidgetsBarChartLogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChartQueryValueMetrics : ApisDashboardsV1AstWidgetsBarChartQueryValueMetrics struct
// This model "extends" ApisDashboardsV1AstWidgetsBarChartQuery
type ApisDashboardsV1AstWidgetsBarChartQueryValueMetrics struct {
	// Metrics specific query.
	Metrics *ApisDashboardsV1AstWidgetsBarChartMetricsQuery `json:"metrics,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsBarChartQueryValueMetrics) isaApisDashboardsV1AstWidgetsBarChartQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsBarChartQueryValueMetrics unmarshals an instance of ApisDashboardsV1AstWidgetsBarChartQueryValueMetrics from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChartQueryValueMetrics(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChartQueryValueMetrics)
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstWidgetsBarChartMetricsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChartXAxisTypeTime : ApisDashboardsV1AstWidgetsBarChartXAxisTypeTime struct
// This model "extends" ApisDashboardsV1AstWidgetsBarChartXAxis
type ApisDashboardsV1AstWidgetsBarChartXAxisTypeTime struct {
	// Time based axis.
	Time *ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime `json:"time,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsBarChartXAxisTypeTime) isaApisDashboardsV1AstWidgetsBarChartXAxis() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisTypeTime unmarshals an instance of ApisDashboardsV1AstWidgetsBarChartXAxisTypeTime from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisTypeTime(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChartXAxisTypeTime)
	err = core.UnmarshalModel(m, "time", &obj.Time, UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime)
	if err != nil {
		err = core.SDKErrorf(err, "", "time-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsBarChartXAxisTypeValue : ApisDashboardsV1AstWidgetsBarChartXAxisTypeValue struct
// This model "extends" ApisDashboardsV1AstWidgetsBarChartXAxis
type ApisDashboardsV1AstWidgetsBarChartXAxisTypeValue struct {
	// Categorical axis.
	Value *ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty `json:"value,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsBarChartXAxisTypeValue) isaApisDashboardsV1AstWidgetsBarChartXAxis() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisTypeValue unmarshals an instance of ApisDashboardsV1AstWidgetsBarChartXAxisTypeValue from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisTypeValue(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsBarChartXAxisTypeValue)
	err = core.UnmarshalModel(m, "value", &obj.Value, UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "value-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsCommonColorsByValueAggregation : ApisDashboardsV1AstWidgetsCommonColorsByValueAggregation struct
// This model "extends" ApisDashboardsV1AstWidgetsCommonColorsBy
type ApisDashboardsV1AstWidgetsCommonColorsByValueAggregation struct {
	// Each aggregation will have different color and stack color will be derived from aggregation color.
	Aggregation *ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty `json:"aggregation,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsCommonColorsByValueAggregation) isaApisDashboardsV1AstWidgetsCommonColorsBy() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsCommonColorsByValueAggregation unmarshals an instance of ApisDashboardsV1AstWidgetsCommonColorsByValueAggregation from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsCommonColorsByValueAggregation(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsCommonColorsByValueAggregation)
	err = core.UnmarshalModel(m, "aggregation", &obj.Aggregation, UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "aggregation-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsCommonColorsByValueGroupBy : ApisDashboardsV1AstWidgetsCommonColorsByValueGroupBy struct
// This model "extends" ApisDashboardsV1AstWidgetsCommonColorsBy
type ApisDashboardsV1AstWidgetsCommonColorsByValueGroupBy struct {
	// Each group will have different color and stack color will be derived from group color.
	GroupBy *ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty `json:"group_by,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsCommonColorsByValueGroupBy) isaApisDashboardsV1AstWidgetsCommonColorsBy() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsCommonColorsByValueGroupBy unmarshals an instance of ApisDashboardsV1AstWidgetsCommonColorsByValueGroupBy from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsCommonColorsByValueGroupBy(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsCommonColorsByValueGroupBy)
	err = core.UnmarshalModel(m, "group_by", &obj.GroupBy, UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "group_by-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsCommonColorsByValueStack : ApisDashboardsV1AstWidgetsCommonColorsByValueStack struct
// This model "extends" ApisDashboardsV1AstWidgetsCommonColorsBy
type ApisDashboardsV1AstWidgetsCommonColorsByValueStack struct {
	// Each stack will have the same color across all groups.
	Stack *ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty `json:"stack,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsCommonColorsByValueStack) isaApisDashboardsV1AstWidgetsCommonColorsBy() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsCommonColorsByValueStack unmarshals an instance of ApisDashboardsV1AstWidgetsCommonColorsByValueStack from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsCommonColorsByValueStack(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsCommonColorsByValueStack)
	err = core.UnmarshalModel(m, "stack", &obj.Stack, UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "stack-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsDataTableQueryValueDataprime : ApisDashboardsV1AstWidgetsDataTableQueryValueDataprime struct
// This model "extends" ApisDashboardsV1AstWidgetsDataTableQuery
type ApisDashboardsV1AstWidgetsDataTableQueryValueDataprime struct {
	// Query based on Dataprime language.
	Dataprime *ApisDashboardsV1AstWidgetsDataTableDataprimeQuery `json:"dataprime,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsDataTableQueryValueDataprime) isaApisDashboardsV1AstWidgetsDataTableQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsDataTableQueryValueDataprime unmarshals an instance of ApisDashboardsV1AstWidgetsDataTableQueryValueDataprime from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsDataTableQueryValueDataprime(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsDataTableQueryValueDataprime)
	err = core.UnmarshalModel(m, "dataprime", &obj.Dataprime, UnmarshalApisDashboardsV1AstWidgetsDataTableDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsDataTableQueryValueLogs : ApisDashboardsV1AstWidgetsDataTableQueryValueLogs struct
// This model "extends" ApisDashboardsV1AstWidgetsDataTableQuery
type ApisDashboardsV1AstWidgetsDataTableQueryValueLogs struct {
	// Logs specific query.
	Logs *ApisDashboardsV1AstWidgetsDataTableLogsQuery `json:"logs,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsDataTableQueryValueLogs) isaApisDashboardsV1AstWidgetsDataTableQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsDataTableQueryValueLogs unmarshals an instance of ApisDashboardsV1AstWidgetsDataTableQueryValueLogs from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsDataTableQueryValueLogs(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsDataTableQueryValueLogs)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsDataTableQueryValueMetrics : ApisDashboardsV1AstWidgetsDataTableQueryValueMetrics struct
// This model "extends" ApisDashboardsV1AstWidgetsDataTableQuery
type ApisDashboardsV1AstWidgetsDataTableQueryValueMetrics struct {
	// Metrics specific query.
	Metrics *ApisDashboardsV1AstWidgetsDataTableMetricsQuery `json:"metrics,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsDataTableQueryValueMetrics) isaApisDashboardsV1AstWidgetsDataTableQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsDataTableQueryValueMetrics unmarshals an instance of ApisDashboardsV1AstWidgetsDataTableQueryValueMetrics from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsDataTableQueryValueMetrics(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsDataTableQueryValueMetrics)
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstWidgetsDataTableMetricsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsGaugeQueryValueDataprime : ApisDashboardsV1AstWidgetsGaugeQueryValueDataprime struct
// This model "extends" ApisDashboardsV1AstWidgetsGaugeQuery
type ApisDashboardsV1AstWidgetsGaugeQueryValueDataprime struct {
	// Query based on Dataprime language.
	Dataprime *ApisDashboardsV1AstWidgetsGaugeDataprimeQuery `json:"dataprime,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsGaugeQueryValueDataprime) isaApisDashboardsV1AstWidgetsGaugeQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsGaugeQueryValueDataprime unmarshals an instance of ApisDashboardsV1AstWidgetsGaugeQueryValueDataprime from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsGaugeQueryValueDataprime(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsGaugeQueryValueDataprime)
	err = core.UnmarshalModel(m, "dataprime", &obj.Dataprime, UnmarshalApisDashboardsV1AstWidgetsGaugeDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsGaugeQueryValueLogs : ApisDashboardsV1AstWidgetsGaugeQueryValueLogs struct
// This model "extends" ApisDashboardsV1AstWidgetsGaugeQuery
type ApisDashboardsV1AstWidgetsGaugeQueryValueLogs struct {
	// Logs specific query.
	Logs *ApisDashboardsV1AstWidgetsGaugeLogsQuery `json:"logs,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsGaugeQueryValueLogs) isaApisDashboardsV1AstWidgetsGaugeQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsGaugeQueryValueLogs unmarshals an instance of ApisDashboardsV1AstWidgetsGaugeQueryValueLogs from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsGaugeQueryValueLogs(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsGaugeQueryValueLogs)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstWidgetsGaugeLogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsGaugeQueryValueMetrics : ApisDashboardsV1AstWidgetsGaugeQueryValueMetrics struct
// This model "extends" ApisDashboardsV1AstWidgetsGaugeQuery
type ApisDashboardsV1AstWidgetsGaugeQueryValueMetrics struct {
	// Metrics specific query.
	Metrics *ApisDashboardsV1AstWidgetsGaugeMetricsQuery `json:"metrics,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsGaugeQueryValueMetrics) isaApisDashboardsV1AstWidgetsGaugeQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsGaugeQueryValueMetrics unmarshals an instance of ApisDashboardsV1AstWidgetsGaugeQueryValueMetrics from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsGaugeQueryValueMetrics(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsGaugeQueryValueMetrics)
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstWidgetsGaugeMetricsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueDataprime : ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueDataprime struct
// This model "extends" ApisDashboardsV1AstWidgetsHorizontalBarChartQuery
type ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueDataprime struct {
	// Dataprime specific query.
	Dataprime *ApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery `json:"dataprime,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueDataprime) isaApisDashboardsV1AstWidgetsHorizontalBarChartQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueDataprime unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueDataprime from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueDataprime(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueDataprime)
	err = core.UnmarshalModel(m, "dataprime", &obj.Dataprime, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueLogs : ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueLogs struct
// This model "extends" ApisDashboardsV1AstWidgetsHorizontalBarChartQuery
type ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueLogs struct {
	// Logs specific query.
	Logs *ApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery `json:"logs,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueLogs) isaApisDashboardsV1AstWidgetsHorizontalBarChartQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueLogs unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueLogs from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueLogs(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueLogs)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueMetrics : ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueMetrics struct
// This model "extends" ApisDashboardsV1AstWidgetsHorizontalBarChartQuery
type ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueMetrics struct {
	// Metrics specific query.
	Metrics *ApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery `json:"metrics,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueMetrics) isaApisDashboardsV1AstWidgetsHorizontalBarChartQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueMetrics unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueMetrics from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueMetrics(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueMetrics)
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewCategory : ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewCategory struct
// This model "extends" ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy
type ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewCategory struct {
	// View by category.
	Category *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty `json:"category,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewCategory) isaApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewCategory unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewCategory from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewCategory(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewCategory)
	err = core.UnmarshalModel(m, "category", &obj.Category, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "category-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewValue : ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewValue struct
// This model "extends" ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy
type ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewValue struct {
	// View by value.
	Value *ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty `json:"value,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewValue) isaApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewValue unmarshals an instance of ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewValue from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewValue(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewValue)
	err = core.UnmarshalModel(m, "value", &obj.Value, UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "value-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsLineChartQueryValueDataprime : ApisDashboardsV1AstWidgetsLineChartQueryValueDataprime struct
// This model "extends" ApisDashboardsV1AstWidgetsLineChartQuery
type ApisDashboardsV1AstWidgetsLineChartQueryValueDataprime struct {
	// Dataprime language based query.
	Dataprime *ApisDashboardsV1AstWidgetsLineChartDataprimeQuery `json:"dataprime,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsLineChartQueryValueDataprime) isaApisDashboardsV1AstWidgetsLineChartQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsLineChartQueryValueDataprime unmarshals an instance of ApisDashboardsV1AstWidgetsLineChartQueryValueDataprime from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsLineChartQueryValueDataprime(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsLineChartQueryValueDataprime)
	err = core.UnmarshalModel(m, "dataprime", &obj.Dataprime, UnmarshalApisDashboardsV1AstWidgetsLineChartDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsLineChartQueryValueLogs : ApisDashboardsV1AstWidgetsLineChartQueryValueLogs struct
// This model "extends" ApisDashboardsV1AstWidgetsLineChartQuery
type ApisDashboardsV1AstWidgetsLineChartQueryValueLogs struct {
	// Logs specific query.
	Logs *ApisDashboardsV1AstWidgetsLineChartLogsQuery `json:"logs,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsLineChartQueryValueLogs) isaApisDashboardsV1AstWidgetsLineChartQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsLineChartQueryValueLogs unmarshals an instance of ApisDashboardsV1AstWidgetsLineChartQueryValueLogs from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsLineChartQueryValueLogs(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsLineChartQueryValueLogs)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstWidgetsLineChartLogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics : ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics struct
// This model "extends" ApisDashboardsV1AstWidgetsLineChartQuery
type ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics struct {
	// Metrics specific query.
	Metrics *ApisDashboardsV1AstWidgetsLineChartMetricsQuery `json:"metrics,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics) isaApisDashboardsV1AstWidgetsLineChartQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsLineChartQueryValueMetrics unmarshals an instance of ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsLineChartQueryValueMetrics(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics)
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstWidgetsLineChartMetricsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsPieChartQueryValueDataprime : ApisDashboardsV1AstWidgetsPieChartQueryValueDataprime struct
// This model "extends" ApisDashboardsV1AstWidgetsPieChartQuery
type ApisDashboardsV1AstWidgetsPieChartQueryValueDataprime struct {
	// Query based on Dataprime language.
	Dataprime *ApisDashboardsV1AstWidgetsPieChartDataprimeQuery `json:"dataprime,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsPieChartQueryValueDataprime) isaApisDashboardsV1AstWidgetsPieChartQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsPieChartQueryValueDataprime unmarshals an instance of ApisDashboardsV1AstWidgetsPieChartQueryValueDataprime from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsPieChartQueryValueDataprime(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsPieChartQueryValueDataprime)
	err = core.UnmarshalModel(m, "dataprime", &obj.Dataprime, UnmarshalApisDashboardsV1AstWidgetsPieChartDataprimeQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "dataprime-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsPieChartQueryValueLogs : ApisDashboardsV1AstWidgetsPieChartQueryValueLogs struct
// This model "extends" ApisDashboardsV1AstWidgetsPieChartQuery
type ApisDashboardsV1AstWidgetsPieChartQueryValueLogs struct {
	// Logs specific query.
	Logs *ApisDashboardsV1AstWidgetsPieChartLogsQuery `json:"logs,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsPieChartQueryValueLogs) isaApisDashboardsV1AstWidgetsPieChartQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsPieChartQueryValueLogs unmarshals an instance of ApisDashboardsV1AstWidgetsPieChartQueryValueLogs from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsPieChartQueryValueLogs(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsPieChartQueryValueLogs)
	err = core.UnmarshalModel(m, "logs", &obj.Logs, UnmarshalApisDashboardsV1AstWidgetsPieChartLogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1AstWidgetsPieChartQueryValueMetrics : ApisDashboardsV1AstWidgetsPieChartQueryValueMetrics struct
// This model "extends" ApisDashboardsV1AstWidgetsPieChartQuery
type ApisDashboardsV1AstWidgetsPieChartQueryValueMetrics struct {
	// Metrics specific query.
	Metrics *ApisDashboardsV1AstWidgetsPieChartMetricsQuery `json:"metrics,omitempty"`
}

func (*ApisDashboardsV1AstWidgetsPieChartQueryValueMetrics) isaApisDashboardsV1AstWidgetsPieChartQuery() bool {
	return true
}

// UnmarshalApisDashboardsV1AstWidgetsPieChartQueryValueMetrics unmarshals an instance of ApisDashboardsV1AstWidgetsPieChartQueryValueMetrics from the specified map of raw messages.
func UnmarshalApisDashboardsV1AstWidgetsPieChartQueryValueMetrics(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1AstWidgetsPieChartQueryValueMetrics)
	err = core.UnmarshalModel(m, "metrics", &obj.Metrics, UnmarshalApisDashboardsV1AstWidgetsPieChartMetricsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "metrics-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationValueAverage : ApisDashboardsV1CommonLogsAggregationValueAverage struct
// This model "extends" ApisDashboardsV1CommonLogsAggregation
type ApisDashboardsV1CommonLogsAggregationValueAverage struct {
	// Calculate average value of log field.
	Average *ApisDashboardsV1CommonLogsAggregationAverage `json:"average,omitempty"`
}

func (*ApisDashboardsV1CommonLogsAggregationValueAverage) isaApisDashboardsV1CommonLogsAggregation() bool {
	return true
}

// UnmarshalApisDashboardsV1CommonLogsAggregationValueAverage unmarshals an instance of ApisDashboardsV1CommonLogsAggregationValueAverage from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationValueAverage(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationValueAverage)
	err = core.UnmarshalModel(m, "average", &obj.Average, UnmarshalApisDashboardsV1CommonLogsAggregationAverage)
	if err != nil {
		err = core.SDKErrorf(err, "", "average-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationValueCount : ApisDashboardsV1CommonLogsAggregationValueCount struct
// This model "extends" ApisDashboardsV1CommonLogsAggregation
type ApisDashboardsV1CommonLogsAggregationValueCount struct {
	// Count the number of entries.
	Count *ApisDashboardsV1CommonLogsAggregationCountEmpty `json:"count,omitempty"`
}

func (*ApisDashboardsV1CommonLogsAggregationValueCount) isaApisDashboardsV1CommonLogsAggregation() bool {
	return true
}

// UnmarshalApisDashboardsV1CommonLogsAggregationValueCount unmarshals an instance of ApisDashboardsV1CommonLogsAggregationValueCount from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationValueCount(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationValueCount)
	err = core.UnmarshalModel(m, "count", &obj.Count, UnmarshalApisDashboardsV1CommonLogsAggregationCountEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "count-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationValueCountDistinct : ApisDashboardsV1CommonLogsAggregationValueCountDistinct struct
// This model "extends" ApisDashboardsV1CommonLogsAggregation
type ApisDashboardsV1CommonLogsAggregationValueCountDistinct struct {
	// Count the number of distinct values of log field.
	CountDistinct *ApisDashboardsV1CommonLogsAggregationCountDistinct `json:"count_distinct,omitempty"`
}

func (*ApisDashboardsV1CommonLogsAggregationValueCountDistinct) isaApisDashboardsV1CommonLogsAggregation() bool {
	return true
}

// UnmarshalApisDashboardsV1CommonLogsAggregationValueCountDistinct unmarshals an instance of ApisDashboardsV1CommonLogsAggregationValueCountDistinct from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationValueCountDistinct(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationValueCountDistinct)
	err = core.UnmarshalModel(m, "count_distinct", &obj.CountDistinct, UnmarshalApisDashboardsV1CommonLogsAggregationCountDistinct)
	if err != nil {
		err = core.SDKErrorf(err, "", "count_distinct-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationValueMax : ApisDashboardsV1CommonLogsAggregationValueMax struct
// This model "extends" ApisDashboardsV1CommonLogsAggregation
type ApisDashboardsV1CommonLogsAggregationValueMax struct {
	// Calculate maximum value of log field.
	Max *ApisDashboardsV1CommonLogsAggregationMax `json:"max,omitempty"`
}

func (*ApisDashboardsV1CommonLogsAggregationValueMax) isaApisDashboardsV1CommonLogsAggregation() bool {
	return true
}

// UnmarshalApisDashboardsV1CommonLogsAggregationValueMax unmarshals an instance of ApisDashboardsV1CommonLogsAggregationValueMax from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationValueMax(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationValueMax)
	err = core.UnmarshalModel(m, "max", &obj.Max, UnmarshalApisDashboardsV1CommonLogsAggregationMax)
	if err != nil {
		err = core.SDKErrorf(err, "", "max-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationValueMin : ApisDashboardsV1CommonLogsAggregationValueMin struct
// This model "extends" ApisDashboardsV1CommonLogsAggregation
type ApisDashboardsV1CommonLogsAggregationValueMin struct {
	// Calculate minimum value of log field.
	Min *ApisDashboardsV1CommonLogsAggregationMin `json:"min,omitempty"`
}

func (*ApisDashboardsV1CommonLogsAggregationValueMin) isaApisDashboardsV1CommonLogsAggregation() bool {
	return true
}

// UnmarshalApisDashboardsV1CommonLogsAggregationValueMin unmarshals an instance of ApisDashboardsV1CommonLogsAggregationValueMin from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationValueMin(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationValueMin)
	err = core.UnmarshalModel(m, "min", &obj.Min, UnmarshalApisDashboardsV1CommonLogsAggregationMin)
	if err != nil {
		err = core.SDKErrorf(err, "", "min-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationValuePercentile : ApisDashboardsV1CommonLogsAggregationValuePercentile struct
// This model "extends" ApisDashboardsV1CommonLogsAggregation
type ApisDashboardsV1CommonLogsAggregationValuePercentile struct {
	// Calculate percentile value of log field.
	Percentile *ApisDashboardsV1CommonLogsAggregationPercentile `json:"percentile,omitempty"`
}

func (*ApisDashboardsV1CommonLogsAggregationValuePercentile) isaApisDashboardsV1CommonLogsAggregation() bool {
	return true
}

// UnmarshalApisDashboardsV1CommonLogsAggregationValuePercentile unmarshals an instance of ApisDashboardsV1CommonLogsAggregationValuePercentile from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationValuePercentile(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationValuePercentile)
	err = core.UnmarshalModel(m, "percentile", &obj.Percentile, UnmarshalApisDashboardsV1CommonLogsAggregationPercentile)
	if err != nil {
		err = core.SDKErrorf(err, "", "percentile-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisDashboardsV1CommonLogsAggregationValueSum : ApisDashboardsV1CommonLogsAggregationValueSum struct
// This model "extends" ApisDashboardsV1CommonLogsAggregation
type ApisDashboardsV1CommonLogsAggregationValueSum struct {
	// Sum values of log field.
	Sum *ApisDashboardsV1CommonLogsAggregationSum `json:"sum,omitempty"`
}

func (*ApisDashboardsV1CommonLogsAggregationValueSum) isaApisDashboardsV1CommonLogsAggregation() bool {
	return true
}

// UnmarshalApisDashboardsV1CommonLogsAggregationValueSum unmarshals an instance of ApisDashboardsV1CommonLogsAggregationValueSum from the specified map of raw messages.
func UnmarshalApisDashboardsV1CommonLogsAggregationValueSum(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisDashboardsV1CommonLogsAggregationValueSum)
	err = core.UnmarshalModel(m, "sum", &obj.Sum, UnmarshalApisDashboardsV1CommonLogsAggregationSum)
	if err != nil {
		err = core.SDKErrorf(err, "", "sum-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisEvents2metricsV2AggregationAggMetadataHistogram : ApisEvents2metricsV2AggregationAggMetadataHistogram struct
// This model "extends" ApisEvents2metricsV2Aggregation
type ApisEvents2metricsV2AggregationAggMetadataHistogram struct {
	// Is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// Aggregation type.
	AggType *string `json:"agg_type,omitempty"`

	// Target metric field alias name.
	TargetMetricName *string `json:"target_metric_name,omitempty"`

	// E2M aggregate histogram type metadata.
	Histogram *ApisEvents2metricsV2E2mAggHistogram `json:"histogram,omitempty"`
}

// Constants associated with the ApisEvents2metricsV2AggregationAggMetadataHistogram.AggType property.
// Aggregation type.
const (
	ApisEvents2metricsV2AggregationAggMetadataHistogram_AggType_Avg = "avg"
	ApisEvents2metricsV2AggregationAggMetadataHistogram_AggType_Count = "count"
	ApisEvents2metricsV2AggregationAggMetadataHistogram_AggType_Histogram = "histogram"
	ApisEvents2metricsV2AggregationAggMetadataHistogram_AggType_Max = "max"
	ApisEvents2metricsV2AggregationAggMetadataHistogram_AggType_Min = "min"
	ApisEvents2metricsV2AggregationAggMetadataHistogram_AggType_Samples = "samples"
	ApisEvents2metricsV2AggregationAggMetadataHistogram_AggType_Sum = "sum"
	ApisEvents2metricsV2AggregationAggMetadataHistogram_AggType_Unspecified = "unspecified"
)

func (*ApisEvents2metricsV2AggregationAggMetadataHistogram) isaApisEvents2metricsV2Aggregation() bool {
	return true
}

// UnmarshalApisEvents2metricsV2AggregationAggMetadataHistogram unmarshals an instance of ApisEvents2metricsV2AggregationAggMetadataHistogram from the specified map of raw messages.
func UnmarshalApisEvents2metricsV2AggregationAggMetadataHistogram(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisEvents2metricsV2AggregationAggMetadataHistogram)
	err = core.UnmarshalPrimitive(m, "enabled", &obj.Enabled)
	if err != nil {
		err = core.SDKErrorf(err, "", "enabled-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "agg_type", &obj.AggType)
	if err != nil {
		err = core.SDKErrorf(err, "", "agg_type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "target_metric_name", &obj.TargetMetricName)
	if err != nil {
		err = core.SDKErrorf(err, "", "target_metric_name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "histogram", &obj.Histogram, UnmarshalApisEvents2metricsV2E2mAggHistogram)
	if err != nil {
		err = core.SDKErrorf(err, "", "histogram-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisEvents2metricsV2AggregationAggMetadataSamples : ApisEvents2metricsV2AggregationAggMetadataSamples struct
// This model "extends" ApisEvents2metricsV2Aggregation
type ApisEvents2metricsV2AggregationAggMetadataSamples struct {
	// Is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// Aggregation type.
	AggType *string `json:"agg_type,omitempty"`

	// Target metric field alias name.
	TargetMetricName *string `json:"target_metric_name,omitempty"`

	// E2M sample type metadata.
	Samples *ApisEvents2metricsV2E2mAggSamples `json:"samples,omitempty"`
}

// Constants associated with the ApisEvents2metricsV2AggregationAggMetadataSamples.AggType property.
// Aggregation type.
const (
	ApisEvents2metricsV2AggregationAggMetadataSamples_AggType_Avg = "avg"
	ApisEvents2metricsV2AggregationAggMetadataSamples_AggType_Count = "count"
	ApisEvents2metricsV2AggregationAggMetadataSamples_AggType_Histogram = "histogram"
	ApisEvents2metricsV2AggregationAggMetadataSamples_AggType_Max = "max"
	ApisEvents2metricsV2AggregationAggMetadataSamples_AggType_Min = "min"
	ApisEvents2metricsV2AggregationAggMetadataSamples_AggType_Samples = "samples"
	ApisEvents2metricsV2AggregationAggMetadataSamples_AggType_Sum = "sum"
	ApisEvents2metricsV2AggregationAggMetadataSamples_AggType_Unspecified = "unspecified"
)

func (*ApisEvents2metricsV2AggregationAggMetadataSamples) isaApisEvents2metricsV2Aggregation() bool {
	return true
}

// UnmarshalApisEvents2metricsV2AggregationAggMetadataSamples unmarshals an instance of ApisEvents2metricsV2AggregationAggMetadataSamples from the specified map of raw messages.
func UnmarshalApisEvents2metricsV2AggregationAggMetadataSamples(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisEvents2metricsV2AggregationAggMetadataSamples)
	err = core.UnmarshalPrimitive(m, "enabled", &obj.Enabled)
	if err != nil {
		err = core.SDKErrorf(err, "", "enabled-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "agg_type", &obj.AggType)
	if err != nil {
		err = core.SDKErrorf(err, "", "agg_type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "target_metric_name", &obj.TargetMetricName)
	if err != nil {
		err = core.SDKErrorf(err, "", "target_metric_name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "samples", &obj.Samples, UnmarshalApisEvents2metricsV2E2mAggSamples)
	if err != nil {
		err = core.SDKErrorf(err, "", "samples-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisViewsV1TimeSelectionSelectionTypeCustomSelection : ApisViewsV1TimeSelectionSelectionTypeCustomSelection struct
// This model "extends" ApisViewsV1TimeSelection
type ApisViewsV1TimeSelectionSelectionTypeCustomSelection struct {
	// Custom time selection.
	CustomSelection *ApisViewsV1CustomTimeSelection `json:"custom_selection,omitempty"`
}

func (*ApisViewsV1TimeSelectionSelectionTypeCustomSelection) isaApisViewsV1TimeSelection() bool {
	return true
}

// UnmarshalApisViewsV1TimeSelectionSelectionTypeCustomSelection unmarshals an instance of ApisViewsV1TimeSelectionSelectionTypeCustomSelection from the specified map of raw messages.
func UnmarshalApisViewsV1TimeSelectionSelectionTypeCustomSelection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
	err = core.UnmarshalModel(m, "custom_selection", &obj.CustomSelection, UnmarshalApisViewsV1CustomTimeSelection)
	if err != nil {
		err = core.SDKErrorf(err, "", "custom_selection-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// ApisViewsV1TimeSelectionSelectionTypeQuickSelection : ApisViewsV1TimeSelectionSelectionTypeQuickSelection struct
// This model "extends" ApisViewsV1TimeSelection
type ApisViewsV1TimeSelectionSelectionTypeQuickSelection struct {
	// Quick time selection.
	QuickSelection *ApisViewsV1QuickTimeSelection `json:"quick_selection,omitempty"`
}

func (*ApisViewsV1TimeSelectionSelectionTypeQuickSelection) isaApisViewsV1TimeSelection() bool {
	return true
}

// UnmarshalApisViewsV1TimeSelectionSelectionTypeQuickSelection unmarshals an instance of ApisViewsV1TimeSelectionSelectionTypeQuickSelection from the specified map of raw messages.
func UnmarshalApisViewsV1TimeSelectionSelectionTypeQuickSelection(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(ApisViewsV1TimeSelectionSelectionTypeQuickSelection)
	err = core.UnmarshalModel(m, "quick_selection", &obj.QuickSelection, UnmarshalApisViewsV1QuickTimeSelection)
	if err != nil {
		err = core.SDKErrorf(err, "", "quick_selection-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes : DashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes struct
// This model "extends" Dashboard
type DashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes struct {
	// Unique identifier for the dashboard.
	Href *string `json:"href,omitempty"`

	// Unique identifier for the dashboard.
	ID *string `json:"id,omitempty"`

	// Display name of the dashboard.
	Name *string `json:"name" validate:"required"`

	// Brief description or summary of the dashboard's purpose or content.
	Description *string `json:"description,omitempty"`

	Layout *ApisDashboardsV1AstLayout `json:"layout" validate:"required"`

	// List of variables that can be used within the dashboard for dynamic content.
	Variables []ApisDashboardsV1AstVariable `json:"variables,omitempty"`

	// List of filters that can be applied to the dashboard's data.
	Filters []ApisDashboardsV1AstFilter `json:"filters,omitempty"`

	// List of annotations that can be applied to the dashboard's visual elements.
	Annotations []ApisDashboardsV1AstAnnotation `json:"annotations,omitempty"`

	// Auto refresh interval is set to five minutes.
	FiveMinutes *ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty `json:"five_minutes,omitempty"`
}

// NewDashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes : Instantiate DashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes (Generic Model Constructor)
func (*LogsV0) NewDashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes(name string, layout *ApisDashboardsV1AstLayout) (_model *DashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes, err error) {
	_model = &DashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes{
		Name: core.StringPtr(name),
		Layout: layout,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

func (*DashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes) isaDashboard() bool {
	return true
}

// UnmarshalDashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes unmarshals an instance of DashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes from the specified map of raw messages.
func UnmarshalDashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes)
	err = core.UnmarshalPrimitive(m, "href", &obj.Href)
	if err != nil {
		err = core.SDKErrorf(err, "", "href-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "layout", &obj.Layout, UnmarshalApisDashboardsV1AstLayout)
	if err != nil {
		err = core.SDKErrorf(err, "", "layout-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "variables", &obj.Variables, UnmarshalApisDashboardsV1AstVariable)
	if err != nil {
		err = core.SDKErrorf(err, "", "variables-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "annotations", &obj.Annotations, UnmarshalApisDashboardsV1AstAnnotation)
	if err != nil {
		err = core.SDKErrorf(err, "", "annotations-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "five_minutes", &obj.FiveMinutes, UnmarshalApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "five_minutes-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DashboardApisDashboardsV1AstDashboardAutoRefreshOff : DashboardApisDashboardsV1AstDashboardAutoRefreshOff struct
// This model "extends" Dashboard
type DashboardApisDashboardsV1AstDashboardAutoRefreshOff struct {
	// Unique identifier for the dashboard.
	Href *string `json:"href,omitempty"`

	// Unique identifier for the dashboard.
	ID *string `json:"id,omitempty"`

	// Display name of the dashboard.
	Name *string `json:"name" validate:"required"`

	// Brief description or summary of the dashboard's purpose or content.
	Description *string `json:"description,omitempty"`

	Layout *ApisDashboardsV1AstLayout `json:"layout" validate:"required"`

	// List of variables that can be used within the dashboard for dynamic content.
	Variables []ApisDashboardsV1AstVariable `json:"variables,omitempty"`

	// List of filters that can be applied to the dashboard's data.
	Filters []ApisDashboardsV1AstFilter `json:"filters,omitempty"`

	// List of annotations that can be applied to the dashboard's visual elements.
	Annotations []ApisDashboardsV1AstAnnotation `json:"annotations,omitempty"`

	// Auto refresh interval is set to off.
	False *ApisDashboardsV1AstDashboardAutoRefreshOffEmpty `json:"false,omitempty"`
}

// NewDashboardApisDashboardsV1AstDashboardAutoRefreshOff : Instantiate DashboardApisDashboardsV1AstDashboardAutoRefreshOff (Generic Model Constructor)
func (*LogsV0) NewDashboardApisDashboardsV1AstDashboardAutoRefreshOff(name string, layout *ApisDashboardsV1AstLayout) (_model *DashboardApisDashboardsV1AstDashboardAutoRefreshOff, err error) {
	_model = &DashboardApisDashboardsV1AstDashboardAutoRefreshOff{
		Name: core.StringPtr(name),
		Layout: layout,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

func (*DashboardApisDashboardsV1AstDashboardAutoRefreshOff) isaDashboard() bool {
	return true
}

// UnmarshalDashboardApisDashboardsV1AstDashboardAutoRefreshOff unmarshals an instance of DashboardApisDashboardsV1AstDashboardAutoRefreshOff from the specified map of raw messages.
func UnmarshalDashboardApisDashboardsV1AstDashboardAutoRefreshOff(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DashboardApisDashboardsV1AstDashboardAutoRefreshOff)
	err = core.UnmarshalPrimitive(m, "href", &obj.Href)
	if err != nil {
		err = core.SDKErrorf(err, "", "href-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "layout", &obj.Layout, UnmarshalApisDashboardsV1AstLayout)
	if err != nil {
		err = core.SDKErrorf(err, "", "layout-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "variables", &obj.Variables, UnmarshalApisDashboardsV1AstVariable)
	if err != nil {
		err = core.SDKErrorf(err, "", "variables-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "annotations", &obj.Annotations, UnmarshalApisDashboardsV1AstAnnotation)
	if err != nil {
		err = core.SDKErrorf(err, "", "annotations-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "false", &obj.False, UnmarshalApisDashboardsV1AstDashboardAutoRefreshOffEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "false-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes : DashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes struct
// This model "extends" Dashboard
type DashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes struct {
	// Unique identifier for the dashboard.
	Href *string `json:"href,omitempty"`

	// Unique identifier for the dashboard.
	ID *string `json:"id,omitempty"`

	// Display name of the dashboard.
	Name *string `json:"name" validate:"required"`

	// Brief description or summary of the dashboard's purpose or content.
	Description *string `json:"description,omitempty"`

	Layout *ApisDashboardsV1AstLayout `json:"layout" validate:"required"`

	// List of variables that can be used within the dashboard for dynamic content.
	Variables []ApisDashboardsV1AstVariable `json:"variables,omitempty"`

	// List of filters that can be applied to the dashboard's data.
	Filters []ApisDashboardsV1AstFilter `json:"filters,omitempty"`

	// List of annotations that can be applied to the dashboard's visual elements.
	Annotations []ApisDashboardsV1AstAnnotation `json:"annotations,omitempty"`

	// Auto refresh interval is set to two minutes.
	TwoMinutes *ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty `json:"two_minutes,omitempty"`
}

// NewDashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes : Instantiate DashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes (Generic Model Constructor)
func (*LogsV0) NewDashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes(name string, layout *ApisDashboardsV1AstLayout) (_model *DashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes, err error) {
	_model = &DashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes{
		Name: core.StringPtr(name),
		Layout: layout,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

func (*DashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes) isaDashboard() bool {
	return true
}

// UnmarshalDashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes unmarshals an instance of DashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes from the specified map of raw messages.
func UnmarshalDashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes)
	err = core.UnmarshalPrimitive(m, "href", &obj.Href)
	if err != nil {
		err = core.SDKErrorf(err, "", "href-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "layout", &obj.Layout, UnmarshalApisDashboardsV1AstLayout)
	if err != nil {
		err = core.SDKErrorf(err, "", "layout-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "variables", &obj.Variables, UnmarshalApisDashboardsV1AstVariable)
	if err != nil {
		err = core.SDKErrorf(err, "", "variables-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "annotations", &obj.Annotations, UnmarshalApisDashboardsV1AstAnnotation)
	if err != nil {
		err = core.SDKErrorf(err, "", "annotations-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "two_minutes", &obj.TwoMinutes, UnmarshalApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "two_minutes-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DashboardApisDashboardsV1AstDashboardFolderFolderID : DashboardApisDashboardsV1AstDashboardFolderFolderID struct
// This model "extends" Dashboard
type DashboardApisDashboardsV1AstDashboardFolderFolderID struct {
	// Unique identifier for the dashboard.
	Href *string `json:"href,omitempty"`

	// Unique identifier for the dashboard.
	ID *string `json:"id,omitempty"`

	// Display name of the dashboard.
	Name *string `json:"name" validate:"required"`

	// Brief description or summary of the dashboard's purpose or content.
	Description *string `json:"description,omitempty"`

	Layout *ApisDashboardsV1AstLayout `json:"layout" validate:"required"`

	// List of variables that can be used within the dashboard for dynamic content.
	Variables []ApisDashboardsV1AstVariable `json:"variables,omitempty"`

	// List of filters that can be applied to the dashboard's data.
	Filters []ApisDashboardsV1AstFilter `json:"filters,omitempty"`

	// List of annotations that can be applied to the dashboard's visual elements.
	Annotations []ApisDashboardsV1AstAnnotation `json:"annotations,omitempty"`

	// Unique identifier of the folder containing the dashboard.
	FolderID *ApisDashboardsV1UUID `json:"folder_id,omitempty"`
}

// NewDashboardApisDashboardsV1AstDashboardFolderFolderID : Instantiate DashboardApisDashboardsV1AstDashboardFolderFolderID (Generic Model Constructor)
func (*LogsV0) NewDashboardApisDashboardsV1AstDashboardFolderFolderID(name string, layout *ApisDashboardsV1AstLayout) (_model *DashboardApisDashboardsV1AstDashboardFolderFolderID, err error) {
	_model = &DashboardApisDashboardsV1AstDashboardFolderFolderID{
		Name: core.StringPtr(name),
		Layout: layout,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

func (*DashboardApisDashboardsV1AstDashboardFolderFolderID) isaDashboard() bool {
	return true
}

// UnmarshalDashboardApisDashboardsV1AstDashboardFolderFolderID unmarshals an instance of DashboardApisDashboardsV1AstDashboardFolderFolderID from the specified map of raw messages.
func UnmarshalDashboardApisDashboardsV1AstDashboardFolderFolderID(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DashboardApisDashboardsV1AstDashboardFolderFolderID)
	err = core.UnmarshalPrimitive(m, "href", &obj.Href)
	if err != nil {
		err = core.SDKErrorf(err, "", "href-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "layout", &obj.Layout, UnmarshalApisDashboardsV1AstLayout)
	if err != nil {
		err = core.SDKErrorf(err, "", "layout-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "variables", &obj.Variables, UnmarshalApisDashboardsV1AstVariable)
	if err != nil {
		err = core.SDKErrorf(err, "", "variables-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "annotations", &obj.Annotations, UnmarshalApisDashboardsV1AstAnnotation)
	if err != nil {
		err = core.SDKErrorf(err, "", "annotations-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "folder_id", &obj.FolderID, UnmarshalApisDashboardsV1UUID)
	if err != nil {
		err = core.SDKErrorf(err, "", "folder_id-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DashboardApisDashboardsV1AstDashboardFolderFolderPath : DashboardApisDashboardsV1AstDashboardFolderFolderPath struct
// This model "extends" Dashboard
type DashboardApisDashboardsV1AstDashboardFolderFolderPath struct {
	// Unique identifier for the dashboard.
	Href *string `json:"href,omitempty"`

	// Unique identifier for the dashboard.
	ID *string `json:"id,omitempty"`

	// Display name of the dashboard.
	Name *string `json:"name" validate:"required"`

	// Brief description or summary of the dashboard's purpose or content.
	Description *string `json:"description,omitempty"`

	Layout *ApisDashboardsV1AstLayout `json:"layout" validate:"required"`

	// List of variables that can be used within the dashboard for dynamic content.
	Variables []ApisDashboardsV1AstVariable `json:"variables,omitempty"`

	// List of filters that can be applied to the dashboard's data.
	Filters []ApisDashboardsV1AstFilter `json:"filters,omitempty"`

	// List of annotations that can be applied to the dashboard's visual elements.
	Annotations []ApisDashboardsV1AstAnnotation `json:"annotations,omitempty"`

	// Path of the folder containing the dashboard.
	FolderPath *ApisDashboardsV1AstFolderPath `json:"folder_path,omitempty"`
}

// NewDashboardApisDashboardsV1AstDashboardFolderFolderPath : Instantiate DashboardApisDashboardsV1AstDashboardFolderFolderPath (Generic Model Constructor)
func (*LogsV0) NewDashboardApisDashboardsV1AstDashboardFolderFolderPath(name string, layout *ApisDashboardsV1AstLayout) (_model *DashboardApisDashboardsV1AstDashboardFolderFolderPath, err error) {
	_model = &DashboardApisDashboardsV1AstDashboardFolderFolderPath{
		Name: core.StringPtr(name),
		Layout: layout,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

func (*DashboardApisDashboardsV1AstDashboardFolderFolderPath) isaDashboard() bool {
	return true
}

// UnmarshalDashboardApisDashboardsV1AstDashboardFolderFolderPath unmarshals an instance of DashboardApisDashboardsV1AstDashboardFolderFolderPath from the specified map of raw messages.
func UnmarshalDashboardApisDashboardsV1AstDashboardFolderFolderPath(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DashboardApisDashboardsV1AstDashboardFolderFolderPath)
	err = core.UnmarshalPrimitive(m, "href", &obj.Href)
	if err != nil {
		err = core.SDKErrorf(err, "", "href-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "layout", &obj.Layout, UnmarshalApisDashboardsV1AstLayout)
	if err != nil {
		err = core.SDKErrorf(err, "", "layout-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "variables", &obj.Variables, UnmarshalApisDashboardsV1AstVariable)
	if err != nil {
		err = core.SDKErrorf(err, "", "variables-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "annotations", &obj.Annotations, UnmarshalApisDashboardsV1AstAnnotation)
	if err != nil {
		err = core.SDKErrorf(err, "", "annotations-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "folder_path", &obj.FolderPath, UnmarshalApisDashboardsV1AstFolderPath)
	if err != nil {
		err = core.SDKErrorf(err, "", "folder_path-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame : DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame struct
// This model "extends" Dashboard
type DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame struct {
	// Unique identifier for the dashboard.
	Href *string `json:"href,omitempty"`

	// Unique identifier for the dashboard.
	ID *string `json:"id,omitempty"`

	// Display name of the dashboard.
	Name *string `json:"name" validate:"required"`

	// Brief description or summary of the dashboard's purpose or content.
	Description *string `json:"description,omitempty"`

	Layout *ApisDashboardsV1AstLayout `json:"layout" validate:"required"`

	// List of variables that can be used within the dashboard for dynamic content.
	Variables []ApisDashboardsV1AstVariable `json:"variables,omitempty"`

	// List of filters that can be applied to the dashboard's data.
	Filters []ApisDashboardsV1AstFilter `json:"filters,omitempty"`

	// List of annotations that can be applied to the dashboard's visual elements.
	Annotations []ApisDashboardsV1AstAnnotation `json:"annotations,omitempty"`

	// Absolute time frame specifying a fixed start and end time.
	AbsoluteTimeFrame *ApisDashboardsV1CommonTimeFrame `json:"absolute_time_frame,omitempty"`
}

// NewDashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame : Instantiate DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame (Generic Model Constructor)
func (*LogsV0) NewDashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame(name string, layout *ApisDashboardsV1AstLayout) (_model *DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame, err error) {
	_model = &DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame{
		Name: core.StringPtr(name),
		Layout: layout,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

func (*DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame) isaDashboard() bool {
	return true
}

// UnmarshalDashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame unmarshals an instance of DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame from the specified map of raw messages.
func UnmarshalDashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame)
	err = core.UnmarshalPrimitive(m, "href", &obj.Href)
	if err != nil {
		err = core.SDKErrorf(err, "", "href-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "layout", &obj.Layout, UnmarshalApisDashboardsV1AstLayout)
	if err != nil {
		err = core.SDKErrorf(err, "", "layout-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "variables", &obj.Variables, UnmarshalApisDashboardsV1AstVariable)
	if err != nil {
		err = core.SDKErrorf(err, "", "variables-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "annotations", &obj.Annotations, UnmarshalApisDashboardsV1AstAnnotation)
	if err != nil {
		err = core.SDKErrorf(err, "", "annotations-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "absolute_time_frame", &obj.AbsoluteTimeFrame, UnmarshalApisDashboardsV1CommonTimeFrame)
	if err != nil {
		err = core.SDKErrorf(err, "", "absolute_time_frame-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame : DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame struct
// This model "extends" Dashboard
type DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame struct {
	// Unique identifier for the dashboard.
	Href *string `json:"href,omitempty"`

	// Unique identifier for the dashboard.
	ID *string `json:"id,omitempty"`

	// Display name of the dashboard.
	Name *string `json:"name" validate:"required"`

	// Brief description or summary of the dashboard's purpose or content.
	Description *string `json:"description,omitempty"`

	Layout *ApisDashboardsV1AstLayout `json:"layout" validate:"required"`

	// List of variables that can be used within the dashboard for dynamic content.
	Variables []ApisDashboardsV1AstVariable `json:"variables,omitempty"`

	// List of filters that can be applied to the dashboard's data.
	Filters []ApisDashboardsV1AstFilter `json:"filters,omitempty"`

	// List of annotations that can be applied to the dashboard's visual elements.
	Annotations []ApisDashboardsV1AstAnnotation `json:"annotations,omitempty"`

	// Relative time frame specifying a duration from the current time.
	RelativeTimeFrame *string `json:"relative_time_frame,omitempty"`
}

// NewDashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame : Instantiate DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame (Generic Model Constructor)
func (*LogsV0) NewDashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame(name string, layout *ApisDashboardsV1AstLayout) (_model *DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame, err error) {
	_model = &DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame{
		Name: core.StringPtr(name),
		Layout: layout,
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

func (*DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame) isaDashboard() bool {
	return true
}

// UnmarshalDashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame unmarshals an instance of DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame from the specified map of raw messages.
func UnmarshalDashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame)
	err = core.UnmarshalPrimitive(m, "href", &obj.Href)
	if err != nil {
		err = core.SDKErrorf(err, "", "href-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "layout", &obj.Layout, UnmarshalApisDashboardsV1AstLayout)
	if err != nil {
		err = core.SDKErrorf(err, "", "layout-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "variables", &obj.Variables, UnmarshalApisDashboardsV1AstVariable)
	if err != nil {
		err = core.SDKErrorf(err, "", "variables-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "filters", &obj.Filters, UnmarshalApisDashboardsV1AstFilter)
	if err != nil {
		err = core.SDKErrorf(err, "", "filters-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "annotations", &obj.Annotations, UnmarshalApisDashboardsV1AstAnnotation)
	if err != nil {
		err = core.SDKErrorf(err, "", "annotations-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "relative_time_frame", &obj.RelativeTimeFrame)
	if err != nil {
		err = core.SDKErrorf(err, "", "relative_time_frame-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// EnrichmentV1EnrichmentTypeTypeCustomEnrichment : EnrichmentV1EnrichmentTypeTypeCustomEnrichment struct
// This model "extends" EnrichmentV1EnrichmentType
type EnrichmentV1EnrichmentTypeTypeCustomEnrichment struct {
	// The custom enrichment.
	CustomEnrichment *EnrichmentV1CustomEnrichmentType `json:"custom_enrichment,omitempty"`
}

func (*EnrichmentV1EnrichmentTypeTypeCustomEnrichment) isaEnrichmentV1EnrichmentType() bool {
	return true
}

// UnmarshalEnrichmentV1EnrichmentTypeTypeCustomEnrichment unmarshals an instance of EnrichmentV1EnrichmentTypeTypeCustomEnrichment from the specified map of raw messages.
func UnmarshalEnrichmentV1EnrichmentTypeTypeCustomEnrichment(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(EnrichmentV1EnrichmentTypeTypeCustomEnrichment)
	err = core.UnmarshalModel(m, "custom_enrichment", &obj.CustomEnrichment, UnmarshalEnrichmentV1CustomEnrichmentType)
	if err != nil {
		err = core.SDKErrorf(err, "", "custom_enrichment-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// EnrichmentV1EnrichmentTypeTypeGeoIp : EnrichmentV1EnrichmentTypeTypeGeoIp struct
// This model "extends" EnrichmentV1EnrichmentType
type EnrichmentV1EnrichmentTypeTypeGeoIp struct {
	// The geo ip enrichment.
	GeoIp *EnrichmentV1GeoIpTypeEmpty `json:"geo_ip,omitempty"`
}

func (*EnrichmentV1EnrichmentTypeTypeGeoIp) isaEnrichmentV1EnrichmentType() bool {
	return true
}

// UnmarshalEnrichmentV1EnrichmentTypeTypeGeoIp unmarshals an instance of EnrichmentV1EnrichmentTypeTypeGeoIp from the specified map of raw messages.
func UnmarshalEnrichmentV1EnrichmentTypeTypeGeoIp(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(EnrichmentV1EnrichmentTypeTypeGeoIp)
	err = core.UnmarshalModel(m, "geo_ip", &obj.GeoIp, UnmarshalEnrichmentV1GeoIpTypeEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "geo_ip-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// EnrichmentV1EnrichmentTypeTypeSuspiciousIp : EnrichmentV1EnrichmentTypeTypeSuspiciousIp struct
// This model "extends" EnrichmentV1EnrichmentType
type EnrichmentV1EnrichmentTypeTypeSuspiciousIp struct {
	// The suspicious ip enrichment.
	SuspiciousIp *EnrichmentV1SuspiciousIpTypeEmpty `json:"suspicious_ip,omitempty"`
}

func (*EnrichmentV1EnrichmentTypeTypeSuspiciousIp) isaEnrichmentV1EnrichmentType() bool {
	return true
}

// UnmarshalEnrichmentV1EnrichmentTypeTypeSuspiciousIp unmarshals an instance of EnrichmentV1EnrichmentTypeTypeSuspiciousIp from the specified map of raw messages.
func UnmarshalEnrichmentV1EnrichmentTypeTypeSuspiciousIp(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(EnrichmentV1EnrichmentTypeTypeSuspiciousIp)
	err = core.UnmarshalModel(m, "suspicious_ip", &obj.SuspiciousIp, UnmarshalEnrichmentV1SuspiciousIpTypeEmpty)
	if err != nil {
		err = core.SDKErrorf(err, "", "suspicious_ip-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery : Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery struct
// This model "extends" Event2MetricPrototype
type Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery struct {
	// Name of E2M to create.
	Name *string `json:"name" validate:"required"`

	// Description of E2M to create.
	Description *string `json:"description,omitempty"`

	// The permutation limit of the E2M.
	PermutationsLimit *int64 `json:"permutations_limit,omitempty"`

	// E2M metric labels.
	MetricLabels []ApisEvents2metricsV2MetricLabel `json:"metric_labels,omitempty"`

	// E2M metric fields.
	MetricFields []ApisEvents2metricsV2MetricField `json:"metric_fields,omitempty"`

	// E2M type.
	Type *string `json:"type,omitempty"`

	// E2M logs query.
	LogsQuery *ApisLogs2metricsV2LogsQuery `json:"logs_query,omitempty"`
}

// Constants associated with the Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery.Type property.
// E2M type.
const (
	Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery_Type_Logs2metrics = "logs2metrics"
	Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery_Type_Unspecified = "unspecified"
)

// NewEvent2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery : Instantiate Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery (Generic Model Constructor)
func (*LogsV0) NewEvent2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery(name string) (_model *Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery, err error) {
	_model = &Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery{
		Name: core.StringPtr(name),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

func (*Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery) isaEvent2MetricPrototype() bool {
	return true
}

// UnmarshalEvent2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery unmarshals an instance of Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery from the specified map of raw messages.
func UnmarshalEvent2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "permutations_limit", &obj.PermutationsLimit)
	if err != nil {
		err = core.SDKErrorf(err, "", "permutations_limit-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metric_labels", &obj.MetricLabels, UnmarshalApisEvents2metricsV2MetricLabel)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_labels-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metric_fields", &obj.MetricFields, UnmarshalApisEvents2metricsV2MetricField)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_fields-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		err = core.SDKErrorf(err, "", "type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "logs_query", &obj.LogsQuery, UnmarshalApisLogs2metricsV2LogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs_query-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// Event2MetricApisEvents2metricsV2E2mQueryLogsQuery : Event2MetricApisEvents2metricsV2E2mQueryLogsQuery struct
// This model "extends" Event2Metric
type Event2MetricApisEvents2metricsV2E2mQueryLogsQuery struct {
	// E2M unique ID, required on update requests.
	ID *strfmt.UUID `json:"id,omitempty"`

	// Name of the E2M.
	Name *string `json:"name" validate:"required"`

	// Description of the E2M.
	Description *string `json:"description,omitempty"`

	// E2M create time.
	CreateTime *string `json:"create_time,omitempty"`

	// E2M update time.
	UpdateTime *string `json:"update_time,omitempty"`

	Permutations *ApisEvents2metricsV2E2mPermutations `json:"permutations,omitempty"`

	// E2M metric labels.
	MetricLabels []ApisEvents2metricsV2MetricLabel `json:"metric_labels,omitempty"`

	// E2M metric fields.
	MetricFields []ApisEvents2metricsV2MetricField `json:"metric_fields,omitempty"`

	// E2M type.
	Type *string `json:"type" validate:"required"`

	// A flag that represents if the e2m is for internal usage.
	IsInternal *bool `json:"is_internal,omitempty"`

	// E2M logs query.
	LogsQuery *ApisLogs2metricsV2LogsQuery `json:"logs_query,omitempty"`
}

// Constants associated with the Event2MetricApisEvents2metricsV2E2mQueryLogsQuery.Type property.
// E2M type.
const (
	Event2MetricApisEvents2metricsV2E2mQueryLogsQuery_Type_Logs2metrics = "logs2metrics"
	Event2MetricApisEvents2metricsV2E2mQueryLogsQuery_Type_Unspecified = "unspecified"
)

func (*Event2MetricApisEvents2metricsV2E2mQueryLogsQuery) isaEvent2Metric() bool {
	return true
}

// UnmarshalEvent2MetricApisEvents2metricsV2E2mQueryLogsQuery unmarshals an instance of Event2MetricApisEvents2metricsV2E2mQueryLogsQuery from the specified map of raw messages.
func UnmarshalEvent2MetricApisEvents2metricsV2E2mQueryLogsQuery(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(Event2MetricApisEvents2metricsV2E2mQueryLogsQuery)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "create_time", &obj.CreateTime)
	if err != nil {
		err = core.SDKErrorf(err, "", "create_time-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "update_time", &obj.UpdateTime)
	if err != nil {
		err = core.SDKErrorf(err, "", "update_time-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "permutations", &obj.Permutations, UnmarshalApisEvents2metricsV2E2mPermutations)
	if err != nil {
		err = core.SDKErrorf(err, "", "permutations-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metric_labels", &obj.MetricLabels, UnmarshalApisEvents2metricsV2MetricLabel)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_labels-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "metric_fields", &obj.MetricFields, UnmarshalApisEvents2metricsV2MetricField)
	if err != nil {
		err = core.SDKErrorf(err, "", "metric_fields-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		err = core.SDKErrorf(err, "", "type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "is_internal", &obj.IsInternal)
	if err != nil {
		err = core.SDKErrorf(err, "", "is_internal-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "logs_query", &obj.LogsQuery, UnmarshalApisLogs2metricsV2LogsQuery)
	if err != nil {
		err = core.SDKErrorf(err, "", "logs_query-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications : OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications struct
// This model "extends" OutgoingWebhookPrototype
type OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications struct {
	// The type of the deployed Outbound Integrations to list.
	Type *string `json:"type" validate:"required"`

	// The name of the Outbound Integration.
	Name *string `json:"name" validate:"required"`

	// The URL of the Outbound Integration. Null for IBM Event Notifications integration.
	URL *string `json:"url,omitempty"`

	// The configuration of the IBM Event Notifications Outbound Integration.
	IbmEventNotifications *OutgoingWebhooksV1IbmEventNotificationsConfig `json:"ibm_event_notifications,omitempty"`
}

// Constants associated with the OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications.Type property.
// The type of the deployed Outbound Integrations to list.
const (
	OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications_Type_IbmEventNotifications = "ibm_event_notifications"
)

// NewOutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications : Instantiate OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications (Generic Model Constructor)
func (*LogsV0) NewOutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications(typeVar string, name string) (_model *OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications, err error) {
	_model = &OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications{
		Type: core.StringPtr(typeVar),
		Name: core.StringPtr(name),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

func (*OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications) isaOutgoingWebhookPrototype() bool {
	return true
}

// UnmarshalOutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications unmarshals an instance of OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications from the specified map of raw messages.
func UnmarshalOutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		err = core.SDKErrorf(err, "", "type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "url", &obj.URL)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "ibm_event_notifications", &obj.IbmEventNotifications, UnmarshalOutgoingWebhooksV1IbmEventNotificationsConfig)
	if err != nil {
		err = core.SDKErrorf(err, "", "ibm_event_notifications-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// OutgoingWebhooksV1OutgoingWebhookConfigIbmEventNotifications : OutgoingWebhooksV1OutgoingWebhookConfigIbmEventNotifications struct
// This model "extends" OutgoingWebhook
type OutgoingWebhooksV1OutgoingWebhookConfigIbmEventNotifications struct {
	// The ID of the Outbound Integration.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// The type of the deployed Outbound Integrations to list.
	Type *string `json:"type" validate:"required"`

	// The name of the Outbound Integration.
	Name *string `json:"name" validate:"required"`

	// The URL of the Outbound Integration. Null for IBM Event Notifications integration.
	URL *string `json:"url,omitempty"`

	// The creation time of the Outbound Integration.
	CreatedAt *strfmt.DateTime `json:"created_at" validate:"required"`

	// The update time of the Outbound Integration.
	UpdatedAt *strfmt.DateTime `json:"updated_at" validate:"required"`

	// The external ID of the Outbound Integration, for connecting with other parts of the system.
	ExternalID *int64 `json:"external_id" validate:"required"`

	// The configuration of the IBM Event Notifications Outbound Integration.
	IbmEventNotifications *OutgoingWebhooksV1IbmEventNotificationsConfig `json:"ibm_event_notifications,omitempty"`
}

// Constants associated with the OutgoingWebhooksV1OutgoingWebhookConfigIbmEventNotifications.Type property.
// The type of the deployed Outbound Integrations to list.
const (
	OutgoingWebhooksV1OutgoingWebhookConfigIbmEventNotifications_Type_IbmEventNotifications = "ibm_event_notifications"
)

func (*OutgoingWebhooksV1OutgoingWebhookConfigIbmEventNotifications) isaOutgoingWebhook() bool {
	return true
}

// UnmarshalOutgoingWebhooksV1OutgoingWebhookConfigIbmEventNotifications unmarshals an instance of OutgoingWebhooksV1OutgoingWebhookConfigIbmEventNotifications from the specified map of raw messages.
func UnmarshalOutgoingWebhooksV1OutgoingWebhookConfigIbmEventNotifications(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(OutgoingWebhooksV1OutgoingWebhookConfigIbmEventNotifications)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "type", &obj.Type)
	if err != nil {
		err = core.SDKErrorf(err, "", "type-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "url", &obj.URL)
	if err != nil {
		err = core.SDKErrorf(err, "", "url-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		err = core.SDKErrorf(err, "", "created_at-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		err = core.SDKErrorf(err, "", "updated_at-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "external_id", &obj.ExternalID)
	if err != nil {
		err = core.SDKErrorf(err, "", "external_id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "ibm_event_notifications", &obj.IbmEventNotifications, UnmarshalOutgoingWebhooksV1IbmEventNotificationsConfig)
	if err != nil {
		err = core.SDKErrorf(err, "", "ibm_event_notifications-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules : PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules struct
// This model "extends" PolicyPrototype
type PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules struct {
	// Policy name.
	Name *string `json:"name" validate:"required"`

	// Policy description.
	Description *string `json:"description,omitempty"`

	// The data pipeline sources that match the policy rules will go through.
	Priority *string `json:"priority" validate:"required"`

	ApplicationRule *QuotaV1Rule `json:"application_rule,omitempty"`

	SubsystemRule *QuotaV1Rule `json:"subsystem_rule,omitempty"`

	ArchiveRetention *QuotaV1ArchiveRetention `json:"archive_retention,omitempty"`

	// Log rules.
	LogRules *QuotaV1LogRules `json:"log_rules,omitempty"`
}

// Constants associated with the PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules.Priority property.
// The data pipeline sources that match the policy rules will go through.
const (
	PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules_Priority_TypeBlock = "type_block"
	PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules_Priority_TypeHigh = "type_high"
	PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules_Priority_TypeLow = "type_low"
	PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules_Priority_TypeMedium = "type_medium"
	PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules_Priority_TypeUnspecified = "type_unspecified"
)

// NewPolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules : Instantiate PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules (Generic Model Constructor)
func (*LogsV0) NewPolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules(name string, priority string) (_model *PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules, err error) {
	_model = &PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules{
		Name: core.StringPtr(name),
		Priority: core.StringPtr(priority),
	}
	err = core.ValidateStruct(_model, "required parameters")
	if err != nil {
		err = core.SDKErrorf(err, "", "model-missing-required", common.GetComponentInfo())
	}
	return
}

func (*PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules) isaPolicyPrototype() bool {
	return true
}

// UnmarshalPolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules unmarshals an instance of PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules from the specified map of raw messages.
func UnmarshalPolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "priority", &obj.Priority)
	if err != nil {
		err = core.SDKErrorf(err, "", "priority-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "application_rule", &obj.ApplicationRule, UnmarshalQuotaV1Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "application_rule-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "subsystem_rule", &obj.SubsystemRule, UnmarshalQuotaV1Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "subsystem_rule-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "archive_retention", &obj.ArchiveRetention, UnmarshalQuotaV1ArchiveRetention)
	if err != nil {
		err = core.SDKErrorf(err, "", "archive_retention-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "log_rules", &obj.LogRules, UnmarshalQuotaV1LogRules)
	if err != nil {
		err = core.SDKErrorf(err, "", "log_rules-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// PolicyQuotaV1PolicySourceTypeRulesLogRules : PolicyQuotaV1PolicySourceTypeRulesLogRules struct
// This model "extends" Policy
type PolicyQuotaV1PolicySourceTypeRulesLogRules struct {
	// Policy ID.
	ID *strfmt.UUID `json:"id" validate:"required"`

	// Company ID.
	CompanyID *int64 `json:"company_id" validate:"required"`

	// Name of policy.
	Name *string `json:"name" validate:"required"`

	// Description of policy.
	Description *string `json:"description" validate:"required"`

	// The data pipeline sources that match the policy rules will go through.
	Priority *string `json:"priority,omitempty"`

	// Soft deletion flag.
	Deleted *bool `json:"deleted,omitempty"`

	// Enabled flag.
	Enabled *bool `json:"enabled,omitempty"`

	// Order of policy in relation to other policies.
	Order *int64 `json:"order" validate:"required"`

	ApplicationRule *QuotaV1Rule `json:"application_rule,omitempty"`

	SubsystemRule *QuotaV1Rule `json:"subsystem_rule,omitempty"`

	// Created at date at utc+0.
	CreatedAt *string `json:"created_at" validate:"required"`

	// Updated at date at utc+0.
	UpdatedAt *string `json:"updated_at" validate:"required"`

	ArchiveRetention *QuotaV1ArchiveRetention `json:"archive_retention,omitempty"`

	// Log rules.
	LogRules *QuotaV1LogRules `json:"log_rules,omitempty"`
}

// Constants associated with the PolicyQuotaV1PolicySourceTypeRulesLogRules.Priority property.
// The data pipeline sources that match the policy rules will go through.
const (
	PolicyQuotaV1PolicySourceTypeRulesLogRules_Priority_TypeBlock = "type_block"
	PolicyQuotaV1PolicySourceTypeRulesLogRules_Priority_TypeHigh = "type_high"
	PolicyQuotaV1PolicySourceTypeRulesLogRules_Priority_TypeLow = "type_low"
	PolicyQuotaV1PolicySourceTypeRulesLogRules_Priority_TypeMedium = "type_medium"
	PolicyQuotaV1PolicySourceTypeRulesLogRules_Priority_TypeUnspecified = "type_unspecified"
)

func (*PolicyQuotaV1PolicySourceTypeRulesLogRules) isaPolicy() bool {
	return true
}

// UnmarshalPolicyQuotaV1PolicySourceTypeRulesLogRules unmarshals an instance of PolicyQuotaV1PolicySourceTypeRulesLogRules from the specified map of raw messages.
func UnmarshalPolicyQuotaV1PolicySourceTypeRulesLogRules(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(PolicyQuotaV1PolicySourceTypeRulesLogRules)
	err = core.UnmarshalPrimitive(m, "id", &obj.ID)
	if err != nil {
		err = core.SDKErrorf(err, "", "id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "company_id", &obj.CompanyID)
	if err != nil {
		err = core.SDKErrorf(err, "", "company_id-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "name", &obj.Name)
	if err != nil {
		err = core.SDKErrorf(err, "", "name-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "description", &obj.Description)
	if err != nil {
		err = core.SDKErrorf(err, "", "description-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "priority", &obj.Priority)
	if err != nil {
		err = core.SDKErrorf(err, "", "priority-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "deleted", &obj.Deleted)
	if err != nil {
		err = core.SDKErrorf(err, "", "deleted-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "enabled", &obj.Enabled)
	if err != nil {
		err = core.SDKErrorf(err, "", "enabled-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "order", &obj.Order)
	if err != nil {
		err = core.SDKErrorf(err, "", "order-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "application_rule", &obj.ApplicationRule, UnmarshalQuotaV1Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "application_rule-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "subsystem_rule", &obj.SubsystemRule, UnmarshalQuotaV1Rule)
	if err != nil {
		err = core.SDKErrorf(err, "", "subsystem_rule-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "created_at", &obj.CreatedAt)
	if err != nil {
		err = core.SDKErrorf(err, "", "created_at-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalPrimitive(m, "updated_at", &obj.UpdatedAt)
	if err != nil {
		err = core.SDKErrorf(err, "", "updated_at-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "archive_retention", &obj.ArchiveRetention, UnmarshalQuotaV1ArchiveRetention)
	if err != nil {
		err = core.SDKErrorf(err, "", "archive_retention-error", common.GetComponentInfo())
		return
	}
	err = core.UnmarshalModel(m, "log_rules", &obj.LogRules, UnmarshalQuotaV1LogRules)
	if err != nil {
		err = core.SDKErrorf(err, "", "log_rules-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleMatcherConstraintApplicationName : RulesV1RuleMatcherConstraintApplicationName struct
// This model "extends" RulesV1RuleMatcher
type RulesV1RuleMatcherConstraintApplicationName struct {
	// ApplicationName constraint.
	ApplicationName *RulesV1ApplicationNameConstraint `json:"application_name,omitempty"`
}

func (*RulesV1RuleMatcherConstraintApplicationName) isaRulesV1RuleMatcher() bool {
	return true
}

// UnmarshalRulesV1RuleMatcherConstraintApplicationName unmarshals an instance of RulesV1RuleMatcherConstraintApplicationName from the specified map of raw messages.
func UnmarshalRulesV1RuleMatcherConstraintApplicationName(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleMatcherConstraintApplicationName)
	err = core.UnmarshalModel(m, "application_name", &obj.ApplicationName, UnmarshalRulesV1ApplicationNameConstraint)
	if err != nil {
		err = core.SDKErrorf(err, "", "application_name-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleMatcherConstraintSeverity : RulesV1RuleMatcherConstraintSeverity struct
// This model "extends" RulesV1RuleMatcher
type RulesV1RuleMatcherConstraintSeverity struct {
	// Severity constraint.
	Severity *RulesV1SeverityConstraint `json:"severity,omitempty"`
}

func (*RulesV1RuleMatcherConstraintSeverity) isaRulesV1RuleMatcher() bool {
	return true
}

// UnmarshalRulesV1RuleMatcherConstraintSeverity unmarshals an instance of RulesV1RuleMatcherConstraintSeverity from the specified map of raw messages.
func UnmarshalRulesV1RuleMatcherConstraintSeverity(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleMatcherConstraintSeverity)
	err = core.UnmarshalModel(m, "severity", &obj.Severity, UnmarshalRulesV1SeverityConstraint)
	if err != nil {
		err = core.SDKErrorf(err, "", "severity-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleMatcherConstraintSubsystemName : RulesV1RuleMatcherConstraintSubsystemName struct
// This model "extends" RulesV1RuleMatcher
type RulesV1RuleMatcherConstraintSubsystemName struct {
	// SubsystemName constraint.
	SubsystemName *RulesV1SubsystemNameConstraint `json:"subsystem_name,omitempty"`
}

func (*RulesV1RuleMatcherConstraintSubsystemName) isaRulesV1RuleMatcher() bool {
	return true
}

// UnmarshalRulesV1RuleMatcherConstraintSubsystemName unmarshals an instance of RulesV1RuleMatcherConstraintSubsystemName from the specified map of raw messages.
func UnmarshalRulesV1RuleMatcherConstraintSubsystemName(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleMatcherConstraintSubsystemName)
	err = core.UnmarshalModel(m, "subsystem_name", &obj.SubsystemName, UnmarshalRulesV1SubsystemNameConstraint)
	if err != nil {
		err = core.SDKErrorf(err, "", "subsystem_name-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleParametersRuleParametersAllowParameters : RulesV1RuleParametersRuleParametersAllowParameters struct
// This model "extends" RulesV1RuleParameters
type RulesV1RuleParametersRuleParametersAllowParameters struct {
	// Parameters for allow rule.
	AllowParameters *RulesV1AllowParameters `json:"allow_parameters,omitempty"`
}

func (*RulesV1RuleParametersRuleParametersAllowParameters) isaRulesV1RuleParameters() bool {
	return true
}

// UnmarshalRulesV1RuleParametersRuleParametersAllowParameters unmarshals an instance of RulesV1RuleParametersRuleParametersAllowParameters from the specified map of raw messages.
func UnmarshalRulesV1RuleParametersRuleParametersAllowParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleParametersRuleParametersAllowParameters)
	err = core.UnmarshalModel(m, "allow_parameters", &obj.AllowParameters, UnmarshalRulesV1AllowParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "allow_parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleParametersRuleParametersBlockParameters : RulesV1RuleParametersRuleParametersBlockParameters struct
// This model "extends" RulesV1RuleParameters
type RulesV1RuleParametersRuleParametersBlockParameters struct {
	// Parameters for block rule.
	BlockParameters *RulesV1BlockParameters `json:"block_parameters,omitempty"`
}

func (*RulesV1RuleParametersRuleParametersBlockParameters) isaRulesV1RuleParameters() bool {
	return true
}

// UnmarshalRulesV1RuleParametersRuleParametersBlockParameters unmarshals an instance of RulesV1RuleParametersRuleParametersBlockParameters from the specified map of raw messages.
func UnmarshalRulesV1RuleParametersRuleParametersBlockParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleParametersRuleParametersBlockParameters)
	err = core.UnmarshalModel(m, "block_parameters", &obj.BlockParameters, UnmarshalRulesV1BlockParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "block_parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleParametersRuleParametersExtractParameters : RulesV1RuleParametersRuleParametersExtractParameters struct
// This model "extends" RulesV1RuleParameters
type RulesV1RuleParametersRuleParametersExtractParameters struct {
	// Parameters for text extraction rule.
	ExtractParameters *RulesV1ExtractParameters `json:"extract_parameters,omitempty"`
}

func (*RulesV1RuleParametersRuleParametersExtractParameters) isaRulesV1RuleParameters() bool {
	return true
}

// UnmarshalRulesV1RuleParametersRuleParametersExtractParameters unmarshals an instance of RulesV1RuleParametersRuleParametersExtractParameters from the specified map of raw messages.
func UnmarshalRulesV1RuleParametersRuleParametersExtractParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleParametersRuleParametersExtractParameters)
	err = core.UnmarshalModel(m, "extract_parameters", &obj.ExtractParameters, UnmarshalRulesV1ExtractParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "extract_parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleParametersRuleParametersExtractTimestampParameters : RulesV1RuleParametersRuleParametersExtractTimestampParameters struct
// This model "extends" RulesV1RuleParameters
type RulesV1RuleParametersRuleParametersExtractTimestampParameters struct {
	// Parameters for extract timestamp rule.
	ExtractTimestampParameters *RulesV1ExtractTimestampParameters `json:"extract_timestamp_parameters,omitempty"`
}

func (*RulesV1RuleParametersRuleParametersExtractTimestampParameters) isaRulesV1RuleParameters() bool {
	return true
}

// UnmarshalRulesV1RuleParametersRuleParametersExtractTimestampParameters unmarshals an instance of RulesV1RuleParametersRuleParametersExtractTimestampParameters from the specified map of raw messages.
func UnmarshalRulesV1RuleParametersRuleParametersExtractTimestampParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleParametersRuleParametersExtractTimestampParameters)
	err = core.UnmarshalModel(m, "extract_timestamp_parameters", &obj.ExtractTimestampParameters, UnmarshalRulesV1ExtractTimestampParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "extract_timestamp_parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleParametersRuleParametersJSONExtractParameters : RulesV1RuleParametersRuleParametersJSONExtractParameters struct
// This model "extends" RulesV1RuleParameters
type RulesV1RuleParametersRuleParametersJSONExtractParameters struct {
	// Parameters for json extract rule.
	JSONExtractParameters *RulesV1JSONExtractParameters `json:"json_extract_parameters,omitempty"`
}

func (*RulesV1RuleParametersRuleParametersJSONExtractParameters) isaRulesV1RuleParameters() bool {
	return true
}

// UnmarshalRulesV1RuleParametersRuleParametersJSONExtractParameters unmarshals an instance of RulesV1RuleParametersRuleParametersJSONExtractParameters from the specified map of raw messages.
func UnmarshalRulesV1RuleParametersRuleParametersJSONExtractParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleParametersRuleParametersJSONExtractParameters)
	err = core.UnmarshalModel(m, "json_extract_parameters", &obj.JSONExtractParameters, UnmarshalRulesV1JSONExtractParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "json_extract_parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleParametersRuleParametersJSONParseParameters : RulesV1RuleParametersRuleParametersJSONParseParameters struct
// This model "extends" RulesV1RuleParameters
type RulesV1RuleParametersRuleParametersJSONParseParameters struct {
	// Parameters for json parse rule.
	JSONParseParameters *RulesV1JSONParseParameters `json:"json_parse_parameters,omitempty"`
}

func (*RulesV1RuleParametersRuleParametersJSONParseParameters) isaRulesV1RuleParameters() bool {
	return true
}

// UnmarshalRulesV1RuleParametersRuleParametersJSONParseParameters unmarshals an instance of RulesV1RuleParametersRuleParametersJSONParseParameters from the specified map of raw messages.
func UnmarshalRulesV1RuleParametersRuleParametersJSONParseParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleParametersRuleParametersJSONParseParameters)
	err = core.UnmarshalModel(m, "json_parse_parameters", &obj.JSONParseParameters, UnmarshalRulesV1JSONParseParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "json_parse_parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleParametersRuleParametersJSONStringifyParameters : RulesV1RuleParametersRuleParametersJSONStringifyParameters struct
// This model "extends" RulesV1RuleParameters
type RulesV1RuleParametersRuleParametersJSONStringifyParameters struct {
	// Parameters for json stringify rule.
	JSONStringifyParameters *RulesV1JSONStringifyParameters `json:"json_stringify_parameters,omitempty"`
}

func (*RulesV1RuleParametersRuleParametersJSONStringifyParameters) isaRulesV1RuleParameters() bool {
	return true
}

// UnmarshalRulesV1RuleParametersRuleParametersJSONStringifyParameters unmarshals an instance of RulesV1RuleParametersRuleParametersJSONStringifyParameters from the specified map of raw messages.
func UnmarshalRulesV1RuleParametersRuleParametersJSONStringifyParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleParametersRuleParametersJSONStringifyParameters)
	err = core.UnmarshalModel(m, "json_stringify_parameters", &obj.JSONStringifyParameters, UnmarshalRulesV1JSONStringifyParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "json_stringify_parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleParametersRuleParametersParseParameters : RulesV1RuleParametersRuleParametersParseParameters struct
// This model "extends" RulesV1RuleParameters
type RulesV1RuleParametersRuleParametersParseParameters struct {
	// Parameters for parse rule.
	ParseParameters *RulesV1ParseParameters `json:"parse_parameters,omitempty"`
}

func (*RulesV1RuleParametersRuleParametersParseParameters) isaRulesV1RuleParameters() bool {
	return true
}

// UnmarshalRulesV1RuleParametersRuleParametersParseParameters unmarshals an instance of RulesV1RuleParametersRuleParametersParseParameters from the specified map of raw messages.
func UnmarshalRulesV1RuleParametersRuleParametersParseParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleParametersRuleParametersParseParameters)
	err = core.UnmarshalModel(m, "parse_parameters", &obj.ParseParameters, UnmarshalRulesV1ParseParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "parse_parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleParametersRuleParametersRemoveFieldsParameters : RulesV1RuleParametersRuleParametersRemoveFieldsParameters struct
// This model "extends" RulesV1RuleParameters
type RulesV1RuleParametersRuleParametersRemoveFieldsParameters struct {
	// Parameters for remove fields rule.
	RemoveFieldsParameters *RulesV1RemoveFieldsParameters `json:"remove_fields_parameters,omitempty"`
}

func (*RulesV1RuleParametersRuleParametersRemoveFieldsParameters) isaRulesV1RuleParameters() bool {
	return true
}

// UnmarshalRulesV1RuleParametersRuleParametersRemoveFieldsParameters unmarshals an instance of RulesV1RuleParametersRuleParametersRemoveFieldsParameters from the specified map of raw messages.
func UnmarshalRulesV1RuleParametersRuleParametersRemoveFieldsParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleParametersRuleParametersRemoveFieldsParameters)
	err = core.UnmarshalModel(m, "remove_fields_parameters", &obj.RemoveFieldsParameters, UnmarshalRulesV1RemoveFieldsParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "remove_fields_parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}

// RulesV1RuleParametersRuleParametersReplaceParameters : RulesV1RuleParametersRuleParametersReplaceParameters struct
// This model "extends" RulesV1RuleParameters
type RulesV1RuleParametersRuleParametersReplaceParameters struct {
	// Parameters for replace rule.
	ReplaceParameters *RulesV1ReplaceParameters `json:"replace_parameters,omitempty"`
}

func (*RulesV1RuleParametersRuleParametersReplaceParameters) isaRulesV1RuleParameters() bool {
	return true
}

// UnmarshalRulesV1RuleParametersRuleParametersReplaceParameters unmarshals an instance of RulesV1RuleParametersRuleParametersReplaceParameters from the specified map of raw messages.
func UnmarshalRulesV1RuleParametersRuleParametersReplaceParameters(m map[string]json.RawMessage, result interface{}) (err error) {
	obj := new(RulesV1RuleParametersRuleParametersReplaceParameters)
	err = core.UnmarshalModel(m, "replace_parameters", &obj.ReplaceParameters, UnmarshalRulesV1ReplaceParameters)
	if err != nil {
		err = core.SDKErrorf(err, "", "replace_parameters-error", common.GetComponentInfo())
		return
	}
	reflect.ValueOf(result).Elem().Set(reflect.ValueOf(obj))
	return
}
