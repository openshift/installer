// Copyright 2023 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package monitoring

import (
	"github.com/GoogleCloudPlatform/declarative-resource-client-library/dcl"
)

func DCLDashboardSchema() *dcl.Schema {
	return &dcl.Schema{
		Info: &dcl.Info{
			Title:       "Monitoring/Dashboard",
			Description: "The Monitoring Dashboard resource",
			StructName:  "Dashboard",
		},
		Paths: &dcl.Paths{
			Get: &dcl.Path{
				Description: "The function used to get information about a Dashboard",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:        "dashboard",
						Required:    true,
						Description: "A full instance of a Dashboard",
					},
				},
			},
			Apply: &dcl.Path{
				Description: "The function used to apply information about a Dashboard",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:        "dashboard",
						Required:    true,
						Description: "A full instance of a Dashboard",
					},
				},
			},
			Delete: &dcl.Path{
				Description: "The function used to delete a Dashboard",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:        "dashboard",
						Required:    true,
						Description: "A full instance of a Dashboard",
					},
				},
			},
			DeleteAll: &dcl.Path{
				Description: "The function used to delete all Dashboard",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:     "project",
						Required: true,
						Schema: &dcl.PathParametersSchema{
							Type: "string",
						},
					},
				},
			},
			List: &dcl.Path{
				Description: "The function used to list information about many Dashboard",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:     "project",
						Required: true,
						Schema: &dcl.PathParametersSchema{
							Type: "string",
						},
					},
				},
			},
		},
		Components: &dcl.Components{
			Schemas: map[string]*dcl.Component{
				"Dashboard": &dcl.Component{
					Title:           "Dashboard",
					ID:              "projects/{{project}}/dashboards/{{name}}",
					ParentContainer: "project",
					HasCreate:       true,
					SchemaProperty: dcl.Property{
						Type: "object",
						Required: []string{
							"name",
							"displayName",
							"project",
						},
						Properties: map[string]*dcl.Property{
							"columnLayout": &dcl.Property{
								Type:        "object",
								GoName:      "ColumnLayout",
								GoType:      "DashboardColumnLayout",
								Description: "The content is divided into equally spaced columns and the widgets are arranged vertically.",
								Conflicts: []string{
									"gridLayout",
									"mosaicLayout",
									"rowLayout",
								},
								Properties: map[string]*dcl.Property{
									"columns": &dcl.Property{
										Type:        "array",
										GoName:      "Columns",
										Description: "The columns of content to display.",
										SendEmpty:   true,
										ListType:    "list",
										Items: &dcl.Property{
											Type:   "object",
											GoType: "DashboardColumnLayoutColumns",
											Properties: map[string]*dcl.Property{
												"weight": &dcl.Property{
													Type:        "integer",
													Format:      "int64",
													GoName:      "Weight",
													Description: "The relative weight of this column. The column weight is used to adjust the width of columns on the screen (relative to peers). Greater the weight, greater the width of the column on the screen. If omitted, a value of 1 is used while rendering.",
												},
												"widgets": &dcl.Property{
													Type:        "array",
													GoName:      "Widgets",
													Description: "The display widgets arranged vertically in this column.",
													SendEmpty:   true,
													ListType:    "list",
													Items: &dcl.Property{
														Type:   "object",
														GoType: "DashboardColumnLayoutColumnsWidgets",
														Properties: map[string]*dcl.Property{
															"blank": &dcl.Property{
																Type:        "object",
																GoName:      "Blank",
																GoType:      "DashboardColumnLayoutColumnsWidgetsBlank",
																Description: "A blank space.",
																Conflicts: []string{
																	"xyChart",
																	"scorecard",
																	"text",
																	"logsPanel",
																},
																Properties: map[string]*dcl.Property{},
															},
															"logsPanel": &dcl.Property{
																Type:   "object",
																GoName: "LogsPanel",
																GoType: "DashboardColumnLayoutColumnsWidgetsLogsPanel",
																Conflicts: []string{
																	"xyChart",
																	"scorecard",
																	"text",
																	"blank",
																},
																Properties: map[string]*dcl.Property{
																	"filter": &dcl.Property{
																		Type:        "string",
																		GoName:      "Filter",
																		Description: "A filter that chooses which log entries to return. See [Advanced Logs Queries](https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.",
																	},
																	"resourceNames": &dcl.Property{
																		Type:        "array",
																		GoName:      "ResourceNames",
																		Description: "The names of logging resources to collect logs for. Currently only projects are supported. If empty, the widget will default to the host project.",
																		SendEmpty:   true,
																		ListType:    "list",
																		Items: &dcl.Property{
																			Type:   "string",
																			GoType: "string",
																			ResourceReferences: []*dcl.PropertyResourceReference{
																				&dcl.PropertyResourceReference{
																					Resource: "Cloudresourcemanager/Project",
																					Field:    "name",
																				},
																			},
																		},
																	},
																},
															},
															"scorecard": &dcl.Property{
																Type:        "object",
																GoName:      "Scorecard",
																GoType:      "DashboardColumnLayoutColumnsWidgetsScorecard",
																Description: "A scorecard summarizing time series data.",
																Conflicts: []string{
																	"xyChart",
																	"text",
																	"blank",
																	"logsPanel",
																},
																Required: []string{
																	"timeSeriesQuery",
																},
																Properties: map[string]*dcl.Property{
																	"gaugeView": &dcl.Property{
																		Type:        "object",
																		GoName:      "GaugeView",
																		GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardGaugeView",
																		Description: "Will cause the scorecard to show a gauge chart.",
																		Properties: map[string]*dcl.Property{
																			"lowerBound": &dcl.Property{
																				Type:        "number",
																				Format:      "double",
																				GoName:      "LowerBound",
																				Description: "The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.",
																			},
																			"upperBound": &dcl.Property{
																				Type:        "number",
																				Format:      "double",
																				GoName:      "UpperBound",
																				Description: "The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.",
																			},
																		},
																	},
																	"sparkChartView": &dcl.Property{
																		Type:        "object",
																		GoName:      "SparkChartView",
																		GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardSparkChartView",
																		Description: "Will cause the scorecard to show a spark chart.",
																		Required: []string{
																			"sparkChartType",
																		},
																		Properties: map[string]*dcl.Property{
																			"minAlignmentPeriod": &dcl.Property{
																				Type:        "string",
																				GoName:      "MinAlignmentPeriod",
																				Description: "The lower bound on data point frequency in the chart implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes it would not make sense to fetch and align data at one minute intervals. This field is optional and exists only as a hint.",
																			},
																			"sparkChartType": &dcl.Property{
																				Type:        "string",
																				GoName:      "SparkChartType",
																				GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardSparkChartViewSparkChartTypeEnum",
																				Description: "Required. The type of sparkchart to show in this chartView. Possible values: SPARK_CHART_TYPE_UNSPECIFIED, SPARK_LINE, SPARK_BAR",
																				Enum: []string{
																					"SPARK_CHART_TYPE_UNSPECIFIED",
																					"SPARK_LINE",
																					"SPARK_BAR",
																				},
																			},
																		},
																	},
																	"thresholds": &dcl.Property{
																		Type:        "array",
																		GoName:      "Thresholds",
																		Description: "The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)  As an example, consider a scorecard with the following four thresholds: {   value: 90,   category: 'DANGER',   trigger: 'ABOVE', },: {   value: 70,   category: 'WARNING',   trigger: 'ABOVE', }, {   value: 10,   category: 'DANGER',   trigger: 'BELOW', }, {   value: 20,   category: 'WARNING',   trigger: 'BELOW', }  Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.",
																		SendEmpty:   true,
																		ListType:    "list",
																		Items: &dcl.Property{
																			Type:   "object",
																			GoType: "DashboardColumnLayoutColumnsWidgetsScorecardThresholds",
																			Properties: map[string]*dcl.Property{
																				"color": &dcl.Property{
																					Type:        "string",
																					GoName:      "Color",
																					GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardThresholdsColorEnum",
																					Description: "The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED",
																					Enum: []string{
																						"COLOR_UNSPECIFIED",
																						"GREY",
																						"BLUE",
																						"GREEN",
																						"YELLOW",
																						"ORANGE",
																						"RED",
																					},
																				},
																				"direction": &dcl.Property{
																					Type:        "string",
																					GoName:      "Direction",
																					GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardThresholdsDirectionEnum",
																					Description: "The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW",
																					Enum: []string{
																						"DIRECTION_UNSPECIFIED",
																						"ABOVE",
																						"BELOW",
																					},
																				},
																				"label": &dcl.Property{
																					Type:        "string",
																					GoName:      "Label",
																					Description: "A label for the threshold.",
																				},
																				"value": &dcl.Property{
																					Type:        "number",
																					Format:      "double",
																					GoName:      "Value",
																					Description: "The value of the threshold. The value should be defined in the native scale of the metric.",
																				},
																			},
																		},
																	},
																	"timeSeriesQuery": &dcl.Property{
																		Type:        "object",
																		GoName:      "TimeSeriesQuery",
																		GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQuery",
																		Description: "Required. Fields for querying time series data from the Stackdriver metrics API.",
																		Properties: map[string]*dcl.Property{
																			"timeSeriesFilter": &dcl.Property{
																				Type:        "object",
																				GoName:      "TimeSeriesFilter",
																				GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilter",
																				Description: "Filter parameters to fetch time series.",
																				Required: []string{
																					"filter",
																				},
																				Properties: map[string]*dcl.Property{
																					"aggregation": &dcl.Property{
																						Type:        "object",
																						GoName:      "Aggregation",
																						GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterAggregation",
																						Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																						Properties: map[string]*dcl.Property{
																							"alignmentPeriod": &dcl.Property{
																								Type:        "string",
																								GoName:      "AlignmentPeriod",
																								Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																							},
																							"crossSeriesReducer": &dcl.Property{
																								Type:        "string",
																								GoName:      "CrossSeriesReducer",
																								GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum",
																								Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																								Enum: []string{
																									"REDUCE_NONE",
																									"REDUCE_MEAN",
																									"REDUCE_MIN",
																									"REDUCE_MAX",
																									"REDUCE_SUM",
																									"REDUCE_STDDEV",
																									"REDUCE_COUNT",
																									"REDUCE_COUNT_TRUE",
																									"REDUCE_COUNT_FALSE",
																									"REDUCE_FRACTION_TRUE",
																									"REDUCE_PERCENTILE_99",
																									"REDUCE_PERCENTILE_95",
																									"REDUCE_PERCENTILE_50",
																									"REDUCE_PERCENTILE_05",
																									"REDUCE_FRACTION_LESS_THAN",
																									"REDUCE_MAKE_DISTRIBUTION",
																								},
																							},
																							"groupByFields": &dcl.Property{
																								Type:        "array",
																								GoName:      "GroupByFields",
																								Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																								SendEmpty:   true,
																								ListType:    "list",
																								Items: &dcl.Property{
																									Type:   "string",
																									GoType: "string",
																								},
																							},
																							"perSeriesAligner": &dcl.Property{
																								Type:        "string",
																								GoName:      "PerSeriesAligner",
																								GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum",
																								Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																								Enum: []string{
																									"ALIGN_NONE",
																									"ALIGN_DELTA",
																									"ALIGN_RATE",
																									"ALIGN_INTERPOLATE",
																									"ALIGN_NEXT_OLDER",
																									"ALIGN_MIN",
																									"ALIGN_MAX",
																									"ALIGN_MEAN",
																									"ALIGN_COUNT",
																									"ALIGN_SUM",
																									"ALIGN_STDDEV",
																									"ALIGN_COUNT_TRUE",
																									"ALIGN_COUNT_FALSE",
																									"ALIGN_FRACTION_TRUE",
																									"ALIGN_PERCENTILE_99",
																									"ALIGN_PERCENTILE_95",
																									"ALIGN_PERCENTILE_50",
																									"ALIGN_PERCENTILE_05",
																									"ALIGN_MAKE_DISTRIBUTION",
																									"ALIGN_PERCENT_CHANGE",
																								},
																							},
																						},
																					},
																					"filter": &dcl.Property{
																						Type:        "string",
																						GoName:      "Filter",
																						Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																					},
																					"pickTimeSeriesFilter": &dcl.Property{
																						Type:        "object",
																						GoName:      "PickTimeSeriesFilter",
																						GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter",
																						Description: "Ranking based time series filter.",
																						Properties: map[string]*dcl.Property{
																							"direction": &dcl.Property{
																								Type:        "string",
																								GoName:      "Direction",
																								GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum",
																								Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																								Enum: []string{
																									"DIRECTION_UNSPECIFIED",
																									"TOP",
																									"BOTTOM",
																								},
																							},
																							"numTimeSeries": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "NumTimeSeries",
																								Description: "How many time series to allow to pass through the filter.",
																							},
																							"rankingMethod": &dcl.Property{
																								Type:        "string",
																								GoName:      "RankingMethod",
																								GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum",
																								Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																								Enum: []string{
																									"METHOD_UNSPECIFIED",
																									"METHOD_MEAN",
																									"METHOD_MAX",
																									"METHOD_MIN",
																									"METHOD_SUM",
																									"METHOD_LATEST",
																								},
																							},
																						},
																					},
																					"secondaryAggregation": &dcl.Property{
																						Type:        "object",
																						GoName:      "SecondaryAggregation",
																						GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation",
																						Description: "Apply a second aggregation after `aggregation` is applied.",
																						Properties: map[string]*dcl.Property{
																							"alignmentPeriod": &dcl.Property{
																								Type:        "string",
																								GoName:      "AlignmentPeriod",
																								Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																							},
																							"crossSeriesReducer": &dcl.Property{
																								Type:        "string",
																								GoName:      "CrossSeriesReducer",
																								GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum",
																								Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																								Enum: []string{
																									"REDUCE_NONE",
																									"REDUCE_MEAN",
																									"REDUCE_MIN",
																									"REDUCE_MAX",
																									"REDUCE_SUM",
																									"REDUCE_STDDEV",
																									"REDUCE_COUNT",
																									"REDUCE_COUNT_TRUE",
																									"REDUCE_COUNT_FALSE",
																									"REDUCE_FRACTION_TRUE",
																									"REDUCE_PERCENTILE_99",
																									"REDUCE_PERCENTILE_95",
																									"REDUCE_PERCENTILE_50",
																									"REDUCE_PERCENTILE_05",
																									"REDUCE_FRACTION_LESS_THAN",
																									"REDUCE_MAKE_DISTRIBUTION",
																								},
																							},
																							"groupByFields": &dcl.Property{
																								Type:        "array",
																								GoName:      "GroupByFields",
																								Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																								SendEmpty:   true,
																								ListType:    "list",
																								Items: &dcl.Property{
																									Type:   "string",
																									GoType: "string",
																								},
																							},
																							"perSeriesAligner": &dcl.Property{
																								Type:        "string",
																								GoName:      "PerSeriesAligner",
																								GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum",
																								Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																								Enum: []string{
																									"ALIGN_NONE",
																									"ALIGN_DELTA",
																									"ALIGN_RATE",
																									"ALIGN_INTERPOLATE",
																									"ALIGN_NEXT_OLDER",
																									"ALIGN_MIN",
																									"ALIGN_MAX",
																									"ALIGN_MEAN",
																									"ALIGN_COUNT",
																									"ALIGN_SUM",
																									"ALIGN_STDDEV",
																									"ALIGN_COUNT_TRUE",
																									"ALIGN_COUNT_FALSE",
																									"ALIGN_FRACTION_TRUE",
																									"ALIGN_PERCENTILE_99",
																									"ALIGN_PERCENTILE_95",
																									"ALIGN_PERCENTILE_50",
																									"ALIGN_PERCENTILE_05",
																									"ALIGN_MAKE_DISTRIBUTION",
																									"ALIGN_PERCENT_CHANGE",
																								},
																							},
																						},
																					},
																				},
																			},
																			"timeSeriesFilterRatio": &dcl.Property{
																				Type:        "object",
																				GoName:      "TimeSeriesFilterRatio",
																				GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatio",
																				Description: "Parameters to fetch a ratio between two time series filters.",
																				Properties: map[string]*dcl.Property{
																					"denominator": &dcl.Property{
																						Type:        "object",
																						GoName:      "Denominator",
																						GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator",
																						Description: "The denominator of the ratio.",
																						Required: []string{
																							"filter",
																						},
																						Properties: map[string]*dcl.Property{
																							"aggregation": &dcl.Property{
																								Type:        "object",
																								GoName:      "Aggregation",
																								GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation",
																								Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																								Properties: map[string]*dcl.Property{
																									"alignmentPeriod": &dcl.Property{
																										Type:        "string",
																										GoName:      "AlignmentPeriod",
																										Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																									},
																									"crossSeriesReducer": &dcl.Property{
																										Type:        "string",
																										GoName:      "CrossSeriesReducer",
																										GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum",
																										Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																										Enum: []string{
																											"REDUCE_NONE",
																											"REDUCE_MEAN",
																											"REDUCE_MIN",
																											"REDUCE_MAX",
																											"REDUCE_SUM",
																											"REDUCE_STDDEV",
																											"REDUCE_COUNT",
																											"REDUCE_COUNT_TRUE",
																											"REDUCE_COUNT_FALSE",
																											"REDUCE_FRACTION_TRUE",
																											"REDUCE_PERCENTILE_99",
																											"REDUCE_PERCENTILE_95",
																											"REDUCE_PERCENTILE_50",
																											"REDUCE_PERCENTILE_05",
																											"REDUCE_FRACTION_LESS_THAN",
																											"REDUCE_MAKE_DISTRIBUTION",
																										},
																									},
																									"groupByFields": &dcl.Property{
																										Type:        "array",
																										GoName:      "GroupByFields",
																										Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																										SendEmpty:   true,
																										ListType:    "list",
																										Items: &dcl.Property{
																											Type:   "string",
																											GoType: "string",
																										},
																									},
																									"perSeriesAligner": &dcl.Property{
																										Type:        "string",
																										GoName:      "PerSeriesAligner",
																										GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum",
																										Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																										Enum: []string{
																											"ALIGN_NONE",
																											"ALIGN_DELTA",
																											"ALIGN_RATE",
																											"ALIGN_INTERPOLATE",
																											"ALIGN_NEXT_OLDER",
																											"ALIGN_MIN",
																											"ALIGN_MAX",
																											"ALIGN_MEAN",
																											"ALIGN_COUNT",
																											"ALIGN_SUM",
																											"ALIGN_STDDEV",
																											"ALIGN_COUNT_TRUE",
																											"ALIGN_COUNT_FALSE",
																											"ALIGN_FRACTION_TRUE",
																											"ALIGN_PERCENTILE_99",
																											"ALIGN_PERCENTILE_95",
																											"ALIGN_PERCENTILE_50",
																											"ALIGN_PERCENTILE_05",
																											"ALIGN_MAKE_DISTRIBUTION",
																											"ALIGN_PERCENT_CHANGE",
																										},
																									},
																								},
																							},
																							"filter": &dcl.Property{
																								Type:        "string",
																								GoName:      "Filter",
																								Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																							},
																						},
																					},
																					"numerator": &dcl.Property{
																						Type:        "object",
																						GoName:      "Numerator",
																						GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator",
																						Description: "The numerator of the ratio.",
																						Required: []string{
																							"filter",
																						},
																						Properties: map[string]*dcl.Property{
																							"aggregation": &dcl.Property{
																								Type:        "object",
																								GoName:      "Aggregation",
																								GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation",
																								Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																								Properties: map[string]*dcl.Property{
																									"alignmentPeriod": &dcl.Property{
																										Type:        "string",
																										GoName:      "AlignmentPeriod",
																										Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																									},
																									"crossSeriesReducer": &dcl.Property{
																										Type:        "string",
																										GoName:      "CrossSeriesReducer",
																										GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum",
																										Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																										Enum: []string{
																											"REDUCE_NONE",
																											"REDUCE_MEAN",
																											"REDUCE_MIN",
																											"REDUCE_MAX",
																											"REDUCE_SUM",
																											"REDUCE_STDDEV",
																											"REDUCE_COUNT",
																											"REDUCE_COUNT_TRUE",
																											"REDUCE_COUNT_FALSE",
																											"REDUCE_FRACTION_TRUE",
																											"REDUCE_PERCENTILE_99",
																											"REDUCE_PERCENTILE_95",
																											"REDUCE_PERCENTILE_50",
																											"REDUCE_PERCENTILE_05",
																											"REDUCE_FRACTION_LESS_THAN",
																											"REDUCE_MAKE_DISTRIBUTION",
																										},
																									},
																									"groupByFields": &dcl.Property{
																										Type:        "array",
																										GoName:      "GroupByFields",
																										Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																										SendEmpty:   true,
																										ListType:    "list",
																										Items: &dcl.Property{
																											Type:   "string",
																											GoType: "string",
																										},
																									},
																									"perSeriesAligner": &dcl.Property{
																										Type:        "string",
																										GoName:      "PerSeriesAligner",
																										GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum",
																										Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																										Enum: []string{
																											"ALIGN_NONE",
																											"ALIGN_DELTA",
																											"ALIGN_RATE",
																											"ALIGN_INTERPOLATE",
																											"ALIGN_NEXT_OLDER",
																											"ALIGN_MIN",
																											"ALIGN_MAX",
																											"ALIGN_MEAN",
																											"ALIGN_COUNT",
																											"ALIGN_SUM",
																											"ALIGN_STDDEV",
																											"ALIGN_COUNT_TRUE",
																											"ALIGN_COUNT_FALSE",
																											"ALIGN_FRACTION_TRUE",
																											"ALIGN_PERCENTILE_99",
																											"ALIGN_PERCENTILE_95",
																											"ALIGN_PERCENTILE_50",
																											"ALIGN_PERCENTILE_05",
																											"ALIGN_MAKE_DISTRIBUTION",
																											"ALIGN_PERCENT_CHANGE",
																										},
																									},
																								},
																							},
																							"filter": &dcl.Property{
																								Type:        "string",
																								GoName:      "Filter",
																								Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																							},
																						},
																					},
																					"pickTimeSeriesFilter": &dcl.Property{
																						Type:        "object",
																						GoName:      "PickTimeSeriesFilter",
																						GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter",
																						Description: "Ranking based time series filter.",
																						Properties: map[string]*dcl.Property{
																							"direction": &dcl.Property{
																								Type:        "string",
																								GoName:      "Direction",
																								GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum",
																								Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																								Enum: []string{
																									"DIRECTION_UNSPECIFIED",
																									"TOP",
																									"BOTTOM",
																								},
																							},
																							"numTimeSeries": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "NumTimeSeries",
																								Description: "How many time series to allow to pass through the filter.",
																							},
																							"rankingMethod": &dcl.Property{
																								Type:        "string",
																								GoName:      "RankingMethod",
																								GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum",
																								Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																								Enum: []string{
																									"METHOD_UNSPECIFIED",
																									"METHOD_MEAN",
																									"METHOD_MAX",
																									"METHOD_MIN",
																									"METHOD_SUM",
																									"METHOD_LATEST",
																								},
																							},
																						},
																					},
																					"secondaryAggregation": &dcl.Property{
																						Type:        "object",
																						GoName:      "SecondaryAggregation",
																						GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation",
																						Description: "Apply a second aggregation after the ratio is computed.",
																						Properties: map[string]*dcl.Property{
																							"alignmentPeriod": &dcl.Property{
																								Type:        "string",
																								GoName:      "AlignmentPeriod",
																								Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																							},
																							"crossSeriesReducer": &dcl.Property{
																								Type:        "string",
																								GoName:      "CrossSeriesReducer",
																								GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum",
																								Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																								Enum: []string{
																									"REDUCE_NONE",
																									"REDUCE_MEAN",
																									"REDUCE_MIN",
																									"REDUCE_MAX",
																									"REDUCE_SUM",
																									"REDUCE_STDDEV",
																									"REDUCE_COUNT",
																									"REDUCE_COUNT_TRUE",
																									"REDUCE_COUNT_FALSE",
																									"REDUCE_FRACTION_TRUE",
																									"REDUCE_PERCENTILE_99",
																									"REDUCE_PERCENTILE_95",
																									"REDUCE_PERCENTILE_50",
																									"REDUCE_PERCENTILE_05",
																									"REDUCE_FRACTION_LESS_THAN",
																									"REDUCE_MAKE_DISTRIBUTION",
																								},
																							},
																							"groupByFields": &dcl.Property{
																								Type:        "array",
																								GoName:      "GroupByFields",
																								Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																								SendEmpty:   true,
																								ListType:    "list",
																								Items: &dcl.Property{
																									Type:   "string",
																									GoType: "string",
																								},
																							},
																							"perSeriesAligner": &dcl.Property{
																								Type:        "string",
																								GoName:      "PerSeriesAligner",
																								GoType:      "DashboardColumnLayoutColumnsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum",
																								Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																								Enum: []string{
																									"ALIGN_NONE",
																									"ALIGN_DELTA",
																									"ALIGN_RATE",
																									"ALIGN_INTERPOLATE",
																									"ALIGN_NEXT_OLDER",
																									"ALIGN_MIN",
																									"ALIGN_MAX",
																									"ALIGN_MEAN",
																									"ALIGN_COUNT",
																									"ALIGN_SUM",
																									"ALIGN_STDDEV",
																									"ALIGN_COUNT_TRUE",
																									"ALIGN_COUNT_FALSE",
																									"ALIGN_FRACTION_TRUE",
																									"ALIGN_PERCENTILE_99",
																									"ALIGN_PERCENTILE_95",
																									"ALIGN_PERCENTILE_50",
																									"ALIGN_PERCENTILE_05",
																									"ALIGN_MAKE_DISTRIBUTION",
																									"ALIGN_PERCENT_CHANGE",
																								},
																							},
																						},
																					},
																				},
																			},
																			"timeSeriesQueryLanguage": &dcl.Property{
																				Type:        "string",
																				GoName:      "TimeSeriesQueryLanguage",
																				Description: "A query used to fetch time series.",
																			},
																			"unitOverride": &dcl.Property{
																				Type:        "string",
																				GoName:      "UnitOverride",
																				Description: "The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.",
																			},
																		},
																	},
																},
															},
															"text": &dcl.Property{
																Type:        "object",
																GoName:      "Text",
																GoType:      "DashboardColumnLayoutColumnsWidgetsText",
																Description: "A raw string or markdown displaying textual content.",
																Conflicts: []string{
																	"xyChart",
																	"scorecard",
																	"blank",
																	"logsPanel",
																},
																Properties: map[string]*dcl.Property{
																	"content": &dcl.Property{
																		Type:        "string",
																		GoName:      "Content",
																		Description: "The text content to be displayed.",
																	},
																	"format": &dcl.Property{
																		Type:        "string",
																		GoName:      "Format",
																		GoType:      "DashboardColumnLayoutColumnsWidgetsTextFormatEnum",
																		Description: "How the text content is formatted. Possible values: FORMAT_UNSPECIFIED, MARKDOWN, RAW",
																		Enum: []string{
																			"FORMAT_UNSPECIFIED",
																			"MARKDOWN",
																			"RAW",
																		},
																	},
																},
															},
															"title": &dcl.Property{
																Type:        "string",
																GoName:      "Title",
																Description: "Optional. The title of the widget.",
															},
															"xyChart": &dcl.Property{
																Type:        "object",
																GoName:      "XyChart",
																GoType:      "DashboardColumnLayoutColumnsWidgetsXyChart",
																Description: "A chart of time series data.",
																Conflicts: []string{
																	"scorecard",
																	"text",
																	"blank",
																	"logsPanel",
																},
																Required: []string{
																	"dataSets",
																},
																Properties: map[string]*dcl.Property{
																	"chartOptions": &dcl.Property{
																		Type:        "object",
																		GoName:      "ChartOptions",
																		GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartChartOptions",
																		Description: "Display options for the chart.",
																		Properties: map[string]*dcl.Property{
																			"mode": &dcl.Property{
																				Type:        "string",
																				GoName:      "Mode",
																				GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartChartOptionsModeEnum",
																				Description: "The chart mode. Possible values: MODE_UNSPECIFIED, COLOR, X_RAY, STATS",
																				Enum: []string{
																					"MODE_UNSPECIFIED",
																					"COLOR",
																					"X_RAY",
																					"STATS",
																				},
																			},
																		},
																	},
																	"dataSets": &dcl.Property{
																		Type:        "array",
																		GoName:      "DataSets",
																		Description: "Required. The data displayed in this chart.",
																		SendEmpty:   true,
																		ListType:    "list",
																		Items: &dcl.Property{
																			Type:   "object",
																			GoType: "DashboardColumnLayoutColumnsWidgetsXyChartDataSets",
																			Required: []string{
																				"timeSeriesQuery",
																			},
																			Properties: map[string]*dcl.Property{
																				"legendTemplate": &dcl.Property{
																					Type:        "string",
																					GoName:      "LegendTemplate",
																					Description: "A template string for naming `TimeSeries` in the resulting data set. This should be a string with interpolations of the form `${label_name}`, which will resolve to the label's value. ",
																				},
																				"minAlignmentPeriod": &dcl.Property{
																					Type:        "string",
																					GoName:      "MinAlignmentPeriod",
																					Description: "Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the `min_alignment_period` should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.",
																				},
																				"plotType": &dcl.Property{
																					Type:        "string",
																					GoName:      "PlotType",
																					GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsPlotTypeEnum",
																					Description: "How this data should be plotted on the chart. Possible values: PLOT_TYPE_UNSPECIFIED, LINE, STACKED_AREA, STACKED_BAR, HEATMAP",
																					Enum: []string{
																						"PLOT_TYPE_UNSPECIFIED",
																						"LINE",
																						"STACKED_AREA",
																						"STACKED_BAR",
																						"HEATMAP",
																					},
																				},
																				"timeSeriesQuery": &dcl.Property{
																					Type:        "object",
																					GoName:      "TimeSeriesQuery",
																					GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQuery",
																					Description: "Required. Fields for querying time series data from the Stackdriver metrics API.",
																					Properties: map[string]*dcl.Property{
																						"timeSeriesFilter": &dcl.Property{
																							Type:        "object",
																							GoName:      "TimeSeriesFilter",
																							GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilter",
																							Description: "Filter parameters to fetch time series.",
																							Required: []string{
																								"filter",
																							},
																							Properties: map[string]*dcl.Property{
																								"aggregation": &dcl.Property{
																									Type:        "object",
																									GoName:      "Aggregation",
																									GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation",
																									Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																									Properties: map[string]*dcl.Property{
																										"alignmentPeriod": &dcl.Property{
																											Type:        "string",
																											GoName:      "AlignmentPeriod",
																											Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																										},
																										"crossSeriesReducer": &dcl.Property{
																											Type:        "string",
																											GoName:      "CrossSeriesReducer",
																											GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum",
																											Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																											Enum: []string{
																												"REDUCE_NONE",
																												"REDUCE_MEAN",
																												"REDUCE_MIN",
																												"REDUCE_MAX",
																												"REDUCE_SUM",
																												"REDUCE_STDDEV",
																												"REDUCE_COUNT",
																												"REDUCE_COUNT_TRUE",
																												"REDUCE_COUNT_FALSE",
																												"REDUCE_FRACTION_TRUE",
																												"REDUCE_PERCENTILE_99",
																												"REDUCE_PERCENTILE_95",
																												"REDUCE_PERCENTILE_50",
																												"REDUCE_PERCENTILE_05",
																												"REDUCE_FRACTION_LESS_THAN",
																												"REDUCE_MAKE_DISTRIBUTION",
																											},
																										},
																										"groupByFields": &dcl.Property{
																											Type:        "array",
																											GoName:      "GroupByFields",
																											Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																											SendEmpty:   true,
																											ListType:    "list",
																											Items: &dcl.Property{
																												Type:   "string",
																												GoType: "string",
																											},
																										},
																										"perSeriesAligner": &dcl.Property{
																											Type:        "string",
																											GoName:      "PerSeriesAligner",
																											GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum",
																											Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																											Enum: []string{
																												"ALIGN_NONE",
																												"ALIGN_DELTA",
																												"ALIGN_RATE",
																												"ALIGN_INTERPOLATE",
																												"ALIGN_NEXT_OLDER",
																												"ALIGN_MIN",
																												"ALIGN_MAX",
																												"ALIGN_MEAN",
																												"ALIGN_COUNT",
																												"ALIGN_SUM",
																												"ALIGN_STDDEV",
																												"ALIGN_COUNT_TRUE",
																												"ALIGN_COUNT_FALSE",
																												"ALIGN_FRACTION_TRUE",
																												"ALIGN_PERCENTILE_99",
																												"ALIGN_PERCENTILE_95",
																												"ALIGN_PERCENTILE_50",
																												"ALIGN_PERCENTILE_05",
																												"ALIGN_MAKE_DISTRIBUTION",
																												"ALIGN_PERCENT_CHANGE",
																											},
																										},
																									},
																								},
																								"filter": &dcl.Property{
																									Type:        "string",
																									GoName:      "Filter",
																									Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																								},
																								"pickTimeSeriesFilter": &dcl.Property{
																									Type:        "object",
																									GoName:      "PickTimeSeriesFilter",
																									GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter",
																									Description: "Ranking based time series filter.",
																									Properties: map[string]*dcl.Property{
																										"direction": &dcl.Property{
																											Type:        "string",
																											GoName:      "Direction",
																											GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum",
																											Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																											Enum: []string{
																												"DIRECTION_UNSPECIFIED",
																												"TOP",
																												"BOTTOM",
																											},
																										},
																										"numTimeSeries": &dcl.Property{
																											Type:        "integer",
																											Format:      "int64",
																											GoName:      "NumTimeSeries",
																											Description: "How many time series to allow to pass through the filter.",
																										},
																										"rankingMethod": &dcl.Property{
																											Type:        "string",
																											GoName:      "RankingMethod",
																											GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum",
																											Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																											Enum: []string{
																												"METHOD_UNSPECIFIED",
																												"METHOD_MEAN",
																												"METHOD_MAX",
																												"METHOD_MIN",
																												"METHOD_SUM",
																												"METHOD_LATEST",
																											},
																										},
																									},
																								},
																								"secondaryAggregation": &dcl.Property{
																									Type:        "object",
																									GoName:      "SecondaryAggregation",
																									GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation",
																									Description: "Apply a second aggregation after `aggregation` is applied.",
																									Properties: map[string]*dcl.Property{
																										"alignmentPeriod": &dcl.Property{
																											Type:        "string",
																											GoName:      "AlignmentPeriod",
																											Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																										},
																										"crossSeriesReducer": &dcl.Property{
																											Type:        "string",
																											GoName:      "CrossSeriesReducer",
																											GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum",
																											Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																											Enum: []string{
																												"REDUCE_NONE",
																												"REDUCE_MEAN",
																												"REDUCE_MIN",
																												"REDUCE_MAX",
																												"REDUCE_SUM",
																												"REDUCE_STDDEV",
																												"REDUCE_COUNT",
																												"REDUCE_COUNT_TRUE",
																												"REDUCE_COUNT_FALSE",
																												"REDUCE_FRACTION_TRUE",
																												"REDUCE_PERCENTILE_99",
																												"REDUCE_PERCENTILE_95",
																												"REDUCE_PERCENTILE_50",
																												"REDUCE_PERCENTILE_05",
																												"REDUCE_FRACTION_LESS_THAN",
																												"REDUCE_MAKE_DISTRIBUTION",
																											},
																										},
																										"groupByFields": &dcl.Property{
																											Type:        "array",
																											GoName:      "GroupByFields",
																											Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																											SendEmpty:   true,
																											ListType:    "list",
																											Items: &dcl.Property{
																												Type:   "string",
																												GoType: "string",
																											},
																										},
																										"perSeriesAligner": &dcl.Property{
																											Type:        "string",
																											GoName:      "PerSeriesAligner",
																											GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum",
																											Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																											Enum: []string{
																												"ALIGN_NONE",
																												"ALIGN_DELTA",
																												"ALIGN_RATE",
																												"ALIGN_INTERPOLATE",
																												"ALIGN_NEXT_OLDER",
																												"ALIGN_MIN",
																												"ALIGN_MAX",
																												"ALIGN_MEAN",
																												"ALIGN_COUNT",
																												"ALIGN_SUM",
																												"ALIGN_STDDEV",
																												"ALIGN_COUNT_TRUE",
																												"ALIGN_COUNT_FALSE",
																												"ALIGN_FRACTION_TRUE",
																												"ALIGN_PERCENTILE_99",
																												"ALIGN_PERCENTILE_95",
																												"ALIGN_PERCENTILE_50",
																												"ALIGN_PERCENTILE_05",
																												"ALIGN_MAKE_DISTRIBUTION",
																												"ALIGN_PERCENT_CHANGE",
																											},
																										},
																									},
																								},
																							},
																						},
																						"timeSeriesFilterRatio": &dcl.Property{
																							Type:        "object",
																							GoName:      "TimeSeriesFilterRatio",
																							GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio",
																							Description: "Parameters to fetch a ratio between two time series filters.",
																							Properties: map[string]*dcl.Property{
																								"denominator": &dcl.Property{
																									Type:        "object",
																									GoName:      "Denominator",
																									GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator",
																									Description: "The denominator of the ratio.",
																									Required: []string{
																										"filter",
																									},
																									Properties: map[string]*dcl.Property{
																										"aggregation": &dcl.Property{
																											Type:        "object",
																											GoName:      "Aggregation",
																											GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation",
																											Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																											Properties: map[string]*dcl.Property{
																												"alignmentPeriod": &dcl.Property{
																													Type:        "string",
																													GoName:      "AlignmentPeriod",
																													Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																												},
																												"crossSeriesReducer": &dcl.Property{
																													Type:        "string",
																													GoName:      "CrossSeriesReducer",
																													GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum",
																													Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																													Enum: []string{
																														"REDUCE_NONE",
																														"REDUCE_MEAN",
																														"REDUCE_MIN",
																														"REDUCE_MAX",
																														"REDUCE_SUM",
																														"REDUCE_STDDEV",
																														"REDUCE_COUNT",
																														"REDUCE_COUNT_TRUE",
																														"REDUCE_COUNT_FALSE",
																														"REDUCE_FRACTION_TRUE",
																														"REDUCE_PERCENTILE_99",
																														"REDUCE_PERCENTILE_95",
																														"REDUCE_PERCENTILE_50",
																														"REDUCE_PERCENTILE_05",
																														"REDUCE_FRACTION_LESS_THAN",
																														"REDUCE_MAKE_DISTRIBUTION",
																													},
																												},
																												"groupByFields": &dcl.Property{
																													Type:        "array",
																													GoName:      "GroupByFields",
																													Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																													SendEmpty:   true,
																													ListType:    "list",
																													Items: &dcl.Property{
																														Type:   "string",
																														GoType: "string",
																													},
																												},
																												"perSeriesAligner": &dcl.Property{
																													Type:        "string",
																													GoName:      "PerSeriesAligner",
																													GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum",
																													Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																													Enum: []string{
																														"ALIGN_NONE",
																														"ALIGN_DELTA",
																														"ALIGN_RATE",
																														"ALIGN_INTERPOLATE",
																														"ALIGN_NEXT_OLDER",
																														"ALIGN_MIN",
																														"ALIGN_MAX",
																														"ALIGN_MEAN",
																														"ALIGN_COUNT",
																														"ALIGN_SUM",
																														"ALIGN_STDDEV",
																														"ALIGN_COUNT_TRUE",
																														"ALIGN_COUNT_FALSE",
																														"ALIGN_FRACTION_TRUE",
																														"ALIGN_PERCENTILE_99",
																														"ALIGN_PERCENTILE_95",
																														"ALIGN_PERCENTILE_50",
																														"ALIGN_PERCENTILE_05",
																														"ALIGN_MAKE_DISTRIBUTION",
																														"ALIGN_PERCENT_CHANGE",
																													},
																												},
																											},
																										},
																										"filter": &dcl.Property{
																											Type:        "string",
																											GoName:      "Filter",
																											Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																										},
																									},
																								},
																								"numerator": &dcl.Property{
																									Type:        "object",
																									GoName:      "Numerator",
																									GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator",
																									Description: "The numerator of the ratio.",
																									Required: []string{
																										"filter",
																									},
																									Properties: map[string]*dcl.Property{
																										"aggregation": &dcl.Property{
																											Type:        "object",
																											GoName:      "Aggregation",
																											GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation",
																											Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																											Properties: map[string]*dcl.Property{
																												"alignmentPeriod": &dcl.Property{
																													Type:        "string",
																													GoName:      "AlignmentPeriod",
																													Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																												},
																												"crossSeriesReducer": &dcl.Property{
																													Type:        "string",
																													GoName:      "CrossSeriesReducer",
																													GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum",
																													Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																													Enum: []string{
																														"REDUCE_NONE",
																														"REDUCE_MEAN",
																														"REDUCE_MIN",
																														"REDUCE_MAX",
																														"REDUCE_SUM",
																														"REDUCE_STDDEV",
																														"REDUCE_COUNT",
																														"REDUCE_COUNT_TRUE",
																														"REDUCE_COUNT_FALSE",
																														"REDUCE_FRACTION_TRUE",
																														"REDUCE_PERCENTILE_99",
																														"REDUCE_PERCENTILE_95",
																														"REDUCE_PERCENTILE_50",
																														"REDUCE_PERCENTILE_05",
																														"REDUCE_FRACTION_LESS_THAN",
																														"REDUCE_MAKE_DISTRIBUTION",
																													},
																												},
																												"groupByFields": &dcl.Property{
																													Type:        "array",
																													GoName:      "GroupByFields",
																													Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																													SendEmpty:   true,
																													ListType:    "list",
																													Items: &dcl.Property{
																														Type:   "string",
																														GoType: "string",
																													},
																												},
																												"perSeriesAligner": &dcl.Property{
																													Type:        "string",
																													GoName:      "PerSeriesAligner",
																													GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum",
																													Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																													Enum: []string{
																														"ALIGN_NONE",
																														"ALIGN_DELTA",
																														"ALIGN_RATE",
																														"ALIGN_INTERPOLATE",
																														"ALIGN_NEXT_OLDER",
																														"ALIGN_MIN",
																														"ALIGN_MAX",
																														"ALIGN_MEAN",
																														"ALIGN_COUNT",
																														"ALIGN_SUM",
																														"ALIGN_STDDEV",
																														"ALIGN_COUNT_TRUE",
																														"ALIGN_COUNT_FALSE",
																														"ALIGN_FRACTION_TRUE",
																														"ALIGN_PERCENTILE_99",
																														"ALIGN_PERCENTILE_95",
																														"ALIGN_PERCENTILE_50",
																														"ALIGN_PERCENTILE_05",
																														"ALIGN_MAKE_DISTRIBUTION",
																														"ALIGN_PERCENT_CHANGE",
																													},
																												},
																											},
																										},
																										"filter": &dcl.Property{
																											Type:        "string",
																											GoName:      "Filter",
																											Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																										},
																									},
																								},
																								"pickTimeSeriesFilter": &dcl.Property{
																									Type:        "object",
																									GoName:      "PickTimeSeriesFilter",
																									GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter",
																									Description: "Ranking based time series filter.",
																									Properties: map[string]*dcl.Property{
																										"direction": &dcl.Property{
																											Type:        "string",
																											GoName:      "Direction",
																											GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum",
																											Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																											Enum: []string{
																												"DIRECTION_UNSPECIFIED",
																												"TOP",
																												"BOTTOM",
																											},
																										},
																										"numTimeSeries": &dcl.Property{
																											Type:        "integer",
																											Format:      "int64",
																											GoName:      "NumTimeSeries",
																											Description: "How many time series to allow to pass through the filter.",
																										},
																										"rankingMethod": &dcl.Property{
																											Type:        "string",
																											GoName:      "RankingMethod",
																											GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum",
																											Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																											Enum: []string{
																												"METHOD_UNSPECIFIED",
																												"METHOD_MEAN",
																												"METHOD_MAX",
																												"METHOD_MIN",
																												"METHOD_SUM",
																												"METHOD_LATEST",
																											},
																										},
																									},
																								},
																								"secondaryAggregation": &dcl.Property{
																									Type:        "object",
																									GoName:      "SecondaryAggregation",
																									GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation",
																									Description: "Apply a second aggregation after the ratio is computed.",
																									Properties: map[string]*dcl.Property{
																										"alignmentPeriod": &dcl.Property{
																											Type:        "string",
																											GoName:      "AlignmentPeriod",
																											Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																										},
																										"crossSeriesReducer": &dcl.Property{
																											Type:        "string",
																											GoName:      "CrossSeriesReducer",
																											GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum",
																											Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																											Enum: []string{
																												"REDUCE_NONE",
																												"REDUCE_MEAN",
																												"REDUCE_MIN",
																												"REDUCE_MAX",
																												"REDUCE_SUM",
																												"REDUCE_STDDEV",
																												"REDUCE_COUNT",
																												"REDUCE_COUNT_TRUE",
																												"REDUCE_COUNT_FALSE",
																												"REDUCE_FRACTION_TRUE",
																												"REDUCE_PERCENTILE_99",
																												"REDUCE_PERCENTILE_95",
																												"REDUCE_PERCENTILE_50",
																												"REDUCE_PERCENTILE_05",
																												"REDUCE_FRACTION_LESS_THAN",
																												"REDUCE_MAKE_DISTRIBUTION",
																											},
																										},
																										"groupByFields": &dcl.Property{
																											Type:        "array",
																											GoName:      "GroupByFields",
																											Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																											SendEmpty:   true,
																											ListType:    "list",
																											Items: &dcl.Property{
																												Type:   "string",
																												GoType: "string",
																											},
																										},
																										"perSeriesAligner": &dcl.Property{
																											Type:        "string",
																											GoName:      "PerSeriesAligner",
																											GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum",
																											Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																											Enum: []string{
																												"ALIGN_NONE",
																												"ALIGN_DELTA",
																												"ALIGN_RATE",
																												"ALIGN_INTERPOLATE",
																												"ALIGN_NEXT_OLDER",
																												"ALIGN_MIN",
																												"ALIGN_MAX",
																												"ALIGN_MEAN",
																												"ALIGN_COUNT",
																												"ALIGN_SUM",
																												"ALIGN_STDDEV",
																												"ALIGN_COUNT_TRUE",
																												"ALIGN_COUNT_FALSE",
																												"ALIGN_FRACTION_TRUE",
																												"ALIGN_PERCENTILE_99",
																												"ALIGN_PERCENTILE_95",
																												"ALIGN_PERCENTILE_50",
																												"ALIGN_PERCENTILE_05",
																												"ALIGN_MAKE_DISTRIBUTION",
																												"ALIGN_PERCENT_CHANGE",
																											},
																										},
																									},
																								},
																							},
																						},
																						"timeSeriesQueryLanguage": &dcl.Property{
																							Type:        "string",
																							GoName:      "TimeSeriesQueryLanguage",
																							Description: "A query used to fetch time series.",
																						},
																						"unitOverride": &dcl.Property{
																							Type:        "string",
																							GoName:      "UnitOverride",
																							Description: "The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.",
																						},
																					},
																				},
																			},
																		},
																	},
																	"thresholds": &dcl.Property{
																		Type:        "array",
																		GoName:      "Thresholds",
																		Description: "Threshold lines drawn horizontally across the chart.",
																		SendEmpty:   true,
																		ListType:    "list",
																		Items: &dcl.Property{
																			Type:   "object",
																			GoType: "DashboardColumnLayoutColumnsWidgetsXyChartThresholds",
																			Properties: map[string]*dcl.Property{
																				"color": &dcl.Property{
																					Type:        "string",
																					GoName:      "Color",
																					GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartThresholdsColorEnum",
																					Description: "The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED",
																					Enum: []string{
																						"COLOR_UNSPECIFIED",
																						"GREY",
																						"BLUE",
																						"GREEN",
																						"YELLOW",
																						"ORANGE",
																						"RED",
																					},
																				},
																				"direction": &dcl.Property{
																					Type:        "string",
																					GoName:      "Direction",
																					GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartThresholdsDirectionEnum",
																					Description: "The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW",
																					Enum: []string{
																						"DIRECTION_UNSPECIFIED",
																						"ABOVE",
																						"BELOW",
																					},
																				},
																				"label": &dcl.Property{
																					Type:        "string",
																					GoName:      "Label",
																					Description: "A label for the threshold.",
																				},
																				"value": &dcl.Property{
																					Type:        "number",
																					Format:      "double",
																					GoName:      "Value",
																					Description: "The value of the threshold. The value should be defined in the native scale of the metric.",
																				},
																			},
																		},
																	},
																	"timeshiftDuration": &dcl.Property{
																		Type:        "string",
																		GoName:      "TimeshiftDuration",
																		Description: "The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.",
																	},
																	"xAxis": &dcl.Property{
																		Type:        "object",
																		GoName:      "XAxis",
																		GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartXAxis",
																		Description: "The properties applied to the X axis.",
																		Properties: map[string]*dcl.Property{
																			"label": &dcl.Property{
																				Type:        "string",
																				GoName:      "Label",
																				Description: "The label of the axis.",
																			},
																			"scale": &dcl.Property{
																				Type:        "string",
																				GoName:      "Scale",
																				GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartXAxisScaleEnum",
																				Description: "The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10",
																				Enum: []string{
																					"SCALE_UNSPECIFIED",
																					"LINEAR",
																					"LOG10",
																				},
																			},
																		},
																	},
																	"yAxis": &dcl.Property{
																		Type:        "object",
																		GoName:      "YAxis",
																		GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartYAxis",
																		Description: "The properties applied to the Y axis.",
																		Properties: map[string]*dcl.Property{
																			"label": &dcl.Property{
																				Type:        "string",
																				GoName:      "Label",
																				Description: "The label of the axis.",
																			},
																			"scale": &dcl.Property{
																				Type:        "string",
																				GoName:      "Scale",
																				GoType:      "DashboardColumnLayoutColumnsWidgetsXyChartYAxisScaleEnum",
																				Description: "The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10",
																				Enum: []string{
																					"SCALE_UNSPECIFIED",
																					"LINEAR",
																					"LOG10",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							"displayName": &dcl.Property{
								Type:        "string",
								GoName:      "DisplayName",
								Description: "Required. The mutable, human-readable name.",
							},
							"etag": &dcl.Property{
								Type:        "string",
								GoName:      "Etag",
								ReadOnly:    true,
								Description: "\\`etag\\` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An \\`etag\\` is returned in the response to \\`GetDashboard\\`, and users are expected to put that etag in the request to \\`UpdateDashboard\\` to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.",
								Immutable:   true,
							},
							"gridLayout": &dcl.Property{
								Type:        "object",
								GoName:      "GridLayout",
								GoType:      "DashboardGridLayout",
								Description: "Content is arranged with a basic layout that re-flows a simple list of informational elements like widgets or tiles.",
								Conflicts: []string{
									"mosaicLayout",
									"rowLayout",
									"columnLayout",
								},
								Properties: map[string]*dcl.Property{
									"columns": &dcl.Property{
										Type:        "integer",
										Format:      "int64",
										GoName:      "Columns",
										Description: "The number of columns into which the view's width is divided. If omitted or set to zero, a system default will be used while rendering.",
									},
									"widgets": &dcl.Property{
										Type:        "array",
										GoName:      "Widgets",
										Description: "The informational elements that are arranged into the columns row-first.",
										SendEmpty:   true,
										ListType:    "list",
										Items: &dcl.Property{
											Type:   "object",
											GoType: "DashboardGridLayoutWidgets",
											Properties: map[string]*dcl.Property{
												"blank": &dcl.Property{
													Type:        "object",
													GoName:      "Blank",
													GoType:      "DashboardGridLayoutWidgetsBlank",
													Description: "A blank space.",
													Conflicts: []string{
														"xyChart",
														"scorecard",
														"text",
														"logsPanel",
													},
													Properties: map[string]*dcl.Property{},
												},
												"logsPanel": &dcl.Property{
													Type:   "object",
													GoName: "LogsPanel",
													GoType: "DashboardGridLayoutWidgetsLogsPanel",
													Conflicts: []string{
														"xyChart",
														"scorecard",
														"text",
														"blank",
													},
													Properties: map[string]*dcl.Property{
														"filter": &dcl.Property{
															Type:        "string",
															GoName:      "Filter",
															Description: "A filter that chooses which log entries to return. See [Advanced Logs Queries](https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.",
														},
														"resourceNames": &dcl.Property{
															Type:        "array",
															GoName:      "ResourceNames",
															Description: "The names of logging resources to collect logs for. Currently only projects are supported. If empty, the widget will default to the host project.",
															SendEmpty:   true,
															ListType:    "list",
															Items: &dcl.Property{
																Type:   "string",
																GoType: "string",
																ResourceReferences: []*dcl.PropertyResourceReference{
																	&dcl.PropertyResourceReference{
																		Resource: "Cloudresourcemanager/Project",
																		Field:    "name",
																	},
																},
															},
														},
													},
												},
												"scorecard": &dcl.Property{
													Type:        "object",
													GoName:      "Scorecard",
													GoType:      "DashboardGridLayoutWidgetsScorecard",
													Description: "A scorecard summarizing time series data.",
													Conflicts: []string{
														"xyChart",
														"text",
														"blank",
														"logsPanel",
													},
													Required: []string{
														"timeSeriesQuery",
													},
													Properties: map[string]*dcl.Property{
														"gaugeView": &dcl.Property{
															Type:        "object",
															GoName:      "GaugeView",
															GoType:      "DashboardGridLayoutWidgetsScorecardGaugeView",
															Description: "Will cause the scorecard to show a gauge chart.",
															Properties: map[string]*dcl.Property{
																"lowerBound": &dcl.Property{
																	Type:        "number",
																	Format:      "double",
																	GoName:      "LowerBound",
																	Description: "The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.",
																},
																"upperBound": &dcl.Property{
																	Type:        "number",
																	Format:      "double",
																	GoName:      "UpperBound",
																	Description: "The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.",
																},
															},
														},
														"sparkChartView": &dcl.Property{
															Type:        "object",
															GoName:      "SparkChartView",
															GoType:      "DashboardGridLayoutWidgetsScorecardSparkChartView",
															Description: "Will cause the scorecard to show a spark chart.",
															Required: []string{
																"sparkChartType",
															},
															Properties: map[string]*dcl.Property{
																"minAlignmentPeriod": &dcl.Property{
																	Type:        "string",
																	GoName:      "MinAlignmentPeriod",
																	Description: "The lower bound on data point frequency in the chart implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes it would not make sense to fetch and align data at one minute intervals. This field is optional and exists only as a hint.",
																},
																"sparkChartType": &dcl.Property{
																	Type:        "string",
																	GoName:      "SparkChartType",
																	GoType:      "DashboardGridLayoutWidgetsScorecardSparkChartViewSparkChartTypeEnum",
																	Description: "Required. The type of sparkchart to show in this chartView. Possible values: SPARK_CHART_TYPE_UNSPECIFIED, SPARK_LINE, SPARK_BAR",
																	Enum: []string{
																		"SPARK_CHART_TYPE_UNSPECIFIED",
																		"SPARK_LINE",
																		"SPARK_BAR",
																	},
																},
															},
														},
														"thresholds": &dcl.Property{
															Type:        "array",
															GoName:      "Thresholds",
															Description: "The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)  As an example, consider a scorecard with the following four thresholds: {   value: 90,   category: 'DANGER',   trigger: 'ABOVE', },: {   value: 70,   category: 'WARNING',   trigger: 'ABOVE', }, {   value: 10,   category: 'DANGER',   trigger: 'BELOW', }, {   value: 20,   category: 'WARNING',   trigger: 'BELOW', }  Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.",
															SendEmpty:   true,
															ListType:    "list",
															Items: &dcl.Property{
																Type:   "object",
																GoType: "DashboardGridLayoutWidgetsScorecardThresholds",
																Properties: map[string]*dcl.Property{
																	"color": &dcl.Property{
																		Type:        "string",
																		GoName:      "Color",
																		GoType:      "DashboardGridLayoutWidgetsScorecardThresholdsColorEnum",
																		Description: "The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED",
																		Enum: []string{
																			"COLOR_UNSPECIFIED",
																			"GREY",
																			"BLUE",
																			"GREEN",
																			"YELLOW",
																			"ORANGE",
																			"RED",
																		},
																	},
																	"direction": &dcl.Property{
																		Type:        "string",
																		GoName:      "Direction",
																		GoType:      "DashboardGridLayoutWidgetsScorecardThresholdsDirectionEnum",
																		Description: "The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW",
																		Enum: []string{
																			"DIRECTION_UNSPECIFIED",
																			"ABOVE",
																			"BELOW",
																		},
																	},
																	"label": &dcl.Property{
																		Type:        "string",
																		GoName:      "Label",
																		Description: "A label for the threshold.",
																	},
																	"value": &dcl.Property{
																		Type:        "number",
																		Format:      "double",
																		GoName:      "Value",
																		Description: "The value of the threshold. The value should be defined in the native scale of the metric.",
																	},
																},
															},
														},
														"timeSeriesQuery": &dcl.Property{
															Type:        "object",
															GoName:      "TimeSeriesQuery",
															GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQuery",
															Description: "Required. Fields for querying time series data from the Stackdriver metrics API.",
															Properties: map[string]*dcl.Property{
																"timeSeriesFilter": &dcl.Property{
																	Type:        "object",
																	GoName:      "TimeSeriesFilter",
																	GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilter",
																	Description: "Filter parameters to fetch time series.",
																	Required: []string{
																		"filter",
																	},
																	Properties: map[string]*dcl.Property{
																		"aggregation": &dcl.Property{
																			Type:        "object",
																			GoName:      "Aggregation",
																			GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterAggregation",
																			Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																			Properties: map[string]*dcl.Property{
																				"alignmentPeriod": &dcl.Property{
																					Type:        "string",
																					GoName:      "AlignmentPeriod",
																					Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																				},
																				"crossSeriesReducer": &dcl.Property{
																					Type:        "string",
																					GoName:      "CrossSeriesReducer",
																					GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum",
																					Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																					Enum: []string{
																						"REDUCE_NONE",
																						"REDUCE_MEAN",
																						"REDUCE_MIN",
																						"REDUCE_MAX",
																						"REDUCE_SUM",
																						"REDUCE_STDDEV",
																						"REDUCE_COUNT",
																						"REDUCE_COUNT_TRUE",
																						"REDUCE_COUNT_FALSE",
																						"REDUCE_FRACTION_TRUE",
																						"REDUCE_PERCENTILE_99",
																						"REDUCE_PERCENTILE_95",
																						"REDUCE_PERCENTILE_50",
																						"REDUCE_PERCENTILE_05",
																						"REDUCE_FRACTION_LESS_THAN",
																						"REDUCE_MAKE_DISTRIBUTION",
																					},
																				},
																				"groupByFields": &dcl.Property{
																					Type:        "array",
																					GoName:      "GroupByFields",
																					Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																					SendEmpty:   true,
																					ListType:    "list",
																					Items: &dcl.Property{
																						Type:   "string",
																						GoType: "string",
																					},
																				},
																				"perSeriesAligner": &dcl.Property{
																					Type:        "string",
																					GoName:      "PerSeriesAligner",
																					GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum",
																					Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																					Enum: []string{
																						"ALIGN_NONE",
																						"ALIGN_DELTA",
																						"ALIGN_RATE",
																						"ALIGN_INTERPOLATE",
																						"ALIGN_NEXT_OLDER",
																						"ALIGN_MIN",
																						"ALIGN_MAX",
																						"ALIGN_MEAN",
																						"ALIGN_COUNT",
																						"ALIGN_SUM",
																						"ALIGN_STDDEV",
																						"ALIGN_COUNT_TRUE",
																						"ALIGN_COUNT_FALSE",
																						"ALIGN_FRACTION_TRUE",
																						"ALIGN_PERCENTILE_99",
																						"ALIGN_PERCENTILE_95",
																						"ALIGN_PERCENTILE_50",
																						"ALIGN_PERCENTILE_05",
																						"ALIGN_MAKE_DISTRIBUTION",
																						"ALIGN_PERCENT_CHANGE",
																					},
																				},
																			},
																		},
																		"filter": &dcl.Property{
																			Type:        "string",
																			GoName:      "Filter",
																			Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																		},
																		"pickTimeSeriesFilter": &dcl.Property{
																			Type:        "object",
																			GoName:      "PickTimeSeriesFilter",
																			GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter",
																			Description: "Ranking based time series filter.",
																			Properties: map[string]*dcl.Property{
																				"direction": &dcl.Property{
																					Type:        "string",
																					GoName:      "Direction",
																					GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum",
																					Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																					Enum: []string{
																						"DIRECTION_UNSPECIFIED",
																						"TOP",
																						"BOTTOM",
																					},
																				},
																				"numTimeSeries": &dcl.Property{
																					Type:        "integer",
																					Format:      "int64",
																					GoName:      "NumTimeSeries",
																					Description: "How many time series to allow to pass through the filter.",
																				},
																				"rankingMethod": &dcl.Property{
																					Type:        "string",
																					GoName:      "RankingMethod",
																					GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum",
																					Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																					Enum: []string{
																						"METHOD_UNSPECIFIED",
																						"METHOD_MEAN",
																						"METHOD_MAX",
																						"METHOD_MIN",
																						"METHOD_SUM",
																						"METHOD_LATEST",
																					},
																				},
																			},
																		},
																		"secondaryAggregation": &dcl.Property{
																			Type:        "object",
																			GoName:      "SecondaryAggregation",
																			GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation",
																			Description: "Apply a second aggregation after `aggregation` is applied.",
																			Properties: map[string]*dcl.Property{
																				"alignmentPeriod": &dcl.Property{
																					Type:        "string",
																					GoName:      "AlignmentPeriod",
																					Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																				},
																				"crossSeriesReducer": &dcl.Property{
																					Type:        "string",
																					GoName:      "CrossSeriesReducer",
																					GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum",
																					Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																					Enum: []string{
																						"REDUCE_NONE",
																						"REDUCE_MEAN",
																						"REDUCE_MIN",
																						"REDUCE_MAX",
																						"REDUCE_SUM",
																						"REDUCE_STDDEV",
																						"REDUCE_COUNT",
																						"REDUCE_COUNT_TRUE",
																						"REDUCE_COUNT_FALSE",
																						"REDUCE_FRACTION_TRUE",
																						"REDUCE_PERCENTILE_99",
																						"REDUCE_PERCENTILE_95",
																						"REDUCE_PERCENTILE_50",
																						"REDUCE_PERCENTILE_05",
																						"REDUCE_FRACTION_LESS_THAN",
																						"REDUCE_MAKE_DISTRIBUTION",
																					},
																				},
																				"groupByFields": &dcl.Property{
																					Type:        "array",
																					GoName:      "GroupByFields",
																					Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																					SendEmpty:   true,
																					ListType:    "list",
																					Items: &dcl.Property{
																						Type:   "string",
																						GoType: "string",
																					},
																				},
																				"perSeriesAligner": &dcl.Property{
																					Type:        "string",
																					GoName:      "PerSeriesAligner",
																					GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum",
																					Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																					Enum: []string{
																						"ALIGN_NONE",
																						"ALIGN_DELTA",
																						"ALIGN_RATE",
																						"ALIGN_INTERPOLATE",
																						"ALIGN_NEXT_OLDER",
																						"ALIGN_MIN",
																						"ALIGN_MAX",
																						"ALIGN_MEAN",
																						"ALIGN_COUNT",
																						"ALIGN_SUM",
																						"ALIGN_STDDEV",
																						"ALIGN_COUNT_TRUE",
																						"ALIGN_COUNT_FALSE",
																						"ALIGN_FRACTION_TRUE",
																						"ALIGN_PERCENTILE_99",
																						"ALIGN_PERCENTILE_95",
																						"ALIGN_PERCENTILE_50",
																						"ALIGN_PERCENTILE_05",
																						"ALIGN_MAKE_DISTRIBUTION",
																						"ALIGN_PERCENT_CHANGE",
																					},
																				},
																			},
																		},
																	},
																},
																"timeSeriesFilterRatio": &dcl.Property{
																	Type:        "object",
																	GoName:      "TimeSeriesFilterRatio",
																	GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatio",
																	Description: "Parameters to fetch a ratio between two time series filters.",
																	Properties: map[string]*dcl.Property{
																		"denominator": &dcl.Property{
																			Type:        "object",
																			GoName:      "Denominator",
																			GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator",
																			Description: "The denominator of the ratio.",
																			Required: []string{
																				"filter",
																			},
																			Properties: map[string]*dcl.Property{
																				"aggregation": &dcl.Property{
																					Type:        "object",
																					GoName:      "Aggregation",
																					GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation",
																					Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																					Properties: map[string]*dcl.Property{
																						"alignmentPeriod": &dcl.Property{
																							Type:        "string",
																							GoName:      "AlignmentPeriod",
																							Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																						},
																						"crossSeriesReducer": &dcl.Property{
																							Type:        "string",
																							GoName:      "CrossSeriesReducer",
																							GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum",
																							Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																							Enum: []string{
																								"REDUCE_NONE",
																								"REDUCE_MEAN",
																								"REDUCE_MIN",
																								"REDUCE_MAX",
																								"REDUCE_SUM",
																								"REDUCE_STDDEV",
																								"REDUCE_COUNT",
																								"REDUCE_COUNT_TRUE",
																								"REDUCE_COUNT_FALSE",
																								"REDUCE_FRACTION_TRUE",
																								"REDUCE_PERCENTILE_99",
																								"REDUCE_PERCENTILE_95",
																								"REDUCE_PERCENTILE_50",
																								"REDUCE_PERCENTILE_05",
																								"REDUCE_FRACTION_LESS_THAN",
																								"REDUCE_MAKE_DISTRIBUTION",
																							},
																						},
																						"groupByFields": &dcl.Property{
																							Type:        "array",
																							GoName:      "GroupByFields",
																							Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																							SendEmpty:   true,
																							ListType:    "list",
																							Items: &dcl.Property{
																								Type:   "string",
																								GoType: "string",
																							},
																						},
																						"perSeriesAligner": &dcl.Property{
																							Type:        "string",
																							GoName:      "PerSeriesAligner",
																							GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum",
																							Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																							Enum: []string{
																								"ALIGN_NONE",
																								"ALIGN_DELTA",
																								"ALIGN_RATE",
																								"ALIGN_INTERPOLATE",
																								"ALIGN_NEXT_OLDER",
																								"ALIGN_MIN",
																								"ALIGN_MAX",
																								"ALIGN_MEAN",
																								"ALIGN_COUNT",
																								"ALIGN_SUM",
																								"ALIGN_STDDEV",
																								"ALIGN_COUNT_TRUE",
																								"ALIGN_COUNT_FALSE",
																								"ALIGN_FRACTION_TRUE",
																								"ALIGN_PERCENTILE_99",
																								"ALIGN_PERCENTILE_95",
																								"ALIGN_PERCENTILE_50",
																								"ALIGN_PERCENTILE_05",
																								"ALIGN_MAKE_DISTRIBUTION",
																								"ALIGN_PERCENT_CHANGE",
																							},
																						},
																					},
																				},
																				"filter": &dcl.Property{
																					Type:        "string",
																					GoName:      "Filter",
																					Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																				},
																			},
																		},
																		"numerator": &dcl.Property{
																			Type:        "object",
																			GoName:      "Numerator",
																			GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator",
																			Description: "The numerator of the ratio.",
																			Required: []string{
																				"filter",
																			},
																			Properties: map[string]*dcl.Property{
																				"aggregation": &dcl.Property{
																					Type:        "object",
																					GoName:      "Aggregation",
																					GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation",
																					Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																					Properties: map[string]*dcl.Property{
																						"alignmentPeriod": &dcl.Property{
																							Type:        "string",
																							GoName:      "AlignmentPeriod",
																							Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																						},
																						"crossSeriesReducer": &dcl.Property{
																							Type:        "string",
																							GoName:      "CrossSeriesReducer",
																							GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum",
																							Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																							Enum: []string{
																								"REDUCE_NONE",
																								"REDUCE_MEAN",
																								"REDUCE_MIN",
																								"REDUCE_MAX",
																								"REDUCE_SUM",
																								"REDUCE_STDDEV",
																								"REDUCE_COUNT",
																								"REDUCE_COUNT_TRUE",
																								"REDUCE_COUNT_FALSE",
																								"REDUCE_FRACTION_TRUE",
																								"REDUCE_PERCENTILE_99",
																								"REDUCE_PERCENTILE_95",
																								"REDUCE_PERCENTILE_50",
																								"REDUCE_PERCENTILE_05",
																								"REDUCE_FRACTION_LESS_THAN",
																								"REDUCE_MAKE_DISTRIBUTION",
																							},
																						},
																						"groupByFields": &dcl.Property{
																							Type:        "array",
																							GoName:      "GroupByFields",
																							Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																							SendEmpty:   true,
																							ListType:    "list",
																							Items: &dcl.Property{
																								Type:   "string",
																								GoType: "string",
																							},
																						},
																						"perSeriesAligner": &dcl.Property{
																							Type:        "string",
																							GoName:      "PerSeriesAligner",
																							GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum",
																							Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																							Enum: []string{
																								"ALIGN_NONE",
																								"ALIGN_DELTA",
																								"ALIGN_RATE",
																								"ALIGN_INTERPOLATE",
																								"ALIGN_NEXT_OLDER",
																								"ALIGN_MIN",
																								"ALIGN_MAX",
																								"ALIGN_MEAN",
																								"ALIGN_COUNT",
																								"ALIGN_SUM",
																								"ALIGN_STDDEV",
																								"ALIGN_COUNT_TRUE",
																								"ALIGN_COUNT_FALSE",
																								"ALIGN_FRACTION_TRUE",
																								"ALIGN_PERCENTILE_99",
																								"ALIGN_PERCENTILE_95",
																								"ALIGN_PERCENTILE_50",
																								"ALIGN_PERCENTILE_05",
																								"ALIGN_MAKE_DISTRIBUTION",
																								"ALIGN_PERCENT_CHANGE",
																							},
																						},
																					},
																				},
																				"filter": &dcl.Property{
																					Type:        "string",
																					GoName:      "Filter",
																					Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																				},
																			},
																		},
																		"pickTimeSeriesFilter": &dcl.Property{
																			Type:        "object",
																			GoName:      "PickTimeSeriesFilter",
																			GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter",
																			Description: "Ranking based time series filter.",
																			Properties: map[string]*dcl.Property{
																				"direction": &dcl.Property{
																					Type:        "string",
																					GoName:      "Direction",
																					GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum",
																					Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																					Enum: []string{
																						"DIRECTION_UNSPECIFIED",
																						"TOP",
																						"BOTTOM",
																					},
																				},
																				"numTimeSeries": &dcl.Property{
																					Type:        "integer",
																					Format:      "int64",
																					GoName:      "NumTimeSeries",
																					Description: "How many time series to allow to pass through the filter.",
																				},
																				"rankingMethod": &dcl.Property{
																					Type:        "string",
																					GoName:      "RankingMethod",
																					GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum",
																					Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																					Enum: []string{
																						"METHOD_UNSPECIFIED",
																						"METHOD_MEAN",
																						"METHOD_MAX",
																						"METHOD_MIN",
																						"METHOD_SUM",
																						"METHOD_LATEST",
																					},
																				},
																			},
																		},
																		"secondaryAggregation": &dcl.Property{
																			Type:        "object",
																			GoName:      "SecondaryAggregation",
																			GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation",
																			Description: "Apply a second aggregation after the ratio is computed.",
																			Properties: map[string]*dcl.Property{
																				"alignmentPeriod": &dcl.Property{
																					Type:        "string",
																					GoName:      "AlignmentPeriod",
																					Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																				},
																				"crossSeriesReducer": &dcl.Property{
																					Type:        "string",
																					GoName:      "CrossSeriesReducer",
																					GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum",
																					Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																					Enum: []string{
																						"REDUCE_NONE",
																						"REDUCE_MEAN",
																						"REDUCE_MIN",
																						"REDUCE_MAX",
																						"REDUCE_SUM",
																						"REDUCE_STDDEV",
																						"REDUCE_COUNT",
																						"REDUCE_COUNT_TRUE",
																						"REDUCE_COUNT_FALSE",
																						"REDUCE_FRACTION_TRUE",
																						"REDUCE_PERCENTILE_99",
																						"REDUCE_PERCENTILE_95",
																						"REDUCE_PERCENTILE_50",
																						"REDUCE_PERCENTILE_05",
																						"REDUCE_FRACTION_LESS_THAN",
																						"REDUCE_MAKE_DISTRIBUTION",
																					},
																				},
																				"groupByFields": &dcl.Property{
																					Type:        "array",
																					GoName:      "GroupByFields",
																					Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																					SendEmpty:   true,
																					ListType:    "list",
																					Items: &dcl.Property{
																						Type:   "string",
																						GoType: "string",
																					},
																				},
																				"perSeriesAligner": &dcl.Property{
																					Type:        "string",
																					GoName:      "PerSeriesAligner",
																					GoType:      "DashboardGridLayoutWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum",
																					Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																					Enum: []string{
																						"ALIGN_NONE",
																						"ALIGN_DELTA",
																						"ALIGN_RATE",
																						"ALIGN_INTERPOLATE",
																						"ALIGN_NEXT_OLDER",
																						"ALIGN_MIN",
																						"ALIGN_MAX",
																						"ALIGN_MEAN",
																						"ALIGN_COUNT",
																						"ALIGN_SUM",
																						"ALIGN_STDDEV",
																						"ALIGN_COUNT_TRUE",
																						"ALIGN_COUNT_FALSE",
																						"ALIGN_FRACTION_TRUE",
																						"ALIGN_PERCENTILE_99",
																						"ALIGN_PERCENTILE_95",
																						"ALIGN_PERCENTILE_50",
																						"ALIGN_PERCENTILE_05",
																						"ALIGN_MAKE_DISTRIBUTION",
																						"ALIGN_PERCENT_CHANGE",
																					},
																				},
																			},
																		},
																	},
																},
																"timeSeriesQueryLanguage": &dcl.Property{
																	Type:        "string",
																	GoName:      "TimeSeriesQueryLanguage",
																	Description: "A query used to fetch time series.",
																},
																"unitOverride": &dcl.Property{
																	Type:        "string",
																	GoName:      "UnitOverride",
																	Description: "The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.",
																},
															},
														},
													},
												},
												"text": &dcl.Property{
													Type:        "object",
													GoName:      "Text",
													GoType:      "DashboardGridLayoutWidgetsText",
													Description: "A raw string or markdown displaying textual content.",
													Conflicts: []string{
														"xyChart",
														"scorecard",
														"blank",
														"logsPanel",
													},
													Properties: map[string]*dcl.Property{
														"content": &dcl.Property{
															Type:        "string",
															GoName:      "Content",
															Description: "The text content to be displayed.",
														},
														"format": &dcl.Property{
															Type:        "string",
															GoName:      "Format",
															GoType:      "DashboardGridLayoutWidgetsTextFormatEnum",
															Description: "How the text content is formatted. Possible values: FORMAT_UNSPECIFIED, MARKDOWN, RAW",
															Enum: []string{
																"FORMAT_UNSPECIFIED",
																"MARKDOWN",
																"RAW",
															},
														},
													},
												},
												"title": &dcl.Property{
													Type:        "string",
													GoName:      "Title",
													Description: "Optional. The title of the widget.",
												},
												"xyChart": &dcl.Property{
													Type:        "object",
													GoName:      "XyChart",
													GoType:      "DashboardGridLayoutWidgetsXyChart",
													Description: "A chart of time series data.",
													Conflicts: []string{
														"scorecard",
														"text",
														"blank",
														"logsPanel",
													},
													Required: []string{
														"dataSets",
													},
													Properties: map[string]*dcl.Property{
														"chartOptions": &dcl.Property{
															Type:        "object",
															GoName:      "ChartOptions",
															GoType:      "DashboardGridLayoutWidgetsXyChartChartOptions",
															Description: "Display options for the chart.",
															Properties: map[string]*dcl.Property{
																"mode": &dcl.Property{
																	Type:        "string",
																	GoName:      "Mode",
																	GoType:      "DashboardGridLayoutWidgetsXyChartChartOptionsModeEnum",
																	Description: "The chart mode. Possible values: MODE_UNSPECIFIED, COLOR, X_RAY, STATS",
																	Enum: []string{
																		"MODE_UNSPECIFIED",
																		"COLOR",
																		"X_RAY",
																		"STATS",
																	},
																},
															},
														},
														"dataSets": &dcl.Property{
															Type:        "array",
															GoName:      "DataSets",
															Description: "Required. The data displayed in this chart.",
															SendEmpty:   true,
															ListType:    "list",
															Items: &dcl.Property{
																Type:   "object",
																GoType: "DashboardGridLayoutWidgetsXyChartDataSets",
																Required: []string{
																	"timeSeriesQuery",
																},
																Properties: map[string]*dcl.Property{
																	"legendTemplate": &dcl.Property{
																		Type:        "string",
																		GoName:      "LegendTemplate",
																		Description: "A template string for naming `TimeSeries` in the resulting data set. This should be a string with interpolations of the form `${label_name}`, which will resolve to the label's value. ",
																	},
																	"minAlignmentPeriod": &dcl.Property{
																		Type:        "string",
																		GoName:      "MinAlignmentPeriod",
																		Description: "Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the `min_alignment_period` should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.",
																	},
																	"plotType": &dcl.Property{
																		Type:        "string",
																		GoName:      "PlotType",
																		GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsPlotTypeEnum",
																		Description: "How this data should be plotted on the chart. Possible values: PLOT_TYPE_UNSPECIFIED, LINE, STACKED_AREA, STACKED_BAR, HEATMAP",
																		Enum: []string{
																			"PLOT_TYPE_UNSPECIFIED",
																			"LINE",
																			"STACKED_AREA",
																			"STACKED_BAR",
																			"HEATMAP",
																		},
																	},
																	"timeSeriesQuery": &dcl.Property{
																		Type:        "object",
																		GoName:      "TimeSeriesQuery",
																		GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQuery",
																		Description: "Required. Fields for querying time series data from the Stackdriver metrics API.",
																		Properties: map[string]*dcl.Property{
																			"timeSeriesFilter": &dcl.Property{
																				Type:        "object",
																				GoName:      "TimeSeriesFilter",
																				GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilter",
																				Description: "Filter parameters to fetch time series.",
																				Required: []string{
																					"filter",
																				},
																				Properties: map[string]*dcl.Property{
																					"aggregation": &dcl.Property{
																						Type:        "object",
																						GoName:      "Aggregation",
																						GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation",
																						Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																						Properties: map[string]*dcl.Property{
																							"alignmentPeriod": &dcl.Property{
																								Type:        "string",
																								GoName:      "AlignmentPeriod",
																								Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																							},
																							"crossSeriesReducer": &dcl.Property{
																								Type:        "string",
																								GoName:      "CrossSeriesReducer",
																								GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum",
																								Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																								Enum: []string{
																									"REDUCE_NONE",
																									"REDUCE_MEAN",
																									"REDUCE_MIN",
																									"REDUCE_MAX",
																									"REDUCE_SUM",
																									"REDUCE_STDDEV",
																									"REDUCE_COUNT",
																									"REDUCE_COUNT_TRUE",
																									"REDUCE_COUNT_FALSE",
																									"REDUCE_FRACTION_TRUE",
																									"REDUCE_PERCENTILE_99",
																									"REDUCE_PERCENTILE_95",
																									"REDUCE_PERCENTILE_50",
																									"REDUCE_PERCENTILE_05",
																									"REDUCE_FRACTION_LESS_THAN",
																									"REDUCE_MAKE_DISTRIBUTION",
																								},
																							},
																							"groupByFields": &dcl.Property{
																								Type:        "array",
																								GoName:      "GroupByFields",
																								Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																								SendEmpty:   true,
																								ListType:    "list",
																								Items: &dcl.Property{
																									Type:   "string",
																									GoType: "string",
																								},
																							},
																							"perSeriesAligner": &dcl.Property{
																								Type:        "string",
																								GoName:      "PerSeriesAligner",
																								GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum",
																								Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																								Enum: []string{
																									"ALIGN_NONE",
																									"ALIGN_DELTA",
																									"ALIGN_RATE",
																									"ALIGN_INTERPOLATE",
																									"ALIGN_NEXT_OLDER",
																									"ALIGN_MIN",
																									"ALIGN_MAX",
																									"ALIGN_MEAN",
																									"ALIGN_COUNT",
																									"ALIGN_SUM",
																									"ALIGN_STDDEV",
																									"ALIGN_COUNT_TRUE",
																									"ALIGN_COUNT_FALSE",
																									"ALIGN_FRACTION_TRUE",
																									"ALIGN_PERCENTILE_99",
																									"ALIGN_PERCENTILE_95",
																									"ALIGN_PERCENTILE_50",
																									"ALIGN_PERCENTILE_05",
																									"ALIGN_MAKE_DISTRIBUTION",
																									"ALIGN_PERCENT_CHANGE",
																								},
																							},
																						},
																					},
																					"filter": &dcl.Property{
																						Type:        "string",
																						GoName:      "Filter",
																						Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																					},
																					"pickTimeSeriesFilter": &dcl.Property{
																						Type:        "object",
																						GoName:      "PickTimeSeriesFilter",
																						GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter",
																						Description: "Ranking based time series filter.",
																						Properties: map[string]*dcl.Property{
																							"direction": &dcl.Property{
																								Type:        "string",
																								GoName:      "Direction",
																								GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum",
																								Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																								Enum: []string{
																									"DIRECTION_UNSPECIFIED",
																									"TOP",
																									"BOTTOM",
																								},
																							},
																							"numTimeSeries": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "NumTimeSeries",
																								Description: "How many time series to allow to pass through the filter.",
																							},
																							"rankingMethod": &dcl.Property{
																								Type:        "string",
																								GoName:      "RankingMethod",
																								GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum",
																								Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																								Enum: []string{
																									"METHOD_UNSPECIFIED",
																									"METHOD_MEAN",
																									"METHOD_MAX",
																									"METHOD_MIN",
																									"METHOD_SUM",
																									"METHOD_LATEST",
																								},
																							},
																						},
																					},
																					"secondaryAggregation": &dcl.Property{
																						Type:        "object",
																						GoName:      "SecondaryAggregation",
																						GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation",
																						Description: "Apply a second aggregation after `aggregation` is applied.",
																						Properties: map[string]*dcl.Property{
																							"alignmentPeriod": &dcl.Property{
																								Type:        "string",
																								GoName:      "AlignmentPeriod",
																								Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																							},
																							"crossSeriesReducer": &dcl.Property{
																								Type:        "string",
																								GoName:      "CrossSeriesReducer",
																								GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum",
																								Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																								Enum: []string{
																									"REDUCE_NONE",
																									"REDUCE_MEAN",
																									"REDUCE_MIN",
																									"REDUCE_MAX",
																									"REDUCE_SUM",
																									"REDUCE_STDDEV",
																									"REDUCE_COUNT",
																									"REDUCE_COUNT_TRUE",
																									"REDUCE_COUNT_FALSE",
																									"REDUCE_FRACTION_TRUE",
																									"REDUCE_PERCENTILE_99",
																									"REDUCE_PERCENTILE_95",
																									"REDUCE_PERCENTILE_50",
																									"REDUCE_PERCENTILE_05",
																									"REDUCE_FRACTION_LESS_THAN",
																									"REDUCE_MAKE_DISTRIBUTION",
																								},
																							},
																							"groupByFields": &dcl.Property{
																								Type:        "array",
																								GoName:      "GroupByFields",
																								Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																								SendEmpty:   true,
																								ListType:    "list",
																								Items: &dcl.Property{
																									Type:   "string",
																									GoType: "string",
																								},
																							},
																							"perSeriesAligner": &dcl.Property{
																								Type:        "string",
																								GoName:      "PerSeriesAligner",
																								GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum",
																								Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																								Enum: []string{
																									"ALIGN_NONE",
																									"ALIGN_DELTA",
																									"ALIGN_RATE",
																									"ALIGN_INTERPOLATE",
																									"ALIGN_NEXT_OLDER",
																									"ALIGN_MIN",
																									"ALIGN_MAX",
																									"ALIGN_MEAN",
																									"ALIGN_COUNT",
																									"ALIGN_SUM",
																									"ALIGN_STDDEV",
																									"ALIGN_COUNT_TRUE",
																									"ALIGN_COUNT_FALSE",
																									"ALIGN_FRACTION_TRUE",
																									"ALIGN_PERCENTILE_99",
																									"ALIGN_PERCENTILE_95",
																									"ALIGN_PERCENTILE_50",
																									"ALIGN_PERCENTILE_05",
																									"ALIGN_MAKE_DISTRIBUTION",
																									"ALIGN_PERCENT_CHANGE",
																								},
																							},
																						},
																					},
																				},
																			},
																			"timeSeriesFilterRatio": &dcl.Property{
																				Type:        "object",
																				GoName:      "TimeSeriesFilterRatio",
																				GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio",
																				Description: "Parameters to fetch a ratio between two time series filters.",
																				Properties: map[string]*dcl.Property{
																					"denominator": &dcl.Property{
																						Type:        "object",
																						GoName:      "Denominator",
																						GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator",
																						Description: "The denominator of the ratio.",
																						Required: []string{
																							"filter",
																						},
																						Properties: map[string]*dcl.Property{
																							"aggregation": &dcl.Property{
																								Type:        "object",
																								GoName:      "Aggregation",
																								GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation",
																								Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																								Properties: map[string]*dcl.Property{
																									"alignmentPeriod": &dcl.Property{
																										Type:        "string",
																										GoName:      "AlignmentPeriod",
																										Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																									},
																									"crossSeriesReducer": &dcl.Property{
																										Type:        "string",
																										GoName:      "CrossSeriesReducer",
																										GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum",
																										Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																										Enum: []string{
																											"REDUCE_NONE",
																											"REDUCE_MEAN",
																											"REDUCE_MIN",
																											"REDUCE_MAX",
																											"REDUCE_SUM",
																											"REDUCE_STDDEV",
																											"REDUCE_COUNT",
																											"REDUCE_COUNT_TRUE",
																											"REDUCE_COUNT_FALSE",
																											"REDUCE_FRACTION_TRUE",
																											"REDUCE_PERCENTILE_99",
																											"REDUCE_PERCENTILE_95",
																											"REDUCE_PERCENTILE_50",
																											"REDUCE_PERCENTILE_05",
																											"REDUCE_FRACTION_LESS_THAN",
																											"REDUCE_MAKE_DISTRIBUTION",
																										},
																									},
																									"groupByFields": &dcl.Property{
																										Type:        "array",
																										GoName:      "GroupByFields",
																										Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																										SendEmpty:   true,
																										ListType:    "list",
																										Items: &dcl.Property{
																											Type:   "string",
																											GoType: "string",
																										},
																									},
																									"perSeriesAligner": &dcl.Property{
																										Type:        "string",
																										GoName:      "PerSeriesAligner",
																										GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum",
																										Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																										Enum: []string{
																											"ALIGN_NONE",
																											"ALIGN_DELTA",
																											"ALIGN_RATE",
																											"ALIGN_INTERPOLATE",
																											"ALIGN_NEXT_OLDER",
																											"ALIGN_MIN",
																											"ALIGN_MAX",
																											"ALIGN_MEAN",
																											"ALIGN_COUNT",
																											"ALIGN_SUM",
																											"ALIGN_STDDEV",
																											"ALIGN_COUNT_TRUE",
																											"ALIGN_COUNT_FALSE",
																											"ALIGN_FRACTION_TRUE",
																											"ALIGN_PERCENTILE_99",
																											"ALIGN_PERCENTILE_95",
																											"ALIGN_PERCENTILE_50",
																											"ALIGN_PERCENTILE_05",
																											"ALIGN_MAKE_DISTRIBUTION",
																											"ALIGN_PERCENT_CHANGE",
																										},
																									},
																								},
																							},
																							"filter": &dcl.Property{
																								Type:        "string",
																								GoName:      "Filter",
																								Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																							},
																						},
																					},
																					"numerator": &dcl.Property{
																						Type:        "object",
																						GoName:      "Numerator",
																						GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator",
																						Description: "The numerator of the ratio.",
																						Required: []string{
																							"filter",
																						},
																						Properties: map[string]*dcl.Property{
																							"aggregation": &dcl.Property{
																								Type:        "object",
																								GoName:      "Aggregation",
																								GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation",
																								Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																								Properties: map[string]*dcl.Property{
																									"alignmentPeriod": &dcl.Property{
																										Type:        "string",
																										GoName:      "AlignmentPeriod",
																										Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																									},
																									"crossSeriesReducer": &dcl.Property{
																										Type:        "string",
																										GoName:      "CrossSeriesReducer",
																										GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum",
																										Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																										Enum: []string{
																											"REDUCE_NONE",
																											"REDUCE_MEAN",
																											"REDUCE_MIN",
																											"REDUCE_MAX",
																											"REDUCE_SUM",
																											"REDUCE_STDDEV",
																											"REDUCE_COUNT",
																											"REDUCE_COUNT_TRUE",
																											"REDUCE_COUNT_FALSE",
																											"REDUCE_FRACTION_TRUE",
																											"REDUCE_PERCENTILE_99",
																											"REDUCE_PERCENTILE_95",
																											"REDUCE_PERCENTILE_50",
																											"REDUCE_PERCENTILE_05",
																											"REDUCE_FRACTION_LESS_THAN",
																											"REDUCE_MAKE_DISTRIBUTION",
																										},
																									},
																									"groupByFields": &dcl.Property{
																										Type:        "array",
																										GoName:      "GroupByFields",
																										Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																										SendEmpty:   true,
																										ListType:    "list",
																										Items: &dcl.Property{
																											Type:   "string",
																											GoType: "string",
																										},
																									},
																									"perSeriesAligner": &dcl.Property{
																										Type:        "string",
																										GoName:      "PerSeriesAligner",
																										GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum",
																										Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																										Enum: []string{
																											"ALIGN_NONE",
																											"ALIGN_DELTA",
																											"ALIGN_RATE",
																											"ALIGN_INTERPOLATE",
																											"ALIGN_NEXT_OLDER",
																											"ALIGN_MIN",
																											"ALIGN_MAX",
																											"ALIGN_MEAN",
																											"ALIGN_COUNT",
																											"ALIGN_SUM",
																											"ALIGN_STDDEV",
																											"ALIGN_COUNT_TRUE",
																											"ALIGN_COUNT_FALSE",
																											"ALIGN_FRACTION_TRUE",
																											"ALIGN_PERCENTILE_99",
																											"ALIGN_PERCENTILE_95",
																											"ALIGN_PERCENTILE_50",
																											"ALIGN_PERCENTILE_05",
																											"ALIGN_MAKE_DISTRIBUTION",
																											"ALIGN_PERCENT_CHANGE",
																										},
																									},
																								},
																							},
																							"filter": &dcl.Property{
																								Type:        "string",
																								GoName:      "Filter",
																								Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																							},
																						},
																					},
																					"pickTimeSeriesFilter": &dcl.Property{
																						Type:        "object",
																						GoName:      "PickTimeSeriesFilter",
																						GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter",
																						Description: "Ranking based time series filter.",
																						Properties: map[string]*dcl.Property{
																							"direction": &dcl.Property{
																								Type:        "string",
																								GoName:      "Direction",
																								GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum",
																								Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																								Enum: []string{
																									"DIRECTION_UNSPECIFIED",
																									"TOP",
																									"BOTTOM",
																								},
																							},
																							"numTimeSeries": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "NumTimeSeries",
																								Description: "How many time series to allow to pass through the filter.",
																							},
																							"rankingMethod": &dcl.Property{
																								Type:        "string",
																								GoName:      "RankingMethod",
																								GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum",
																								Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																								Enum: []string{
																									"METHOD_UNSPECIFIED",
																									"METHOD_MEAN",
																									"METHOD_MAX",
																									"METHOD_MIN",
																									"METHOD_SUM",
																									"METHOD_LATEST",
																								},
																							},
																						},
																					},
																					"secondaryAggregation": &dcl.Property{
																						Type:        "object",
																						GoName:      "SecondaryAggregation",
																						GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation",
																						Description: "Apply a second aggregation after the ratio is computed.",
																						Properties: map[string]*dcl.Property{
																							"alignmentPeriod": &dcl.Property{
																								Type:        "string",
																								GoName:      "AlignmentPeriod",
																								Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																							},
																							"crossSeriesReducer": &dcl.Property{
																								Type:        "string",
																								GoName:      "CrossSeriesReducer",
																								GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum",
																								Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																								Enum: []string{
																									"REDUCE_NONE",
																									"REDUCE_MEAN",
																									"REDUCE_MIN",
																									"REDUCE_MAX",
																									"REDUCE_SUM",
																									"REDUCE_STDDEV",
																									"REDUCE_COUNT",
																									"REDUCE_COUNT_TRUE",
																									"REDUCE_COUNT_FALSE",
																									"REDUCE_FRACTION_TRUE",
																									"REDUCE_PERCENTILE_99",
																									"REDUCE_PERCENTILE_95",
																									"REDUCE_PERCENTILE_50",
																									"REDUCE_PERCENTILE_05",
																									"REDUCE_FRACTION_LESS_THAN",
																									"REDUCE_MAKE_DISTRIBUTION",
																								},
																							},
																							"groupByFields": &dcl.Property{
																								Type:        "array",
																								GoName:      "GroupByFields",
																								Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																								SendEmpty:   true,
																								ListType:    "list",
																								Items: &dcl.Property{
																									Type:   "string",
																									GoType: "string",
																								},
																							},
																							"perSeriesAligner": &dcl.Property{
																								Type:        "string",
																								GoName:      "PerSeriesAligner",
																								GoType:      "DashboardGridLayoutWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum",
																								Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																								Enum: []string{
																									"ALIGN_NONE",
																									"ALIGN_DELTA",
																									"ALIGN_RATE",
																									"ALIGN_INTERPOLATE",
																									"ALIGN_NEXT_OLDER",
																									"ALIGN_MIN",
																									"ALIGN_MAX",
																									"ALIGN_MEAN",
																									"ALIGN_COUNT",
																									"ALIGN_SUM",
																									"ALIGN_STDDEV",
																									"ALIGN_COUNT_TRUE",
																									"ALIGN_COUNT_FALSE",
																									"ALIGN_FRACTION_TRUE",
																									"ALIGN_PERCENTILE_99",
																									"ALIGN_PERCENTILE_95",
																									"ALIGN_PERCENTILE_50",
																									"ALIGN_PERCENTILE_05",
																									"ALIGN_MAKE_DISTRIBUTION",
																									"ALIGN_PERCENT_CHANGE",
																								},
																							},
																						},
																					},
																				},
																			},
																			"timeSeriesQueryLanguage": &dcl.Property{
																				Type:        "string",
																				GoName:      "TimeSeriesQueryLanguage",
																				Description: "A query used to fetch time series.",
																			},
																			"unitOverride": &dcl.Property{
																				Type:        "string",
																				GoName:      "UnitOverride",
																				Description: "The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.",
																			},
																		},
																	},
																},
															},
														},
														"thresholds": &dcl.Property{
															Type:        "array",
															GoName:      "Thresholds",
															Description: "Threshold lines drawn horizontally across the chart.",
															SendEmpty:   true,
															ListType:    "list",
															Items: &dcl.Property{
																Type:   "object",
																GoType: "DashboardGridLayoutWidgetsXyChartThresholds",
																Properties: map[string]*dcl.Property{
																	"color": &dcl.Property{
																		Type:        "string",
																		GoName:      "Color",
																		GoType:      "DashboardGridLayoutWidgetsXyChartThresholdsColorEnum",
																		Description: "The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED",
																		Enum: []string{
																			"COLOR_UNSPECIFIED",
																			"GREY",
																			"BLUE",
																			"GREEN",
																			"YELLOW",
																			"ORANGE",
																			"RED",
																		},
																	},
																	"direction": &dcl.Property{
																		Type:        "string",
																		GoName:      "Direction",
																		GoType:      "DashboardGridLayoutWidgetsXyChartThresholdsDirectionEnum",
																		Description: "The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW",
																		Enum: []string{
																			"DIRECTION_UNSPECIFIED",
																			"ABOVE",
																			"BELOW",
																		},
																	},
																	"label": &dcl.Property{
																		Type:        "string",
																		GoName:      "Label",
																		Description: "A label for the threshold.",
																	},
																	"value": &dcl.Property{
																		Type:        "number",
																		Format:      "double",
																		GoName:      "Value",
																		Description: "The value of the threshold. The value should be defined in the native scale of the metric.",
																	},
																},
															},
														},
														"timeshiftDuration": &dcl.Property{
															Type:        "string",
															GoName:      "TimeshiftDuration",
															Description: "The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.",
														},
														"xAxis": &dcl.Property{
															Type:        "object",
															GoName:      "XAxis",
															GoType:      "DashboardGridLayoutWidgetsXyChartXAxis",
															Description: "The properties applied to the X axis.",
															Properties: map[string]*dcl.Property{
																"label": &dcl.Property{
																	Type:        "string",
																	GoName:      "Label",
																	Description: "The label of the axis.",
																},
																"scale": &dcl.Property{
																	Type:        "string",
																	GoName:      "Scale",
																	GoType:      "DashboardGridLayoutWidgetsXyChartXAxisScaleEnum",
																	Description: "The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10",
																	Enum: []string{
																		"SCALE_UNSPECIFIED",
																		"LINEAR",
																		"LOG10",
																	},
																},
															},
														},
														"yAxis": &dcl.Property{
															Type:        "object",
															GoName:      "YAxis",
															GoType:      "DashboardGridLayoutWidgetsXyChartYAxis",
															Description: "The properties applied to the Y axis.",
															Properties: map[string]*dcl.Property{
																"label": &dcl.Property{
																	Type:        "string",
																	GoName:      "Label",
																	Description: "The label of the axis.",
																},
																"scale": &dcl.Property{
																	Type:        "string",
																	GoName:      "Scale",
																	GoType:      "DashboardGridLayoutWidgetsXyChartYAxisScaleEnum",
																	Description: "The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10",
																	Enum: []string{
																		"SCALE_UNSPECIFIED",
																		"LINEAR",
																		"LOG10",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							"mosaicLayout": &dcl.Property{
								Type:        "object",
								GoName:      "MosaicLayout",
								GoType:      "DashboardMosaicLayout",
								Description: "The content is arranged as a grid of tiles, with each content widget occupying one or more tiles.",
								Conflicts: []string{
									"gridLayout",
									"rowLayout",
									"columnLayout",
								},
								Properties: map[string]*dcl.Property{
									"columns": &dcl.Property{
										Type:        "integer",
										Format:      "int64",
										GoName:      "Columns",
										Description: "The number of columns in the mosaic grid.",
									},
									"tiles": &dcl.Property{
										Type:        "array",
										GoName:      "Tiles",
										Description: "The tiles to display.",
										SendEmpty:   true,
										ListType:    "list",
										Items: &dcl.Property{
											Type:   "object",
											GoType: "DashboardMosaicLayoutTiles",
											Properties: map[string]*dcl.Property{
												"height": &dcl.Property{
													Type:        "integer",
													Format:      "int64",
													GoName:      "Height",
													Description: "The height of the tile, measured in grid squares.",
												},
												"widget": &dcl.Property{
													Type:        "object",
													GoName:      "Widget",
													GoType:      "DashboardMosaicLayoutTilesWidget",
													Description: "The informational widget contained in the tile.",
													Properties: map[string]*dcl.Property{
														"blank": &dcl.Property{
															Type:        "object",
															GoName:      "Blank",
															GoType:      "DashboardMosaicLayoutTilesWidgetBlank",
															Description: "A blank space.",
															Conflicts: []string{
																"xyChart",
																"scorecard",
																"text",
																"logsPanel",
															},
															Properties: map[string]*dcl.Property{},
														},
														"logsPanel": &dcl.Property{
															Type:   "object",
															GoName: "LogsPanel",
															GoType: "DashboardMosaicLayoutTilesWidgetLogsPanel",
															Conflicts: []string{
																"xyChart",
																"scorecard",
																"text",
																"blank",
															},
															Properties: map[string]*dcl.Property{
																"filter": &dcl.Property{
																	Type:        "string",
																	GoName:      "Filter",
																	Description: "A filter that chooses which log entries to return. See [Advanced Logs Queries](https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.",
																},
																"resourceNames": &dcl.Property{
																	Type:        "array",
																	GoName:      "ResourceNames",
																	Description: "The names of logging resources to collect logs for. Currently only projects are supported. If empty, the widget will default to the host project.",
																	SendEmpty:   true,
																	ListType:    "list",
																	Items: &dcl.Property{
																		Type:   "string",
																		GoType: "string",
																		ResourceReferences: []*dcl.PropertyResourceReference{
																			&dcl.PropertyResourceReference{
																				Resource: "Cloudresourcemanager/Project",
																				Field:    "name",
																			},
																		},
																	},
																},
															},
														},
														"scorecard": &dcl.Property{
															Type:        "object",
															GoName:      "Scorecard",
															GoType:      "DashboardMosaicLayoutTilesWidgetScorecard",
															Description: "A scorecard summarizing time series data.",
															Conflicts: []string{
																"xyChart",
																"text",
																"blank",
																"logsPanel",
															},
															Required: []string{
																"timeSeriesQuery",
															},
															Properties: map[string]*dcl.Property{
																"gaugeView": &dcl.Property{
																	Type:        "object",
																	GoName:      "GaugeView",
																	GoType:      "DashboardMosaicLayoutTilesWidgetScorecardGaugeView",
																	Description: "Will cause the scorecard to show a gauge chart.",
																	Properties: map[string]*dcl.Property{
																		"lowerBound": &dcl.Property{
																			Type:        "number",
																			Format:      "double",
																			GoName:      "LowerBound",
																			Description: "The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.",
																		},
																		"upperBound": &dcl.Property{
																			Type:        "number",
																			Format:      "double",
																			GoName:      "UpperBound",
																			Description: "The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.",
																		},
																	},
																},
																"sparkChartView": &dcl.Property{
																	Type:        "object",
																	GoName:      "SparkChartView",
																	GoType:      "DashboardMosaicLayoutTilesWidgetScorecardSparkChartView",
																	Description: "Will cause the scorecard to show a spark chart.",
																	Required: []string{
																		"sparkChartType",
																	},
																	Properties: map[string]*dcl.Property{
																		"minAlignmentPeriod": &dcl.Property{
																			Type:        "string",
																			GoName:      "MinAlignmentPeriod",
																			Description: "The lower bound on data point frequency in the chart implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes it would not make sense to fetch and align data at one minute intervals. This field is optional and exists only as a hint.",
																		},
																		"sparkChartType": &dcl.Property{
																			Type:        "string",
																			GoName:      "SparkChartType",
																			GoType:      "DashboardMosaicLayoutTilesWidgetScorecardSparkChartViewSparkChartTypeEnum",
																			Description: "Required. The type of sparkchart to show in this chartView. Possible values: SPARK_CHART_TYPE_UNSPECIFIED, SPARK_LINE, SPARK_BAR",
																			Enum: []string{
																				"SPARK_CHART_TYPE_UNSPECIFIED",
																				"SPARK_LINE",
																				"SPARK_BAR",
																			},
																		},
																	},
																},
																"thresholds": &dcl.Property{
																	Type:        "array",
																	GoName:      "Thresholds",
																	Description: "The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)  As an example, consider a scorecard with the following four thresholds: {   value: 90,   category: 'DANGER',   trigger: 'ABOVE', },: {   value: 70,   category: 'WARNING',   trigger: 'ABOVE', }, {   value: 10,   category: 'DANGER',   trigger: 'BELOW', }, {   value: 20,   category: 'WARNING',   trigger: 'BELOW', }  Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.",
																	SendEmpty:   true,
																	ListType:    "list",
																	Items: &dcl.Property{
																		Type:   "object",
																		GoType: "DashboardMosaicLayoutTilesWidgetScorecardThresholds",
																		Properties: map[string]*dcl.Property{
																			"color": &dcl.Property{
																				Type:        "string",
																				GoName:      "Color",
																				GoType:      "DashboardMosaicLayoutTilesWidgetScorecardThresholdsColorEnum",
																				Description: "The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED",
																				Enum: []string{
																					"COLOR_UNSPECIFIED",
																					"GREY",
																					"BLUE",
																					"GREEN",
																					"YELLOW",
																					"ORANGE",
																					"RED",
																				},
																			},
																			"direction": &dcl.Property{
																				Type:        "string",
																				GoName:      "Direction",
																				GoType:      "DashboardMosaicLayoutTilesWidgetScorecardThresholdsDirectionEnum",
																				Description: "The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW",
																				Enum: []string{
																					"DIRECTION_UNSPECIFIED",
																					"ABOVE",
																					"BELOW",
																				},
																			},
																			"label": &dcl.Property{
																				Type:        "string",
																				GoName:      "Label",
																				Description: "A label for the threshold.",
																			},
																			"value": &dcl.Property{
																				Type:        "number",
																				Format:      "double",
																				GoName:      "Value",
																				Description: "The value of the threshold. The value should be defined in the native scale of the metric.",
																			},
																		},
																	},
																},
																"timeSeriesQuery": &dcl.Property{
																	Type:        "object",
																	GoName:      "TimeSeriesQuery",
																	GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQuery",
																	Description: "Required. Fields for querying time series data from the Stackdriver metrics API.",
																	Properties: map[string]*dcl.Property{
																		"timeSeriesFilter": &dcl.Property{
																			Type:        "object",
																			GoName:      "TimeSeriesFilter",
																			GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilter",
																			Description: "Filter parameters to fetch time series.",
																			Required: []string{
																				"filter",
																			},
																			Properties: map[string]*dcl.Property{
																				"aggregation": &dcl.Property{
																					Type:        "object",
																					GoName:      "Aggregation",
																					GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation",
																					Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																					Properties: map[string]*dcl.Property{
																						"alignmentPeriod": &dcl.Property{
																							Type:        "string",
																							GoName:      "AlignmentPeriod",
																							Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																						},
																						"crossSeriesReducer": &dcl.Property{
																							Type:        "string",
																							GoName:      "CrossSeriesReducer",
																							GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum",
																							Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																							Enum: []string{
																								"REDUCE_NONE",
																								"REDUCE_MEAN",
																								"REDUCE_MIN",
																								"REDUCE_MAX",
																								"REDUCE_SUM",
																								"REDUCE_STDDEV",
																								"REDUCE_COUNT",
																								"REDUCE_COUNT_TRUE",
																								"REDUCE_COUNT_FALSE",
																								"REDUCE_FRACTION_TRUE",
																								"REDUCE_PERCENTILE_99",
																								"REDUCE_PERCENTILE_95",
																								"REDUCE_PERCENTILE_50",
																								"REDUCE_PERCENTILE_05",
																								"REDUCE_FRACTION_LESS_THAN",
																								"REDUCE_MAKE_DISTRIBUTION",
																							},
																						},
																						"groupByFields": &dcl.Property{
																							Type:        "array",
																							GoName:      "GroupByFields",
																							Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																							SendEmpty:   true,
																							ListType:    "list",
																							Items: &dcl.Property{
																								Type:   "string",
																								GoType: "string",
																							},
																						},
																						"perSeriesAligner": &dcl.Property{
																							Type:        "string",
																							GoName:      "PerSeriesAligner",
																							GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum",
																							Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																							Enum: []string{
																								"ALIGN_NONE",
																								"ALIGN_DELTA",
																								"ALIGN_RATE",
																								"ALIGN_INTERPOLATE",
																								"ALIGN_NEXT_OLDER",
																								"ALIGN_MIN",
																								"ALIGN_MAX",
																								"ALIGN_MEAN",
																								"ALIGN_COUNT",
																								"ALIGN_SUM",
																								"ALIGN_STDDEV",
																								"ALIGN_COUNT_TRUE",
																								"ALIGN_COUNT_FALSE",
																								"ALIGN_FRACTION_TRUE",
																								"ALIGN_PERCENTILE_99",
																								"ALIGN_PERCENTILE_95",
																								"ALIGN_PERCENTILE_50",
																								"ALIGN_PERCENTILE_05",
																								"ALIGN_MAKE_DISTRIBUTION",
																								"ALIGN_PERCENT_CHANGE",
																							},
																						},
																					},
																				},
																				"filter": &dcl.Property{
																					Type:        "string",
																					GoName:      "Filter",
																					Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																				},
																				"pickTimeSeriesFilter": &dcl.Property{
																					Type:        "object",
																					GoName:      "PickTimeSeriesFilter",
																					GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter",
																					Description: "Ranking based time series filter.",
																					Properties: map[string]*dcl.Property{
																						"direction": &dcl.Property{
																							Type:        "string",
																							GoName:      "Direction",
																							GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum",
																							Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																							Enum: []string{
																								"DIRECTION_UNSPECIFIED",
																								"TOP",
																								"BOTTOM",
																							},
																						},
																						"numTimeSeries": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "NumTimeSeries",
																							Description: "How many time series to allow to pass through the filter.",
																						},
																						"rankingMethod": &dcl.Property{
																							Type:        "string",
																							GoName:      "RankingMethod",
																							GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum",
																							Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																							Enum: []string{
																								"METHOD_UNSPECIFIED",
																								"METHOD_MEAN",
																								"METHOD_MAX",
																								"METHOD_MIN",
																								"METHOD_SUM",
																								"METHOD_LATEST",
																							},
																						},
																					},
																				},
																				"secondaryAggregation": &dcl.Property{
																					Type:        "object",
																					GoName:      "SecondaryAggregation",
																					GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation",
																					Description: "Apply a second aggregation after `aggregation` is applied.",
																					Properties: map[string]*dcl.Property{
																						"alignmentPeriod": &dcl.Property{
																							Type:        "string",
																							GoName:      "AlignmentPeriod",
																							Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																						},
																						"crossSeriesReducer": &dcl.Property{
																							Type:        "string",
																							GoName:      "CrossSeriesReducer",
																							GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum",
																							Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																							Enum: []string{
																								"REDUCE_NONE",
																								"REDUCE_MEAN",
																								"REDUCE_MIN",
																								"REDUCE_MAX",
																								"REDUCE_SUM",
																								"REDUCE_STDDEV",
																								"REDUCE_COUNT",
																								"REDUCE_COUNT_TRUE",
																								"REDUCE_COUNT_FALSE",
																								"REDUCE_FRACTION_TRUE",
																								"REDUCE_PERCENTILE_99",
																								"REDUCE_PERCENTILE_95",
																								"REDUCE_PERCENTILE_50",
																								"REDUCE_PERCENTILE_05",
																								"REDUCE_FRACTION_LESS_THAN",
																								"REDUCE_MAKE_DISTRIBUTION",
																							},
																						},
																						"groupByFields": &dcl.Property{
																							Type:        "array",
																							GoName:      "GroupByFields",
																							Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																							SendEmpty:   true,
																							ListType:    "list",
																							Items: &dcl.Property{
																								Type:   "string",
																								GoType: "string",
																							},
																						},
																						"perSeriesAligner": &dcl.Property{
																							Type:        "string",
																							GoName:      "PerSeriesAligner",
																							GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum",
																							Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																							Enum: []string{
																								"ALIGN_NONE",
																								"ALIGN_DELTA",
																								"ALIGN_RATE",
																								"ALIGN_INTERPOLATE",
																								"ALIGN_NEXT_OLDER",
																								"ALIGN_MIN",
																								"ALIGN_MAX",
																								"ALIGN_MEAN",
																								"ALIGN_COUNT",
																								"ALIGN_SUM",
																								"ALIGN_STDDEV",
																								"ALIGN_COUNT_TRUE",
																								"ALIGN_COUNT_FALSE",
																								"ALIGN_FRACTION_TRUE",
																								"ALIGN_PERCENTILE_99",
																								"ALIGN_PERCENTILE_95",
																								"ALIGN_PERCENTILE_50",
																								"ALIGN_PERCENTILE_05",
																								"ALIGN_MAKE_DISTRIBUTION",
																								"ALIGN_PERCENT_CHANGE",
																							},
																						},
																					},
																				},
																			},
																		},
																		"timeSeriesFilterRatio": &dcl.Property{
																			Type:        "object",
																			GoName:      "TimeSeriesFilterRatio",
																			GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio",
																			Description: "Parameters to fetch a ratio between two time series filters.",
																			Properties: map[string]*dcl.Property{
																				"denominator": &dcl.Property{
																					Type:        "object",
																					GoName:      "Denominator",
																					GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator",
																					Description: "The denominator of the ratio.",
																					Required: []string{
																						"filter",
																					},
																					Properties: map[string]*dcl.Property{
																						"aggregation": &dcl.Property{
																							Type:        "object",
																							GoName:      "Aggregation",
																							GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation",
																							Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																							Properties: map[string]*dcl.Property{
																								"alignmentPeriod": &dcl.Property{
																									Type:        "string",
																									GoName:      "AlignmentPeriod",
																									Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																								},
																								"crossSeriesReducer": &dcl.Property{
																									Type:        "string",
																									GoName:      "CrossSeriesReducer",
																									GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum",
																									Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																									Enum: []string{
																										"REDUCE_NONE",
																										"REDUCE_MEAN",
																										"REDUCE_MIN",
																										"REDUCE_MAX",
																										"REDUCE_SUM",
																										"REDUCE_STDDEV",
																										"REDUCE_COUNT",
																										"REDUCE_COUNT_TRUE",
																										"REDUCE_COUNT_FALSE",
																										"REDUCE_FRACTION_TRUE",
																										"REDUCE_PERCENTILE_99",
																										"REDUCE_PERCENTILE_95",
																										"REDUCE_PERCENTILE_50",
																										"REDUCE_PERCENTILE_05",
																										"REDUCE_FRACTION_LESS_THAN",
																										"REDUCE_MAKE_DISTRIBUTION",
																									},
																								},
																								"groupByFields": &dcl.Property{
																									Type:        "array",
																									GoName:      "GroupByFields",
																									Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																									SendEmpty:   true,
																									ListType:    "list",
																									Items: &dcl.Property{
																										Type:   "string",
																										GoType: "string",
																									},
																								},
																								"perSeriesAligner": &dcl.Property{
																									Type:        "string",
																									GoName:      "PerSeriesAligner",
																									GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum",
																									Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																									Enum: []string{
																										"ALIGN_NONE",
																										"ALIGN_DELTA",
																										"ALIGN_RATE",
																										"ALIGN_INTERPOLATE",
																										"ALIGN_NEXT_OLDER",
																										"ALIGN_MIN",
																										"ALIGN_MAX",
																										"ALIGN_MEAN",
																										"ALIGN_COUNT",
																										"ALIGN_SUM",
																										"ALIGN_STDDEV",
																										"ALIGN_COUNT_TRUE",
																										"ALIGN_COUNT_FALSE",
																										"ALIGN_FRACTION_TRUE",
																										"ALIGN_PERCENTILE_99",
																										"ALIGN_PERCENTILE_95",
																										"ALIGN_PERCENTILE_50",
																										"ALIGN_PERCENTILE_05",
																										"ALIGN_MAKE_DISTRIBUTION",
																										"ALIGN_PERCENT_CHANGE",
																									},
																								},
																							},
																						},
																						"filter": &dcl.Property{
																							Type:        "string",
																							GoName:      "Filter",
																							Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																						},
																					},
																				},
																				"numerator": &dcl.Property{
																					Type:        "object",
																					GoName:      "Numerator",
																					GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator",
																					Description: "The numerator of the ratio.",
																					Required: []string{
																						"filter",
																					},
																					Properties: map[string]*dcl.Property{
																						"aggregation": &dcl.Property{
																							Type:        "object",
																							GoName:      "Aggregation",
																							GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation",
																							Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																							Properties: map[string]*dcl.Property{
																								"alignmentPeriod": &dcl.Property{
																									Type:        "string",
																									GoName:      "AlignmentPeriod",
																									Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																								},
																								"crossSeriesReducer": &dcl.Property{
																									Type:        "string",
																									GoName:      "CrossSeriesReducer",
																									GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum",
																									Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																									Enum: []string{
																										"REDUCE_NONE",
																										"REDUCE_MEAN",
																										"REDUCE_MIN",
																										"REDUCE_MAX",
																										"REDUCE_SUM",
																										"REDUCE_STDDEV",
																										"REDUCE_COUNT",
																										"REDUCE_COUNT_TRUE",
																										"REDUCE_COUNT_FALSE",
																										"REDUCE_FRACTION_TRUE",
																										"REDUCE_PERCENTILE_99",
																										"REDUCE_PERCENTILE_95",
																										"REDUCE_PERCENTILE_50",
																										"REDUCE_PERCENTILE_05",
																										"REDUCE_FRACTION_LESS_THAN",
																										"REDUCE_MAKE_DISTRIBUTION",
																									},
																								},
																								"groupByFields": &dcl.Property{
																									Type:        "array",
																									GoName:      "GroupByFields",
																									Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																									SendEmpty:   true,
																									ListType:    "list",
																									Items: &dcl.Property{
																										Type:   "string",
																										GoType: "string",
																									},
																								},
																								"perSeriesAligner": &dcl.Property{
																									Type:        "string",
																									GoName:      "PerSeriesAligner",
																									GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum",
																									Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																									Enum: []string{
																										"ALIGN_NONE",
																										"ALIGN_DELTA",
																										"ALIGN_RATE",
																										"ALIGN_INTERPOLATE",
																										"ALIGN_NEXT_OLDER",
																										"ALIGN_MIN",
																										"ALIGN_MAX",
																										"ALIGN_MEAN",
																										"ALIGN_COUNT",
																										"ALIGN_SUM",
																										"ALIGN_STDDEV",
																										"ALIGN_COUNT_TRUE",
																										"ALIGN_COUNT_FALSE",
																										"ALIGN_FRACTION_TRUE",
																										"ALIGN_PERCENTILE_99",
																										"ALIGN_PERCENTILE_95",
																										"ALIGN_PERCENTILE_50",
																										"ALIGN_PERCENTILE_05",
																										"ALIGN_MAKE_DISTRIBUTION",
																										"ALIGN_PERCENT_CHANGE",
																									},
																								},
																							},
																						},
																						"filter": &dcl.Property{
																							Type:        "string",
																							GoName:      "Filter",
																							Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																						},
																					},
																				},
																				"pickTimeSeriesFilter": &dcl.Property{
																					Type:        "object",
																					GoName:      "PickTimeSeriesFilter",
																					GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter",
																					Description: "Ranking based time series filter.",
																					Properties: map[string]*dcl.Property{
																						"direction": &dcl.Property{
																							Type:        "string",
																							GoName:      "Direction",
																							GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum",
																							Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																							Enum: []string{
																								"DIRECTION_UNSPECIFIED",
																								"TOP",
																								"BOTTOM",
																							},
																						},
																						"numTimeSeries": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "NumTimeSeries",
																							Description: "How many time series to allow to pass through the filter.",
																						},
																						"rankingMethod": &dcl.Property{
																							Type:        "string",
																							GoName:      "RankingMethod",
																							GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum",
																							Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																							Enum: []string{
																								"METHOD_UNSPECIFIED",
																								"METHOD_MEAN",
																								"METHOD_MAX",
																								"METHOD_MIN",
																								"METHOD_SUM",
																								"METHOD_LATEST",
																							},
																						},
																					},
																				},
																				"secondaryAggregation": &dcl.Property{
																					Type:        "object",
																					GoName:      "SecondaryAggregation",
																					GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation",
																					Description: "Apply a second aggregation after the ratio is computed.",
																					Properties: map[string]*dcl.Property{
																						"alignmentPeriod": &dcl.Property{
																							Type:        "string",
																							GoName:      "AlignmentPeriod",
																							Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																						},
																						"crossSeriesReducer": &dcl.Property{
																							Type:        "string",
																							GoName:      "CrossSeriesReducer",
																							GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum",
																							Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																							Enum: []string{
																								"REDUCE_NONE",
																								"REDUCE_MEAN",
																								"REDUCE_MIN",
																								"REDUCE_MAX",
																								"REDUCE_SUM",
																								"REDUCE_STDDEV",
																								"REDUCE_COUNT",
																								"REDUCE_COUNT_TRUE",
																								"REDUCE_COUNT_FALSE",
																								"REDUCE_FRACTION_TRUE",
																								"REDUCE_PERCENTILE_99",
																								"REDUCE_PERCENTILE_95",
																								"REDUCE_PERCENTILE_50",
																								"REDUCE_PERCENTILE_05",
																								"REDUCE_FRACTION_LESS_THAN",
																								"REDUCE_MAKE_DISTRIBUTION",
																							},
																						},
																						"groupByFields": &dcl.Property{
																							Type:        "array",
																							GoName:      "GroupByFields",
																							Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																							SendEmpty:   true,
																							ListType:    "list",
																							Items: &dcl.Property{
																								Type:   "string",
																								GoType: "string",
																							},
																						},
																						"perSeriesAligner": &dcl.Property{
																							Type:        "string",
																							GoName:      "PerSeriesAligner",
																							GoType:      "DashboardMosaicLayoutTilesWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum",
																							Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																							Enum: []string{
																								"ALIGN_NONE",
																								"ALIGN_DELTA",
																								"ALIGN_RATE",
																								"ALIGN_INTERPOLATE",
																								"ALIGN_NEXT_OLDER",
																								"ALIGN_MIN",
																								"ALIGN_MAX",
																								"ALIGN_MEAN",
																								"ALIGN_COUNT",
																								"ALIGN_SUM",
																								"ALIGN_STDDEV",
																								"ALIGN_COUNT_TRUE",
																								"ALIGN_COUNT_FALSE",
																								"ALIGN_FRACTION_TRUE",
																								"ALIGN_PERCENTILE_99",
																								"ALIGN_PERCENTILE_95",
																								"ALIGN_PERCENTILE_50",
																								"ALIGN_PERCENTILE_05",
																								"ALIGN_MAKE_DISTRIBUTION",
																								"ALIGN_PERCENT_CHANGE",
																							},
																						},
																					},
																				},
																			},
																		},
																		"timeSeriesQueryLanguage": &dcl.Property{
																			Type:        "string",
																			GoName:      "TimeSeriesQueryLanguage",
																			Description: "A query used to fetch time series.",
																		},
																		"unitOverride": &dcl.Property{
																			Type:        "string",
																			GoName:      "UnitOverride",
																			Description: "The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.",
																		},
																	},
																},
															},
														},
														"text": &dcl.Property{
															Type:        "object",
															GoName:      "Text",
															GoType:      "DashboardMosaicLayoutTilesWidgetText",
															Description: "A raw string or markdown displaying textual content.",
															Conflicts: []string{
																"xyChart",
																"scorecard",
																"blank",
																"logsPanel",
															},
															Properties: map[string]*dcl.Property{
																"content": &dcl.Property{
																	Type:        "string",
																	GoName:      "Content",
																	Description: "The text content to be displayed.",
																},
																"format": &dcl.Property{
																	Type:        "string",
																	GoName:      "Format",
																	GoType:      "DashboardMosaicLayoutTilesWidgetTextFormatEnum",
																	Description: "How the text content is formatted. Possible values: FORMAT_UNSPECIFIED, MARKDOWN, RAW",
																	Enum: []string{
																		"FORMAT_UNSPECIFIED",
																		"MARKDOWN",
																		"RAW",
																	},
																},
															},
														},
														"title": &dcl.Property{
															Type:        "string",
															GoName:      "Title",
															Description: "Optional. The title of the widget.",
														},
														"xyChart": &dcl.Property{
															Type:        "object",
															GoName:      "XyChart",
															GoType:      "DashboardMosaicLayoutTilesWidgetXyChart",
															Description: "A chart of time series data.",
															Conflicts: []string{
																"scorecard",
																"text",
																"blank",
																"logsPanel",
															},
															Required: []string{
																"dataSets",
															},
															Properties: map[string]*dcl.Property{
																"chartOptions": &dcl.Property{
																	Type:        "object",
																	GoName:      "ChartOptions",
																	GoType:      "DashboardMosaicLayoutTilesWidgetXyChartChartOptions",
																	Description: "Display options for the chart.",
																	Properties: map[string]*dcl.Property{
																		"mode": &dcl.Property{
																			Type:        "string",
																			GoName:      "Mode",
																			GoType:      "DashboardMosaicLayoutTilesWidgetXyChartChartOptionsModeEnum",
																			Description: "The chart mode. Possible values: MODE_UNSPECIFIED, COLOR, X_RAY, STATS",
																			Enum: []string{
																				"MODE_UNSPECIFIED",
																				"COLOR",
																				"X_RAY",
																				"STATS",
																			},
																		},
																	},
																},
																"dataSets": &dcl.Property{
																	Type:        "array",
																	GoName:      "DataSets",
																	Description: "Required. The data displayed in this chart.",
																	SendEmpty:   true,
																	ListType:    "list",
																	Items: &dcl.Property{
																		Type:   "object",
																		GoType: "DashboardMosaicLayoutTilesWidgetXyChartDataSets",
																		Required: []string{
																			"timeSeriesQuery",
																		},
																		Properties: map[string]*dcl.Property{
																			"legendTemplate": &dcl.Property{
																				Type:        "string",
																				GoName:      "LegendTemplate",
																				Description: "A template string for naming `TimeSeries` in the resulting data set. This should be a string with interpolations of the form `${label_name}`, which will resolve to the label's value. ",
																			},
																			"minAlignmentPeriod": &dcl.Property{
																				Type:        "string",
																				GoName:      "MinAlignmentPeriod",
																				Description: "Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the `min_alignment_period` should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.",
																			},
																			"plotType": &dcl.Property{
																				Type:        "string",
																				GoName:      "PlotType",
																				GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsPlotTypeEnum",
																				Description: "How this data should be plotted on the chart. Possible values: PLOT_TYPE_UNSPECIFIED, LINE, STACKED_AREA, STACKED_BAR, HEATMAP",
																				Enum: []string{
																					"PLOT_TYPE_UNSPECIFIED",
																					"LINE",
																					"STACKED_AREA",
																					"STACKED_BAR",
																					"HEATMAP",
																				},
																			},
																			"timeSeriesQuery": &dcl.Property{
																				Type:        "object",
																				GoName:      "TimeSeriesQuery",
																				GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQuery",
																				Description: "Required. Fields for querying time series data from the Stackdriver metrics API.",
																				Properties: map[string]*dcl.Property{
																					"timeSeriesFilter": &dcl.Property{
																						Type:        "object",
																						GoName:      "TimeSeriesFilter",
																						GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter",
																						Description: "Filter parameters to fetch time series.",
																						Required: []string{
																							"filter",
																						},
																						Properties: map[string]*dcl.Property{
																							"aggregation": &dcl.Property{
																								Type:        "object",
																								GoName:      "Aggregation",
																								GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation",
																								Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																								Properties: map[string]*dcl.Property{
																									"alignmentPeriod": &dcl.Property{
																										Type:        "string",
																										GoName:      "AlignmentPeriod",
																										Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																									},
																									"crossSeriesReducer": &dcl.Property{
																										Type:        "string",
																										GoName:      "CrossSeriesReducer",
																										GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum",
																										Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																										Enum: []string{
																											"REDUCE_NONE",
																											"REDUCE_MEAN",
																											"REDUCE_MIN",
																											"REDUCE_MAX",
																											"REDUCE_SUM",
																											"REDUCE_STDDEV",
																											"REDUCE_COUNT",
																											"REDUCE_COUNT_TRUE",
																											"REDUCE_COUNT_FALSE",
																											"REDUCE_FRACTION_TRUE",
																											"REDUCE_PERCENTILE_99",
																											"REDUCE_PERCENTILE_95",
																											"REDUCE_PERCENTILE_50",
																											"REDUCE_PERCENTILE_05",
																											"REDUCE_FRACTION_LESS_THAN",
																											"REDUCE_MAKE_DISTRIBUTION",
																										},
																									},
																									"groupByFields": &dcl.Property{
																										Type:        "array",
																										GoName:      "GroupByFields",
																										Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																										SendEmpty:   true,
																										ListType:    "list",
																										Items: &dcl.Property{
																											Type:   "string",
																											GoType: "string",
																										},
																									},
																									"perSeriesAligner": &dcl.Property{
																										Type:        "string",
																										GoName:      "PerSeriesAligner",
																										GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum",
																										Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																										Enum: []string{
																											"ALIGN_NONE",
																											"ALIGN_DELTA",
																											"ALIGN_RATE",
																											"ALIGN_INTERPOLATE",
																											"ALIGN_NEXT_OLDER",
																											"ALIGN_MIN",
																											"ALIGN_MAX",
																											"ALIGN_MEAN",
																											"ALIGN_COUNT",
																											"ALIGN_SUM",
																											"ALIGN_STDDEV",
																											"ALIGN_COUNT_TRUE",
																											"ALIGN_COUNT_FALSE",
																											"ALIGN_FRACTION_TRUE",
																											"ALIGN_PERCENTILE_99",
																											"ALIGN_PERCENTILE_95",
																											"ALIGN_PERCENTILE_50",
																											"ALIGN_PERCENTILE_05",
																											"ALIGN_MAKE_DISTRIBUTION",
																											"ALIGN_PERCENT_CHANGE",
																										},
																									},
																								},
																							},
																							"filter": &dcl.Property{
																								Type:        "string",
																								GoName:      "Filter",
																								Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																							},
																							"pickTimeSeriesFilter": &dcl.Property{
																								Type:        "object",
																								GoName:      "PickTimeSeriesFilter",
																								GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter",
																								Description: "Ranking based time series filter.",
																								Properties: map[string]*dcl.Property{
																									"direction": &dcl.Property{
																										Type:        "string",
																										GoName:      "Direction",
																										GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum",
																										Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																										Enum: []string{
																											"DIRECTION_UNSPECIFIED",
																											"TOP",
																											"BOTTOM",
																										},
																									},
																									"numTimeSeries": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "NumTimeSeries",
																										Description: "How many time series to allow to pass through the filter.",
																									},
																									"rankingMethod": &dcl.Property{
																										Type:        "string",
																										GoName:      "RankingMethod",
																										GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum",
																										Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																										Enum: []string{
																											"METHOD_UNSPECIFIED",
																											"METHOD_MEAN",
																											"METHOD_MAX",
																											"METHOD_MIN",
																											"METHOD_SUM",
																											"METHOD_LATEST",
																										},
																									},
																								},
																							},
																							"secondaryAggregation": &dcl.Property{
																								Type:        "object",
																								GoName:      "SecondaryAggregation",
																								GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation",
																								Description: "Apply a second aggregation after `aggregation` is applied.",
																								Properties: map[string]*dcl.Property{
																									"alignmentPeriod": &dcl.Property{
																										Type:        "string",
																										GoName:      "AlignmentPeriod",
																										Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																									},
																									"crossSeriesReducer": &dcl.Property{
																										Type:        "string",
																										GoName:      "CrossSeriesReducer",
																										GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum",
																										Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																										Enum: []string{
																											"REDUCE_NONE",
																											"REDUCE_MEAN",
																											"REDUCE_MIN",
																											"REDUCE_MAX",
																											"REDUCE_SUM",
																											"REDUCE_STDDEV",
																											"REDUCE_COUNT",
																											"REDUCE_COUNT_TRUE",
																											"REDUCE_COUNT_FALSE",
																											"REDUCE_FRACTION_TRUE",
																											"REDUCE_PERCENTILE_99",
																											"REDUCE_PERCENTILE_95",
																											"REDUCE_PERCENTILE_50",
																											"REDUCE_PERCENTILE_05",
																											"REDUCE_FRACTION_LESS_THAN",
																											"REDUCE_MAKE_DISTRIBUTION",
																										},
																									},
																									"groupByFields": &dcl.Property{
																										Type:        "array",
																										GoName:      "GroupByFields",
																										Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																										SendEmpty:   true,
																										ListType:    "list",
																										Items: &dcl.Property{
																											Type:   "string",
																											GoType: "string",
																										},
																									},
																									"perSeriesAligner": &dcl.Property{
																										Type:        "string",
																										GoName:      "PerSeriesAligner",
																										GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum",
																										Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																										Enum: []string{
																											"ALIGN_NONE",
																											"ALIGN_DELTA",
																											"ALIGN_RATE",
																											"ALIGN_INTERPOLATE",
																											"ALIGN_NEXT_OLDER",
																											"ALIGN_MIN",
																											"ALIGN_MAX",
																											"ALIGN_MEAN",
																											"ALIGN_COUNT",
																											"ALIGN_SUM",
																											"ALIGN_STDDEV",
																											"ALIGN_COUNT_TRUE",
																											"ALIGN_COUNT_FALSE",
																											"ALIGN_FRACTION_TRUE",
																											"ALIGN_PERCENTILE_99",
																											"ALIGN_PERCENTILE_95",
																											"ALIGN_PERCENTILE_50",
																											"ALIGN_PERCENTILE_05",
																											"ALIGN_MAKE_DISTRIBUTION",
																											"ALIGN_PERCENT_CHANGE",
																										},
																									},
																								},
																							},
																						},
																					},
																					"timeSeriesFilterRatio": &dcl.Property{
																						Type:        "object",
																						GoName:      "TimeSeriesFilterRatio",
																						GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio",
																						Description: "Parameters to fetch a ratio between two time series filters.",
																						Properties: map[string]*dcl.Property{
																							"denominator": &dcl.Property{
																								Type:        "object",
																								GoName:      "Denominator",
																								GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator",
																								Description: "The denominator of the ratio.",
																								Required: []string{
																									"filter",
																								},
																								Properties: map[string]*dcl.Property{
																									"aggregation": &dcl.Property{
																										Type:        "object",
																										GoName:      "Aggregation",
																										GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation",
																										Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																										Properties: map[string]*dcl.Property{
																											"alignmentPeriod": &dcl.Property{
																												Type:        "string",
																												GoName:      "AlignmentPeriod",
																												Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																											},
																											"crossSeriesReducer": &dcl.Property{
																												Type:        "string",
																												GoName:      "CrossSeriesReducer",
																												GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum",
																												Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																												Enum: []string{
																													"REDUCE_NONE",
																													"REDUCE_MEAN",
																													"REDUCE_MIN",
																													"REDUCE_MAX",
																													"REDUCE_SUM",
																													"REDUCE_STDDEV",
																													"REDUCE_COUNT",
																													"REDUCE_COUNT_TRUE",
																													"REDUCE_COUNT_FALSE",
																													"REDUCE_FRACTION_TRUE",
																													"REDUCE_PERCENTILE_99",
																													"REDUCE_PERCENTILE_95",
																													"REDUCE_PERCENTILE_50",
																													"REDUCE_PERCENTILE_05",
																													"REDUCE_FRACTION_LESS_THAN",
																													"REDUCE_MAKE_DISTRIBUTION",
																												},
																											},
																											"groupByFields": &dcl.Property{
																												Type:        "array",
																												GoName:      "GroupByFields",
																												Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																												SendEmpty:   true,
																												ListType:    "list",
																												Items: &dcl.Property{
																													Type:   "string",
																													GoType: "string",
																												},
																											},
																											"perSeriesAligner": &dcl.Property{
																												Type:        "string",
																												GoName:      "PerSeriesAligner",
																												GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum",
																												Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																												Enum: []string{
																													"ALIGN_NONE",
																													"ALIGN_DELTA",
																													"ALIGN_RATE",
																													"ALIGN_INTERPOLATE",
																													"ALIGN_NEXT_OLDER",
																													"ALIGN_MIN",
																													"ALIGN_MAX",
																													"ALIGN_MEAN",
																													"ALIGN_COUNT",
																													"ALIGN_SUM",
																													"ALIGN_STDDEV",
																													"ALIGN_COUNT_TRUE",
																													"ALIGN_COUNT_FALSE",
																													"ALIGN_FRACTION_TRUE",
																													"ALIGN_PERCENTILE_99",
																													"ALIGN_PERCENTILE_95",
																													"ALIGN_PERCENTILE_50",
																													"ALIGN_PERCENTILE_05",
																													"ALIGN_MAKE_DISTRIBUTION",
																													"ALIGN_PERCENT_CHANGE",
																												},
																											},
																										},
																									},
																									"filter": &dcl.Property{
																										Type:        "string",
																										GoName:      "Filter",
																										Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																									},
																								},
																							},
																							"numerator": &dcl.Property{
																								Type:        "object",
																								GoName:      "Numerator",
																								GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator",
																								Description: "The numerator of the ratio.",
																								Required: []string{
																									"filter",
																								},
																								Properties: map[string]*dcl.Property{
																									"aggregation": &dcl.Property{
																										Type:        "object",
																										GoName:      "Aggregation",
																										GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation",
																										Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																										Properties: map[string]*dcl.Property{
																											"alignmentPeriod": &dcl.Property{
																												Type:        "string",
																												GoName:      "AlignmentPeriod",
																												Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																											},
																											"crossSeriesReducer": &dcl.Property{
																												Type:        "string",
																												GoName:      "CrossSeriesReducer",
																												GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum",
																												Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																												Enum: []string{
																													"REDUCE_NONE",
																													"REDUCE_MEAN",
																													"REDUCE_MIN",
																													"REDUCE_MAX",
																													"REDUCE_SUM",
																													"REDUCE_STDDEV",
																													"REDUCE_COUNT",
																													"REDUCE_COUNT_TRUE",
																													"REDUCE_COUNT_FALSE",
																													"REDUCE_FRACTION_TRUE",
																													"REDUCE_PERCENTILE_99",
																													"REDUCE_PERCENTILE_95",
																													"REDUCE_PERCENTILE_50",
																													"REDUCE_PERCENTILE_05",
																													"REDUCE_FRACTION_LESS_THAN",
																													"REDUCE_MAKE_DISTRIBUTION",
																												},
																											},
																											"groupByFields": &dcl.Property{
																												Type:        "array",
																												GoName:      "GroupByFields",
																												Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																												SendEmpty:   true,
																												ListType:    "list",
																												Items: &dcl.Property{
																													Type:   "string",
																													GoType: "string",
																												},
																											},
																											"perSeriesAligner": &dcl.Property{
																												Type:        "string",
																												GoName:      "PerSeriesAligner",
																												GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum",
																												Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																												Enum: []string{
																													"ALIGN_NONE",
																													"ALIGN_DELTA",
																													"ALIGN_RATE",
																													"ALIGN_INTERPOLATE",
																													"ALIGN_NEXT_OLDER",
																													"ALIGN_MIN",
																													"ALIGN_MAX",
																													"ALIGN_MEAN",
																													"ALIGN_COUNT",
																													"ALIGN_SUM",
																													"ALIGN_STDDEV",
																													"ALIGN_COUNT_TRUE",
																													"ALIGN_COUNT_FALSE",
																													"ALIGN_FRACTION_TRUE",
																													"ALIGN_PERCENTILE_99",
																													"ALIGN_PERCENTILE_95",
																													"ALIGN_PERCENTILE_50",
																													"ALIGN_PERCENTILE_05",
																													"ALIGN_MAKE_DISTRIBUTION",
																													"ALIGN_PERCENT_CHANGE",
																												},
																											},
																										},
																									},
																									"filter": &dcl.Property{
																										Type:        "string",
																										GoName:      "Filter",
																										Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																									},
																								},
																							},
																							"pickTimeSeriesFilter": &dcl.Property{
																								Type:        "object",
																								GoName:      "PickTimeSeriesFilter",
																								GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter",
																								Description: "Ranking based time series filter.",
																								Properties: map[string]*dcl.Property{
																									"direction": &dcl.Property{
																										Type:        "string",
																										GoName:      "Direction",
																										GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum",
																										Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																										Enum: []string{
																											"DIRECTION_UNSPECIFIED",
																											"TOP",
																											"BOTTOM",
																										},
																									},
																									"numTimeSeries": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "NumTimeSeries",
																										Description: "How many time series to allow to pass through the filter.",
																									},
																									"rankingMethod": &dcl.Property{
																										Type:        "string",
																										GoName:      "RankingMethod",
																										GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum",
																										Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																										Enum: []string{
																											"METHOD_UNSPECIFIED",
																											"METHOD_MEAN",
																											"METHOD_MAX",
																											"METHOD_MIN",
																											"METHOD_SUM",
																											"METHOD_LATEST",
																										},
																									},
																								},
																							},
																							"secondaryAggregation": &dcl.Property{
																								Type:        "object",
																								GoName:      "SecondaryAggregation",
																								GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation",
																								Description: "Apply a second aggregation after the ratio is computed.",
																								Properties: map[string]*dcl.Property{
																									"alignmentPeriod": &dcl.Property{
																										Type:        "string",
																										GoName:      "AlignmentPeriod",
																										Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																									},
																									"crossSeriesReducer": &dcl.Property{
																										Type:        "string",
																										GoName:      "CrossSeriesReducer",
																										GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum",
																										Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																										Enum: []string{
																											"REDUCE_NONE",
																											"REDUCE_MEAN",
																											"REDUCE_MIN",
																											"REDUCE_MAX",
																											"REDUCE_SUM",
																											"REDUCE_STDDEV",
																											"REDUCE_COUNT",
																											"REDUCE_COUNT_TRUE",
																											"REDUCE_COUNT_FALSE",
																											"REDUCE_FRACTION_TRUE",
																											"REDUCE_PERCENTILE_99",
																											"REDUCE_PERCENTILE_95",
																											"REDUCE_PERCENTILE_50",
																											"REDUCE_PERCENTILE_05",
																											"REDUCE_FRACTION_LESS_THAN",
																											"REDUCE_MAKE_DISTRIBUTION",
																										},
																									},
																									"groupByFields": &dcl.Property{
																										Type:        "array",
																										GoName:      "GroupByFields",
																										Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																										SendEmpty:   true,
																										ListType:    "list",
																										Items: &dcl.Property{
																											Type:   "string",
																											GoType: "string",
																										},
																									},
																									"perSeriesAligner": &dcl.Property{
																										Type:        "string",
																										GoName:      "PerSeriesAligner",
																										GoType:      "DashboardMosaicLayoutTilesWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum",
																										Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																										Enum: []string{
																											"ALIGN_NONE",
																											"ALIGN_DELTA",
																											"ALIGN_RATE",
																											"ALIGN_INTERPOLATE",
																											"ALIGN_NEXT_OLDER",
																											"ALIGN_MIN",
																											"ALIGN_MAX",
																											"ALIGN_MEAN",
																											"ALIGN_COUNT",
																											"ALIGN_SUM",
																											"ALIGN_STDDEV",
																											"ALIGN_COUNT_TRUE",
																											"ALIGN_COUNT_FALSE",
																											"ALIGN_FRACTION_TRUE",
																											"ALIGN_PERCENTILE_99",
																											"ALIGN_PERCENTILE_95",
																											"ALIGN_PERCENTILE_50",
																											"ALIGN_PERCENTILE_05",
																											"ALIGN_MAKE_DISTRIBUTION",
																											"ALIGN_PERCENT_CHANGE",
																										},
																									},
																								},
																							},
																						},
																					},
																					"timeSeriesQueryLanguage": &dcl.Property{
																						Type:        "string",
																						GoName:      "TimeSeriesQueryLanguage",
																						Description: "A query used to fetch time series.",
																					},
																					"unitOverride": &dcl.Property{
																						Type:        "string",
																						GoName:      "UnitOverride",
																						Description: "The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.",
																					},
																				},
																			},
																		},
																	},
																},
																"thresholds": &dcl.Property{
																	Type:        "array",
																	GoName:      "Thresholds",
																	Description: "Threshold lines drawn horizontally across the chart.",
																	SendEmpty:   true,
																	ListType:    "list",
																	Items: &dcl.Property{
																		Type:   "object",
																		GoType: "DashboardMosaicLayoutTilesWidgetXyChartThresholds",
																		Properties: map[string]*dcl.Property{
																			"color": &dcl.Property{
																				Type:        "string",
																				GoName:      "Color",
																				GoType:      "DashboardMosaicLayoutTilesWidgetXyChartThresholdsColorEnum",
																				Description: "The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED",
																				Enum: []string{
																					"COLOR_UNSPECIFIED",
																					"GREY",
																					"BLUE",
																					"GREEN",
																					"YELLOW",
																					"ORANGE",
																					"RED",
																				},
																			},
																			"direction": &dcl.Property{
																				Type:        "string",
																				GoName:      "Direction",
																				GoType:      "DashboardMosaicLayoutTilesWidgetXyChartThresholdsDirectionEnum",
																				Description: "The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW",
																				Enum: []string{
																					"DIRECTION_UNSPECIFIED",
																					"ABOVE",
																					"BELOW",
																				},
																			},
																			"label": &dcl.Property{
																				Type:        "string",
																				GoName:      "Label",
																				Description: "A label for the threshold.",
																			},
																			"value": &dcl.Property{
																				Type:        "number",
																				Format:      "double",
																				GoName:      "Value",
																				Description: "The value of the threshold. The value should be defined in the native scale of the metric.",
																			},
																		},
																	},
																},
																"timeshiftDuration": &dcl.Property{
																	Type:        "string",
																	GoName:      "TimeshiftDuration",
																	Description: "The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.",
																},
																"xAxis": &dcl.Property{
																	Type:        "object",
																	GoName:      "XAxis",
																	GoType:      "DashboardMosaicLayoutTilesWidgetXyChartXAxis",
																	Description: "The properties applied to the X axis.",
																	Properties: map[string]*dcl.Property{
																		"label": &dcl.Property{
																			Type:        "string",
																			GoName:      "Label",
																			Description: "The label of the axis.",
																		},
																		"scale": &dcl.Property{
																			Type:        "string",
																			GoName:      "Scale",
																			GoType:      "DashboardMosaicLayoutTilesWidgetXyChartXAxisScaleEnum",
																			Description: "The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10",
																			Enum: []string{
																				"SCALE_UNSPECIFIED",
																				"LINEAR",
																				"LOG10",
																			},
																		},
																	},
																},
																"yAxis": &dcl.Property{
																	Type:        "object",
																	GoName:      "YAxis",
																	GoType:      "DashboardMosaicLayoutTilesWidgetXyChartYAxis",
																	Description: "The properties applied to the Y axis.",
																	Properties: map[string]*dcl.Property{
																		"label": &dcl.Property{
																			Type:        "string",
																			GoName:      "Label",
																			Description: "The label of the axis.",
																		},
																		"scale": &dcl.Property{
																			Type:        "string",
																			GoName:      "Scale",
																			GoType:      "DashboardMosaicLayoutTilesWidgetXyChartYAxisScaleEnum",
																			Description: "The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10",
																			Enum: []string{
																				"SCALE_UNSPECIFIED",
																				"LINEAR",
																				"LOG10",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												"width": &dcl.Property{
													Type:        "integer",
													Format:      "int64",
													GoName:      "Width",
													Description: "The width of the tile, measured in grid squares.",
												},
												"xPos": &dcl.Property{
													Type:        "integer",
													Format:      "int64",
													GoName:      "XPos",
													Description: "The zero-indexed position of the tile in grid squares relative to the left edge of the grid.",
												},
												"yPos": &dcl.Property{
													Type:        "integer",
													Format:      "int64",
													GoName:      "YPos",
													Description: "The zero-indexed position of the tile in grid squares relative to the top edge of the grid.",
												},
											},
										},
									},
								},
							},
							"name": &dcl.Property{
								Type:        "string",
								GoName:      "Name",
								Description: "Immutable. The resource name of the dashboard.",
								Immutable:   true,
							},
							"project": &dcl.Property{
								Type:        "string",
								GoName:      "Project",
								Description: "The project id of the resource.",
								Immutable:   true,
								ResourceReferences: []*dcl.PropertyResourceReference{
									&dcl.PropertyResourceReference{
										Resource: "Cloudresourcemanager/Project",
										Field:    "name",
										Parent:   true,
									},
								},
							},
							"rowLayout": &dcl.Property{
								Type:        "object",
								GoName:      "RowLayout",
								GoType:      "DashboardRowLayout",
								Description: "The content is divided into equally spaced rows and the widgets are arranged horizontally.",
								Conflicts: []string{
									"gridLayout",
									"mosaicLayout",
									"columnLayout",
								},
								Properties: map[string]*dcl.Property{
									"rows": &dcl.Property{
										Type:        "array",
										GoName:      "Rows",
										Description: "The rows of content to display.",
										SendEmpty:   true,
										ListType:    "list",
										Items: &dcl.Property{
											Type:   "object",
											GoType: "DashboardRowLayoutRows",
											Properties: map[string]*dcl.Property{
												"weight": &dcl.Property{
													Type:        "integer",
													Format:      "int64",
													GoName:      "Weight",
													Description: "The relative weight of this row. The row weight is used to adjust the height of rows on the screen (relative to peers). Greater the weight, greater the height of the row on the screen. If omitted, a value of 1 is used while rendering.",
												},
												"widgets": &dcl.Property{
													Type:        "array",
													GoName:      "Widgets",
													Description: "The display widgets arranged horizontally in this row.",
													SendEmpty:   true,
													ListType:    "list",
													Items: &dcl.Property{
														Type:   "object",
														GoType: "DashboardRowLayoutRowsWidgets",
														Properties: map[string]*dcl.Property{
															"blank": &dcl.Property{
																Type:        "object",
																GoName:      "Blank",
																GoType:      "DashboardRowLayoutRowsWidgetsBlank",
																Description: "A blank space.",
																Conflicts: []string{
																	"xyChart",
																	"scorecard",
																	"text",
																	"logsPanel",
																},
																Properties: map[string]*dcl.Property{},
															},
															"logsPanel": &dcl.Property{
																Type:   "object",
																GoName: "LogsPanel",
																GoType: "DashboardRowLayoutRowsWidgetsLogsPanel",
																Conflicts: []string{
																	"xyChart",
																	"scorecard",
																	"text",
																	"blank",
																},
																Properties: map[string]*dcl.Property{
																	"filter": &dcl.Property{
																		Type:        "string",
																		GoName:      "Filter",
																		Description: "A filter that chooses which log entries to return. See [Advanced Logs Queries](https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.",
																	},
																	"resourceNames": &dcl.Property{
																		Type:        "array",
																		GoName:      "ResourceNames",
																		Description: "The names of logging resources to collect logs for. Currently only projects are supported. If empty, the widget will default to the host project.",
																		SendEmpty:   true,
																		ListType:    "list",
																		Items: &dcl.Property{
																			Type:   "string",
																			GoType: "string",
																			ResourceReferences: []*dcl.PropertyResourceReference{
																				&dcl.PropertyResourceReference{
																					Resource: "Cloudresourcemanager/Project",
																					Field:    "name",
																				},
																			},
																		},
																	},
																},
															},
															"scorecard": &dcl.Property{
																Type:        "object",
																GoName:      "Scorecard",
																GoType:      "DashboardRowLayoutRowsWidgetsScorecard",
																Description: "A scorecard summarizing time series data.",
																Conflicts: []string{
																	"xyChart",
																	"text",
																	"blank",
																	"logsPanel",
																},
																Required: []string{
																	"timeSeriesQuery",
																},
																Properties: map[string]*dcl.Property{
																	"gaugeView": &dcl.Property{
																		Type:        "object",
																		GoName:      "GaugeView",
																		GoType:      "DashboardRowLayoutRowsWidgetsScorecardGaugeView",
																		Description: "Will cause the scorecard to show a gauge chart.",
																		Properties: map[string]*dcl.Property{
																			"lowerBound": &dcl.Property{
																				Type:        "number",
																				Format:      "double",
																				GoName:      "LowerBound",
																				Description: "The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.",
																			},
																			"upperBound": &dcl.Property{
																				Type:        "number",
																				Format:      "double",
																				GoName:      "UpperBound",
																				Description: "The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.",
																			},
																		},
																	},
																	"sparkChartView": &dcl.Property{
																		Type:        "object",
																		GoName:      "SparkChartView",
																		GoType:      "DashboardRowLayoutRowsWidgetsScorecardSparkChartView",
																		Description: "Will cause the scorecard to show a spark chart.",
																		Required: []string{
																			"sparkChartType",
																		},
																		Properties: map[string]*dcl.Property{
																			"minAlignmentPeriod": &dcl.Property{
																				Type:        "string",
																				GoName:      "MinAlignmentPeriod",
																				Description: "The lower bound on data point frequency in the chart implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes it would not make sense to fetch and align data at one minute intervals. This field is optional and exists only as a hint.",
																			},
																			"sparkChartType": &dcl.Property{
																				Type:        "string",
																				GoName:      "SparkChartType",
																				GoType:      "DashboardRowLayoutRowsWidgetsScorecardSparkChartViewSparkChartTypeEnum",
																				Description: "Required. The type of sparkchart to show in this chartView. Possible values: SPARK_CHART_TYPE_UNSPECIFIED, SPARK_LINE, SPARK_BAR",
																				Enum: []string{
																					"SPARK_CHART_TYPE_UNSPECIFIED",
																					"SPARK_LINE",
																					"SPARK_BAR",
																				},
																			},
																		},
																	},
																	"thresholds": &dcl.Property{
																		Type:        "array",
																		GoName:      "Thresholds",
																		Description: "The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)  As an example, consider a scorecard with the following four thresholds: {   value: 90,   category: 'DANGER',   trigger: 'ABOVE', },: {   value: 70,   category: 'WARNING',   trigger: 'ABOVE', }, {   value: 10,   category: 'DANGER',   trigger: 'BELOW', }, {   value: 20,   category: 'WARNING',   trigger: 'BELOW', }  Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.",
																		SendEmpty:   true,
																		ListType:    "list",
																		Items: &dcl.Property{
																			Type:   "object",
																			GoType: "DashboardRowLayoutRowsWidgetsScorecardThresholds",
																			Properties: map[string]*dcl.Property{
																				"color": &dcl.Property{
																					Type:        "string",
																					GoName:      "Color",
																					GoType:      "DashboardRowLayoutRowsWidgetsScorecardThresholdsColorEnum",
																					Description: "The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED",
																					Enum: []string{
																						"COLOR_UNSPECIFIED",
																						"GREY",
																						"BLUE",
																						"GREEN",
																						"YELLOW",
																						"ORANGE",
																						"RED",
																					},
																				},
																				"direction": &dcl.Property{
																					Type:        "string",
																					GoName:      "Direction",
																					GoType:      "DashboardRowLayoutRowsWidgetsScorecardThresholdsDirectionEnum",
																					Description: "The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW",
																					Enum: []string{
																						"DIRECTION_UNSPECIFIED",
																						"ABOVE",
																						"BELOW",
																					},
																				},
																				"label": &dcl.Property{
																					Type:        "string",
																					GoName:      "Label",
																					Description: "A label for the threshold.",
																				},
																				"value": &dcl.Property{
																					Type:        "number",
																					Format:      "double",
																					GoName:      "Value",
																					Description: "The value of the threshold. The value should be defined in the native scale of the metric.",
																				},
																			},
																		},
																	},
																	"timeSeriesQuery": &dcl.Property{
																		Type:        "object",
																		GoName:      "TimeSeriesQuery",
																		GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQuery",
																		Description: "Required. Fields for querying time series data from the Stackdriver metrics API.",
																		Properties: map[string]*dcl.Property{
																			"timeSeriesFilter": &dcl.Property{
																				Type:        "object",
																				GoName:      "TimeSeriesFilter",
																				GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilter",
																				Description: "Filter parameters to fetch time series.",
																				Required: []string{
																					"filter",
																				},
																				Properties: map[string]*dcl.Property{
																					"aggregation": &dcl.Property{
																						Type:        "object",
																						GoName:      "Aggregation",
																						GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterAggregation",
																						Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																						Properties: map[string]*dcl.Property{
																							"alignmentPeriod": &dcl.Property{
																								Type:        "string",
																								GoName:      "AlignmentPeriod",
																								Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																							},
																							"crossSeriesReducer": &dcl.Property{
																								Type:        "string",
																								GoName:      "CrossSeriesReducer",
																								GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum",
																								Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																								Enum: []string{
																									"REDUCE_NONE",
																									"REDUCE_MEAN",
																									"REDUCE_MIN",
																									"REDUCE_MAX",
																									"REDUCE_SUM",
																									"REDUCE_STDDEV",
																									"REDUCE_COUNT",
																									"REDUCE_COUNT_TRUE",
																									"REDUCE_COUNT_FALSE",
																									"REDUCE_FRACTION_TRUE",
																									"REDUCE_PERCENTILE_99",
																									"REDUCE_PERCENTILE_95",
																									"REDUCE_PERCENTILE_50",
																									"REDUCE_PERCENTILE_05",
																									"REDUCE_FRACTION_LESS_THAN",
																									"REDUCE_MAKE_DISTRIBUTION",
																								},
																							},
																							"groupByFields": &dcl.Property{
																								Type:        "array",
																								GoName:      "GroupByFields",
																								Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																								SendEmpty:   true,
																								ListType:    "list",
																								Items: &dcl.Property{
																									Type:   "string",
																									GoType: "string",
																								},
																							},
																							"perSeriesAligner": &dcl.Property{
																								Type:        "string",
																								GoName:      "PerSeriesAligner",
																								GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum",
																								Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																								Enum: []string{
																									"ALIGN_NONE",
																									"ALIGN_DELTA",
																									"ALIGN_RATE",
																									"ALIGN_INTERPOLATE",
																									"ALIGN_NEXT_OLDER",
																									"ALIGN_MIN",
																									"ALIGN_MAX",
																									"ALIGN_MEAN",
																									"ALIGN_COUNT",
																									"ALIGN_SUM",
																									"ALIGN_STDDEV",
																									"ALIGN_COUNT_TRUE",
																									"ALIGN_COUNT_FALSE",
																									"ALIGN_FRACTION_TRUE",
																									"ALIGN_PERCENTILE_99",
																									"ALIGN_PERCENTILE_95",
																									"ALIGN_PERCENTILE_50",
																									"ALIGN_PERCENTILE_05",
																									"ALIGN_MAKE_DISTRIBUTION",
																									"ALIGN_PERCENT_CHANGE",
																								},
																							},
																						},
																					},
																					"filter": &dcl.Property{
																						Type:        "string",
																						GoName:      "Filter",
																						Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																					},
																					"pickTimeSeriesFilter": &dcl.Property{
																						Type:        "object",
																						GoName:      "PickTimeSeriesFilter",
																						GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter",
																						Description: "Ranking based time series filter.",
																						Properties: map[string]*dcl.Property{
																							"direction": &dcl.Property{
																								Type:        "string",
																								GoName:      "Direction",
																								GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum",
																								Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																								Enum: []string{
																									"DIRECTION_UNSPECIFIED",
																									"TOP",
																									"BOTTOM",
																								},
																							},
																							"numTimeSeries": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "NumTimeSeries",
																								Description: "How many time series to allow to pass through the filter.",
																							},
																							"rankingMethod": &dcl.Property{
																								Type:        "string",
																								GoName:      "RankingMethod",
																								GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum",
																								Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																								Enum: []string{
																									"METHOD_UNSPECIFIED",
																									"METHOD_MEAN",
																									"METHOD_MAX",
																									"METHOD_MIN",
																									"METHOD_SUM",
																									"METHOD_LATEST",
																								},
																							},
																						},
																					},
																					"secondaryAggregation": &dcl.Property{
																						Type:        "object",
																						GoName:      "SecondaryAggregation",
																						GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation",
																						Description: "Apply a second aggregation after `aggregation` is applied.",
																						Properties: map[string]*dcl.Property{
																							"alignmentPeriod": &dcl.Property{
																								Type:        "string",
																								GoName:      "AlignmentPeriod",
																								Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																							},
																							"crossSeriesReducer": &dcl.Property{
																								Type:        "string",
																								GoName:      "CrossSeriesReducer",
																								GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum",
																								Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																								Enum: []string{
																									"REDUCE_NONE",
																									"REDUCE_MEAN",
																									"REDUCE_MIN",
																									"REDUCE_MAX",
																									"REDUCE_SUM",
																									"REDUCE_STDDEV",
																									"REDUCE_COUNT",
																									"REDUCE_COUNT_TRUE",
																									"REDUCE_COUNT_FALSE",
																									"REDUCE_FRACTION_TRUE",
																									"REDUCE_PERCENTILE_99",
																									"REDUCE_PERCENTILE_95",
																									"REDUCE_PERCENTILE_50",
																									"REDUCE_PERCENTILE_05",
																									"REDUCE_FRACTION_LESS_THAN",
																									"REDUCE_MAKE_DISTRIBUTION",
																								},
																							},
																							"groupByFields": &dcl.Property{
																								Type:        "array",
																								GoName:      "GroupByFields",
																								Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																								SendEmpty:   true,
																								ListType:    "list",
																								Items: &dcl.Property{
																									Type:   "string",
																									GoType: "string",
																								},
																							},
																							"perSeriesAligner": &dcl.Property{
																								Type:        "string",
																								GoName:      "PerSeriesAligner",
																								GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum",
																								Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																								Enum: []string{
																									"ALIGN_NONE",
																									"ALIGN_DELTA",
																									"ALIGN_RATE",
																									"ALIGN_INTERPOLATE",
																									"ALIGN_NEXT_OLDER",
																									"ALIGN_MIN",
																									"ALIGN_MAX",
																									"ALIGN_MEAN",
																									"ALIGN_COUNT",
																									"ALIGN_SUM",
																									"ALIGN_STDDEV",
																									"ALIGN_COUNT_TRUE",
																									"ALIGN_COUNT_FALSE",
																									"ALIGN_FRACTION_TRUE",
																									"ALIGN_PERCENTILE_99",
																									"ALIGN_PERCENTILE_95",
																									"ALIGN_PERCENTILE_50",
																									"ALIGN_PERCENTILE_05",
																									"ALIGN_MAKE_DISTRIBUTION",
																									"ALIGN_PERCENT_CHANGE",
																								},
																							},
																						},
																					},
																				},
																			},
																			"timeSeriesFilterRatio": &dcl.Property{
																				Type:        "object",
																				GoName:      "TimeSeriesFilterRatio",
																				GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatio",
																				Description: "Parameters to fetch a ratio between two time series filters.",
																				Properties: map[string]*dcl.Property{
																					"denominator": &dcl.Property{
																						Type:        "object",
																						GoName:      "Denominator",
																						GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator",
																						Description: "The denominator of the ratio.",
																						Required: []string{
																							"filter",
																						},
																						Properties: map[string]*dcl.Property{
																							"aggregation": &dcl.Property{
																								Type:        "object",
																								GoName:      "Aggregation",
																								GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation",
																								Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																								Properties: map[string]*dcl.Property{
																									"alignmentPeriod": &dcl.Property{
																										Type:        "string",
																										GoName:      "AlignmentPeriod",
																										Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																									},
																									"crossSeriesReducer": &dcl.Property{
																										Type:        "string",
																										GoName:      "CrossSeriesReducer",
																										GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum",
																										Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																										Enum: []string{
																											"REDUCE_NONE",
																											"REDUCE_MEAN",
																											"REDUCE_MIN",
																											"REDUCE_MAX",
																											"REDUCE_SUM",
																											"REDUCE_STDDEV",
																											"REDUCE_COUNT",
																											"REDUCE_COUNT_TRUE",
																											"REDUCE_COUNT_FALSE",
																											"REDUCE_FRACTION_TRUE",
																											"REDUCE_PERCENTILE_99",
																											"REDUCE_PERCENTILE_95",
																											"REDUCE_PERCENTILE_50",
																											"REDUCE_PERCENTILE_05",
																											"REDUCE_FRACTION_LESS_THAN",
																											"REDUCE_MAKE_DISTRIBUTION",
																										},
																									},
																									"groupByFields": &dcl.Property{
																										Type:        "array",
																										GoName:      "GroupByFields",
																										Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																										SendEmpty:   true,
																										ListType:    "list",
																										Items: &dcl.Property{
																											Type:   "string",
																											GoType: "string",
																										},
																									},
																									"perSeriesAligner": &dcl.Property{
																										Type:        "string",
																										GoName:      "PerSeriesAligner",
																										GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum",
																										Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																										Enum: []string{
																											"ALIGN_NONE",
																											"ALIGN_DELTA",
																											"ALIGN_RATE",
																											"ALIGN_INTERPOLATE",
																											"ALIGN_NEXT_OLDER",
																											"ALIGN_MIN",
																											"ALIGN_MAX",
																											"ALIGN_MEAN",
																											"ALIGN_COUNT",
																											"ALIGN_SUM",
																											"ALIGN_STDDEV",
																											"ALIGN_COUNT_TRUE",
																											"ALIGN_COUNT_FALSE",
																											"ALIGN_FRACTION_TRUE",
																											"ALIGN_PERCENTILE_99",
																											"ALIGN_PERCENTILE_95",
																											"ALIGN_PERCENTILE_50",
																											"ALIGN_PERCENTILE_05",
																											"ALIGN_MAKE_DISTRIBUTION",
																											"ALIGN_PERCENT_CHANGE",
																										},
																									},
																								},
																							},
																							"filter": &dcl.Property{
																								Type:        "string",
																								GoName:      "Filter",
																								Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																							},
																						},
																					},
																					"numerator": &dcl.Property{
																						Type:        "object",
																						GoName:      "Numerator",
																						GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator",
																						Description: "The numerator of the ratio.",
																						Required: []string{
																							"filter",
																						},
																						Properties: map[string]*dcl.Property{
																							"aggregation": &dcl.Property{
																								Type:        "object",
																								GoName:      "Aggregation",
																								GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation",
																								Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																								Properties: map[string]*dcl.Property{
																									"alignmentPeriod": &dcl.Property{
																										Type:        "string",
																										GoName:      "AlignmentPeriod",
																										Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																									},
																									"crossSeriesReducer": &dcl.Property{
																										Type:        "string",
																										GoName:      "CrossSeriesReducer",
																										GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum",
																										Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																										Enum: []string{
																											"REDUCE_NONE",
																											"REDUCE_MEAN",
																											"REDUCE_MIN",
																											"REDUCE_MAX",
																											"REDUCE_SUM",
																											"REDUCE_STDDEV",
																											"REDUCE_COUNT",
																											"REDUCE_COUNT_TRUE",
																											"REDUCE_COUNT_FALSE",
																											"REDUCE_FRACTION_TRUE",
																											"REDUCE_PERCENTILE_99",
																											"REDUCE_PERCENTILE_95",
																											"REDUCE_PERCENTILE_50",
																											"REDUCE_PERCENTILE_05",
																											"REDUCE_FRACTION_LESS_THAN",
																											"REDUCE_MAKE_DISTRIBUTION",
																										},
																									},
																									"groupByFields": &dcl.Property{
																										Type:        "array",
																										GoName:      "GroupByFields",
																										Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																										SendEmpty:   true,
																										ListType:    "list",
																										Items: &dcl.Property{
																											Type:   "string",
																											GoType: "string",
																										},
																									},
																									"perSeriesAligner": &dcl.Property{
																										Type:        "string",
																										GoName:      "PerSeriesAligner",
																										GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum",
																										Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																										Enum: []string{
																											"ALIGN_NONE",
																											"ALIGN_DELTA",
																											"ALIGN_RATE",
																											"ALIGN_INTERPOLATE",
																											"ALIGN_NEXT_OLDER",
																											"ALIGN_MIN",
																											"ALIGN_MAX",
																											"ALIGN_MEAN",
																											"ALIGN_COUNT",
																											"ALIGN_SUM",
																											"ALIGN_STDDEV",
																											"ALIGN_COUNT_TRUE",
																											"ALIGN_COUNT_FALSE",
																											"ALIGN_FRACTION_TRUE",
																											"ALIGN_PERCENTILE_99",
																											"ALIGN_PERCENTILE_95",
																											"ALIGN_PERCENTILE_50",
																											"ALIGN_PERCENTILE_05",
																											"ALIGN_MAKE_DISTRIBUTION",
																											"ALIGN_PERCENT_CHANGE",
																										},
																									},
																								},
																							},
																							"filter": &dcl.Property{
																								Type:        "string",
																								GoName:      "Filter",
																								Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																							},
																						},
																					},
																					"pickTimeSeriesFilter": &dcl.Property{
																						Type:        "object",
																						GoName:      "PickTimeSeriesFilter",
																						GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter",
																						Description: "Ranking based time series filter.",
																						Properties: map[string]*dcl.Property{
																							"direction": &dcl.Property{
																								Type:        "string",
																								GoName:      "Direction",
																								GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum",
																								Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																								Enum: []string{
																									"DIRECTION_UNSPECIFIED",
																									"TOP",
																									"BOTTOM",
																								},
																							},
																							"numTimeSeries": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "NumTimeSeries",
																								Description: "How many time series to allow to pass through the filter.",
																							},
																							"rankingMethod": &dcl.Property{
																								Type:        "string",
																								GoName:      "RankingMethod",
																								GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum",
																								Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																								Enum: []string{
																									"METHOD_UNSPECIFIED",
																									"METHOD_MEAN",
																									"METHOD_MAX",
																									"METHOD_MIN",
																									"METHOD_SUM",
																									"METHOD_LATEST",
																								},
																							},
																						},
																					},
																					"secondaryAggregation": &dcl.Property{
																						Type:        "object",
																						GoName:      "SecondaryAggregation",
																						GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation",
																						Description: "Apply a second aggregation after the ratio is computed.",
																						Properties: map[string]*dcl.Property{
																							"alignmentPeriod": &dcl.Property{
																								Type:        "string",
																								GoName:      "AlignmentPeriod",
																								Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																							},
																							"crossSeriesReducer": &dcl.Property{
																								Type:        "string",
																								GoName:      "CrossSeriesReducer",
																								GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum",
																								Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																								Enum: []string{
																									"REDUCE_NONE",
																									"REDUCE_MEAN",
																									"REDUCE_MIN",
																									"REDUCE_MAX",
																									"REDUCE_SUM",
																									"REDUCE_STDDEV",
																									"REDUCE_COUNT",
																									"REDUCE_COUNT_TRUE",
																									"REDUCE_COUNT_FALSE",
																									"REDUCE_FRACTION_TRUE",
																									"REDUCE_PERCENTILE_99",
																									"REDUCE_PERCENTILE_95",
																									"REDUCE_PERCENTILE_50",
																									"REDUCE_PERCENTILE_05",
																									"REDUCE_FRACTION_LESS_THAN",
																									"REDUCE_MAKE_DISTRIBUTION",
																								},
																							},
																							"groupByFields": &dcl.Property{
																								Type:        "array",
																								GoName:      "GroupByFields",
																								Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																								SendEmpty:   true,
																								ListType:    "list",
																								Items: &dcl.Property{
																									Type:   "string",
																									GoType: "string",
																								},
																							},
																							"perSeriesAligner": &dcl.Property{
																								Type:        "string",
																								GoName:      "PerSeriesAligner",
																								GoType:      "DashboardRowLayoutRowsWidgetsScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum",
																								Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																								Enum: []string{
																									"ALIGN_NONE",
																									"ALIGN_DELTA",
																									"ALIGN_RATE",
																									"ALIGN_INTERPOLATE",
																									"ALIGN_NEXT_OLDER",
																									"ALIGN_MIN",
																									"ALIGN_MAX",
																									"ALIGN_MEAN",
																									"ALIGN_COUNT",
																									"ALIGN_SUM",
																									"ALIGN_STDDEV",
																									"ALIGN_COUNT_TRUE",
																									"ALIGN_COUNT_FALSE",
																									"ALIGN_FRACTION_TRUE",
																									"ALIGN_PERCENTILE_99",
																									"ALIGN_PERCENTILE_95",
																									"ALIGN_PERCENTILE_50",
																									"ALIGN_PERCENTILE_05",
																									"ALIGN_MAKE_DISTRIBUTION",
																									"ALIGN_PERCENT_CHANGE",
																								},
																							},
																						},
																					},
																				},
																			},
																			"timeSeriesQueryLanguage": &dcl.Property{
																				Type:        "string",
																				GoName:      "TimeSeriesQueryLanguage",
																				Description: "A query used to fetch time series.",
																			},
																			"unitOverride": &dcl.Property{
																				Type:        "string",
																				GoName:      "UnitOverride",
																				Description: "The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.",
																			},
																		},
																	},
																},
															},
															"text": &dcl.Property{
																Type:        "object",
																GoName:      "Text",
																GoType:      "DashboardRowLayoutRowsWidgetsText",
																Description: "A raw string or markdown displaying textual content.",
																Conflicts: []string{
																	"xyChart",
																	"scorecard",
																	"blank",
																	"logsPanel",
																},
																Properties: map[string]*dcl.Property{
																	"content": &dcl.Property{
																		Type:        "string",
																		GoName:      "Content",
																		Description: "The text content to be displayed.",
																	},
																	"format": &dcl.Property{
																		Type:        "string",
																		GoName:      "Format",
																		GoType:      "DashboardRowLayoutRowsWidgetsTextFormatEnum",
																		Description: "How the text content is formatted. Possible values: FORMAT_UNSPECIFIED, MARKDOWN, RAW",
																		Enum: []string{
																			"FORMAT_UNSPECIFIED",
																			"MARKDOWN",
																			"RAW",
																		},
																	},
																},
															},
															"title": &dcl.Property{
																Type:        "string",
																GoName:      "Title",
																Description: "Optional. The title of the widget.",
															},
															"xyChart": &dcl.Property{
																Type:        "object",
																GoName:      "XyChart",
																GoType:      "DashboardRowLayoutRowsWidgetsXyChart",
																Description: "A chart of time series data.",
																Conflicts: []string{
																	"scorecard",
																	"text",
																	"blank",
																	"logsPanel",
																},
																Required: []string{
																	"dataSets",
																},
																Properties: map[string]*dcl.Property{
																	"chartOptions": &dcl.Property{
																		Type:        "object",
																		GoName:      "ChartOptions",
																		GoType:      "DashboardRowLayoutRowsWidgetsXyChartChartOptions",
																		Description: "Display options for the chart.",
																		Properties: map[string]*dcl.Property{
																			"mode": &dcl.Property{
																				Type:        "string",
																				GoName:      "Mode",
																				GoType:      "DashboardRowLayoutRowsWidgetsXyChartChartOptionsModeEnum",
																				Description: "The chart mode. Possible values: MODE_UNSPECIFIED, COLOR, X_RAY, STATS",
																				Enum: []string{
																					"MODE_UNSPECIFIED",
																					"COLOR",
																					"X_RAY",
																					"STATS",
																				},
																			},
																		},
																	},
																	"dataSets": &dcl.Property{
																		Type:        "array",
																		GoName:      "DataSets",
																		Description: "Required. The data displayed in this chart.",
																		SendEmpty:   true,
																		ListType:    "list",
																		Items: &dcl.Property{
																			Type:   "object",
																			GoType: "DashboardRowLayoutRowsWidgetsXyChartDataSets",
																			Required: []string{
																				"timeSeriesQuery",
																			},
																			Properties: map[string]*dcl.Property{
																				"legendTemplate": &dcl.Property{
																					Type:        "string",
																					GoName:      "LegendTemplate",
																					Description: "A template string for naming `TimeSeries` in the resulting data set. This should be a string with interpolations of the form `${label_name}`, which will resolve to the label's value. ",
																				},
																				"minAlignmentPeriod": &dcl.Property{
																					Type:        "string",
																					GoName:      "MinAlignmentPeriod",
																					Description: "Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the `min_alignment_period` should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.",
																				},
																				"plotType": &dcl.Property{
																					Type:        "string",
																					GoName:      "PlotType",
																					GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsPlotTypeEnum",
																					Description: "How this data should be plotted on the chart. Possible values: PLOT_TYPE_UNSPECIFIED, LINE, STACKED_AREA, STACKED_BAR, HEATMAP",
																					Enum: []string{
																						"PLOT_TYPE_UNSPECIFIED",
																						"LINE",
																						"STACKED_AREA",
																						"STACKED_BAR",
																						"HEATMAP",
																					},
																				},
																				"timeSeriesQuery": &dcl.Property{
																					Type:        "object",
																					GoName:      "TimeSeriesQuery",
																					GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQuery",
																					Description: "Required. Fields for querying time series data from the Stackdriver metrics API.",
																					Properties: map[string]*dcl.Property{
																						"timeSeriesFilter": &dcl.Property{
																							Type:        "object",
																							GoName:      "TimeSeriesFilter",
																							GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilter",
																							Description: "Filter parameters to fetch time series.",
																							Required: []string{
																								"filter",
																							},
																							Properties: map[string]*dcl.Property{
																								"aggregation": &dcl.Property{
																									Type:        "object",
																									GoName:      "Aggregation",
																									GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation",
																									Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																									Properties: map[string]*dcl.Property{
																										"alignmentPeriod": &dcl.Property{
																											Type:        "string",
																											GoName:      "AlignmentPeriod",
																											Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																										},
																										"crossSeriesReducer": &dcl.Property{
																											Type:        "string",
																											GoName:      "CrossSeriesReducer",
																											GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum",
																											Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																											Enum: []string{
																												"REDUCE_NONE",
																												"REDUCE_MEAN",
																												"REDUCE_MIN",
																												"REDUCE_MAX",
																												"REDUCE_SUM",
																												"REDUCE_STDDEV",
																												"REDUCE_COUNT",
																												"REDUCE_COUNT_TRUE",
																												"REDUCE_COUNT_FALSE",
																												"REDUCE_FRACTION_TRUE",
																												"REDUCE_PERCENTILE_99",
																												"REDUCE_PERCENTILE_95",
																												"REDUCE_PERCENTILE_50",
																												"REDUCE_PERCENTILE_05",
																												"REDUCE_FRACTION_LESS_THAN",
																												"REDUCE_MAKE_DISTRIBUTION",
																											},
																										},
																										"groupByFields": &dcl.Property{
																											Type:        "array",
																											GoName:      "GroupByFields",
																											Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																											SendEmpty:   true,
																											ListType:    "list",
																											Items: &dcl.Property{
																												Type:   "string",
																												GoType: "string",
																											},
																										},
																										"perSeriesAligner": &dcl.Property{
																											Type:        "string",
																											GoName:      "PerSeriesAligner",
																											GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum",
																											Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																											Enum: []string{
																												"ALIGN_NONE",
																												"ALIGN_DELTA",
																												"ALIGN_RATE",
																												"ALIGN_INTERPOLATE",
																												"ALIGN_NEXT_OLDER",
																												"ALIGN_MIN",
																												"ALIGN_MAX",
																												"ALIGN_MEAN",
																												"ALIGN_COUNT",
																												"ALIGN_SUM",
																												"ALIGN_STDDEV",
																												"ALIGN_COUNT_TRUE",
																												"ALIGN_COUNT_FALSE",
																												"ALIGN_FRACTION_TRUE",
																												"ALIGN_PERCENTILE_99",
																												"ALIGN_PERCENTILE_95",
																												"ALIGN_PERCENTILE_50",
																												"ALIGN_PERCENTILE_05",
																												"ALIGN_MAKE_DISTRIBUTION",
																												"ALIGN_PERCENT_CHANGE",
																											},
																										},
																									},
																								},
																								"filter": &dcl.Property{
																									Type:        "string",
																									GoName:      "Filter",
																									Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																								},
																								"pickTimeSeriesFilter": &dcl.Property{
																									Type:        "object",
																									GoName:      "PickTimeSeriesFilter",
																									GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter",
																									Description: "Ranking based time series filter.",
																									Properties: map[string]*dcl.Property{
																										"direction": &dcl.Property{
																											Type:        "string",
																											GoName:      "Direction",
																											GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum",
																											Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																											Enum: []string{
																												"DIRECTION_UNSPECIFIED",
																												"TOP",
																												"BOTTOM",
																											},
																										},
																										"numTimeSeries": &dcl.Property{
																											Type:        "integer",
																											Format:      "int64",
																											GoName:      "NumTimeSeries",
																											Description: "How many time series to allow to pass through the filter.",
																										},
																										"rankingMethod": &dcl.Property{
																											Type:        "string",
																											GoName:      "RankingMethod",
																											GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum",
																											Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																											Enum: []string{
																												"METHOD_UNSPECIFIED",
																												"METHOD_MEAN",
																												"METHOD_MAX",
																												"METHOD_MIN",
																												"METHOD_SUM",
																												"METHOD_LATEST",
																											},
																										},
																									},
																								},
																								"secondaryAggregation": &dcl.Property{
																									Type:        "object",
																									GoName:      "SecondaryAggregation",
																									GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation",
																									Description: "Apply a second aggregation after `aggregation` is applied.",
																									Properties: map[string]*dcl.Property{
																										"alignmentPeriod": &dcl.Property{
																											Type:        "string",
																											GoName:      "AlignmentPeriod",
																											Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																										},
																										"crossSeriesReducer": &dcl.Property{
																											Type:        "string",
																											GoName:      "CrossSeriesReducer",
																											GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum",
																											Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																											Enum: []string{
																												"REDUCE_NONE",
																												"REDUCE_MEAN",
																												"REDUCE_MIN",
																												"REDUCE_MAX",
																												"REDUCE_SUM",
																												"REDUCE_STDDEV",
																												"REDUCE_COUNT",
																												"REDUCE_COUNT_TRUE",
																												"REDUCE_COUNT_FALSE",
																												"REDUCE_FRACTION_TRUE",
																												"REDUCE_PERCENTILE_99",
																												"REDUCE_PERCENTILE_95",
																												"REDUCE_PERCENTILE_50",
																												"REDUCE_PERCENTILE_05",
																												"REDUCE_FRACTION_LESS_THAN",
																												"REDUCE_MAKE_DISTRIBUTION",
																											},
																										},
																										"groupByFields": &dcl.Property{
																											Type:        "array",
																											GoName:      "GroupByFields",
																											Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																											SendEmpty:   true,
																											ListType:    "list",
																											Items: &dcl.Property{
																												Type:   "string",
																												GoType: "string",
																											},
																										},
																										"perSeriesAligner": &dcl.Property{
																											Type:        "string",
																											GoName:      "PerSeriesAligner",
																											GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum",
																											Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																											Enum: []string{
																												"ALIGN_NONE",
																												"ALIGN_DELTA",
																												"ALIGN_RATE",
																												"ALIGN_INTERPOLATE",
																												"ALIGN_NEXT_OLDER",
																												"ALIGN_MIN",
																												"ALIGN_MAX",
																												"ALIGN_MEAN",
																												"ALIGN_COUNT",
																												"ALIGN_SUM",
																												"ALIGN_STDDEV",
																												"ALIGN_COUNT_TRUE",
																												"ALIGN_COUNT_FALSE",
																												"ALIGN_FRACTION_TRUE",
																												"ALIGN_PERCENTILE_99",
																												"ALIGN_PERCENTILE_95",
																												"ALIGN_PERCENTILE_50",
																												"ALIGN_PERCENTILE_05",
																												"ALIGN_MAKE_DISTRIBUTION",
																												"ALIGN_PERCENT_CHANGE",
																											},
																										},
																									},
																								},
																							},
																						},
																						"timeSeriesFilterRatio": &dcl.Property{
																							Type:        "object",
																							GoName:      "TimeSeriesFilterRatio",
																							GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio",
																							Description: "Parameters to fetch a ratio between two time series filters.",
																							Properties: map[string]*dcl.Property{
																								"denominator": &dcl.Property{
																									Type:        "object",
																									GoName:      "Denominator",
																									GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator",
																									Description: "The denominator of the ratio.",
																									Required: []string{
																										"filter",
																									},
																									Properties: map[string]*dcl.Property{
																										"aggregation": &dcl.Property{
																											Type:        "object",
																											GoName:      "Aggregation",
																											GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation",
																											Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																											Properties: map[string]*dcl.Property{
																												"alignmentPeriod": &dcl.Property{
																													Type:        "string",
																													GoName:      "AlignmentPeriod",
																													Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																												},
																												"crossSeriesReducer": &dcl.Property{
																													Type:        "string",
																													GoName:      "CrossSeriesReducer",
																													GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum",
																													Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																													Enum: []string{
																														"REDUCE_NONE",
																														"REDUCE_MEAN",
																														"REDUCE_MIN",
																														"REDUCE_MAX",
																														"REDUCE_SUM",
																														"REDUCE_STDDEV",
																														"REDUCE_COUNT",
																														"REDUCE_COUNT_TRUE",
																														"REDUCE_COUNT_FALSE",
																														"REDUCE_FRACTION_TRUE",
																														"REDUCE_PERCENTILE_99",
																														"REDUCE_PERCENTILE_95",
																														"REDUCE_PERCENTILE_50",
																														"REDUCE_PERCENTILE_05",
																														"REDUCE_FRACTION_LESS_THAN",
																														"REDUCE_MAKE_DISTRIBUTION",
																													},
																												},
																												"groupByFields": &dcl.Property{
																													Type:        "array",
																													GoName:      "GroupByFields",
																													Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																													SendEmpty:   true,
																													ListType:    "list",
																													Items: &dcl.Property{
																														Type:   "string",
																														GoType: "string",
																													},
																												},
																												"perSeriesAligner": &dcl.Property{
																													Type:        "string",
																													GoName:      "PerSeriesAligner",
																													GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum",
																													Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																													Enum: []string{
																														"ALIGN_NONE",
																														"ALIGN_DELTA",
																														"ALIGN_RATE",
																														"ALIGN_INTERPOLATE",
																														"ALIGN_NEXT_OLDER",
																														"ALIGN_MIN",
																														"ALIGN_MAX",
																														"ALIGN_MEAN",
																														"ALIGN_COUNT",
																														"ALIGN_SUM",
																														"ALIGN_STDDEV",
																														"ALIGN_COUNT_TRUE",
																														"ALIGN_COUNT_FALSE",
																														"ALIGN_FRACTION_TRUE",
																														"ALIGN_PERCENTILE_99",
																														"ALIGN_PERCENTILE_95",
																														"ALIGN_PERCENTILE_50",
																														"ALIGN_PERCENTILE_05",
																														"ALIGN_MAKE_DISTRIBUTION",
																														"ALIGN_PERCENT_CHANGE",
																													},
																												},
																											},
																										},
																										"filter": &dcl.Property{
																											Type:        "string",
																											GoName:      "Filter",
																											Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																										},
																									},
																								},
																								"numerator": &dcl.Property{
																									Type:        "object",
																									GoName:      "Numerator",
																									GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator",
																									Description: "The numerator of the ratio.",
																									Required: []string{
																										"filter",
																									},
																									Properties: map[string]*dcl.Property{
																										"aggregation": &dcl.Property{
																											Type:        "object",
																											GoName:      "Aggregation",
																											GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation",
																											Description: "By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.",
																											Properties: map[string]*dcl.Property{
																												"alignmentPeriod": &dcl.Property{
																													Type:        "string",
																													GoName:      "AlignmentPeriod",
																													Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																												},
																												"crossSeriesReducer": &dcl.Property{
																													Type:        "string",
																													GoName:      "CrossSeriesReducer",
																													GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum",
																													Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																													Enum: []string{
																														"REDUCE_NONE",
																														"REDUCE_MEAN",
																														"REDUCE_MIN",
																														"REDUCE_MAX",
																														"REDUCE_SUM",
																														"REDUCE_STDDEV",
																														"REDUCE_COUNT",
																														"REDUCE_COUNT_TRUE",
																														"REDUCE_COUNT_FALSE",
																														"REDUCE_FRACTION_TRUE",
																														"REDUCE_PERCENTILE_99",
																														"REDUCE_PERCENTILE_95",
																														"REDUCE_PERCENTILE_50",
																														"REDUCE_PERCENTILE_05",
																														"REDUCE_FRACTION_LESS_THAN",
																														"REDUCE_MAKE_DISTRIBUTION",
																													},
																												},
																												"groupByFields": &dcl.Property{
																													Type:        "array",
																													GoName:      "GroupByFields",
																													Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																													SendEmpty:   true,
																													ListType:    "list",
																													Items: &dcl.Property{
																														Type:   "string",
																														GoType: "string",
																													},
																												},
																												"perSeriesAligner": &dcl.Property{
																													Type:        "string",
																													GoName:      "PerSeriesAligner",
																													GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum",
																													Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																													Enum: []string{
																														"ALIGN_NONE",
																														"ALIGN_DELTA",
																														"ALIGN_RATE",
																														"ALIGN_INTERPOLATE",
																														"ALIGN_NEXT_OLDER",
																														"ALIGN_MIN",
																														"ALIGN_MAX",
																														"ALIGN_MEAN",
																														"ALIGN_COUNT",
																														"ALIGN_SUM",
																														"ALIGN_STDDEV",
																														"ALIGN_COUNT_TRUE",
																														"ALIGN_COUNT_FALSE",
																														"ALIGN_FRACTION_TRUE",
																														"ALIGN_PERCENTILE_99",
																														"ALIGN_PERCENTILE_95",
																														"ALIGN_PERCENTILE_50",
																														"ALIGN_PERCENTILE_05",
																														"ALIGN_MAKE_DISTRIBUTION",
																														"ALIGN_PERCENT_CHANGE",
																													},
																												},
																											},
																										},
																										"filter": &dcl.Property{
																											Type:        "string",
																											GoName:      "Filter",
																											Description: "Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
																										},
																									},
																								},
																								"pickTimeSeriesFilter": &dcl.Property{
																									Type:        "object",
																									GoName:      "PickTimeSeriesFilter",
																									GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter",
																									Description: "Ranking based time series filter.",
																									Properties: map[string]*dcl.Property{
																										"direction": &dcl.Property{
																											Type:        "string",
																											GoName:      "Direction",
																											GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum",
																											Description: "How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM",
																											Enum: []string{
																												"DIRECTION_UNSPECIFIED",
																												"TOP",
																												"BOTTOM",
																											},
																										},
																										"numTimeSeries": &dcl.Property{
																											Type:        "integer",
																											Format:      "int64",
																											GoName:      "NumTimeSeries",
																											Description: "How many time series to allow to pass through the filter.",
																										},
																										"rankingMethod": &dcl.Property{
																											Type:        "string",
																											GoName:      "RankingMethod",
																											GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum",
																											Description: "`ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST",
																											Enum: []string{
																												"METHOD_UNSPECIFIED",
																												"METHOD_MEAN",
																												"METHOD_MAX",
																												"METHOD_MIN",
																												"METHOD_SUM",
																												"METHOD_LATEST",
																											},
																										},
																									},
																								},
																								"secondaryAggregation": &dcl.Property{
																									Type:        "object",
																									GoName:      "SecondaryAggregation",
																									GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation",
																									Description: "Apply a second aggregation after the ratio is computed.",
																									Properties: map[string]*dcl.Property{
																										"alignmentPeriod": &dcl.Property{
																											Type:        "string",
																											GoName:      "AlignmentPeriod",
																											Description: "The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.",
																										},
																										"crossSeriesReducer": &dcl.Property{
																											Type:        "string",
																											GoName:      "CrossSeriesReducer",
																											GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum",
																											Description: "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION",
																											Enum: []string{
																												"REDUCE_NONE",
																												"REDUCE_MEAN",
																												"REDUCE_MIN",
																												"REDUCE_MAX",
																												"REDUCE_SUM",
																												"REDUCE_STDDEV",
																												"REDUCE_COUNT",
																												"REDUCE_COUNT_TRUE",
																												"REDUCE_COUNT_FALSE",
																												"REDUCE_FRACTION_TRUE",
																												"REDUCE_PERCENTILE_99",
																												"REDUCE_PERCENTILE_95",
																												"REDUCE_PERCENTILE_50",
																												"REDUCE_PERCENTILE_05",
																												"REDUCE_FRACTION_LESS_THAN",
																												"REDUCE_MAKE_DISTRIBUTION",
																											},
																										},
																										"groupByFields": &dcl.Property{
																											Type:        "array",
																											GoName:      "GroupByFields",
																											Description: "The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.",
																											SendEmpty:   true,
																											ListType:    "list",
																											Items: &dcl.Property{
																												Type:   "string",
																												GoType: "string",
																											},
																										},
																										"perSeriesAligner": &dcl.Property{
																											Type:        "string",
																											GoName:      "PerSeriesAligner",
																											GoType:      "DashboardRowLayoutRowsWidgetsXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum",
																											Description: "An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.",
																											Enum: []string{
																												"ALIGN_NONE",
																												"ALIGN_DELTA",
																												"ALIGN_RATE",
																												"ALIGN_INTERPOLATE",
																												"ALIGN_NEXT_OLDER",
																												"ALIGN_MIN",
																												"ALIGN_MAX",
																												"ALIGN_MEAN",
																												"ALIGN_COUNT",
																												"ALIGN_SUM",
																												"ALIGN_STDDEV",
																												"ALIGN_COUNT_TRUE",
																												"ALIGN_COUNT_FALSE",
																												"ALIGN_FRACTION_TRUE",
																												"ALIGN_PERCENTILE_99",
																												"ALIGN_PERCENTILE_95",
																												"ALIGN_PERCENTILE_50",
																												"ALIGN_PERCENTILE_05",
																												"ALIGN_MAKE_DISTRIBUTION",
																												"ALIGN_PERCENT_CHANGE",
																											},
																										},
																									},
																								},
																							},
																						},
																						"timeSeriesQueryLanguage": &dcl.Property{
																							Type:        "string",
																							GoName:      "TimeSeriesQueryLanguage",
																							Description: "A query used to fetch time series.",
																						},
																						"unitOverride": &dcl.Property{
																							Type:        "string",
																							GoName:      "UnitOverride",
																							Description: "The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.",
																						},
																					},
																				},
																			},
																		},
																	},
																	"thresholds": &dcl.Property{
																		Type:        "array",
																		GoName:      "Thresholds",
																		Description: "Threshold lines drawn horizontally across the chart.",
																		SendEmpty:   true,
																		ListType:    "list",
																		Items: &dcl.Property{
																			Type:   "object",
																			GoType: "DashboardRowLayoutRowsWidgetsXyChartThresholds",
																			Properties: map[string]*dcl.Property{
																				"color": &dcl.Property{
																					Type:        "string",
																					GoName:      "Color",
																					GoType:      "DashboardRowLayoutRowsWidgetsXyChartThresholdsColorEnum",
																					Description: "The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED",
																					Enum: []string{
																						"COLOR_UNSPECIFIED",
																						"GREY",
																						"BLUE",
																						"GREEN",
																						"YELLOW",
																						"ORANGE",
																						"RED",
																					},
																				},
																				"direction": &dcl.Property{
																					Type:        "string",
																					GoName:      "Direction",
																					GoType:      "DashboardRowLayoutRowsWidgetsXyChartThresholdsDirectionEnum",
																					Description: "The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW",
																					Enum: []string{
																						"DIRECTION_UNSPECIFIED",
																						"ABOVE",
																						"BELOW",
																					},
																				},
																				"label": &dcl.Property{
																					Type:        "string",
																					GoName:      "Label",
																					Description: "A label for the threshold.",
																				},
																				"value": &dcl.Property{
																					Type:        "number",
																					Format:      "double",
																					GoName:      "Value",
																					Description: "The value of the threshold. The value should be defined in the native scale of the metric.",
																				},
																			},
																		},
																	},
																	"timeshiftDuration": &dcl.Property{
																		Type:        "string",
																		GoName:      "TimeshiftDuration",
																		Description: "The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.",
																	},
																	"xAxis": &dcl.Property{
																		Type:        "object",
																		GoName:      "XAxis",
																		GoType:      "DashboardRowLayoutRowsWidgetsXyChartXAxis",
																		Description: "The properties applied to the X axis.",
																		Properties: map[string]*dcl.Property{
																			"label": &dcl.Property{
																				Type:        "string",
																				GoName:      "Label",
																				Description: "The label of the axis.",
																			},
																			"scale": &dcl.Property{
																				Type:        "string",
																				GoName:      "Scale",
																				GoType:      "DashboardRowLayoutRowsWidgetsXyChartXAxisScaleEnum",
																				Description: "The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10",
																				Enum: []string{
																					"SCALE_UNSPECIFIED",
																					"LINEAR",
																					"LOG10",
																				},
																			},
																		},
																	},
																	"yAxis": &dcl.Property{
																		Type:        "object",
																		GoName:      "YAxis",
																		GoType:      "DashboardRowLayoutRowsWidgetsXyChartYAxis",
																		Description: "The properties applied to the Y axis.",
																		Properties: map[string]*dcl.Property{
																			"label": &dcl.Property{
																				Type:        "string",
																				GoName:      "Label",
																				Description: "The label of the axis.",
																			},
																			"scale": &dcl.Property{
																				Type:        "string",
																				GoName:      "Scale",
																				GoType:      "DashboardRowLayoutRowsWidgetsXyChartYAxisScaleEnum",
																				Description: "The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10",
																				Enum: []string{
																					"SCALE_UNSPECIFIED",
																					"LINEAR",
																					"LOG10",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}
