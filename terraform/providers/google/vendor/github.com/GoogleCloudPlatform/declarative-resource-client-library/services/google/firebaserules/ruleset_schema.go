// Copyright 2023 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package firebaserules

import (
	"github.com/GoogleCloudPlatform/declarative-resource-client-library/dcl"
)

func DCLRulesetSchema() *dcl.Schema {
	return &dcl.Schema{
		Info: &dcl.Info{
			Title:      "Firebaserules/Ruleset",
			StructName: "Ruleset",
			Reference: &dcl.Link{
				Text: "Firebase Ruleset API Documentation",
				URL:  "https://firebase.google.com/docs/reference/rules/rest#rest-resource:-v1.projects.rulesets",
			},
			Guides: []*dcl.Link{
				&dcl.Link{
					Text: "Get started with Firebase Security Rules",
					URL:  "https://firebase.google.com/docs/rules/get-started",
				},
			},
		},
		Paths: &dcl.Paths{
			Get: &dcl.Path{
				Description: "The function used to get information about a Ruleset",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:        "ruleset",
						Required:    true,
						Description: "A full instance of a Ruleset",
					},
				},
			},
			Apply: &dcl.Path{
				Description: "The function used to apply information about a Ruleset",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:        "ruleset",
						Required:    true,
						Description: "A full instance of a Ruleset",
					},
				},
			},
			Delete: &dcl.Path{
				Description: "The function used to delete a Ruleset",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:        "ruleset",
						Required:    true,
						Description: "A full instance of a Ruleset",
					},
				},
			},
			DeleteAll: &dcl.Path{
				Description: "The function used to delete all Ruleset",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:     "project",
						Required: true,
						Schema: &dcl.PathParametersSchema{
							Type: "string",
						},
					},
				},
			},
			List: &dcl.Path{
				Description: "The function used to list information about many Ruleset",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:     "project",
						Required: true,
						Schema: &dcl.PathParametersSchema{
							Type: "string",
						},
					},
				},
			},
		},
		Components: &dcl.Components{
			Schemas: map[string]*dcl.Component{
				"Ruleset": &dcl.Component{
					Title:           "Ruleset",
					ID:              "projects/{{project}}/rulesets/{{name}}",
					ParentContainer: "project",
					HasCreate:       true,
					SchemaProperty: dcl.Property{
						Type: "object",
						Required: []string{
							"source",
							"project",
						},
						Properties: map[string]*dcl.Property{
							"createTime": &dcl.Property{
								Type:        "string",
								Format:      "date-time",
								GoName:      "CreateTime",
								ReadOnly:    true,
								Description: "Output only. Time the `Ruleset` was created.",
								Immutable:   true,
							},
							"metadata": &dcl.Property{
								Type:        "object",
								GoName:      "Metadata",
								GoType:      "RulesetMetadata",
								ReadOnly:    true,
								Description: "Output only. The metadata for this ruleset.",
								Immutable:   true,
								Properties: map[string]*dcl.Property{
									"services": &dcl.Property{
										Type:        "array",
										GoName:      "Services",
										Description: "Services that this ruleset has declarations for (e.g., \"cloud.firestore\"). There may be 0+ of these.",
										Immutable:   true,
										SendEmpty:   true,
										ListType:    "list",
										Items: &dcl.Property{
											Type:   "string",
											GoType: "string",
										},
									},
								},
							},
							"name": &dcl.Property{
								Type:                     "string",
								GoName:                   "Name",
								Description:              "Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format: `projects/{project_id}/rulesets/{ruleset_id}`",
								Immutable:                true,
								ServerGeneratedParameter: true,
							},
							"project": &dcl.Property{
								Type:        "string",
								GoName:      "Project",
								Description: "The project for the resource",
								Immutable:   true,
								ResourceReferences: []*dcl.PropertyResourceReference{
									&dcl.PropertyResourceReference{
										Resource: "Cloudresourcemanager/Project",
										Field:    "name",
										Parent:   true,
									},
								},
							},
							"source": &dcl.Property{
								Type:        "object",
								GoName:      "Source",
								GoType:      "RulesetSource",
								Description: "`Source` for the `Ruleset`.",
								Immutable:   true,
								Required: []string{
									"files",
								},
								Properties: map[string]*dcl.Property{
									"files": &dcl.Property{
										Type:        "array",
										GoName:      "Files",
										Description: "`File` set constituting the `Source` bundle.",
										Immutable:   true,
										SendEmpty:   true,
										ListType:    "list",
										Items: &dcl.Property{
											Type:   "object",
											GoType: "RulesetSourceFiles",
											Required: []string{
												"content",
												"name",
											},
											Properties: map[string]*dcl.Property{
												"content": &dcl.Property{
													Type:        "string",
													GoName:      "Content",
													Description: "Textual Content.",
													Immutable:   true,
												},
												"fingerprint": &dcl.Property{
													Type:        "string",
													GoName:      "Fingerprint",
													Description: "Fingerprint (e.g. github sha) associated with the `File`.",
													Immutable:   true,
												},
												"name": &dcl.Property{
													Type:        "string",
													GoName:      "Name",
													Description: "File name.",
													Immutable:   true,
												},
											},
										},
									},
									"language": &dcl.Property{
										Type:        "string",
										GoName:      "Language",
										GoType:      "RulesetSourceLanguageEnum",
										Description: "`Language` of the `Source` bundle. If unspecified, the language will default to `FIREBASE_RULES`. Possible values: LANGUAGE_UNSPECIFIED, FIREBASE_RULES, EVENT_FLOW_TRIGGERS",
										Immutable:   true,
										Enum: []string{
											"LANGUAGE_UNSPECIFIED",
											"FIREBASE_RULES",
											"EVENT_FLOW_TRIGGERS",
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}
