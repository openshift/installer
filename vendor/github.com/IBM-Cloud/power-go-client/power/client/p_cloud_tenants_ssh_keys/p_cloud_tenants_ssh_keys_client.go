// Code generated by go-swagger; DO NOT EDIT.

package p_cloud_tenants_ssh_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new p cloud tenants ssh keys API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for p cloud tenants ssh keys API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PcloudTenantsSshkeysDelete deletes a tenant s SSH key
*/
func (a *Client) PcloudTenantsSshkeysDelete(params *PcloudTenantsSshkeysDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*PcloudTenantsSshkeysDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPcloudTenantsSshkeysDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pcloud.tenants.sshkeys.delete",
		Method:             "DELETE",
		PathPattern:        "/pcloud/v1/tenants/{tenant_id}/sshkeys/{sshkey_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PcloudTenantsSshkeysDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PcloudTenantsSshkeysDeleteOK), nil

}

/*
PcloudTenantsSshkeysGet gets a tenant s SSH key by name
*/
func (a *Client) PcloudTenantsSshkeysGet(params *PcloudTenantsSshkeysGetParams, authInfo runtime.ClientAuthInfoWriter) (*PcloudTenantsSshkeysGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPcloudTenantsSshkeysGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pcloud.tenants.sshkeys.get",
		Method:             "GET",
		PathPattern:        "/pcloud/v1/tenants/{tenant_id}/sshkeys/{sshkey_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PcloudTenantsSshkeysGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PcloudTenantsSshkeysGetOK), nil

}

/*
PcloudTenantsSshkeysGetall lists a tenant s SSH keys
*/
func (a *Client) PcloudTenantsSshkeysGetall(params *PcloudTenantsSshkeysGetallParams, authInfo runtime.ClientAuthInfoWriter) (*PcloudTenantsSshkeysGetallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPcloudTenantsSshkeysGetallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pcloud.tenants.sshkeys.getall",
		Method:             "GET",
		PathPattern:        "/pcloud/v1/tenants/{tenant_id}/sshkeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PcloudTenantsSshkeysGetallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PcloudTenantsSshkeysGetallOK), nil

}

/*
PcloudTenantsSshkeysPost adds a new SSH key to the tenant
*/
func (a *Client) PcloudTenantsSshkeysPost(params *PcloudTenantsSshkeysPostParams, authInfo runtime.ClientAuthInfoWriter) (*PcloudTenantsSshkeysPostOK, *PcloudTenantsSshkeysPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPcloudTenantsSshkeysPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pcloud.tenants.sshkeys.post",
		Method:             "POST",
		PathPattern:        "/pcloud/v1/tenants/{tenant_id}/sshkeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PcloudTenantsSshkeysPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PcloudTenantsSshkeysPostOK:
		return value, nil, nil
	case *PcloudTenantsSshkeysPostCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PcloudTenantsSshkeysPut updates an SSH key
*/
func (a *Client) PcloudTenantsSshkeysPut(params *PcloudTenantsSshkeysPutParams, authInfo runtime.ClientAuthInfoWriter) (*PcloudTenantsSshkeysPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPcloudTenantsSshkeysPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pcloud.tenants.sshkeys.put",
		Method:             "PUT",
		PathPattern:        "/pcloud/v1/tenants/{tenant_id}/sshkeys/{sshkey_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PcloudTenantsSshkeysPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PcloudTenantsSshkeysPutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
