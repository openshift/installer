// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/operator/v1"
	operatorv1 "github.com/openshift/client-go/operator/applyconfigurations/operator/v1"
	typedoperatorv1 "github.com/openshift/client-go/operator/clientset/versioned/typed/operator/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeKubeSchedulers implements KubeSchedulerInterface
type fakeKubeSchedulers struct {
	*gentype.FakeClientWithListAndApply[*v1.KubeScheduler, *v1.KubeSchedulerList, *operatorv1.KubeSchedulerApplyConfiguration]
	Fake *FakeOperatorV1
}

func newFakeKubeSchedulers(fake *FakeOperatorV1) typedoperatorv1.KubeSchedulerInterface {
	return &fakeKubeSchedulers{
		gentype.NewFakeClientWithListAndApply[*v1.KubeScheduler, *v1.KubeSchedulerList, *operatorv1.KubeSchedulerApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("kubeschedulers"),
			v1.SchemeGroupVersion.WithKind("KubeScheduler"),
			func() *v1.KubeScheduler { return &v1.KubeScheduler{} },
			func() *v1.KubeSchedulerList { return &v1.KubeSchedulerList{} },
			func(dst, src *v1.KubeSchedulerList) { dst.ListMeta = src.ListMeta },
			func(list *v1.KubeSchedulerList) []*v1.KubeScheduler { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.KubeSchedulerList, items []*v1.KubeScheduler) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
