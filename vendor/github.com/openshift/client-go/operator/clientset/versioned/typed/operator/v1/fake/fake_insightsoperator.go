// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/operator/v1"
	operatorv1 "github.com/openshift/client-go/operator/applyconfigurations/operator/v1"
	typedoperatorv1 "github.com/openshift/client-go/operator/clientset/versioned/typed/operator/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeInsightsOperators implements InsightsOperatorInterface
type fakeInsightsOperators struct {
	*gentype.FakeClientWithListAndApply[*v1.InsightsOperator, *v1.InsightsOperatorList, *operatorv1.InsightsOperatorApplyConfiguration]
	Fake *FakeOperatorV1
}

func newFakeInsightsOperators(fake *FakeOperatorV1) typedoperatorv1.InsightsOperatorInterface {
	return &fakeInsightsOperators{
		gentype.NewFakeClientWithListAndApply[*v1.InsightsOperator, *v1.InsightsOperatorList, *operatorv1.InsightsOperatorApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("insightsoperators"),
			v1.SchemeGroupVersion.WithKind("InsightsOperator"),
			func() *v1.InsightsOperator { return &v1.InsightsOperator{} },
			func() *v1.InsightsOperatorList { return &v1.InsightsOperatorList{} },
			func(dst, src *v1.InsightsOperatorList) { dst.ListMeta = src.ListMeta },
			func(list *v1.InsightsOperatorList) []*v1.InsightsOperator { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.InsightsOperatorList, items []*v1.InsightsOperator) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
