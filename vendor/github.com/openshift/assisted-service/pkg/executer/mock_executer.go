// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/pkg/executer (interfaces: Executer)

// Package executer is a generated GoMock package.
package executer

import (
	context "context"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExecuter is a mock of Executer interface.
type MockExecuter struct {
	ctrl     *gomock.Controller
	recorder *MockExecuterMockRecorder
}

// MockExecuterMockRecorder is the mock recorder for MockExecuter.
type MockExecuterMockRecorder struct {
	mock *MockExecuter
}

// NewMockExecuter creates a new mock instance.
func NewMockExecuter(ctrl *gomock.Controller) *MockExecuter {
	mock := &MockExecuter{ctrl: ctrl}
	mock.recorder = &MockExecuterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecuter) EXPECT() *MockExecuterMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockExecuter) Execute(arg0 string, arg1 ...string) (string, string, int) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute.
func (mr *MockExecuterMockRecorder) Execute(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExecuter)(nil).Execute), varargs...)
}

// ExecuteWithContext mocks base method.
func (m *MockExecuter) ExecuteWithContext(arg0 context.Context, arg1 string, arg2 ...string) (string, string, int) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteWithContext", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// ExecuteWithContext indicates an expected call of ExecuteWithContext.
func (mr *MockExecuterMockRecorder) ExecuteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWithContext", reflect.TypeOf((*MockExecuter)(nil).ExecuteWithContext), varargs...)
}

// TempFile mocks base method.
func (m *MockExecuter) TempFile(arg0, arg1 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempFile", arg0, arg1)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TempFile indicates an expected call of TempFile.
func (mr *MockExecuterMockRecorder) TempFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempFile", reflect.TypeOf((*MockExecuter)(nil).TempFile), arg0, arg1)
}
