// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReleaseChannel Release channel.
//
// swagger:model release-channel
type ReleaseChannel string

func NewReleaseChannel(value ReleaseChannel) *ReleaseChannel {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ReleaseChannel.
func (m ReleaseChannel) Pointer() *ReleaseChannel {
	return &m
}

const (

	// ReleaseChannelCandidate captures enum value "candidate"
	ReleaseChannelCandidate ReleaseChannel = "candidate"

	// ReleaseChannelFast captures enum value "fast"
	ReleaseChannelFast ReleaseChannel = "fast"

	// ReleaseChannelStable captures enum value "stable"
	ReleaseChannelStable ReleaseChannel = "stable"

	// ReleaseChannelEus captures enum value "eus"
	ReleaseChannelEus ReleaseChannel = "eus"
)

// for schema
var releaseChannelEnum []interface{}

func init() {
	var res []ReleaseChannel
	if err := json.Unmarshal([]byte(`["candidate","fast","stable","eus"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseChannelEnum = append(releaseChannelEnum, v)
	}
}

func (m ReleaseChannel) validateReleaseChannelEnum(path, location string, value ReleaseChannel) error {
	if err := validate.EnumCase(path, location, value, releaseChannelEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this release channel
func (m ReleaseChannel) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReleaseChannelEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this release channel based on context it is used
func (m ReleaseChannel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
