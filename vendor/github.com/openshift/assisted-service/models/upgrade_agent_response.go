// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpgradeAgentResponse upgrade agent response
//
// swagger:model upgrade_agent_response
type UpgradeAgentResponse struct {

	// Full image reference of the image that the agent has upgraded to, for example
	// `quay.io/registry-proxy.engineering.redhat.com/rh-osbs/openshift4-assisted-installer-agent-rhel8:v1.0.0-142`.
	//
	AgentImage string `json:"agent_image,omitempty"`

	// result
	Result UpgradeAgentResult `json:"result,omitempty"`
}

// Validate validates this upgrade agent response
func (m *UpgradeAgentResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeAgentResponse) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if err := m.Result.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("result")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("result")
		}
		return err
	}

	return nil
}

// ContextValidate validate this upgrade agent response based on the context it is used
func (m *UpgradeAgentResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeAgentResponse) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Result.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("result")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("result")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeAgentResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeAgentResponse) UnmarshalBinary(b []byte) error {
	var res UpgradeAgentResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
