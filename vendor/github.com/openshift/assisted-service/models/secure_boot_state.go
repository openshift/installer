// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecureBootState secure boot state
//
// swagger:model secure-boot-state
type SecureBootState string

func NewSecureBootState(value SecureBootState) *SecureBootState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SecureBootState.
func (m SecureBootState) Pointer() *SecureBootState {
	return &m
}

const (

	// SecureBootStateUnknown captures enum value "Unknown"
	SecureBootStateUnknown SecureBootState = "Unknown"

	// SecureBootStateNotSupported captures enum value "NotSupported"
	SecureBootStateNotSupported SecureBootState = "NotSupported"

	// SecureBootStateEnabled captures enum value "Enabled"
	SecureBootStateEnabled SecureBootState = "Enabled"

	// SecureBootStateDisabled captures enum value "Disabled"
	SecureBootStateDisabled SecureBootState = "Disabled"
)

// for schema
var secureBootStateEnum []interface{}

func init() {
	var res []SecureBootState
	if err := json.Unmarshal([]byte(`["Unknown","NotSupported","Enabled","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		secureBootStateEnum = append(secureBootStateEnum, v)
	}
}

func (m SecureBootState) validateSecureBootStateEnum(path, location string, value SecureBootState) error {
	if err := validate.EnumCase(path, location, value, secureBootStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this secure boot state
func (m SecureBootState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecureBootStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this secure boot state based on context it is used
func (m SecureBootState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
