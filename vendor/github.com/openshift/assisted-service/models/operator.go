// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Operator operator
//
// swagger:model operator
type Operator struct {

	// dependencies
	// Required: true
	Dependencies []FeatureSupportLevelID `json:"dependencies"`

	// feature support level id
	// Required: true
	FeatureSupportLevelID FeatureSupportLevelID `json:"feature-support-level-id"`

	// incompatibilities
	// Required: true
	Incompatibilities []FeatureSupportLevelID `json:"incompatibilities"`

	// Name of the operator
	// Required: true
	Name *string `json:"name"`

	// reason
	Reason IncompatibilityReason `json:"reason,omitempty"`

	// support level
	// Required: true
	SupportLevel SupportLevel `json:"support_level"`
}

// Validate validates this operator
func (m *Operator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureSupportLevelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncompatibilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Operator) validateDependencies(formats strfmt.Registry) error {

	if err := validate.Required("dependencies", "body", m.Dependencies); err != nil {
		return err
	}

	for i := 0; i < len(m.Dependencies); i++ {

		if err := m.Dependencies[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dependencies" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Operator) validateFeatureSupportLevelID(formats strfmt.Registry) error {

	if err := validate.Required("feature-support-level-id", "body", FeatureSupportLevelID(m.FeatureSupportLevelID)); err != nil {
		return err
	}

	if err := m.FeatureSupportLevelID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("feature-support-level-id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("feature-support-level-id")
		}
		return err
	}

	return nil
}

func (m *Operator) validateIncompatibilities(formats strfmt.Registry) error {

	if err := validate.Required("incompatibilities", "body", m.Incompatibilities); err != nil {
		return err
	}

	for i := 0; i < len(m.Incompatibilities); i++ {

		if err := m.Incompatibilities[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incompatibilities" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incompatibilities" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Operator) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Operator) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	if err := m.Reason.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("reason")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("reason")
		}
		return err
	}

	return nil
}

func (m *Operator) validateSupportLevel(formats strfmt.Registry) error {

	if err := validate.Required("support_level", "body", SupportLevel(m.SupportLevel)); err != nil {
		return err
	}

	if err := m.SupportLevel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("support_level")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("support_level")
		}
		return err
	}

	return nil
}

// ContextValidate validate this operator based on the context it is used
func (m *Operator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeatureSupportLevelID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncompatibilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupportLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Operator) contextValidateDependencies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Dependencies); i++ {

		if err := m.Dependencies[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dependencies" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Operator) contextValidateFeatureSupportLevelID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeatureSupportLevelID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("feature-support-level-id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("feature-support-level-id")
		}
		return err
	}

	return nil
}

func (m *Operator) contextValidateIncompatibilities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Incompatibilities); i++ {

		if err := m.Incompatibilities[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incompatibilities" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incompatibilities" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Operator) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Reason.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("reason")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("reason")
		}
		return err
	}

	return nil
}

func (m *Operator) contextValidateSupportLevel(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SupportLevel.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("support_level")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("support_level")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Operator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Operator) UnmarshalBinary(b []byte) error {
	var res Operator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
