// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// IncompatibilityReason incompatibility reason
//
// swagger:model incompatibility-reason
type IncompatibilityReason string

func NewIncompatibilityReason(value IncompatibilityReason) *IncompatibilityReason {
	return &value
}

// Pointer returns a pointer to a freshly-allocated IncompatibilityReason.
func (m IncompatibilityReason) Pointer() *IncompatibilityReason {
	return &m
}

const (

	// IncompatibilityReasonCPUArchitecture captures enum value "cpuArchitecture"
	IncompatibilityReasonCPUArchitecture IncompatibilityReason = "cpuArchitecture"

	// IncompatibilityReasonPlatform captures enum value "platform"
	IncompatibilityReasonPlatform IncompatibilityReason = "platform"

	// IncompatibilityReasonOpenshiftVersion captures enum value "openshiftVersion"
	IncompatibilityReasonOpenshiftVersion IncompatibilityReason = "openshiftVersion"

	// IncompatibilityReasonOciExternalIntegrationDisabled captures enum value "ociExternalIntegrationDisabled"
	IncompatibilityReasonOciExternalIntegrationDisabled IncompatibilityReason = "ociExternalIntegrationDisabled"
)

// for schema
var incompatibilityReasonEnum []interface{}

func init() {
	var res []IncompatibilityReason
	if err := json.Unmarshal([]byte(`["cpuArchitecture","platform","openshiftVersion","ociExternalIntegrationDisabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		incompatibilityReasonEnum = append(incompatibilityReasonEnum, v)
	}
}

func (m IncompatibilityReason) validateIncompatibilityReasonEnum(path, location string, value IncompatibilityReason) error {
	if err := validate.EnumCase(path, location, value, incompatibilityReasonEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this incompatibility reason
func (m IncompatibilityReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateIncompatibilityReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this incompatibility reason based on context it is used
func (m IncompatibilityReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
