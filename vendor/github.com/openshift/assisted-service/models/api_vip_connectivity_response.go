// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIVipConnectivityResponse The response from the day-2 agent's attempt to download the worker ignition file from the API machine config server of the target cluster.
// Note - the name "API VIP connectivity" is old and misleading and is preserved for backwards compatibility.
//
// swagger:model api_vip_connectivity_response
type APIVipConnectivityResponse struct {

	// The error that occurred while downloading the worker ignition file, ignored when is_success is true
	DownloadError string `json:"download_error,omitempty"`

	// Ignition file fetched from the target cluster's API machine config server.
	// This ignition file may be incomplete as almost all files / systemd units are removed from it by the agent in order to save space.
	Ignition string `json:"ignition,omitempty"`

	// Whether the agent was able to download the ignition or not
	IsSuccess bool `json:"is_success,omitempty"`

	// This parameter mirrors the url parameter of the corresponding api_vip_connectivity_request
	URL string `json:"url,omitempty"`
}

// Validate validates this api vip connectivity response
func (m *APIVipConnectivityResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this api vip connectivity response based on context it is used
func (m *APIVipConnectivityResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIVipConnectivityResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIVipConnectivityResponse) UnmarshalBinary(b []byte) error {
	var res APIVipConnectivityResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
