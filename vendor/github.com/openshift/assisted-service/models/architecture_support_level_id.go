// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ArchitectureSupportLevelID architecture support level id
//
// swagger:model architecture-support-level-id
type ArchitectureSupportLevelID string

func NewArchitectureSupportLevelID(value ArchitectureSupportLevelID) *ArchitectureSupportLevelID {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ArchitectureSupportLevelID.
func (m ArchitectureSupportLevelID) Pointer() *ArchitectureSupportLevelID {
	return &m
}

const (

	// ArchitectureSupportLevelIDX8664ARCHITECTURE captures enum value "X86_64_ARCHITECTURE"
	ArchitectureSupportLevelIDX8664ARCHITECTURE ArchitectureSupportLevelID = "X86_64_ARCHITECTURE"

	// ArchitectureSupportLevelIDARM64ARCHITECTURE captures enum value "ARM64_ARCHITECTURE"
	ArchitectureSupportLevelIDARM64ARCHITECTURE ArchitectureSupportLevelID = "ARM64_ARCHITECTURE"

	// ArchitectureSupportLevelIDPPC64LEARCHITECTURE captures enum value "PPC64LE_ARCHITECTURE"
	ArchitectureSupportLevelIDPPC64LEARCHITECTURE ArchitectureSupportLevelID = "PPC64LE_ARCHITECTURE"

	// ArchitectureSupportLevelIDS390XARCHITECTURE captures enum value "S390X_ARCHITECTURE"
	ArchitectureSupportLevelIDS390XARCHITECTURE ArchitectureSupportLevelID = "S390X_ARCHITECTURE"

	// ArchitectureSupportLevelIDMULTIARCHRELEASEIMAGE captures enum value "MULTIARCH_RELEASE_IMAGE"
	ArchitectureSupportLevelIDMULTIARCHRELEASEIMAGE ArchitectureSupportLevelID = "MULTIARCH_RELEASE_IMAGE"
)

// for schema
var architectureSupportLevelIdEnum []interface{}

func init() {
	var res []ArchitectureSupportLevelID
	if err := json.Unmarshal([]byte(`["X86_64_ARCHITECTURE","ARM64_ARCHITECTURE","PPC64LE_ARCHITECTURE","S390X_ARCHITECTURE","MULTIARCH_RELEASE_IMAGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		architectureSupportLevelIdEnum = append(architectureSupportLevelIdEnum, v)
	}
}

func (m ArchitectureSupportLevelID) validateArchitectureSupportLevelIDEnum(path, location string, value ArchitectureSupportLevelID) error {
	if err := validate.EnumCase(path, location, value, architectureSupportLevelIdEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this architecture support level id
func (m ArchitectureSupportLevelID) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateArchitectureSupportLevelIDEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this architecture support level id based on context it is used
func (m ArchitectureSupportLevelID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
