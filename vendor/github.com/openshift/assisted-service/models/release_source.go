// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseSource release source
//
// swagger:model release-source
type ReleaseSource struct {

	// multi cpu architectures
	// Required: true
	MultiCPUArchitectures []string `json:"multi_cpu_architectures"`

	// Version of the OpenShift cluster.
	// Example: 4.14
	// Required: true
	OpenshiftVersion *string `json:"openshift_version"`

	// upgrade channels
	// Required: true
	UpgradeChannels []*UpgradeChannel `json:"upgrade_channels"`
}

// Validate validates this release source
func (m *ReleaseSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMultiCPUArchitectures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenshiftVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeChannels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var releaseSourceMultiCPUArchitecturesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["x86_64","aarch64","arm64","ppc64le","s390x"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseSourceMultiCPUArchitecturesItemsEnum = append(releaseSourceMultiCPUArchitecturesItemsEnum, v)
	}
}

func (m *ReleaseSource) validateMultiCPUArchitecturesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, releaseSourceMultiCPUArchitecturesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReleaseSource) validateMultiCPUArchitectures(formats strfmt.Registry) error {

	if err := validate.Required("multi_cpu_architectures", "body", m.MultiCPUArchitectures); err != nil {
		return err
	}

	for i := 0; i < len(m.MultiCPUArchitectures); i++ {

		// value enum
		if err := m.validateMultiCPUArchitecturesItemsEnum("multi_cpu_architectures"+"."+strconv.Itoa(i), "body", m.MultiCPUArchitectures[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ReleaseSource) validateOpenshiftVersion(formats strfmt.Registry) error {

	if err := validate.Required("openshift_version", "body", m.OpenshiftVersion); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseSource) validateUpgradeChannels(formats strfmt.Registry) error {

	if err := validate.Required("upgrade_channels", "body", m.UpgradeChannels); err != nil {
		return err
	}

	for i := 0; i < len(m.UpgradeChannels); i++ {
		if swag.IsZero(m.UpgradeChannels[i]) { // not required
			continue
		}

		if m.UpgradeChannels[i] != nil {
			if err := m.UpgradeChannels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("upgrade_channels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("upgrade_channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this release source based on the context it is used
func (m *ReleaseSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUpgradeChannels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseSource) contextValidateUpgradeChannels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UpgradeChannels); i++ {

		if m.UpgradeChannels[i] != nil {
			if err := m.UpgradeChannels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("upgrade_channels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("upgrade_channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseSource) UnmarshalBinary(b []byte) error {
	var res ReleaseSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
