// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Step step
//
// swagger:model step
type Step struct {

	// args
	Args []string `json:"args"`

	// step id
	StepID string `json:"step_id,omitempty"`

	// step type
	StepType StepType `json:"step_type,omitempty"`
}

// Validate validates this step
func (m *Step) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStepType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Step) validateStepType(formats strfmt.Registry) error {
	if swag.IsZero(m.StepType) { // not required
		return nil
	}

	if err := m.StepType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("step_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("step_type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this step based on the context it is used
func (m *Step) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStepType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Step) contextValidateStepType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StepType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("step_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("step_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Step) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Step) UnmarshalBinary(b []byte) error {
	var res Step
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
