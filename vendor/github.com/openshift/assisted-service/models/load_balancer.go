// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoadBalancer load balancer
//
// swagger:model load_balancer
type LoadBalancer struct {

	// Indicates if the load balancer will be managed by the cluster or by the user. This is optional and The
	// default is `cluster-managed`.
	//
	// `cluster-managed` means that the cluster will start the components that assign the API and ingress VIPs to the
	// nodes of the cluster automatically.
	//
	// `user-managed` means that the user is responsible for configuring an external load balancer and assign the
	// API and ingress VIPs to it. Note that this configuration needs to be completed before starting the
	// installation of the cluster, as it is needed during the installation process.
	//
	// Enum: [cluster-managed user-managed]
	Type string `json:"type,omitempty" gorm:"not null;check:load_balancer_type in ('cluster-managed', 'user-managed');default:'cluster-managed'"`
}

// Validate validates this load balancer
func (m *LoadBalancer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var loadBalancerTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cluster-managed","user-managed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loadBalancerTypeTypePropEnum = append(loadBalancerTypeTypePropEnum, v)
	}
}

const (

	// LoadBalancerTypeClusterManaged captures enum value "cluster-managed"
	LoadBalancerTypeClusterManaged string = "cluster-managed"

	// LoadBalancerTypeUserManaged captures enum value "user-managed"
	LoadBalancerTypeUserManaged string = "user-managed"
)

// prop value enum
func (m *LoadBalancer) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, loadBalancerTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LoadBalancer) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this load balancer based on context it is used
func (m *LoadBalancer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LoadBalancer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoadBalancer) UnmarshalBinary(b []byte) error {
	var res LoadBalancer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
