// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VipVerification vip verification result.
//
// swagger:model vip_verification
type VipVerification string

func NewVipVerification(value VipVerification) *VipVerification {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VipVerification.
func (m VipVerification) Pointer() *VipVerification {
	return &m
}

const (

	// VipVerificationUnverified captures enum value "unverified"
	VipVerificationUnverified VipVerification = "unverified"

	// VipVerificationFailed captures enum value "failed"
	VipVerificationFailed VipVerification = "failed"

	// VipVerificationSucceeded captures enum value "succeeded"
	VipVerificationSucceeded VipVerification = "succeeded"
)

// for schema
var vipVerificationEnum []interface{}

func init() {
	var res []VipVerification
	if err := json.Unmarshal([]byte(`["unverified","failed","succeeded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vipVerificationEnum = append(vipVerificationEnum, v)
	}
}

func (m VipVerification) validateVipVerificationEnum(path, location string, value VipVerification) error {
	if err := validate.EnumCase(path, location, value, vipVerificationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this vip verification
func (m VipVerification) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVipVerificationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this vip verification based on context it is used
func (m VipVerification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
