// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openshift/assisted-service/models"
)

// V2TriggerEventReader is a Reader for the V2TriggerEvent structure.
type V2TriggerEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V2TriggerEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewV2TriggerEventCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV2TriggerEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV2TriggerEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV2TriggerEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV2TriggerEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewV2TriggerEventMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewV2TriggerEventConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV2TriggerEventInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewV2TriggerEventNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewV2TriggerEventServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewV2TriggerEventCreated creates a V2TriggerEventCreated with default headers values
func NewV2TriggerEventCreated() *V2TriggerEventCreated {
	return &V2TriggerEventCreated{}
}

/*
V2TriggerEventCreated describes a response with status code 201, with default header values.

Success.
*/
type V2TriggerEventCreated struct {
}

// IsSuccess returns true when this v2 trigger event created response has a 2xx status code
func (o *V2TriggerEventCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v2 trigger event created response has a 3xx status code
func (o *V2TriggerEventCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 trigger event created response has a 4xx status code
func (o *V2TriggerEventCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this v2 trigger event created response has a 5xx status code
func (o *V2TriggerEventCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 trigger event created response a status code equal to that given
func (o *V2TriggerEventCreated) IsCode(code int) bool {
	return code == 201
}

func (o *V2TriggerEventCreated) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventCreated ", 201)
}

func (o *V2TriggerEventCreated) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventCreated ", 201)
}

func (o *V2TriggerEventCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewV2TriggerEventBadRequest creates a V2TriggerEventBadRequest with default headers values
func NewV2TriggerEventBadRequest() *V2TriggerEventBadRequest {
	return &V2TriggerEventBadRequest{}
}

/*
V2TriggerEventBadRequest describes a response with status code 400, with default header values.

Error.
*/
type V2TriggerEventBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 trigger event bad request response has a 2xx status code
func (o *V2TriggerEventBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 trigger event bad request response has a 3xx status code
func (o *V2TriggerEventBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 trigger event bad request response has a 4xx status code
func (o *V2TriggerEventBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v2 trigger event bad request response has a 5xx status code
func (o *V2TriggerEventBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 trigger event bad request response a status code equal to that given
func (o *V2TriggerEventBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *V2TriggerEventBadRequest) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventBadRequest  %+v", 400, o.Payload)
}

func (o *V2TriggerEventBadRequest) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventBadRequest  %+v", 400, o.Payload)
}

func (o *V2TriggerEventBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2TriggerEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2TriggerEventUnauthorized creates a V2TriggerEventUnauthorized with default headers values
func NewV2TriggerEventUnauthorized() *V2TriggerEventUnauthorized {
	return &V2TriggerEventUnauthorized{}
}

/*
V2TriggerEventUnauthorized describes a response with status code 401, with default header values.

Unauthorized.
*/
type V2TriggerEventUnauthorized struct {
	Payload *models.InfraError
}

// IsSuccess returns true when this v2 trigger event unauthorized response has a 2xx status code
func (o *V2TriggerEventUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 trigger event unauthorized response has a 3xx status code
func (o *V2TriggerEventUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 trigger event unauthorized response has a 4xx status code
func (o *V2TriggerEventUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v2 trigger event unauthorized response has a 5xx status code
func (o *V2TriggerEventUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 trigger event unauthorized response a status code equal to that given
func (o *V2TriggerEventUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *V2TriggerEventUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventUnauthorized  %+v", 401, o.Payload)
}

func (o *V2TriggerEventUnauthorized) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventUnauthorized  %+v", 401, o.Payload)
}

func (o *V2TriggerEventUnauthorized) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *V2TriggerEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2TriggerEventForbidden creates a V2TriggerEventForbidden with default headers values
func NewV2TriggerEventForbidden() *V2TriggerEventForbidden {
	return &V2TriggerEventForbidden{}
}

/*
V2TriggerEventForbidden describes a response with status code 403, with default header values.

Forbidden.
*/
type V2TriggerEventForbidden struct {
	Payload *models.InfraError
}

// IsSuccess returns true when this v2 trigger event forbidden response has a 2xx status code
func (o *V2TriggerEventForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 trigger event forbidden response has a 3xx status code
func (o *V2TriggerEventForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 trigger event forbidden response has a 4xx status code
func (o *V2TriggerEventForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v2 trigger event forbidden response has a 5xx status code
func (o *V2TriggerEventForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 trigger event forbidden response a status code equal to that given
func (o *V2TriggerEventForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *V2TriggerEventForbidden) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventForbidden  %+v", 403, o.Payload)
}

func (o *V2TriggerEventForbidden) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventForbidden  %+v", 403, o.Payload)
}

func (o *V2TriggerEventForbidden) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *V2TriggerEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2TriggerEventNotFound creates a V2TriggerEventNotFound with default headers values
func NewV2TriggerEventNotFound() *V2TriggerEventNotFound {
	return &V2TriggerEventNotFound{}
}

/*
V2TriggerEventNotFound describes a response with status code 404, with default header values.

Error.
*/
type V2TriggerEventNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 trigger event not found response has a 2xx status code
func (o *V2TriggerEventNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 trigger event not found response has a 3xx status code
func (o *V2TriggerEventNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 trigger event not found response has a 4xx status code
func (o *V2TriggerEventNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v2 trigger event not found response has a 5xx status code
func (o *V2TriggerEventNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 trigger event not found response a status code equal to that given
func (o *V2TriggerEventNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *V2TriggerEventNotFound) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventNotFound  %+v", 404, o.Payload)
}

func (o *V2TriggerEventNotFound) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventNotFound  %+v", 404, o.Payload)
}

func (o *V2TriggerEventNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2TriggerEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2TriggerEventMethodNotAllowed creates a V2TriggerEventMethodNotAllowed with default headers values
func NewV2TriggerEventMethodNotAllowed() *V2TriggerEventMethodNotAllowed {
	return &V2TriggerEventMethodNotAllowed{}
}

/*
V2TriggerEventMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed.
*/
type V2TriggerEventMethodNotAllowed struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 trigger event method not allowed response has a 2xx status code
func (o *V2TriggerEventMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 trigger event method not allowed response has a 3xx status code
func (o *V2TriggerEventMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 trigger event method not allowed response has a 4xx status code
func (o *V2TriggerEventMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this v2 trigger event method not allowed response has a 5xx status code
func (o *V2TriggerEventMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 trigger event method not allowed response a status code equal to that given
func (o *V2TriggerEventMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *V2TriggerEventMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *V2TriggerEventMethodNotAllowed) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *V2TriggerEventMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2TriggerEventMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2TriggerEventConflict creates a V2TriggerEventConflict with default headers values
func NewV2TriggerEventConflict() *V2TriggerEventConflict {
	return &V2TriggerEventConflict{}
}

/*
V2TriggerEventConflict describes a response with status code 409, with default header values.

Cluster cannot accept new agents due to its current state.
*/
type V2TriggerEventConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 trigger event conflict response has a 2xx status code
func (o *V2TriggerEventConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 trigger event conflict response has a 3xx status code
func (o *V2TriggerEventConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 trigger event conflict response has a 4xx status code
func (o *V2TriggerEventConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this v2 trigger event conflict response has a 5xx status code
func (o *V2TriggerEventConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 trigger event conflict response a status code equal to that given
func (o *V2TriggerEventConflict) IsCode(code int) bool {
	return code == 409
}

func (o *V2TriggerEventConflict) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventConflict  %+v", 409, o.Payload)
}

func (o *V2TriggerEventConflict) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventConflict  %+v", 409, o.Payload)
}

func (o *V2TriggerEventConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2TriggerEventConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2TriggerEventInternalServerError creates a V2TriggerEventInternalServerError with default headers values
func NewV2TriggerEventInternalServerError() *V2TriggerEventInternalServerError {
	return &V2TriggerEventInternalServerError{}
}

/*
V2TriggerEventInternalServerError describes a response with status code 500, with default header values.

Error.
*/
type V2TriggerEventInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 trigger event internal server error response has a 2xx status code
func (o *V2TriggerEventInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 trigger event internal server error response has a 3xx status code
func (o *V2TriggerEventInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 trigger event internal server error response has a 4xx status code
func (o *V2TriggerEventInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v2 trigger event internal server error response has a 5xx status code
func (o *V2TriggerEventInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v2 trigger event internal server error response a status code equal to that given
func (o *V2TriggerEventInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *V2TriggerEventInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventInternalServerError  %+v", 500, o.Payload)
}

func (o *V2TriggerEventInternalServerError) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventInternalServerError  %+v", 500, o.Payload)
}

func (o *V2TriggerEventInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2TriggerEventInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2TriggerEventNotImplemented creates a V2TriggerEventNotImplemented with default headers values
func NewV2TriggerEventNotImplemented() *V2TriggerEventNotImplemented {
	return &V2TriggerEventNotImplemented{}
}

/*
V2TriggerEventNotImplemented describes a response with status code 501, with default header values.

Not implemented.
*/
type V2TriggerEventNotImplemented struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 trigger event not implemented response has a 2xx status code
func (o *V2TriggerEventNotImplemented) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 trigger event not implemented response has a 3xx status code
func (o *V2TriggerEventNotImplemented) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 trigger event not implemented response has a 4xx status code
func (o *V2TriggerEventNotImplemented) IsClientError() bool {
	return false
}

// IsServerError returns true when this v2 trigger event not implemented response has a 5xx status code
func (o *V2TriggerEventNotImplemented) IsServerError() bool {
	return true
}

// IsCode returns true when this v2 trigger event not implemented response a status code equal to that given
func (o *V2TriggerEventNotImplemented) IsCode(code int) bool {
	return code == 501
}

func (o *V2TriggerEventNotImplemented) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventNotImplemented  %+v", 501, o.Payload)
}

func (o *V2TriggerEventNotImplemented) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventNotImplemented  %+v", 501, o.Payload)
}

func (o *V2TriggerEventNotImplemented) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2TriggerEventNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2TriggerEventServiceUnavailable creates a V2TriggerEventServiceUnavailable with default headers values
func NewV2TriggerEventServiceUnavailable() *V2TriggerEventServiceUnavailable {
	return &V2TriggerEventServiceUnavailable{}
}

/*
V2TriggerEventServiceUnavailable describes a response with status code 503, with default header values.

Unavailable.
*/
type V2TriggerEventServiceUnavailable struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 trigger event service unavailable response has a 2xx status code
func (o *V2TriggerEventServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 trigger event service unavailable response has a 3xx status code
func (o *V2TriggerEventServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 trigger event service unavailable response has a 4xx status code
func (o *V2TriggerEventServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this v2 trigger event service unavailable response has a 5xx status code
func (o *V2TriggerEventServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this v2 trigger event service unavailable response a status code equal to that given
func (o *V2TriggerEventServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *V2TriggerEventServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventServiceUnavailable  %+v", 503, o.Payload)
}

func (o *V2TriggerEventServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2TriggerEventServiceUnavailable  %+v", 503, o.Payload)
}

func (o *V2TriggerEventServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2TriggerEventServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
