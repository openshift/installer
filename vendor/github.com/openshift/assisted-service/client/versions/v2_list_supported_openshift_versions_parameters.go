// Code generated by go-swagger; DO NOT EDIT.

package versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewV2ListSupportedOpenshiftVersionsParams creates a new V2ListSupportedOpenshiftVersionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewV2ListSupportedOpenshiftVersionsParams() *V2ListSupportedOpenshiftVersionsParams {
	return &V2ListSupportedOpenshiftVersionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewV2ListSupportedOpenshiftVersionsParamsWithTimeout creates a new V2ListSupportedOpenshiftVersionsParams object
// with the ability to set a timeout on a request.
func NewV2ListSupportedOpenshiftVersionsParamsWithTimeout(timeout time.Duration) *V2ListSupportedOpenshiftVersionsParams {
	return &V2ListSupportedOpenshiftVersionsParams{
		timeout: timeout,
	}
}

// NewV2ListSupportedOpenshiftVersionsParamsWithContext creates a new V2ListSupportedOpenshiftVersionsParams object
// with the ability to set a context for a request.
func NewV2ListSupportedOpenshiftVersionsParamsWithContext(ctx context.Context) *V2ListSupportedOpenshiftVersionsParams {
	return &V2ListSupportedOpenshiftVersionsParams{
		Context: ctx,
	}
}

// NewV2ListSupportedOpenshiftVersionsParamsWithHTTPClient creates a new V2ListSupportedOpenshiftVersionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewV2ListSupportedOpenshiftVersionsParamsWithHTTPClient(client *http.Client) *V2ListSupportedOpenshiftVersionsParams {
	return &V2ListSupportedOpenshiftVersionsParams{
		HTTPClient: client,
	}
}

/*
V2ListSupportedOpenshiftVersionsParams contains all the parameters to send to the API endpoint

	for the v2 list supported openshift versions operation.

	Typically these are written to a http.Request.
*/
type V2ListSupportedOpenshiftVersionsParams struct {

	/* OnlyLatest.

	   If true, returns only the latest version for each minor.
	*/
	OnlyLatest *bool

	/* Version.

	   Retrieves only the versions that contain the specified substring in their display name.
	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the v2 list supported openshift versions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V2ListSupportedOpenshiftVersionsParams) WithDefaults() *V2ListSupportedOpenshiftVersionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the v2 list supported openshift versions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V2ListSupportedOpenshiftVersionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the v2 list supported openshift versions params
func (o *V2ListSupportedOpenshiftVersionsParams) WithTimeout(timeout time.Duration) *V2ListSupportedOpenshiftVersionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 list supported openshift versions params
func (o *V2ListSupportedOpenshiftVersionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 list supported openshift versions params
func (o *V2ListSupportedOpenshiftVersionsParams) WithContext(ctx context.Context) *V2ListSupportedOpenshiftVersionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 list supported openshift versions params
func (o *V2ListSupportedOpenshiftVersionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 list supported openshift versions params
func (o *V2ListSupportedOpenshiftVersionsParams) WithHTTPClient(client *http.Client) *V2ListSupportedOpenshiftVersionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 list supported openshift versions params
func (o *V2ListSupportedOpenshiftVersionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOnlyLatest adds the onlyLatest to the v2 list supported openshift versions params
func (o *V2ListSupportedOpenshiftVersionsParams) WithOnlyLatest(onlyLatest *bool) *V2ListSupportedOpenshiftVersionsParams {
	o.SetOnlyLatest(onlyLatest)
	return o
}

// SetOnlyLatest adds the onlyLatest to the v2 list supported openshift versions params
func (o *V2ListSupportedOpenshiftVersionsParams) SetOnlyLatest(onlyLatest *bool) {
	o.OnlyLatest = onlyLatest
}

// WithVersion adds the version to the v2 list supported openshift versions params
func (o *V2ListSupportedOpenshiftVersionsParams) WithVersion(version *string) *V2ListSupportedOpenshiftVersionsParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the v2 list supported openshift versions params
func (o *V2ListSupportedOpenshiftVersionsParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *V2ListSupportedOpenshiftVersionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OnlyLatest != nil {

		// query param only_latest
		var qrOnlyLatest bool

		if o.OnlyLatest != nil {
			qrOnlyLatest = *o.OnlyLatest
		}
		qOnlyLatest := swag.FormatBool(qrOnlyLatest)
		if qOnlyLatest != "" {

			if err := r.SetQueryParam("only_latest", qOnlyLatest); err != nil {
				return err
			}
		}
	}

	if o.Version != nil {

		// query param version
		var qrVersion string

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
