// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/openshift/assisted-service/models"
)

// NewV2UpdateClusterFinalizingProgressParams creates a new V2UpdateClusterFinalizingProgressParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewV2UpdateClusterFinalizingProgressParams() *V2UpdateClusterFinalizingProgressParams {
	return &V2UpdateClusterFinalizingProgressParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewV2UpdateClusterFinalizingProgressParamsWithTimeout creates a new V2UpdateClusterFinalizingProgressParams object
// with the ability to set a timeout on a request.
func NewV2UpdateClusterFinalizingProgressParamsWithTimeout(timeout time.Duration) *V2UpdateClusterFinalizingProgressParams {
	return &V2UpdateClusterFinalizingProgressParams{
		timeout: timeout,
	}
}

// NewV2UpdateClusterFinalizingProgressParamsWithContext creates a new V2UpdateClusterFinalizingProgressParams object
// with the ability to set a context for a request.
func NewV2UpdateClusterFinalizingProgressParamsWithContext(ctx context.Context) *V2UpdateClusterFinalizingProgressParams {
	return &V2UpdateClusterFinalizingProgressParams{
		Context: ctx,
	}
}

// NewV2UpdateClusterFinalizingProgressParamsWithHTTPClient creates a new V2UpdateClusterFinalizingProgressParams object
// with the ability to set a custom HTTPClient for a request.
func NewV2UpdateClusterFinalizingProgressParamsWithHTTPClient(client *http.Client) *V2UpdateClusterFinalizingProgressParams {
	return &V2UpdateClusterFinalizingProgressParams{
		HTTPClient: client,
	}
}

/*
V2UpdateClusterFinalizingProgressParams contains all the parameters to send to the API endpoint

	for the v2 update cluster finalizing progress operation.

	Typically these are written to a http.Request.
*/
type V2UpdateClusterFinalizingProgressParams struct {

	/* ClusterID.

	   The cluster being updated.

	   Format: uuid
	*/
	ClusterID strfmt.UUID

	/* FinalizingProgress.

	   New progress value.
	*/
	FinalizingProgress *models.ClusterFinalizingProgress

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the v2 update cluster finalizing progress params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V2UpdateClusterFinalizingProgressParams) WithDefaults() *V2UpdateClusterFinalizingProgressParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the v2 update cluster finalizing progress params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V2UpdateClusterFinalizingProgressParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the v2 update cluster finalizing progress params
func (o *V2UpdateClusterFinalizingProgressParams) WithTimeout(timeout time.Duration) *V2UpdateClusterFinalizingProgressParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 update cluster finalizing progress params
func (o *V2UpdateClusterFinalizingProgressParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 update cluster finalizing progress params
func (o *V2UpdateClusterFinalizingProgressParams) WithContext(ctx context.Context) *V2UpdateClusterFinalizingProgressParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 update cluster finalizing progress params
func (o *V2UpdateClusterFinalizingProgressParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 update cluster finalizing progress params
func (o *V2UpdateClusterFinalizingProgressParams) WithHTTPClient(client *http.Client) *V2UpdateClusterFinalizingProgressParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 update cluster finalizing progress params
func (o *V2UpdateClusterFinalizingProgressParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the v2 update cluster finalizing progress params
func (o *V2UpdateClusterFinalizingProgressParams) WithClusterID(clusterID strfmt.UUID) *V2UpdateClusterFinalizingProgressParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the v2 update cluster finalizing progress params
func (o *V2UpdateClusterFinalizingProgressParams) SetClusterID(clusterID strfmt.UUID) {
	o.ClusterID = clusterID
}

// WithFinalizingProgress adds the finalizingProgress to the v2 update cluster finalizing progress params
func (o *V2UpdateClusterFinalizingProgressParams) WithFinalizingProgress(finalizingProgress *models.ClusterFinalizingProgress) *V2UpdateClusterFinalizingProgressParams {
	o.SetFinalizingProgress(finalizingProgress)
	return o
}

// SetFinalizingProgress adds the finalizingProgress to the v2 update cluster finalizing progress params
func (o *V2UpdateClusterFinalizingProgressParams) SetFinalizingProgress(finalizingProgress *models.ClusterFinalizingProgress) {
	o.FinalizingProgress = finalizingProgress
}

// WriteToRequest writes these params to a swagger request
func (o *V2UpdateClusterFinalizingProgressParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cluster_id
	if err := r.SetPathParam("cluster_id", o.ClusterID.String()); err != nil {
		return err
	}
	if o.FinalizingProgress != nil {
		if err := r.SetBodyParam(o.FinalizingProgress); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
