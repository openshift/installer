// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openshift/assisted-service/models"
)

// ResetClusterReader is a Reader for the ResetCluster structure.
type ResetClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResetClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewResetClusterAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewResetClusterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewResetClusterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewResetClusterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewResetClusterMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewResetClusterConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewResetClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewResetClusterAccepted creates a ResetClusterAccepted with default headers values
func NewResetClusterAccepted() *ResetClusterAccepted {
	return &ResetClusterAccepted{}
}

/* ResetClusterAccepted describes a response with status code 202, with default header values.

Success.
*/
type ResetClusterAccepted struct {
	Payload *models.Cluster
}

func (o *ResetClusterAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{cluster_id}/actions/reset][%d] resetClusterAccepted  %+v", 202, o.Payload)
}
func (o *ResetClusterAccepted) GetPayload() *models.Cluster {
	return o.Payload
}

func (o *ResetClusterAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Cluster)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetClusterUnauthorized creates a ResetClusterUnauthorized with default headers values
func NewResetClusterUnauthorized() *ResetClusterUnauthorized {
	return &ResetClusterUnauthorized{}
}

/* ResetClusterUnauthorized describes a response with status code 401, with default header values.

Unauthorized.
*/
type ResetClusterUnauthorized struct {
	Payload *models.InfraError
}

func (o *ResetClusterUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{cluster_id}/actions/reset][%d] resetClusterUnauthorized  %+v", 401, o.Payload)
}
func (o *ResetClusterUnauthorized) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *ResetClusterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetClusterForbidden creates a ResetClusterForbidden with default headers values
func NewResetClusterForbidden() *ResetClusterForbidden {
	return &ResetClusterForbidden{}
}

/* ResetClusterForbidden describes a response with status code 403, with default header values.

Forbidden.
*/
type ResetClusterForbidden struct {
	Payload *models.InfraError
}

func (o *ResetClusterForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{cluster_id}/actions/reset][%d] resetClusterForbidden  %+v", 403, o.Payload)
}
func (o *ResetClusterForbidden) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *ResetClusterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetClusterNotFound creates a ResetClusterNotFound with default headers values
func NewResetClusterNotFound() *ResetClusterNotFound {
	return &ResetClusterNotFound{}
}

/* ResetClusterNotFound describes a response with status code 404, with default header values.

Error.
*/
type ResetClusterNotFound struct {
	Payload *models.Error
}

func (o *ResetClusterNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{cluster_id}/actions/reset][%d] resetClusterNotFound  %+v", 404, o.Payload)
}
func (o *ResetClusterNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ResetClusterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetClusterMethodNotAllowed creates a ResetClusterMethodNotAllowed with default headers values
func NewResetClusterMethodNotAllowed() *ResetClusterMethodNotAllowed {
	return &ResetClusterMethodNotAllowed{}
}

/* ResetClusterMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed.
*/
type ResetClusterMethodNotAllowed struct {
	Payload *models.Error
}

func (o *ResetClusterMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{cluster_id}/actions/reset][%d] resetClusterMethodNotAllowed  %+v", 405, o.Payload)
}
func (o *ResetClusterMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *ResetClusterMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetClusterConflict creates a ResetClusterConflict with default headers values
func NewResetClusterConflict() *ResetClusterConflict {
	return &ResetClusterConflict{}
}

/* ResetClusterConflict describes a response with status code 409, with default header values.

Error.
*/
type ResetClusterConflict struct {
	Payload *models.Error
}

func (o *ResetClusterConflict) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{cluster_id}/actions/reset][%d] resetClusterConflict  %+v", 409, o.Payload)
}
func (o *ResetClusterConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *ResetClusterConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetClusterInternalServerError creates a ResetClusterInternalServerError with default headers values
func NewResetClusterInternalServerError() *ResetClusterInternalServerError {
	return &ResetClusterInternalServerError{}
}

/* ResetClusterInternalServerError describes a response with status code 500, with default header values.

Error.
*/
type ResetClusterInternalServerError struct {
	Payload *models.Error
}

func (o *ResetClusterInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{cluster_id}/actions/reset][%d] resetClusterInternalServerError  %+v", 500, o.Payload)
}
func (o *ResetClusterInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ResetClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
