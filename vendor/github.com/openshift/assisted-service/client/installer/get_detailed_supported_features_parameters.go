// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetDetailedSupportedFeaturesParams creates a new GetDetailedSupportedFeaturesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDetailedSupportedFeaturesParams() *GetDetailedSupportedFeaturesParams {
	return &GetDetailedSupportedFeaturesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDetailedSupportedFeaturesParamsWithTimeout creates a new GetDetailedSupportedFeaturesParams object
// with the ability to set a timeout on a request.
func NewGetDetailedSupportedFeaturesParamsWithTimeout(timeout time.Duration) *GetDetailedSupportedFeaturesParams {
	return &GetDetailedSupportedFeaturesParams{
		timeout: timeout,
	}
}

// NewGetDetailedSupportedFeaturesParamsWithContext creates a new GetDetailedSupportedFeaturesParams object
// with the ability to set a context for a request.
func NewGetDetailedSupportedFeaturesParamsWithContext(ctx context.Context) *GetDetailedSupportedFeaturesParams {
	return &GetDetailedSupportedFeaturesParams{
		Context: ctx,
	}
}

// NewGetDetailedSupportedFeaturesParamsWithHTTPClient creates a new GetDetailedSupportedFeaturesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDetailedSupportedFeaturesParamsWithHTTPClient(client *http.Client) *GetDetailedSupportedFeaturesParams {
	return &GetDetailedSupportedFeaturesParams{
		HTTPClient: client,
	}
}

/*
GetDetailedSupportedFeaturesParams contains all the parameters to send to the API endpoint

	for the get detailed supported features operation.

	Typically these are written to a http.Request.
*/
type GetDetailedSupportedFeaturesParams struct {

	/* CPUArchitecture.

	   The CPU architecture of the image (x86_64/arm64/etc).

	   Default: "x86_64"
	*/
	CPUArchitecture *string

	/* ExternalPlatformName.

	   External platform name when platform type is set to external. The value of this parameter will be ignored if platform_type is not external.
	*/
	ExternalPlatformName *string

	/* OpenshiftVersion.

	   Version of the OpenShift cluster.
	*/
	OpenshiftVersion string

	/* PlatformType.

	   The provider platform type.
	*/
	PlatformType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get detailed supported features params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDetailedSupportedFeaturesParams) WithDefaults() *GetDetailedSupportedFeaturesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get detailed supported features params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDetailedSupportedFeaturesParams) SetDefaults() {
	var (
		cPUArchitectureDefault = string("x86_64")
	)

	val := GetDetailedSupportedFeaturesParams{
		CPUArchitecture: &cPUArchitectureDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) WithTimeout(timeout time.Duration) *GetDetailedSupportedFeaturesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) WithContext(ctx context.Context) *GetDetailedSupportedFeaturesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) WithHTTPClient(client *http.Client) *GetDetailedSupportedFeaturesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCPUArchitecture adds the cPUArchitecture to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) WithCPUArchitecture(cPUArchitecture *string) *GetDetailedSupportedFeaturesParams {
	o.SetCPUArchitecture(cPUArchitecture)
	return o
}

// SetCPUArchitecture adds the cpuArchitecture to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) SetCPUArchitecture(cPUArchitecture *string) {
	o.CPUArchitecture = cPUArchitecture
}

// WithExternalPlatformName adds the externalPlatformName to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) WithExternalPlatformName(externalPlatformName *string) *GetDetailedSupportedFeaturesParams {
	o.SetExternalPlatformName(externalPlatformName)
	return o
}

// SetExternalPlatformName adds the externalPlatformName to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) SetExternalPlatformName(externalPlatformName *string) {
	o.ExternalPlatformName = externalPlatformName
}

// WithOpenshiftVersion adds the openshiftVersion to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) WithOpenshiftVersion(openshiftVersion string) *GetDetailedSupportedFeaturesParams {
	o.SetOpenshiftVersion(openshiftVersion)
	return o
}

// SetOpenshiftVersion adds the openshiftVersion to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) SetOpenshiftVersion(openshiftVersion string) {
	o.OpenshiftVersion = openshiftVersion
}

// WithPlatformType adds the platformType to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) WithPlatformType(platformType *string) *GetDetailedSupportedFeaturesParams {
	o.SetPlatformType(platformType)
	return o
}

// SetPlatformType adds the platformType to the get detailed supported features params
func (o *GetDetailedSupportedFeaturesParams) SetPlatformType(platformType *string) {
	o.PlatformType = platformType
}

// WriteToRequest writes these params to a swagger request
func (o *GetDetailedSupportedFeaturesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CPUArchitecture != nil {

		// query param cpu_architecture
		var qrCPUArchitecture string

		if o.CPUArchitecture != nil {
			qrCPUArchitecture = *o.CPUArchitecture
		}
		qCPUArchitecture := qrCPUArchitecture
		if qCPUArchitecture != "" {

			if err := r.SetQueryParam("cpu_architecture", qCPUArchitecture); err != nil {
				return err
			}
		}
	}

	if o.ExternalPlatformName != nil {

		// query param external_platform_name
		var qrExternalPlatformName string

		if o.ExternalPlatformName != nil {
			qrExternalPlatformName = *o.ExternalPlatformName
		}
		qExternalPlatformName := qrExternalPlatformName
		if qExternalPlatformName != "" {

			if err := r.SetQueryParam("external_platform_name", qExternalPlatformName); err != nil {
				return err
			}
		}
	}

	// query param openshift_version
	qrOpenshiftVersion := o.OpenshiftVersion
	qOpenshiftVersion := qrOpenshiftVersion
	if qOpenshiftVersion != "" {

		if err := r.SetQueryParam("openshift_version", qOpenshiftVersion); err != nil {
			return err
		}
	}

	if o.PlatformType != nil {

		// query param platform_type
		var qrPlatformType string

		if o.PlatformType != nil {
			qrPlatformType = *o.PlatformType
		}
		qPlatformType := qrPlatformType
		if qPlatformType != "" {

			if err := r.SetQueryParam("platform_type", qPlatformType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
