// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openshift/assisted-service/models"
)

// DisableHostReader is a Reader for the DisableHost structure.
type DisableHostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DisableHostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDisableHostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDisableHostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDisableHostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDisableHostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDisableHostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDisableHostConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDisableHostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDisableHostOK creates a DisableHostOK with default headers values
func NewDisableHostOK() *DisableHostOK {
	return &DisableHostOK{}
}

/* DisableHostOK describes a response with status code 200, with default header values.

Success.
*/
type DisableHostOK struct {
	Payload *models.Cluster
}

func (o *DisableHostOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{cluster_id}/hosts/{host_id}/actions/enable][%d] disableHostOK  %+v", 200, o.Payload)
}
func (o *DisableHostOK) GetPayload() *models.Cluster {
	return o.Payload
}

func (o *DisableHostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Cluster)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableHostUnauthorized creates a DisableHostUnauthorized with default headers values
func NewDisableHostUnauthorized() *DisableHostUnauthorized {
	return &DisableHostUnauthorized{}
}

/* DisableHostUnauthorized describes a response with status code 401, with default header values.

Unauthorized.
*/
type DisableHostUnauthorized struct {
	Payload *models.InfraError
}

func (o *DisableHostUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{cluster_id}/hosts/{host_id}/actions/enable][%d] disableHostUnauthorized  %+v", 401, o.Payload)
}
func (o *DisableHostUnauthorized) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *DisableHostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableHostForbidden creates a DisableHostForbidden with default headers values
func NewDisableHostForbidden() *DisableHostForbidden {
	return &DisableHostForbidden{}
}

/* DisableHostForbidden describes a response with status code 403, with default header values.

Forbidden.
*/
type DisableHostForbidden struct {
	Payload *models.InfraError
}

func (o *DisableHostForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{cluster_id}/hosts/{host_id}/actions/enable][%d] disableHostForbidden  %+v", 403, o.Payload)
}
func (o *DisableHostForbidden) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *DisableHostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableHostNotFound creates a DisableHostNotFound with default headers values
func NewDisableHostNotFound() *DisableHostNotFound {
	return &DisableHostNotFound{}
}

/* DisableHostNotFound describes a response with status code 404, with default header values.

Error.
*/
type DisableHostNotFound struct {
	Payload *models.Error
}

func (o *DisableHostNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{cluster_id}/hosts/{host_id}/actions/enable][%d] disableHostNotFound  %+v", 404, o.Payload)
}
func (o *DisableHostNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DisableHostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableHostMethodNotAllowed creates a DisableHostMethodNotAllowed with default headers values
func NewDisableHostMethodNotAllowed() *DisableHostMethodNotAllowed {
	return &DisableHostMethodNotAllowed{}
}

/* DisableHostMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed.
*/
type DisableHostMethodNotAllowed struct {
	Payload *models.Error
}

func (o *DisableHostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{cluster_id}/hosts/{host_id}/actions/enable][%d] disableHostMethodNotAllowed  %+v", 405, o.Payload)
}
func (o *DisableHostMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *DisableHostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableHostConflict creates a DisableHostConflict with default headers values
func NewDisableHostConflict() *DisableHostConflict {
	return &DisableHostConflict{}
}

/* DisableHostConflict describes a response with status code 409, with default header values.

Error.
*/
type DisableHostConflict struct {
	Payload *models.Error
}

func (o *DisableHostConflict) Error() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{cluster_id}/hosts/{host_id}/actions/enable][%d] disableHostConflict  %+v", 409, o.Payload)
}
func (o *DisableHostConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *DisableHostConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableHostInternalServerError creates a DisableHostInternalServerError with default headers values
func NewDisableHostInternalServerError() *DisableHostInternalServerError {
	return &DisableHostInternalServerError{}
}

/* DisableHostInternalServerError describes a response with status code 500, with default header values.

Error.
*/
type DisableHostInternalServerError struct {
	Payload *models.Error
}

func (o *DisableHostInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{cluster_id}/hosts/{host_id}/actions/enable][%d] disableHostInternalServerError  %+v", 500, o.Payload)
}
func (o *DisableHostInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *DisableHostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
