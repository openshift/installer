// Code generated by go-swagger; DO NOT EDIT.

package operators

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openshift/assisted-service/models"
)

// ReportMonitoredOperatorStatusReader is a Reader for the ReportMonitoredOperatorStatus structure.
type ReportMonitoredOperatorStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReportMonitoredOperatorStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReportMonitoredOperatorStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReportMonitoredOperatorStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReportMonitoredOperatorStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReportMonitoredOperatorStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReportMonitoredOperatorStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewReportMonitoredOperatorStatusMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReportMonitoredOperatorStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReportMonitoredOperatorStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewReportMonitoredOperatorStatusServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewReportMonitoredOperatorStatusOK creates a ReportMonitoredOperatorStatusOK with default headers values
func NewReportMonitoredOperatorStatusOK() *ReportMonitoredOperatorStatusOK {
	return &ReportMonitoredOperatorStatusOK{}
}

/* ReportMonitoredOperatorStatusOK describes a response with status code 200, with default header values.

Success.
*/
type ReportMonitoredOperatorStatusOK struct {
}

func (o *ReportMonitoredOperatorStatusOK) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{cluster_id}/monitored_operators][%d] reportMonitoredOperatorStatusOK ", 200)
}

func (o *ReportMonitoredOperatorStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReportMonitoredOperatorStatusBadRequest creates a ReportMonitoredOperatorStatusBadRequest with default headers values
func NewReportMonitoredOperatorStatusBadRequest() *ReportMonitoredOperatorStatusBadRequest {
	return &ReportMonitoredOperatorStatusBadRequest{}
}

/* ReportMonitoredOperatorStatusBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ReportMonitoredOperatorStatusBadRequest struct {
	Payload *models.Error
}

func (o *ReportMonitoredOperatorStatusBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{cluster_id}/monitored_operators][%d] reportMonitoredOperatorStatusBadRequest  %+v", 400, o.Payload)
}
func (o *ReportMonitoredOperatorStatusBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReportMonitoredOperatorStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportMonitoredOperatorStatusUnauthorized creates a ReportMonitoredOperatorStatusUnauthorized with default headers values
func NewReportMonitoredOperatorStatusUnauthorized() *ReportMonitoredOperatorStatusUnauthorized {
	return &ReportMonitoredOperatorStatusUnauthorized{}
}

/* ReportMonitoredOperatorStatusUnauthorized describes a response with status code 401, with default header values.

Unauthorized.
*/
type ReportMonitoredOperatorStatusUnauthorized struct {
	Payload *models.InfraError
}

func (o *ReportMonitoredOperatorStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{cluster_id}/monitored_operators][%d] reportMonitoredOperatorStatusUnauthorized  %+v", 401, o.Payload)
}
func (o *ReportMonitoredOperatorStatusUnauthorized) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *ReportMonitoredOperatorStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportMonitoredOperatorStatusForbidden creates a ReportMonitoredOperatorStatusForbidden with default headers values
func NewReportMonitoredOperatorStatusForbidden() *ReportMonitoredOperatorStatusForbidden {
	return &ReportMonitoredOperatorStatusForbidden{}
}

/* ReportMonitoredOperatorStatusForbidden describes a response with status code 403, with default header values.

Forbidden.
*/
type ReportMonitoredOperatorStatusForbidden struct {
	Payload *models.InfraError
}

func (o *ReportMonitoredOperatorStatusForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{cluster_id}/monitored_operators][%d] reportMonitoredOperatorStatusForbidden  %+v", 403, o.Payload)
}
func (o *ReportMonitoredOperatorStatusForbidden) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *ReportMonitoredOperatorStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportMonitoredOperatorStatusNotFound creates a ReportMonitoredOperatorStatusNotFound with default headers values
func NewReportMonitoredOperatorStatusNotFound() *ReportMonitoredOperatorStatusNotFound {
	return &ReportMonitoredOperatorStatusNotFound{}
}

/* ReportMonitoredOperatorStatusNotFound describes a response with status code 404, with default header values.

Error.
*/
type ReportMonitoredOperatorStatusNotFound struct {
	Payload *models.Error
}

func (o *ReportMonitoredOperatorStatusNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{cluster_id}/monitored_operators][%d] reportMonitoredOperatorStatusNotFound  %+v", 404, o.Payload)
}
func (o *ReportMonitoredOperatorStatusNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReportMonitoredOperatorStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportMonitoredOperatorStatusMethodNotAllowed creates a ReportMonitoredOperatorStatusMethodNotAllowed with default headers values
func NewReportMonitoredOperatorStatusMethodNotAllowed() *ReportMonitoredOperatorStatusMethodNotAllowed {
	return &ReportMonitoredOperatorStatusMethodNotAllowed{}
}

/* ReportMonitoredOperatorStatusMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed.
*/
type ReportMonitoredOperatorStatusMethodNotAllowed struct {
	Payload *models.Error
}

func (o *ReportMonitoredOperatorStatusMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{cluster_id}/monitored_operators][%d] reportMonitoredOperatorStatusMethodNotAllowed  %+v", 405, o.Payload)
}
func (o *ReportMonitoredOperatorStatusMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReportMonitoredOperatorStatusMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportMonitoredOperatorStatusConflict creates a ReportMonitoredOperatorStatusConflict with default headers values
func NewReportMonitoredOperatorStatusConflict() *ReportMonitoredOperatorStatusConflict {
	return &ReportMonitoredOperatorStatusConflict{}
}

/* ReportMonitoredOperatorStatusConflict describes a response with status code 409, with default header values.

Error.
*/
type ReportMonitoredOperatorStatusConflict struct {
	Payload *models.Error
}

func (o *ReportMonitoredOperatorStatusConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{cluster_id}/monitored_operators][%d] reportMonitoredOperatorStatusConflict  %+v", 409, o.Payload)
}
func (o *ReportMonitoredOperatorStatusConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReportMonitoredOperatorStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportMonitoredOperatorStatusInternalServerError creates a ReportMonitoredOperatorStatusInternalServerError with default headers values
func NewReportMonitoredOperatorStatusInternalServerError() *ReportMonitoredOperatorStatusInternalServerError {
	return &ReportMonitoredOperatorStatusInternalServerError{}
}

/* ReportMonitoredOperatorStatusInternalServerError describes a response with status code 500, with default header values.

Error.
*/
type ReportMonitoredOperatorStatusInternalServerError struct {
	Payload *models.Error
}

func (o *ReportMonitoredOperatorStatusInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{cluster_id}/monitored_operators][%d] reportMonitoredOperatorStatusInternalServerError  %+v", 500, o.Payload)
}
func (o *ReportMonitoredOperatorStatusInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReportMonitoredOperatorStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportMonitoredOperatorStatusServiceUnavailable creates a ReportMonitoredOperatorStatusServiceUnavailable with default headers values
func NewReportMonitoredOperatorStatusServiceUnavailable() *ReportMonitoredOperatorStatusServiceUnavailable {
	return &ReportMonitoredOperatorStatusServiceUnavailable{}
}

/* ReportMonitoredOperatorStatusServiceUnavailable describes a response with status code 503, with default header values.

Unavailable.
*/
type ReportMonitoredOperatorStatusServiceUnavailable struct {
	Payload *models.Error
}

func (o *ReportMonitoredOperatorStatusServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{cluster_id}/monitored_operators][%d] reportMonitoredOperatorStatusServiceUnavailable  %+v", 503, o.Payload)
}
func (o *ReportMonitoredOperatorStatusServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReportMonitoredOperatorStatusServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
