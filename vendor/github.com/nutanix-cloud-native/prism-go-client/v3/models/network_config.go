// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkConfig Network Configuration for PC VM.
//
// Network Configuration for PC VM.
//
// swagger:model network_config
type NetworkConfig struct {

	// Gateway IP address.
	// Pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
	DefaultGateway string `json:"default_gateway,omitempty"`

	// Network name.
	NetworkName string `json:"network_name,omitempty"`

	// Network uuid.
	// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
	NetworkUUID string `json:"network_uuid,omitempty"`

	// Subnet mask IP address.
	// Pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
	SubnetMask string `json:"subnet_mask,omitempty"`
}

// Validate validates this network config
func (m *NetworkConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetMask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkConfig) validateDefaultGateway(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultGateway) { // not required
		return nil
	}

	if err := validate.Pattern("default_gateway", "body", m.DefaultGateway, `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
		return err
	}

	return nil
}

func (m *NetworkConfig) validateNetworkUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkUUID) { // not required
		return nil
	}

	if err := validate.Pattern("network_uuid", "body", m.NetworkUUID, `^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$`); err != nil {
		return err
	}

	return nil
}

func (m *NetworkConfig) validateSubnetMask(formats strfmt.Registry) error {
	if swag.IsZero(m.SubnetMask) { // not required
		return nil
	}

	if err := validate.Pattern("subnet_mask", "body", m.SubnetMask, `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this network config based on context it is used
func (m *NetworkConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetworkConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkConfig) UnmarshalBinary(b []byte) error {
	var res NetworkConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
