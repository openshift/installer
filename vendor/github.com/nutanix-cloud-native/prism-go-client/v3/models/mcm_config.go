// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// McmConfig MCM config for PC Deployment
//
// MCM config for PC Deployment definition.
//
// swagger:model mcm_config
type McmConfig struct {

	// API Keys app base URL.
	// Required: true
	// Max Length: 512
	// Pattern: ^((((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?)(#[\w\-]+)?$|(http[s]?:\/\/([\w\d\-_\.])((\/?\w+\.*)*(:[0-9]+)*\/?)))
	ComponentRegistryBaseURL *string `json:"component_registry_base_url"`

	// deployment settings
	// Required: true
	DeploymentSettings *DeploymentSettings `json:"deployment_settings"`

	// MCM base URL.
	// Required: true
	// Max Length: 512
	// Pattern: ^((((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?)(#[\w\-]+)?$|(http[s]?:\/\/([\w\d\-_\.])((\/?\w+\.*)*(:[0-9]+)*\/?)))
	OrchestratorBaseURL *string `json:"orchestrator_base_url"`

	// Type of the deployed component. For example Prism Central or Flow Gateway.
	// Required: true
	ProductName *string `json:"product_name"`
}

// Validate validates this mcm config
func (m *McmConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponentRegistryBaseURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrchestratorBaseURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *McmConfig) validateComponentRegistryBaseURL(formats strfmt.Registry) error {

	if err := validate.Required("component_registry_base_url", "body", m.ComponentRegistryBaseURL); err != nil {
		return err
	}

	if err := validate.MaxLength("component_registry_base_url", "body", *m.ComponentRegistryBaseURL, 512); err != nil {
		return err
	}

	if err := validate.Pattern("component_registry_base_url", "body", *m.ComponentRegistryBaseURL, `^((((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?)(#[\w\-]+)?$|(http[s]?:\/\/([\w\d\-_\.])((\/?\w+\.*)*(:[0-9]+)*\/?)))`); err != nil {
		return err
	}

	return nil
}

func (m *McmConfig) validateDeploymentSettings(formats strfmt.Registry) error {

	if err := validate.Required("deployment_settings", "body", m.DeploymentSettings); err != nil {
		return err
	}

	if m.DeploymentSettings != nil {
		if err := m.DeploymentSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployment_settings")
			}
			return err
		}
	}

	return nil
}

func (m *McmConfig) validateOrchestratorBaseURL(formats strfmt.Registry) error {

	if err := validate.Required("orchestrator_base_url", "body", m.OrchestratorBaseURL); err != nil {
		return err
	}

	if err := validate.MaxLength("orchestrator_base_url", "body", *m.OrchestratorBaseURL, 512); err != nil {
		return err
	}

	if err := validate.Pattern("orchestrator_base_url", "body", *m.OrchestratorBaseURL, `^((((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*(:[0-9]+)*?\/)([\w\-\.]+[^#?\s]+)(.*)?)(#[\w\-]+)?$|(http[s]?:\/\/([\w\d\-_\.])((\/?\w+\.*)*(:[0-9]+)*\/?)))`); err != nil {
		return err
	}

	return nil
}

func (m *McmConfig) validateProductName(formats strfmt.Registry) error {

	if err := validate.Required("product_name", "body", m.ProductName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this mcm config based on the context it is used
func (m *McmConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeploymentSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *McmConfig) contextValidateDeploymentSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.DeploymentSettings != nil {

		if err := m.DeploymentSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployment_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployment_settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *McmConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *McmConfig) UnmarshalBinary(b []byte) error {
	var res McmConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
