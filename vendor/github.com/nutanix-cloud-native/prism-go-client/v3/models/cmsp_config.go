// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CmspConfig CMSP configuration.
//
// MSP configuration for CMSP on PC used in deployment and enablement.
//
// swagger:model cmsp_config
type CmspConfig struct {

	// A serialized json containing additional arguments to be passed to CMSP.
	CmspArgs string `json:"cmsp_args,omitempty"`

	// The domain name for CMSP.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	// Pattern: ^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$
	PcDomainName *string `json:"pc_domain_name"`

	// IP range blocks for CMSP.
	// Required: true
	PlatformIPBlockList []string `json:"platform_ip_block_list"`

	// platform network configuration
	// Required: true
	PlatformNetworkConfiguration *CmspNetworkConfig `json:"platform_network_configuration"`
}

// Validate validates this cmsp config
func (m *CmspConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePcDomainName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformIPBlockList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformNetworkConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CmspConfig) validatePcDomainName(formats strfmt.Registry) error {

	if err := validate.Required("pc_domain_name", "body", m.PcDomainName); err != nil {
		return err
	}

	if err := validate.MinLength("pc_domain_name", "body", *m.PcDomainName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("pc_domain_name", "body", *m.PcDomainName, 255); err != nil {
		return err
	}

	if err := validate.Pattern("pc_domain_name", "body", *m.PcDomainName, `^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$`); err != nil {
		return err
	}

	return nil
}

func (m *CmspConfig) validatePlatformIPBlockList(formats strfmt.Registry) error {

	if err := validate.Required("platform_ip_block_list", "body", m.PlatformIPBlockList); err != nil {
		return err
	}

	for i := 0; i < len(m.PlatformIPBlockList); i++ {

		if err := validate.Pattern("platform_ip_block_list"+"."+strconv.Itoa(i), "body", m.PlatformIPBlockList[i], `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[ ](?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *CmspConfig) validatePlatformNetworkConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("platform_network_configuration", "body", m.PlatformNetworkConfiguration); err != nil {
		return err
	}

	if m.PlatformNetworkConfiguration != nil {
		if err := m.PlatformNetworkConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platform_network_configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("platform_network_configuration")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cmsp config based on the context it is used
func (m *CmspConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlatformNetworkConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CmspConfig) contextValidatePlatformNetworkConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.PlatformNetworkConfiguration != nil {

		if err := m.PlatformNetworkConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platform_network_configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("platform_network_configuration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CmspConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CmspConfig) UnmarshalBinary(b []byte) error {
	var res CmspConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
