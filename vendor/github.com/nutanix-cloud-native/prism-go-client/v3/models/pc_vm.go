// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PcVM Prism central VM configuration
//
// Prism central VM configuration.
//
// swagger:model pc_vm
type PcVM struct {

	// Reference to the cluster where this prism central VM needs to be deployed.
	//
	ClusterReference *ClusterReference `json:"cluster_reference,omitempty"`

	// Container name.
	ContainerName string `json:"container_name,omitempty"`

	// Container uuid.
	// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
	ContainerUUID string `json:"container_uuid,omitempty"`

	// Data disk size in bytes.
	// Required: true
	DataDiskSizeBytes *int64 `json:"data_disk_size_bytes"`

	// List of DNS IP addresses.
	DNSServerIPList []string `json:"dns_server_ip_list"`

	// Memory in bytes.
	// Required: true
	// Minimum: 8.589934592e+09
	MemorySizeBytes *int64 `json:"memory_size_bytes"`

	// nic list
	// Required: true
	NicList []*PcVMNicConfiguration `json:"nic_list"`

	// List of NTP servers.
	NtpServerList []string `json:"ntp_server_list"`

	// Number of sockets allocated per VM.
	// Required: true
	NumSockets *int64 `json:"num_sockets"`

	// The current power state of the VM.
	// Read Only: true
	PowerState string `json:"power_state,omitempty"`

	// Prism central VM status
	// Read Only: true
	Status string `json:"status,omitempty"`

	// VM name.
	// Required: true
	// Max Length: 64
	VMName *string `json:"vm_name"`

	// VM uuid.
	// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
	VMUUID string `json:"vm_uuid,omitempty"`
}

// Validate validates this pc vm
func (m *PcVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataDiskSizeBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSServerIPList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemorySizeBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpServerList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumSockets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PcVM) validateClusterReference(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterReference) { // not required
		return nil
	}

	if m.ClusterReference != nil {
		if err := m.ClusterReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_reference")
			}
			return err
		}
	}

	return nil
}

func (m *PcVM) validateContainerUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ContainerUUID) { // not required
		return nil
	}

	if err := validate.Pattern("container_uuid", "body", m.ContainerUUID, `^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$`); err != nil {
		return err
	}

	return nil
}

func (m *PcVM) validateDataDiskSizeBytes(formats strfmt.Registry) error {

	if err := validate.Required("data_disk_size_bytes", "body", m.DataDiskSizeBytes); err != nil {
		return err
	}

	return nil
}

func (m *PcVM) validateDNSServerIPList(formats strfmt.Registry) error {
	if swag.IsZero(m.DNSServerIPList) { // not required
		return nil
	}

	for i := 0; i < len(m.DNSServerIPList); i++ {

		if err := validate.Pattern("dns_server_ip_list"+"."+strconv.Itoa(i), "body", m.DNSServerIPList[i], `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *PcVM) validateMemorySizeBytes(formats strfmt.Registry) error {

	if err := validate.Required("memory_size_bytes", "body", m.MemorySizeBytes); err != nil {
		return err
	}

	if err := validate.MinimumInt("memory_size_bytes", "body", *m.MemorySizeBytes, 8.589934592e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *PcVM) validateNicList(formats strfmt.Registry) error {

	if err := validate.Required("nic_list", "body", m.NicList); err != nil {
		return err
	}

	for i := 0; i < len(m.NicList); i++ {
		if swag.IsZero(m.NicList[i]) { // not required
			continue
		}

		if m.NicList[i] != nil {
			if err := m.NicList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nic_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nic_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PcVM) validateNtpServerList(formats strfmt.Registry) error {
	if swag.IsZero(m.NtpServerList) { // not required
		return nil
	}

	for i := 0; i < len(m.NtpServerList); i++ {

		if err := validate.Pattern("ntp_server_list"+"."+strconv.Itoa(i), "body", m.NtpServerList[i], `^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*))$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *PcVM) validateNumSockets(formats strfmt.Registry) error {

	if err := validate.Required("num_sockets", "body", m.NumSockets); err != nil {
		return err
	}

	return nil
}

func (m *PcVM) validateVMName(formats strfmt.Registry) error {

	if err := validate.Required("vm_name", "body", m.VMName); err != nil {
		return err
	}

	if err := validate.MaxLength("vm_name", "body", *m.VMName, 64); err != nil {
		return err
	}

	return nil
}

func (m *PcVM) validateVMUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.VMUUID) { // not required
		return nil
	}

	if err := validate.Pattern("vm_uuid", "body", m.VMUUID, `^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this pc vm based on the context it is used
func (m *PcVM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNicList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PcVM) contextValidateClusterReference(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterReference != nil {

		if swag.IsZero(m.ClusterReference) { // not required
			return nil
		}

		if err := m.ClusterReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_reference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_reference")
			}
			return err
		}
	}

	return nil
}

func (m *PcVM) contextValidateNicList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NicList); i++ {

		if m.NicList[i] != nil {

			if swag.IsZero(m.NicList[i]) { // not required
				return nil
			}

			if err := m.NicList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nic_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nic_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PcVM) contextValidatePowerState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "power_state", "body", string(m.PowerState)); err != nil {
		return err
	}

	return nil
}

func (m *PcVM) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PcVM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PcVM) UnmarshalBinary(b []byte) error {
	var res PcVM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
