package smartag

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DisableSmartAGDpiMonitor invokes the smartag.DisableSmartAGDpiMonitor API synchronously
func (client *Client) DisableSmartAGDpiMonitor(request *DisableSmartAGDpiMonitorRequest) (response *DisableSmartAGDpiMonitorResponse, err error) {
	response = CreateDisableSmartAGDpiMonitorResponse()
	err = client.DoAction(request, response)
	return
}

// DisableSmartAGDpiMonitorWithChan invokes the smartag.DisableSmartAGDpiMonitor API asynchronously
func (client *Client) DisableSmartAGDpiMonitorWithChan(request *DisableSmartAGDpiMonitorRequest) (<-chan *DisableSmartAGDpiMonitorResponse, <-chan error) {
	responseChan := make(chan *DisableSmartAGDpiMonitorResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DisableSmartAGDpiMonitor(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DisableSmartAGDpiMonitorWithCallback invokes the smartag.DisableSmartAGDpiMonitor API asynchronously
func (client *Client) DisableSmartAGDpiMonitorWithCallback(request *DisableSmartAGDpiMonitorRequest, callback func(response *DisableSmartAGDpiMonitorResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DisableSmartAGDpiMonitorResponse
		var err error
		defer close(result)
		response, err = client.DisableSmartAGDpiMonitor(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DisableSmartAGDpiMonitorRequest is the request struct for api DisableSmartAGDpiMonitor
type DisableSmartAGDpiMonitorRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query"`
	ClientToken          string           `position:"Query"`
	DryRun               requests.Boolean `position:"Query"`
	ResourceOwnerAccount string           `position:"Query"`
	OwnerAccount         string           `position:"Query"`
	OwnerId              requests.Integer `position:"Query"`
	SmartAGId            string           `position:"Query"`
}

// DisableSmartAGDpiMonitorResponse is the response struct for api DisableSmartAGDpiMonitor
type DisableSmartAGDpiMonitorResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateDisableSmartAGDpiMonitorRequest creates a request to invoke DisableSmartAGDpiMonitor API
func CreateDisableSmartAGDpiMonitorRequest() (request *DisableSmartAGDpiMonitorRequest) {
	request = &DisableSmartAGDpiMonitorRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Smartag", "2018-03-13", "DisableSmartAGDpiMonitor", "smartag", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDisableSmartAGDpiMonitorResponse creates a response to parse from DisableSmartAGDpiMonitor response
func CreateDisableSmartAGDpiMonitorResponse() (response *DisableSmartAGDpiMonitorResponse) {
	response = &DisableSmartAGDpiMonitorResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
