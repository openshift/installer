package smartag

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListDpiSignatures invokes the smartag.ListDpiSignatures API synchronously
func (client *Client) ListDpiSignatures(request *ListDpiSignaturesRequest) (response *ListDpiSignaturesResponse, err error) {
	response = CreateListDpiSignaturesResponse()
	err = client.DoAction(request, response)
	return
}

// ListDpiSignaturesWithChan invokes the smartag.ListDpiSignatures API asynchronously
func (client *Client) ListDpiSignaturesWithChan(request *ListDpiSignaturesRequest) (<-chan *ListDpiSignaturesResponse, <-chan error) {
	responseChan := make(chan *ListDpiSignaturesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListDpiSignatures(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListDpiSignaturesWithCallback invokes the smartag.ListDpiSignatures API asynchronously
func (client *Client) ListDpiSignaturesWithCallback(request *ListDpiSignaturesRequest, callback func(response *ListDpiSignaturesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListDpiSignaturesResponse
		var err error
		defer close(result)
		response, err = client.ListDpiSignatures(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListDpiSignaturesRequest is the request struct for api ListDpiSignatures
type ListDpiSignaturesRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query"`
	DpiSignatureNames    *[]string        `position:"Query" name:"DpiSignatureNames"  type:"Repeated"`
	DpiSignatureIds      *[]string        `position:"Query" name:"DpiSignatureIds"  type:"Repeated"`
	NextToken            string           `position:"Query"`
	DpiGroupId           string           `position:"Query"`
	ResourceOwnerAccount string           `position:"Query"`
	OwnerAccount         string           `position:"Query"`
	OwnerId              requests.Integer `position:"Query"`
	MaxResults           requests.Integer `position:"Query"`
}

// ListDpiSignaturesResponse is the response struct for api ListDpiSignatures
type ListDpiSignaturesResponse struct {
	*responses.BaseResponse
	TotalCount   int                `json:"TotalCount" xml:"TotalCount"`
	RequestId    string             `json:"RequestId" xml:"RequestId"`
	NextToken    string             `json:"NextToken" xml:"NextToken"`
	DpiSignature []DpiSignatureItem `json:"DpiSignature" xml:"DpiSignature"`
}

// CreateListDpiSignaturesRequest creates a request to invoke ListDpiSignatures API
func CreateListDpiSignaturesRequest() (request *ListDpiSignaturesRequest) {
	request = &ListDpiSignaturesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Smartag", "2018-03-13", "ListDpiSignatures", "smartag", "openAPI")
	request.Method = requests.POST
	return
}

// CreateListDpiSignaturesResponse creates a response to parse from ListDpiSignatures response
func CreateListDpiSignaturesResponse() (response *ListDpiSignaturesResponse) {
	response = &ListDpiSignaturesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
