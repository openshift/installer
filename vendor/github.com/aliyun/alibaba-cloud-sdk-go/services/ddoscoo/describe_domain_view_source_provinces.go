package ddoscoo

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeDomainViewSourceProvinces invokes the ddoscoo.DescribeDomainViewSourceProvinces API synchronously
func (client *Client) DescribeDomainViewSourceProvinces(request *DescribeDomainViewSourceProvincesRequest) (response *DescribeDomainViewSourceProvincesResponse, err error) {
	response = CreateDescribeDomainViewSourceProvincesResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeDomainViewSourceProvincesWithChan invokes the ddoscoo.DescribeDomainViewSourceProvinces API asynchronously
func (client *Client) DescribeDomainViewSourceProvincesWithChan(request *DescribeDomainViewSourceProvincesRequest) (<-chan *DescribeDomainViewSourceProvincesResponse, <-chan error) {
	responseChan := make(chan *DescribeDomainViewSourceProvincesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDomainViewSourceProvinces(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeDomainViewSourceProvincesWithCallback invokes the ddoscoo.DescribeDomainViewSourceProvinces API asynchronously
func (client *Client) DescribeDomainViewSourceProvincesWithCallback(request *DescribeDomainViewSourceProvincesRequest, callback func(response *DescribeDomainViewSourceProvincesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDomainViewSourceProvincesResponse
		var err error
		defer close(result)
		response, err = client.DescribeDomainViewSourceProvinces(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeDomainViewSourceProvincesRequest is the request struct for api DescribeDomainViewSourceProvinces
type DescribeDomainViewSourceProvincesRequest struct {
	*requests.RpcRequest
	EndTime         requests.Integer `position:"Query" name:"EndTime"`
	StartTime       requests.Integer `position:"Query" name:"StartTime"`
	ResourceGroupId string           `position:"Query" name:"ResourceGroupId"`
	SourceIp        string           `position:"Query" name:"SourceIp"`
	Domain          string           `position:"Query" name:"Domain"`
}

// DescribeDomainViewSourceProvincesResponse is the response struct for api DescribeDomainViewSourceProvinces
type DescribeDomainViewSourceProvincesResponse struct {
	*responses.BaseResponse
	RequestId       string     `json:"RequestId" xml:"RequestId"`
	SourceProvinces []Province `json:"SourceProvinces" xml:"SourceProvinces"`
}

// CreateDescribeDomainViewSourceProvincesRequest creates a request to invoke DescribeDomainViewSourceProvinces API
func CreateDescribeDomainViewSourceProvincesRequest() (request *DescribeDomainViewSourceProvincesRequest) {
	request = &DescribeDomainViewSourceProvincesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("ddoscoo", "2020-01-01", "DescribeDomainViewSourceProvinces", "", "")
	request.Method = requests.POST
	return
}

// CreateDescribeDomainViewSourceProvincesResponse creates a response to parse from DescribeDomainViewSourceProvinces response
func CreateDescribeDomainViewSourceProvincesResponse() (response *DescribeDomainViewSourceProvincesResponse) {
	response = &DescribeDomainViewSourceProvincesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
