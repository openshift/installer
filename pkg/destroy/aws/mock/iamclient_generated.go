// Code generated by MockGen. DO NOT EDIT.
// Source: ./iamclient.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	iam "github.com/aws/aws-sdk-go/service/iam"
	gomock "github.com/golang/mock/gomock"
)

// MockIAMAPI is a mock of IAMAPI interface.
type MockIAMAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIAMAPIMockRecorder
}

// MockIAMAPIMockRecorder is the mock recorder for MockIAMAPI.
type MockIAMAPIMockRecorder struct {
	mock *MockIAMAPI
}

// NewMockIAMAPI creates a new mock instance.
func NewMockIAMAPI(ctrl *gomock.Controller) *MockIAMAPI {
	mock := &MockIAMAPI{ctrl: ctrl}
	mock.recorder = &MockIAMAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAMAPI) EXPECT() *MockIAMAPIMockRecorder {
	return m.recorder
}

// DeleteAccessKey mocks base method.
func (m *MockIAMAPI) DeleteAccessKey(ctx context.Context, userName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessKey", ctx, userName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessKey indicates an expected call of DeleteAccessKey.
func (mr *MockIAMAPIMockRecorder) DeleteAccessKey(ctx, userName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessKey", reflect.TypeOf((*MockIAMAPI)(nil).DeleteAccessKey), ctx, userName, id)
}

// DeleteInstanceProfile mocks base method.
func (m *MockIAMAPI) DeleteInstanceProfile(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceProfile", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceProfile indicates an expected call of DeleteInstanceProfile.
func (mr *MockIAMAPIMockRecorder) DeleteInstanceProfile(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceProfile", reflect.TypeOf((*MockIAMAPI)(nil).DeleteInstanceProfile), ctx, name)
}

// DeleteRole mocks base method.
func (m *MockIAMAPI) DeleteRole(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockIAMAPIMockRecorder) DeleteRole(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockIAMAPI)(nil).DeleteRole), ctx, name)
}

// DeleteRolePolicy mocks base method.
func (m *MockIAMAPI) DeleteRolePolicy(ctx context.Context, roleName, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRolePolicy", ctx, roleName, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRolePolicy indicates an expected call of DeleteRolePolicy.
func (mr *MockIAMAPIMockRecorder) DeleteRolePolicy(ctx, roleName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolePolicy", reflect.TypeOf((*MockIAMAPI)(nil).DeleteRolePolicy), ctx, roleName, name)
}

// DeleteUser mocks base method.
func (m *MockIAMAPI) DeleteUser(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIAMAPIMockRecorder) DeleteUser(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIAMAPI)(nil).DeleteUser), ctx, name)
}

// DeleteUserPolicy mocks base method.
func (m *MockIAMAPI) DeleteUserPolicy(ctx context.Context, userName, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPolicy", ctx, userName, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPolicy indicates an expected call of DeleteUserPolicy.
func (mr *MockIAMAPIMockRecorder) DeleteUserPolicy(ctx, userName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPolicy", reflect.TypeOf((*MockIAMAPI)(nil).DeleteUserPolicy), ctx, userName, name)
}

// DetachRolePolicy mocks base method.
func (m *MockIAMAPI) DetachRolePolicy(ctx context.Context, roleName, arn string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachRolePolicy", ctx, roleName, arn)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachRolePolicy indicates an expected call of DetachRolePolicy.
func (mr *MockIAMAPIMockRecorder) DetachRolePolicy(ctx, roleName, arn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachRolePolicy", reflect.TypeOf((*MockIAMAPI)(nil).DetachRolePolicy), ctx, roleName, arn)
}

// GetInstanceProfile mocks base method.
func (m *MockIAMAPI) GetInstanceProfile(ctx context.Context, name string) (*iam.GetInstanceProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceProfile", ctx, name)
	ret0, _ := ret[0].(*iam.GetInstanceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceProfile indicates an expected call of GetInstanceProfile.
func (mr *MockIAMAPIMockRecorder) GetInstanceProfile(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceProfile", reflect.TypeOf((*MockIAMAPI)(nil).GetInstanceProfile), ctx, name)
}

// GetRole mocks base method.
func (m *MockIAMAPI) GetRole(ctx context.Context, name string) (*iam.GetRoleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, name)
	ret0, _ := ret[0].(*iam.GetRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockIAMAPIMockRecorder) GetRole(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockIAMAPI)(nil).GetRole), ctx, name)
}

// GetUser mocks base method.
func (m *MockIAMAPI) GetUser(ctx context.Context, name string) (*iam.GetUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, name)
	ret0, _ := ret[0].(*iam.GetUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIAMAPIMockRecorder) GetUser(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIAMAPI)(nil).GetUser), ctx, name)
}

// ListAccessKeysPages mocks base method.
func (m *MockIAMAPI) ListAccessKeysPages(ctx context.Context, userName string, fn func(*iam.ListAccessKeysOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessKeysPages", ctx, userName, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessKeysPages indicates an expected call of ListAccessKeysPages.
func (mr *MockIAMAPIMockRecorder) ListAccessKeysPages(ctx, userName, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessKeysPages", reflect.TypeOf((*MockIAMAPI)(nil).ListAccessKeysPages), ctx, userName, fn)
}

// ListAttachedRolePoliciesPages mocks base method.
func (m *MockIAMAPI) ListAttachedRolePoliciesPages(ctx context.Context, roleName string, fn func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachedRolePoliciesPages", ctx, roleName, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAttachedRolePoliciesPages indicates an expected call of ListAttachedRolePoliciesPages.
func (mr *MockIAMAPIMockRecorder) ListAttachedRolePoliciesPages(ctx, roleName, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedRolePoliciesPages", reflect.TypeOf((*MockIAMAPI)(nil).ListAttachedRolePoliciesPages), ctx, roleName, fn)
}

// ListInstanceProfilesForRolePages mocks base method.
func (m *MockIAMAPI) ListInstanceProfilesForRolePages(ctx context.Context, roleName string, fn func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceProfilesForRolePages", ctx, roleName, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstanceProfilesForRolePages indicates an expected call of ListInstanceProfilesForRolePages.
func (mr *MockIAMAPIMockRecorder) ListInstanceProfilesForRolePages(ctx, roleName, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceProfilesForRolePages", reflect.TypeOf((*MockIAMAPI)(nil).ListInstanceProfilesForRolePages), ctx, roleName, fn)
}

// ListRolePoliciesPages mocks base method.
func (m *MockIAMAPI) ListRolePoliciesPages(ctx context.Context, roleName string, fn func(*iam.ListRolePoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRolePoliciesPages", ctx, roleName, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRolePoliciesPages indicates an expected call of ListRolePoliciesPages.
func (mr *MockIAMAPIMockRecorder) ListRolePoliciesPages(ctx, roleName, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolePoliciesPages", reflect.TypeOf((*MockIAMAPI)(nil).ListRolePoliciesPages), ctx, roleName, fn)
}

// ListRolesPages mocks base method.
func (m *MockIAMAPI) ListRolesPages(ctx context.Context, fn func(*iam.ListRolesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRolesPages", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRolesPages indicates an expected call of ListRolesPages.
func (mr *MockIAMAPIMockRecorder) ListRolesPages(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolesPages", reflect.TypeOf((*MockIAMAPI)(nil).ListRolesPages), ctx, fn)
}

// ListUserPoliciesPages mocks base method.
func (m *MockIAMAPI) ListUserPoliciesPages(ctx context.Context, userName string, fn func(*iam.ListUserPoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserPoliciesPages", ctx, userName, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUserPoliciesPages indicates an expected call of ListUserPoliciesPages.
func (mr *MockIAMAPIMockRecorder) ListUserPoliciesPages(ctx, userName, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserPoliciesPages", reflect.TypeOf((*MockIAMAPI)(nil).ListUserPoliciesPages), ctx, userName, fn)
}

// ListUsersPages mocks base method.
func (m *MockIAMAPI) ListUsersPages(ctx context.Context, fn func(*iam.ListUsersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersPages", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPages indicates an expected call of ListUsersPages.
func (mr *MockIAMAPIMockRecorder) ListUsersPages(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPages", reflect.TypeOf((*MockIAMAPI)(nil).ListUsersPages), ctx, fn)
}

// RemoveRoleFromInstanceProfile mocks base method.
func (m *MockIAMAPI) RemoveRoleFromInstanceProfile(ctx context.Context, name, roleName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoleFromInstanceProfile", ctx, name, roleName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRoleFromInstanceProfile indicates an expected call of RemoveRoleFromInstanceProfile.
func (mr *MockIAMAPIMockRecorder) RemoveRoleFromInstanceProfile(ctx, name, roleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleFromInstanceProfile", reflect.TypeOf((*MockIAMAPI)(nil).RemoveRoleFromInstanceProfile), ctx, name, roleName)
}

// UntagRole mocks base method.
func (m *MockIAMAPI) UntagRole(ctx context.Context, roleName, tagKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagRole", ctx, roleName, tagKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// UntagRole indicates an expected call of UntagRole.
func (mr *MockIAMAPIMockRecorder) UntagRole(ctx, roleName, tagKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagRole", reflect.TypeOf((*MockIAMAPI)(nil).UntagRole), ctx, roleName, tagKey)
}
