package machine

import (
	"encoding/json"
	"os"

	igntypes "github.com/coreos/ignition/config/v2_2/types"
	"github.com/pkg/errors"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
	"github.com/openshift/installer/pkg/asset/tls"
	"github.com/openshift/installer/pkg/types"
)

const (
	controlPlaneIgnFilename = "control-plane.ign"
)

// ControlPlane is an asset that generates the ignition config for control plane nodes.
type ControlPlane struct {
	Config *igntypes.Config
	File   *asset.File
}

var _ asset.WritableAsset = (*ControlPlane)(nil)

// Dependencies returns the assets on which the ControlPlane asset depends.
func (a *ControlPlane) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.InstallConfig{},
		&tls.RootCA{},
	}
}

// Generate generates the ignition config for the ControlPlane asset.
func (a *ControlPlane) Generate(dependencies asset.Parents) error {
	installConfig := &installconfig.InstallConfig{}
	rootCA := &tls.RootCA{}
	dependencies.Get(installConfig, rootCA)

	a.Config = pointerIgnitionConfig(installConfig.Config, rootCA.Cert(), types.ControlPlaneMachineRole)

	data, err := json.Marshal(a.Config)
	if err != nil {
		return errors.Wrap(err, "failed to marshal Ignition config")
	}
	a.File = &asset.File{
		Filename: controlPlaneIgnFilename,
		Data:     data,
	}

	return nil
}

// Name returns the human-friendly name of the asset.
func (a *ControlPlane) Name() string {
	return "Control Plane Ignition Config"
}

// Files returns the files generated by the asset.
func (a *ControlPlane) Files() []*asset.File {
	if a.File != nil {
		return []*asset.File{a.File}
	}
	return []*asset.File{}
}

// Load returns the control plane ignitions from disk.
func (a *ControlPlane) Load(f asset.FileFetcher) (found bool, err error) {
	file, err := f.FetchByName(controlPlaneIgnFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}

	config := &igntypes.Config{}
	if err := json.Unmarshal(file.Data, config); err != nil {
		return false, errors.Wrapf(err, "failed to unmarshal")
	}

	a.File, a.Config = file, config
	return true, nil
}
