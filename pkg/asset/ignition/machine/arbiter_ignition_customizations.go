package machine

import (
	"context"
	"fmt"
	"path/filepath"

	"github.com/sirupsen/logrus"
	"sigs.k8s.io/yaml"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/ignition"
	"github.com/openshift/installer/pkg/asset/installconfig"
	"github.com/openshift/installer/pkg/asset/tls"
)

var (
	arbiterMachineConfigFileName = filepath.Join(directory, "99_openshift-installer-arbiter.yaml")
)

// ArbiterIgnitionCustomizations is an asset that checks for any customizations a user might
// have made to the pointer ignition configs before creating the cluster. If customizations
// are made, then the updates are reconciled as a MachineConfig file.
type ArbiterIgnitionCustomizations struct {
	File *asset.File
}

var _ asset.WritableAsset = (*ArbiterIgnitionCustomizations)(nil)

// Dependencies returns the dependencies for ArbiterIgnitionCustomizations.
func (a *ArbiterIgnitionCustomizations) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.InstallConfig{},
		&tls.RootCA{},
		&Arbiter{},
	}
}

// Generate queries for input from the user.
func (a *ArbiterIgnitionCustomizations) Generate(_ context.Context, dependencies asset.Parents) error {
	installConfig := &installconfig.InstallConfig{}
	rootCA := &tls.RootCA{}
	arbiter := &Arbiter{}
	dependencies.Get(installConfig, rootCA, arbiter)

	// Avoid creating ignition customizations when not an arbiter deployment.
	if !installConfig.Config.IsArbiterEnabled() {
		return nil
	}

	defaultPointerIgnition := pointerIgnitionConfig(installConfig.Config, rootCA.Cert(), "arbiter")
	savedPointerIgnition := arbiter.Config

	savedPointerIgnitionJSON, err := ignition.Marshal(savedPointerIgnition)
	if err != nil {
		return fmt.Errorf("failed to Marshal savedPointerIgnition: %w", err)
	}
	defaultPointerIgnitionJSON, err := ignition.Marshal(defaultPointerIgnition)
	if err != nil {
		return fmt.Errorf("failed to Marshal defaultPointerIgnition: %w", err)
	}
	if string(savedPointerIgnitionJSON) != string(defaultPointerIgnitionJSON) {
		logrus.Infof("Arbiter pointer ignition was modified. Saving contents to a machineconfig")
		mc, err := generatePointerMachineConfig(*savedPointerIgnition, "arbiter")
		if err != nil {
			return fmt.Errorf("failed to generate arbiter installer machineconfig: %w", err)
		}
		configData, err := yaml.Marshal(mc)
		if err != nil {
			return fmt.Errorf("failed to marshal arbiter installer machineconfig: %w", err)
		}
		a.File = &asset.File{
			Filename: arbiterMachineConfigFileName,
			Data:     configData,
		}
	}

	return nil
}

// Name returns the human-friendly name of the asset.
func (a *ArbiterIgnitionCustomizations) Name() string {
	return "Arbiter Ignition Customization Check"
}

// Files returns the files generated by the asset.
func (a *ArbiterIgnitionCustomizations) Files() []*asset.File {
	if a.File != nil {
		return []*asset.File{a.File}
	}
	return []*asset.File{}
}

// Load does nothing, since we consume the ignition-configs.
func (a *ArbiterIgnitionCustomizations) Load(f asset.FileFetcher) (found bool, err error) {
	return false, nil
}
