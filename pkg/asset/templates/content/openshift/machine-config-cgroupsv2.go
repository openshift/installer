package openshift

import (
	"os"
	"path/filepath"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/templates/content"
)

const (
	mcoCgroupsV2Workers = "machine-config-cgroupsv2-workers.yaml.template"
	mcoCgroupsV2Masters = "machine-config-cgroupsv2-masters.yaml.template"
)

var _ asset.WritableAsset = (*MachineConfigCgroupsv2)(nil)

// MachineConfigCgroupsv2 is the constant to represent contents of kubeadmin-password-secret.yaml.template file
type MachineConfigCgroupsv2 struct {
	FileList []*asset.File
}

// Dependencies returns all of the dependencies directly needed by the asset
func (t *MachineConfigCgroupsv2) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Name returns the human-friendly name of the asset.
func (t *MachineConfigCgroupsv2) Name() string {
	return "MachineConfigCgroupsv2"
}

// Generate generates the actual files by this asset
func (t *MachineConfigCgroupsv2) Generate(parents asset.Parents) error {
	dataWorkers, err := content.GetOpenshiftTemplate(mcoCgroupsV2Workers)
	if err != nil {
		return err
	}
	workersManifest := &asset.File{
		Filename: filepath.Join(content.TemplateDir, mcoCgroupsV2Workers),
		Data:     dataWorkers,
	}
	dataMasters, err := content.GetOpenshiftTemplate(mcoCgroupsV2Masters)
	if err != nil {
		return err
	}
	mastersManifest := &asset.File{
		Filename: filepath.Join(content.TemplateDir, mcoCgroupsV2Masters),
		Data:     dataMasters,
	}
	t.FileList = []*asset.File{
		workersManifest,
		mastersManifest,
	}
	return nil
}

// Files returns the files generated by the asset.
func (t *MachineConfigCgroupsv2) Files() []*asset.File {
	return t.FileList
}

// Load returns the asset from disk.
func (t *MachineConfigCgroupsv2) Load(f asset.FileFetcher) (bool, error) {
	workersManifest, err := f.FetchByName(filepath.Join(content.TemplateDir, mcoCgroupsV2Workers))
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}
	mastersManifest, err := f.FetchByName(filepath.Join(content.TemplateDir, mcoCgroupsV2Masters))
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}
	t.FileList = []*asset.File{workersManifest, mastersManifest}
	return true, nil
}
