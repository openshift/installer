package manifests

import (
	"context"
	"os"
	"path/filepath"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/templates/content"
)

const (
	// mcoConfigTemplateFileName is the filename for the template, and ultimately
	// for the manifest (with 'template' trimmed). The filename is prefixed with
	// 90_ to sort before the 99_-prefixed machinesets, so that the machineconfiguration
	// is applied before the machinesets, which the MCO manages.
	mcoConfigTemplateFileName = "90_cluster-mco-02-config.yaml.template"
)

var _ asset.WritableAsset = (*MCO)(nil)

// MCO is the template for the machineconfiguration operator manifest.
type MCO struct {
	FileList []*asset.File
}

// Dependencies returns all of the dependencies directly needed by the asset.
func (t *MCO) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Name returns the human-friendly name of the asset.
func (t *MCO) Name() string {
	return "MCO Config Template"
}

// Generate creates the asset by loading it from the data dir.
func (t *MCO) Generate(_ context.Context, parents asset.Parents) error {
	fileName := mcoConfigTemplateFileName
	data, err := content.GetManifestTemplate(fileName)
	if err != nil {
		return err
	}
	t.FileList = []*asset.File{
		{
			Filename: filepath.Join(content.TemplateDir, fileName),
			Data:     data,
		},
	}
	return nil
}

// Files returns the files generated by the asset.
func (t *MCO) Files() []*asset.File {
	return t.FileList
}

// Load returns the asset from disk.
func (t *MCO) Load(f asset.FileFetcher) (bool, error) {
	file, err := f.FetchByName(filepath.Join(content.TemplateDir, mcoConfigTemplateFileName))
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}
	t.FileList = []*asset.File{file}
	return true, nil
}
