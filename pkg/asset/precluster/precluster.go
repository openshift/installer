package precluster

import (
	"path"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/cluster"
	"github.com/openshift/installer/pkg/asset/ignition/bootstrap"
	"github.com/openshift/installer/pkg/asset/ignition/machine"
	"github.com/openshift/installer/pkg/asset/kubeconfig"
	"github.com/openshift/installer/pkg/asset/password"
)

const dir = "pre-cluster"

// PreCluster is an asset that generates read-only copies of the ignition configs,
// the admin kubeconfig, and the cluster metadata.
type PreCluster struct {
	FileList []*asset.File
}

var _ asset.WritableAsset = (*PreCluster)(nil)

// Dependencies returns the assets on which the PreCluster asset depends.
func (a *PreCluster) Dependencies() []asset.Asset {
	return []asset.Asset{
		&bootstrap.Bootstrap{},
		&machine.Master{},
		&machine.Worker{},
		&kubeconfig.AdminClient{},
		&password.KubeadminPassword{},
		&cluster.Metadata{},
	}
}

// Generate generates the file copies for the PreCluster asset.
func (a *PreCluster) Generate(dependencies asset.Parents) error {
	assets := a.Dependencies()
	dependencies.Get(assets...)

	for _, d := range assets {
		a.FileList = append(a.FileList, d.(asset.WritableAsset).Files()...)
	}

	for i, f := range a.FileList {
		a.FileList[i] = &asset.File{
			Filename: path.Join(dir, f.Filename),
			Data:     f.Data,
		}
	}

	return nil
}

// Name returns the human-friendly name of the asset.
func (a *PreCluster) Name() string {
	return "Pre-Cluster"
}

// Files returns the files generated by the asset.
func (a *PreCluster) Files() []*asset.File {
	return a.FileList
}

// Load is a no-op since the files generated by this asset are read-only.
func (a *PreCluster) Load(f asset.FileFetcher) (bool, error) {
	return false, nil
}
