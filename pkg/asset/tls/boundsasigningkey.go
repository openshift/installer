package tls

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/openshift/installer/pkg/asset"
	"github.com/pkg/errors"
)

// BoundSASigningKey contains private and public  key parts for the
// service account signing key used by kube-apiserver.
type BoundSASigningKey struct {
	FileList []*asset.File
}

var _ asset.WritableAsset = (*BoundSASigningKey)(nil)

// Name returns a human friendly name for the asset.
func (*BoundSASigningKey) Name() string {
	return "Service Account Signing key"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*BoundSASigningKey) Dependencies() []asset.Asset {
	return nil
}

// Generate generates the keys used to sign bound SA tokens in case
// Load() did not find them
func (sk *BoundSASigningKey) Generate(dependencies asset.Parents) error {
	kp := KeyPair{}
	if err := kp.Generate("bound-service-account-signing-key"); err != nil {
		return fmt.Errorf("failed to generate bound SA signing key pair: %v", err)
	}

	sk.FileList = sk.generateFiles(kp.Pvt, kp.Pub)
	return nil
}

// Files returns the files generated by the asset.
func (sk *BoundSASigningKey) Files() []*asset.File {
	return sk.FileList
}

// Load reads the private key from the disk.
// It ensures that the key provided is a valid RSA key.
func (sk *BoundSASigningKey) Load(f asset.FileFetcher) (bool, error) {
	keyFile, err := f.FetchByName(filepath.Join(tlsDir, "bound-service-account-signing-key.key"))
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}
	rsaKey, err := PemToPrivateKey(keyFile.Data)
	if err != nil {
		return false, errors.Wrap(err, "failed to load rsa.PrivateKey from the file")
	}
	pubData, err := PublicKeyToPem(&rsaKey.PublicKey)
	if err != nil {
		return false, errors.Wrap(err, "failed to extract public key from the key")
	}
	sk.FileList = sk.generateFiles(keyFile.Data, pubData)
	return true, nil
}

func (sk *BoundSASigningKey) generateFiles(privKeyPEM, pubKeyPEM []byte) []*asset.File {
	return []*asset.File{
		{Filename: filepath.Join(tlsDir, "bound-service-account-signing-key.key"), Data: privKeyPEM},
		{Filename: filepath.Join(tlsDir, "bound-service-account-signing-key.pub"), Data: pubKeyPEM},
	}
}
