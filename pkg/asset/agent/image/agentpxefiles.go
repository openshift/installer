package image

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"os"
	"path/filepath"

	"github.com/sirupsen/logrus"

	"github.com/openshift/assisted-image-service/pkg/isoeditor"
	"github.com/openshift/installer/pkg/asset"
)

const (
	initrdimg = "initrd"
	rootfsimg = "rootfs"
	vmlinuz   = "vmlinuz"
	// pxeAssetsPath is the path where pxe files are created.
	pxeAssetsPath = "pxe"
)

// AgentPXEFiles is an asset that generates the bootable image used to install clusters.
type AgentPXEFiles struct {
	imageReader isoeditor.ImageReader
	cpuArch     string
	isoPath     string
}

var _ asset.WritableAsset = (*AgentPXEFiles)(nil)

// Dependencies returns the assets on which the AgentPXEFiles asset depends.
func (a *AgentPXEFiles) Dependencies() []asset.Asset {
	return []asset.Asset{
		&Ignition{},
		&BaseIso{},
	}
}

// Generate generates the image files for PXE asset.
func (a *AgentPXEFiles) Generate(dependencies asset.Parents) error {
	ignition := &Ignition{}
	dependencies.Get(ignition)

	baseImage := &BaseIso{}
	dependencies.Get(baseImage)

	a.isoPath = baseImage.File.Filename

	tmpdir, err := os.MkdirTemp("", pxeAssetsPath)
	if err != nil {
		return err
	}
	defer os.RemoveAll(tmpdir)

	srcfilename := fmt.Sprintf("images/pxeboot/%s.img", initrdimg)
	dstfilename := filepath.Join(tmpdir, fmt.Sprintf("%s.img", initrdimg))
	err = a.extractPXEFileFromISO(a.isoPath, srcfilename, dstfilename)
	if err != nil {
		return err
	}

	ignitionByte, err := json.Marshal(ignition.Config)
	if err != nil {
		return err
	}

	ignitionContent := &isoeditor.IgnitionContent{Config: ignitionByte}

	custom, err := isoeditor.NewInitRamFSStreamReader(dstfilename, ignitionContent)
	if err != nil {
		return err
	}

	a.imageReader = custom
	a.cpuArch = ignition.CPUArch

	return nil
}

// PersistToFile writes the PXE assets in the assets folder named pxe.
func (a *AgentPXEFiles) PersistToFile(directory string) error {
	// If the imageReader is not set then it means that either one of the AgentPXEFiles
	// dependencies or the asset itself failed for some reason
	if a.imageReader == nil {
		return errors.New("cannot generate PXE assets due to configuration errors")
	}

	defer a.imageReader.Close()
	pxeAssetsFullPath := filepath.Join(directory, pxeAssetsPath)

	os.RemoveAll(pxeAssetsFullPath)

	err := os.Mkdir(pxeAssetsFullPath, 0750)
	if err != nil {
		return err
	}

	agentInitrdFile := filepath.Join(pxeAssetsFullPath, fmt.Sprintf("agent-%s.%s.img", initrdimg, a.cpuArch))
	err = a.copy(agentInitrdFile, a.imageReader)
	if err != nil {
		return err
	}

	srcfilename := fmt.Sprintf("images/pxeboot/%s.img", rootfsimg)
	agentRootfsimgFile := filepath.Join(pxeAssetsFullPath, fmt.Sprintf("agent-%s.%s.img", rootfsimg, a.cpuArch))
	err = a.extractPXEFileFromISO(a.isoPath, srcfilename, agentRootfsimgFile)
	if err != nil {
		return err
	}

	srcfilename = fmt.Sprintf("images/pxeboot/%s", vmlinuz)
	agentVmlinuzFile := filepath.Join(pxeAssetsFullPath, fmt.Sprintf("agent-%s.%s", vmlinuz, a.cpuArch))
	err = a.extractPXEFileFromISO(a.isoPath, srcfilename, agentVmlinuzFile)
	if err != nil {
		return err
	}

	logrus.Infof("PXE-files created in: %s", pxeAssetsFullPath)

	return nil
}

// Name returns the human-friendly name of the asset.
func (a *AgentPXEFiles) Name() string {
	return "Agent Installer PXE Files"
}

// Load returns the PXE image from disk.
func (a *AgentPXEFiles) Load(f asset.FileFetcher) (bool, error) {
	// The PXE image will not be needed by another asset so load is noop.
	// This is implemented because it is required by WritableAsset
	return false, nil
}

// Files returns the files generated by the asset.
func (a *AgentPXEFiles) Files() []*asset.File {
	// Return empty array because File will never be loaded.
	return []*asset.File{}
}

func (a *AgentPXEFiles) extractPXEFileFromISO(isoPath string, srcfilename string, dstfilename string) error {
	fileReader, err := isoeditor.GetFileFromISO(isoPath, srcfilename)
	if err != nil {
		return err
	}
	defer fileReader.Close()

	err = a.copy(dstfilename, fileReader)
	if err != nil {
		return err
	}
	return nil
}

func (a *AgentPXEFiles) copy(filepath string, src io.Reader) error {
	output, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer output.Close()

	_, err = io.Copy(output, src)
	if err != nil {
		return err
	}

	return nil
}
