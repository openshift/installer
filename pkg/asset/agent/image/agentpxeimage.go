package image

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"os"
	"path/filepath"

	"github.com/openshift/assisted-image-service/pkg/isoeditor"
	"github.com/openshift/installer/pkg/asset"
	"github.com/sirupsen/logrus"
)

var (
	// pxeAssetsPath is the path where pxe image assets are created.
	pxeAssetsPath = "pxe"
)

// AgentPXEImage is an asset that generates the bootable image used to install clusters.
type AgentPXEImage struct {
	imageReader isoeditor.ImageReader
}

var _ asset.WritableAsset = (*AgentPXEImage)(nil)

// Dependencies returns the assets on which the AgentPXEImage asset depends.
func (a *AgentPXEImage) Dependencies() []asset.Asset {
	return []asset.Asset{
		&Ignition{},
		&BaseIso{},
	}
}

// Generate generates the image files for PXE asset.
func (a *AgentPXEImage) Generate(dependencies asset.Parents) error {
	ignition := &Ignition{}
	dependencies.Get(ignition)

	baseImage := &BaseIso{}
	dependencies.Get(baseImage)

	ignitionByte, err := json.Marshal(ignition.Config)
	if err != nil {
		return err
	}

	ignitionContent := &isoeditor.IgnitionContent{Config: ignitionByte}

	isoGetter := newGetIso(GetIsoPluggable)
	isoPath, err := isoGetter.getter()

	if err != nil {
		return err
	}

	workDir, err := GetCacheDir(imageDataType)
	if err != nil {
		return err
	}

	err = isoeditor.Extract(isoPath, workDir)
	if err != nil {
		return err
	}

	irfsPath := filepath.Join(workDir, "images/pxeboot/initrd.img")
	custom, err := isoeditor.NewInitRamFSStreamReader(irfsPath, ignitionContent)

	if err != nil {
		return err
	}

	a.imageReader = custom

	return nil
}

// PersistToFile writes the PXE assets in the assets folder named pxe
func (a *AgentPXEImage) PersistToFile(directory string) error {
	// If the imageReader is not set then it means that either one of the AgentPXEImage
	// dependencies or the asset itself failed for some reason
	if a.imageReader == nil {
		return errors.New("cannot generate PXE assets due to configuration errors")
	}

	defer a.imageReader.Close()

	agentInitrdFile := filepath.Join(pxeAssetsPath, "agent-initrd.img")

	// Remove symlink if it exists
	os.RemoveAll(pxeAssetsPath)

	err := os.Mkdir(pxeAssetsPath, 0644)
	if err != nil {
		return err
	}

	output, err := os.Create(agentInitrdFile)
	if err != nil {
		return err
	}
	defer output.Close()

	_, err = io.Copy(output, a.imageReader)
	if err != nil {
		return err
	}

	workDir, err := GetCacheDir(imageDataType)
	if err != nil {
		return err
	}

	srcDir := filepath.Join(workDir, "images/pxeboot")
	err = a.copyFiles(srcDir, "rootfs.img")
	if err != nil {
		return err
	}

	err = a.copyFiles(srcDir, "vmlinuz")
	if err != nil {
		return err
	}

	logrus.Info("Created PXE images in pxe directory")

	os.RemoveAll(filepath.Join(workDir, "coreos"))
	os.RemoveAll(filepath.Join(workDir, "EFI"))
	os.RemoveAll(filepath.Join(workDir, "images"))
	os.RemoveAll(filepath.Join(workDir, "isolinux"))

	return nil
}

// Name returns the human-friendly name of the asset.
func (a *AgentPXEImage) Name() string {
	return "Agent Installer PXE Image"
}

// Load returns the PXE image from disk.
func (a *AgentPXEImage) Load(f asset.FileFetcher) (bool, error) {
	// The PXE image will not be needed by another asset so load is noop.
	// This is implemented because it is required by WritableAsset
	return false, nil
}

// Files returns the files generated by the asset.
func (a *AgentPXEImage) Files() []*asset.File {
	// Return empty array because File will never be loaded.
	return []*asset.File{}
}

func (a *AgentPXEImage) copyFiles(srcDir string, filename string) error {
	sourceFile, err := os.Open(filepath.Join(srcDir, filename))
	if err != nil {
		return err
	}
	defer sourceFile.Close()

	destinationFile, err := os.Create(filepath.Join(pxeAssetsPath, fmt.Sprintf("agent-%s", filename)))
	if err != nil {
		return err
	}
	defer destinationFile.Close()

	_, err = io.Copy(destinationFile, sourceFile)
	if err != nil {
		return err
	}
	return nil
}
