package manifests

import (
	"context"
	"fmt"
	"os"
	"path/filepath"

	"github.com/coreos/stream-metadata-go/arch"
	"github.com/pkg/errors"
	"sigs.k8s.io/yaml"

	aiv1beta1 "github.com/openshift/assisted-service/api/v1beta1"
	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/types"
)

var (
	infraEnvFilename = filepath.Join(clusterManifestDir, "infraenv.yaml")
)

// InfraEnvFile takes care of just loading the infraenv configuration file from the disk.
type InfraEnvFile struct {
	File   *asset.File
	Config *aiv1beta1.InfraEnv
}

var _ asset.WritableAsset = (*InfraEnvFile)(nil)

// Name returns a human friendly name for the asset.
func (*InfraEnvFile) Name() string {
	return "InfraEnv Config File"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*InfraEnvFile) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Generate is not used for this asset.
func (i *InfraEnvFile) Generate(_ context.Context, dependencies asset.Parents) error {
	return fmt.Errorf("configuration file not found: %s", infraEnvFilename)
}

// Files returns the files generated by the asset.
func (i *InfraEnvFile) Files() []*asset.File {
	if i.File != nil {
		return []*asset.File{i.File}
	}
	return []*asset.File{}
}

// Load returns infraenv asset from the disk.
func (i *InfraEnvFile) Load(f asset.FileFetcher) (bool, error) {
	file, err := f.FetchByName(infraEnvFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, errors.Wrap(err, fmt.Sprintf("failed to load %s file", infraEnvFilename))
	}

	config := &aiv1beta1.InfraEnv{}
	if err := yaml.UnmarshalStrict(file.Data, config); err != nil {
		return false, errors.Wrapf(err, "failed to unmarshal %s", infraEnvFilename)
	}
	// If defined, convert to RpmArch amd64 -> x86_64 or arm64 -> aarch64
	if config.Spec.CpuArchitecture != "" {
		config.Spec.CpuArchitecture = arch.RpmArch(config.Spec.CpuArchitecture)
	}
	i.File, i.Config = file, config
	if err = i.finish(); err != nil {
		return false, err
	}

	return true, nil
}

func (i *InfraEnvFile) finish() error {
	if i.Config == nil {
		return errors.New("missing configuration or manifest file")
	}

	infraEnvData, err := yaml.Marshal(i.Config)
	if err != nil {
		return errors.Wrap(err, "failed to marshal agent installer infraEnv")
	}

	i.File = &asset.File{
		Filename: infraEnvFilename,
		Data:     infraEnvData,
	}

	// Throw an error if CpuArchitecture isn't x86_64, aarch64, ppc64le, s390x, or ""
	switch i.Config.Spec.CpuArchitecture {
	case arch.RpmArch(types.ArchitectureAMD64), arch.RpmArch(types.ArchitectureARM64), arch.RpmArch(types.ArchitecturePPC64LE), arch.RpmArch(types.ArchitectureS390X), "":
	default:
		return errors.Errorf("Config.Spec.CpuArchitecture %s is not supported ", i.Config.Spec.CpuArchitecture)
	}
	return nil
}
