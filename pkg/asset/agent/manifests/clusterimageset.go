package manifests

import (
	"fmt"
	"os"
	"path/filepath"

	hivev1 "github.com/openshift/hive/apis/hive/v1"
	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/agent"
	"github.com/openshift/installer/pkg/asset/releaseimage"
	"github.com/openshift/installer/pkg/version"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/validation/field"
	"sigs.k8s.io/yaml"
)

var (
	clusterImageSetFilename = filepath.Join(clusterManifestDir, "cluster-image-set.yaml")
)

// ClusterImageSet generates the cluster-image-set.yaml file.
type ClusterImageSet struct {
	File   *asset.File
	Config *hivev1.ClusterImageSet
}

var _ asset.WritableAsset = (*ClusterImageSet)(nil)

// Name returns a human friendly name for the asset.
func (*ClusterImageSet) Name() string {
	return "ClusterImageSet Config"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*ClusterImageSet) Dependencies() []asset.Asset {
	return []asset.Asset{
		&releaseimage.Image{},
		&agent.OptionalInstallConfig{},
	}
}

// Generate generates the ClusterImageSet manifest.
func (a *ClusterImageSet) Generate(dependencies asset.Parents) error {

	releaseImage := &releaseimage.Image{}
	installConfig := &agent.OptionalInstallConfig{}
	dependencies.Get(releaseImage, installConfig)

	currentVersion, err := version.Version()
	if err != nil {
		return err
	}

	if installConfig.Config != nil {
		clusterImageSet := &hivev1.ClusterImageSet{
			ObjectMeta: metav1.ObjectMeta{
				Name:      fmt.Sprintf("openshift-%s", currentVersion),
				Namespace: getObjectMetaNamespace(installConfig),
			},
			Spec: hivev1.ClusterImageSetSpec{
				ReleaseImage: releaseImage.PullSpec,
			},
		}
		a.Config = clusterImageSet

		configData, err := yaml.Marshal(clusterImageSet)
		if err != nil {
			return errors.Wrap(err, "failed to marshal agent cluster image set")
		}

		a.File = &asset.File{
			Filename: clusterImageSetFilename,
			Data:     configData,
		}
	}

	return a.finish()
}

// Files returns the files generated by the asset.
func (a *ClusterImageSet) Files() []*asset.File {
	if a.File != nil {
		return []*asset.File{a.File}
	}
	return []*asset.File{}
}

// Load returns ClusterImageSet asset from the disk.
func (a *ClusterImageSet) Load(f asset.FileFetcher) (bool, error) {

	clusterImageSetFile, err := f.FetchByName(clusterImageSetFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, errors.Wrap(err, fmt.Sprintf("failed to load %s file", clusterImageSetFilename))
	}

	a.File = clusterImageSetFile

	clusterImageSet := &hivev1.ClusterImageSet{}
	if err := yaml.UnmarshalStrict(clusterImageSetFile.Data, clusterImageSet); err != nil {
		err = errors.Wrapf(err, "failed to unmarshal %s", clusterImageSetFilename)
		return false, err
	}
	a.Config = clusterImageSet

	if err = a.finish(); err != nil {
		return false, err
	}
	return true, nil
}

func (a *ClusterImageSet) finish() error {

	if a.Config == nil {
		return errors.New("missing configuration or manifest file")
	}

	if err := a.validateClusterImageSet().ToAggregate(); err != nil {
		return errors.Wrapf(err, "invalid ClusterImageSet configuration")
	}

	return nil
}

func (a *ClusterImageSet) validateClusterImageSet() field.ErrorList {
	allErrs := field.ErrorList{}

	if err := a.validateReleaseVersion(); err != nil {
		allErrs = append(allErrs, err...)
	}

	return allErrs
}

func (a *ClusterImageSet) validateReleaseVersion() field.ErrorList {

	var allErrs field.ErrorList

	fieldPath := field.NewPath("Spec", "ReleaseImage")

	releaseImage := &releaseimage.Image{}
	releaseImage.Generate(asset.Parents{})

	if a.Config.Spec.ReleaseImage != releaseImage.PullSpec {
		allErrs = append(allErrs, field.Forbidden(fieldPath, fmt.Sprintf("value must be equal to %s", releaseImage.PullSpec)))
	}

	return allErrs
}
