package manifests

import (
	"os"

	"github.com/openshift/installer/pkg/asset"
	"github.com/pkg/errors"
	"gopkg.in/yaml.v2"

	clientcmd "k8s.io/client-go/tools/clientcmd/api/v1"
)

type KubeConfigFile struct {
	Config *clientcmd.Config
	File   *asset.File
}

var _ asset.WritableAsset = (*KubeConfigFile)(nil)

func (a *KubeConfigFile) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

func (a *KubeConfigFile) Generate(dependencies asset.Parents) error {
	return nil
}

// Name returns the human-friendly name of the asset.
func (a *KubeConfigFile) Name() string {
	return "Kubeconfig file"
}

// Load returns the ISO from disk.
func (a *KubeConfigFile) Load(f asset.FileFetcher) (bool, error) {

	file, err := f.FetchByName("kubeconfig")
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}

	config := &clientcmd.Config{}
	if err := yaml.Unmarshal(file.Data, &config); err != nil {
		return false, errors.Wrapf(err, "failed to unmarshal kubeconfig")
	}

	a.Config = config
	a.File = file

	return true, nil
}

// Files returns the files generated by the asset.
func (a *KubeConfigFile) Files() []*asset.File {
	if a.File != nil {
		return []*asset.File{a.File}
	}
	return []*asset.File{}
}
