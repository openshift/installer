package joiner

import (
	"context"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/agent"
	"github.com/openshift/installer/pkg/asset/agent/workflow"
)

const (
	// ImportClusterConfigFilename is a config file used to store
	// additional params required to complete a cluster import.
	ImportClusterConfigFilename = "import-cluster-config.json"
)

// ImportClusterConfig is an asset used to store any additional
// config required for cluster after having imported it.
type ImportClusterConfig struct {
	Config ClusterConfig
}

// ClusterConfig contains any required cluster params.
type ClusterConfig struct {
	Networking Networking `json:"networking"`
}

// Networking defines the pod network provider in the cluster.
type Networking struct {
	UserManagedNetworking *bool `json:"userManagedNetworking,omitempty"`
}

var _ asset.WritableAsset = (*ImportClusterConfig)(nil)

// Name returns the human-friendly name of the asset.
func (icc *ImportClusterConfig) Name() string {
	return "Additional import cluster config"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (icc *ImportClusterConfig) Dependencies() []asset.Asset {
	return []asset.Asset{
		&workflow.AgentWorkflow{},
		&ClusterInfo{},
	}
}

// Files returns the files generated by the asset.
func (icc *ImportClusterConfig) Files() []*asset.File {
	return []*asset.File{}
}

// Load returns agent config asset from the disk.
func (*ImportClusterConfig) Load(f asset.FileFetcher) (bool, error) {
	return false, nil
}

// Generate generates the ClusterInfo.
func (icc *ImportClusterConfig) Generate(_ context.Context, dependencies asset.Parents) error {
	agentWorkflow := &workflow.AgentWorkflow{}
	clusterInfo := &ClusterInfo{}
	dependencies.Get(agentWorkflow, clusterInfo)

	if agentWorkflow.Workflow != workflow.AgentWorkflowTypeAddNodes {
		return nil
	}

	icc.Config = ClusterConfig{
		Networking: Networking{
			UserManagedNetworking: agent.GetUserManagedNetworkingByPlatformType(clusterInfo.PlatformType),
		},
	}
	return nil
}
