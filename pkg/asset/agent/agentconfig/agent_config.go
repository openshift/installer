package agentconfig

import (
	"context"
	"fmt"
	"os"
	"path/filepath"

	"github.com/pkg/errors"
	"k8s.io/apimachinery/pkg/util/validation/field"
	"sigs.k8s.io/yaml"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/types/agent"
	"github.com/openshift/installer/pkg/types/agent/conversion"
	"github.com/openshift/installer/pkg/types/baremetal/validation"
	"github.com/openshift/installer/pkg/validate"
)

var (
	agentConfigFilename = "agent-config.yaml"
)

// AgentConfig reads the agent-config.yaml file.
type AgentConfig struct {
	File     *asset.File
	Config   *agent.Config
	Template string
}

var _ asset.WritableAsset = (*AgentConfig)(nil)

// Name returns a human friendly name for the asset.
func (*AgentConfig) Name() string {
	return "Agent Config"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*AgentConfig) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Generate generates the Agent Config manifest.
func (a *AgentConfig) Generate(_ context.Context, dependencies asset.Parents) error {
	// TODO: We are temporarily generating a template of the agent-config.yaml
	// Change this when its interactive survey is implemented.
	agentConfigTemplate := `#
# Note: This is a sample AgentConfig file showing
# which fields are available to aid you in creating your
# own agent-config.yaml file.
#
apiVersion: v1beta1
kind: AgentConfig
metadata:
  name: example-agent-config
  namespace: cluster0
# All fields are optional
rendezvousIP: your-node0-ip
bootArtifactsBaseURL: http://user-specified-infra.com
minimalISO: false
additionalNTPSources:
- 0.rhel.pool.ntp.org
- 1.rhel.pool.ntp.org
hosts:
# If a host is listed, then at least one interface
# needs to be specified.
- hostname: change-to-hostname
  role: master
  # For more information about rootDeviceHints:
  # https://docs.openshift.com/container-platform/4.10/installing/installing_bare_metal_ipi/ipi-install-installation-workflow.html#root-device-hints_ipi-install-installation-workflow
  rootDeviceHints:
    deviceName: /dev/sda
  # interfaces are used to identify the host to apply this configuration to
  interfaces:
    - macAddress: 00:00:00:00:00:00
      name: host-network-interface-name
  # networkConfig contains the network configuration for the host in NMState format.
  # See https://nmstate.io/examples.html for examples.
  networkConfig:
    interfaces:
      - name: eth0
        type: ethernet
        state: up
        mac-address: 00:00:00:00:00:00
        ipv4:
          enabled: true
          address:
            - ip: 192.168.122.2
              prefix-length: 23
          dhcp: false
`

	a.Template = agentConfigTemplate

	// Set the File field correctly with the generated agent config YAML content
	a.File = &asset.File{
		Filename: agentConfigFilename,
		Data:     []byte(a.Template),
	}

	// TODO: template is not validated
	return nil
}

// PersistToFile writes the agent-config.yaml file to the assets folder.
func (a *AgentConfig) PersistToFile(directory string) error {
	templatePath := filepath.Join(directory, agentConfigFilename)
	templateByte := []byte(a.Template)

	err := os.WriteFile(templatePath, templateByte, 0600)
	if err != nil {
		return err
	}

	return nil
}

// Files returns the files generated by the asset.
func (a *AgentConfig) Files() []*asset.File {
	if a.File != nil {
		return []*asset.File{a.File}
	}
	return []*asset.File{}
}

// Load returns agent config asset from the disk.
func (a *AgentConfig) Load(f asset.FileFetcher) (bool, error) {
	file, err := f.FetchByName(agentConfigFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, errors.Wrap(err, fmt.Sprintf("failed to load %s file", agentConfigFilename))
	}

	config := &agent.Config{}
	if err := yaml.UnmarshalStrict(file.Data, config); err != nil {
		return false, errors.Wrapf(err, "failed to unmarshal %s", agentConfigFilename)
	}

	// Upconvert any deprecated fields
	if err := conversion.ConvertAgentConfig(config); err != nil {
		return false, err
	}

	a.File, a.Config = file, config

	if err = a.finish(); err != nil {
		return false, err
	}

	return true, nil
}

func (a *AgentConfig) finish() error {
	if err := a.validateAgent().ToAggregate(); err != nil {
		return errors.Wrapf(err, "invalid Agent Config configuration")
	}

	return nil
}

func (a *AgentConfig) validateAgent() field.ErrorList {
	var allErrs field.ErrorList

	if err := a.validateRendezvousIP(); err != nil {
		allErrs = append(allErrs, err...)
	}

	if err := validation.ValidateNTPServers(a.Config.AdditionalNTPSources, field.NewPath("additionalNTPSources")); err != nil {
		allErrs = append(allErrs, err...)
	}

	if err := a.validateBootArtifactsBaseURL(); err != nil {
		allErrs = append(allErrs, err...)
	}

	return allErrs
}

func (a *AgentConfig) validateRendezvousIP() field.ErrorList {
	var allErrs field.ErrorList

	rendezvousIPPath := field.NewPath("rendezvousIP")

	// empty rendezvous ip is fine
	if a.Config.RendezvousIP == "" {
		return nil
	}

	if err := validate.IP(a.Config.RendezvousIP); err != nil {
		allErrs = append(allErrs, field.Invalid(rendezvousIPPath, a.Config.RendezvousIP, err.Error()))
	}

	return allErrs
}

func (a *AgentConfig) validateBootArtifactsBaseURL() field.ErrorList {
	var allErrs field.ErrorList

	bootArtifactsBaseURL := field.NewPath("bootArtifactsBaseURL")

	// empty bootArtifactsBaseURL is fine
	if a.Config.BootArtifactsBaseURL == "" {
		return nil
	}

	if err := validate.URI(a.Config.BootArtifactsBaseURL); err != nil {
		allErrs = append(allErrs, field.Invalid(bootArtifactsBaseURL, a.Config.BootArtifactsBaseURL, err.Error()))
	}

	return allErrs
}

func unmarshalJSON(b []byte) []byte {
	output, _ := yaml.JSONToYAML(b)
	return output
}
