package manifests

import (
	"path/filepath"

	"github.com/ghodss/yaml"
	"github.com/pkg/errors"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
	"github.com/openshift/installer/pkg/asset/templates/content"

	configv1 "github.com/openshift/api/config/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var (
	oauthCrdFilename = "cluster-oauth-crd.yaml"
	oauthCfgFilename = filepath.Join(manifestDir, "cluster-oauth-config.yml")
)

// OAuth generates the authentication-*.yml files.
type OAuth struct {
	config   *configv1.OAuth
	FileList []*asset.File
}

var _ asset.WritableAsset = (*OAuth)(nil)

// Name returns a human friendly name for the asset.
func (*OAuth) Name() string {
	return "OAuth Config"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*OAuth) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.InstallConfig{},
	}
}

// Generate generates the OAuth and its CRD.
func (o *OAuth) Generate(dependencies asset.Parents) error {
	installConfig := &installconfig.InstallConfig{}
	dependencies.Get(installConfig)

	o.config = &configv1.OAuth{
		TypeMeta: metav1.TypeMeta{
			Kind:       "OAuth",
			APIVersion: configv1.GroupVersion.String(),
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: "cluster",
		},
		Spec: configv1.OAuthSpec{
			TokenConfig: configv1.TokenConfig{
				AuthorizeTokenMaxAgeSeconds: 5 * 60,       // 5 minutes
				AccessTokenMaxAgeSeconds:    24 * 60 * 60, // 1 day
			},
		},
	}

	configData, err := yaml.Marshal(o.config)
	if err != nil {
		return errors.Wrapf(err, "failed to generate data for asset: %s", o.Name())
	}

	crdData, err := content.GetOpenshiftTemplate(oauthCrdFilename)
	if err != nil {
		return errors.Wrapf(err, "failed to get contentes of %s", oauthCrdFilename)
	}

	o.FileList = []*asset.File{
		{
			Filename: filepath.Join(manifestDir, oauthCrdFilename),
			Data:     []byte(crdData),
		},
		{
			Filename: oauthCfgFilename,
			Data:     configData,
		},
	}

	return nil
}

// Files returns the files generated by the asset.
func (o *OAuth) Files() []*asset.File {
	return o.FileList
}

// Load returns false since this asset is not written to disk by the installer.
func (o *OAuth) Load(f asset.FileFetcher) (bool, error) {
	return false, nil
}
