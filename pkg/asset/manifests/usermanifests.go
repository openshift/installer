package manifests

import (
	"path/filepath"

	"github.com/openshift/installer/pkg/asset"
)

const (
	userManifestsDir = "user-manifests"
)

// UserManifests picks up any manifests put in by the user
type UserManifests struct {
	FileList []*asset.File
}

var _ asset.WritableAsset = (*UserManifests)(nil)

// Name returns a human friendly name for the asset.
func (*UserManifests) Name() string {
	return "User's Manifests"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*UserManifests) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Generate generates asset data (which is an empty file list)
func (um *UserManifests) Generate(dependencies asset.Parents) error {
	um.FileList = []*asset.File{}
	return nil
}

// Files returns the files generated by the asset.
func (um *UserManifests) Files() []*asset.File {
	return um.FileList
}

// Load loads the user supplied manifest files into the 'manifests' directory
func (um *UserManifests) Load(f asset.FileFetcher) (bool, error) {
	fileList, err := f.FetchByPattern(filepath.Join(userManifestsDir, "*"))
	if err != nil {
		return false, err
	}
	if len(fileList) == 0 {
		return false, nil
	}

	um.FileList = []*asset.File{}
	for _, f := range fileList {
		_, fileName := filepath.Split(f.Filename)
		fModified := &asset.File{
			Filename: filepath.Join(manifestDir, fileName),
			Data:     f.Data,
		}
		um.FileList = append(um.FileList, fModified)
	}

	return true, nil
}
