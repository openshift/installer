package manifests

import (
	"context"
	"path/filepath"

	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/yaml"

	operatorv1alpha1 "github.com/openshift/api/operator/v1alpha1"
	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
)

var imageContentSourcePolicyFilename = "image-content-source-policy.yaml"

// ImageContentSourcePolicy generates the image-content-source-policy.yaml file.
type ImageContentSourcePolicy struct {
	File *asset.File
}

var _ asset.WritableAsset = (*ImageContentSourcePolicy)(nil)

// Name returns a human-friendly name for the asset.
func (*ImageContentSourcePolicy) Name() string {
	return "Image Content Source Policy"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*ImageContentSourcePolicy) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.InstallConfig{},
	}
}

// Generate generates the ImageContentSourcePolicy config and its CR.
func (p *ImageContentSourcePolicy) Generate(_ context.Context, dependencies asset.Parents) error {
	installconfig := &installconfig.InstallConfig{}
	dependencies.Get(installconfig)

	if len(installconfig.Config.DeprecatedImageContentSources) > 0 {
		policy := operatorv1alpha1.ImageContentSourcePolicy{
			TypeMeta: metav1.TypeMeta{
				APIVersion: operatorv1alpha1.SchemeGroupVersion.String(),
				Kind:       "ImageContentSourcePolicy",
			},
			ObjectMeta: metav1.ObjectMeta{
				Name: "image-policy",
				// not namespaced
			},
		}

		policy.Spec.RepositoryDigestMirrors = make([]operatorv1alpha1.RepositoryDigestMirrors, len(installconfig.Config.DeprecatedImageContentSources))
		for gidx, group := range installconfig.Config.DeprecatedImageContentSources {
			policy.Spec.RepositoryDigestMirrors[gidx] = operatorv1alpha1.RepositoryDigestMirrors{Source: group.Source, Mirrors: group.Mirrors}
		}

		policyData, err := yaml.Marshal(policy)
		if err != nil {
			return errors.Wrapf(err, "failed to marshal ImageContentSourcePolicy")
		}
		p.File = &asset.File{
			Filename: filepath.Join(manifestDir, imageContentSourcePolicyFilename),
			Data:     policyData,
		}
	}
	return nil
}

// Files returns the files generated by the asset.
func (p *ImageContentSourcePolicy) Files() []*asset.File {
	if p.File == nil {
		return nil
	}
	return []*asset.File{p.File}
}

// Load loads the already-rendered files back from disk.
func (p *ImageContentSourcePolicy) Load(f asset.FileFetcher) (bool, error) {
	return false, nil
}
