package ibi

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/pkg/errors"
	"k8s.io/apimachinery/pkg/util/validation/field"
	"sigs.k8s.io/yaml"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/types/ibi"
)

var ibiConfigFilename = "ibi-config.yaml"

// ImageBasedInstallConfig reads the agent-config.yaml file.
type ImageBasedInstallConfig struct {
	File     *asset.File
	Config   *ibi.Config
	Template string
}

var _ asset.WritableAsset = (*ImageBasedInstallConfig)(nil)

// Name returns a human friendly name for the asset.
func (*ImageBasedInstallConfig) Name() string {
	return "Image-based Install Config"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*ImageBasedInstallConfig) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Generate generates the Image-based Install Config manifest.
func (i *ImageBasedInstallConfig) Generate(dependencies asset.Parents) error {
	ibiConfigTemplate := `#
# Note: This is a sample ImageBasedInstallConfig file showing
# which fields are available to aid you in creating your
# own ibi-config.yaml file.
#
apiVersion: v1beta1
kind: ImageBasedInstallConfig
metadata:
  name: example-ibi-config
  namespace: cluster0
seedImage: quay.io/openshift-kni/seed-image:4.16.0
seedVersion: 4.16.0
pullSecretFile: ./pull-secret.json
authFile: ./auth-file.json
sshPublicKeyFile: ./id-rsa.pub
lcaImage: quay.io/openshift-kni/lifecycle-agent-operator:4.16.0
rhcosLiveIso: https://mirror.openshift.com/pub/openshift-v4/amd64/dependencies/rhcos/latest/rhcos-live.x86_64.iso
installationDisk: vda1
extraPartitionStart: use_directory
precacheBestEffort: false
precacheDisabled: false
`

	i.Template = ibiConfigTemplate

	// Set the File field correctly with the generated image-based install config YAML content
	i.File = &asset.File{
		Filename: ibiConfigFilename,
		Data:     []byte(i.Template),
	}

	return nil
}

// PersistToFile writes the ibi-config.yaml file to the assets folder.
func (i *ImageBasedInstallConfig) PersistToFile(directory string) error {
	templatePath := filepath.Join(directory, ibiConfigFilename)
	templateByte := []byte(i.Template)

	err := os.WriteFile(templatePath, templateByte, 0o600)
	if err != nil {
		return err
	}

	return nil
}

// Files returns the files generated by the asset.
func (i *ImageBasedInstallConfig) Files() []*asset.File {
	if i.File != nil {
		return []*asset.File{i.File}
	}
	return []*asset.File{}
}

// Load returns image-based install config asset from the disk.
func (i *ImageBasedInstallConfig) Load(f asset.FileFetcher) (bool, error) {
	file, err := f.FetchByName(ibiConfigFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, errors.Wrap(err, fmt.Sprintf("failed to load %s file", ibiConfigFilename))
	}

	config := &ibi.Config{}
	if err := yaml.UnmarshalStrict(file.Data, config); err != nil {
		return false, errors.Wrapf(err, "failed to unmarshal %s", ibiConfigFilename)
	}

	i.File, i.Config = file, config

	if err = i.finish(); err != nil {
		return false, err
	}

	return true, nil
}

func (i *ImageBasedInstallConfig) finish() error {
	if err := i.validate().ToAggregate(); err != nil {
		return errors.Wrapf(err, "invalid Image-based Install Config configuration")
	}

	return nil
}

func (i *ImageBasedInstallConfig) validate() field.ErrorList {
	var allErrs field.ErrorList
	// TODO: implement
	return allErrs
}
