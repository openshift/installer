// Code generated by MockGen. DO NOT EDIT.
// Source: ./route53.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws"
	route53 "github.com/aws/aws-sdk-go/service/route53"
	gomock "github.com/golang/mock/gomock"
	types "github.com/openshift/installer/pkg/types"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// GetBaseDomain mocks base method.
func (m *MockAPI) GetBaseDomain(baseDomainName string) (*route53.HostedZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseDomain", baseDomainName)
	ret0, _ := ret[0].(*route53.HostedZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseDomain indicates an expected call of GetBaseDomain.
func (mr *MockAPIMockRecorder) GetBaseDomain(baseDomainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseDomain", reflect.TypeOf((*MockAPI)(nil).GetBaseDomain), baseDomainName)
}

// GetHostedZone mocks base method.
func (m *MockAPI) GetHostedZone(hostedZone string, cfg *aws.Config) (*route53.GetHostedZoneOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostedZone", hostedZone, cfg)
	ret0, _ := ret[0].(*route53.GetHostedZoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostedZone indicates an expected call of GetHostedZone.
func (mr *MockAPIMockRecorder) GetHostedZone(hostedZone, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostedZone", reflect.TypeOf((*MockAPI)(nil).GetHostedZone), hostedZone, cfg)
}

// GetSubDomainDNSRecords mocks base method.
func (m *MockAPI) GetSubDomainDNSRecords(hostedZone *route53.HostedZone, ic *types.InstallConfig, cfg *aws.Config) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubDomainDNSRecords", hostedZone, ic, cfg)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubDomainDNSRecords indicates an expected call of GetSubDomainDNSRecords.
func (mr *MockAPIMockRecorder) GetSubDomainDNSRecords(hostedZone, ic, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubDomainDNSRecords", reflect.TypeOf((*MockAPI)(nil).GetSubDomainDNSRecords), hostedZone, ic, cfg)
}

// ValidateZoneRecords mocks base method.
func (m *MockAPI) ValidateZoneRecords(zone *route53.HostedZone, zoneName string, zonePath *field.Path, ic *types.InstallConfig, cfg *aws.Config) field.ErrorList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateZoneRecords", zone, zoneName, zonePath, ic, cfg)
	ret0, _ := ret[0].(field.ErrorList)
	return ret0
}

// ValidateZoneRecords indicates an expected call of ValidateZoneRecords.
func (mr *MockAPIMockRecorder) ValidateZoneRecords(zone, zoneName, zonePath, ic, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateZoneRecords", reflect.TypeOf((*MockAPI)(nil).ValidateZoneRecords), zone, zoneName, zonePath, ic, cfg)
}
