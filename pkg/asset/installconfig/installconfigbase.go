package installconfig

import (
	"os"
	"strings"

	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"
	"sigs.k8s.io/yaml"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/types"
	"github.com/openshift/installer/pkg/types/conversion"
	"github.com/openshift/installer/pkg/types/defaults"
)

// AssetBase is the base structure for the separate InstallConfig assets used
// in the agent-based and IPI/UPI installation methods.
type AssetBase struct {
	Config *types.InstallConfig `json:"config"`
	File   *asset.File          `json:"file"`
}

// Files returns the files generated by the asset.
func (a *AssetBase) Files() []*asset.File {
	if a.File != nil {
		return []*asset.File{a.File}
	}
	return []*asset.File{}
}

// Name returns the human-friendly name of the asset.
func (a *AssetBase) Name() string {
	return "Install Config"
}

// LoadFromFile returns the installconfig from disk.
func (a *AssetBase) LoadFromFile(f asset.FileFetcher) (found bool, err error) {
	file, err := f.FetchByName(installConfigFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, errors.Wrap(err, asset.InstallConfigError)
	}

	config := &types.InstallConfig{}
	if err := yaml.UnmarshalStrict(file.Data, config, yaml.DisallowUnknownFields); err != nil {
		err = errors.Wrapf(err, "failed to unmarshal %s", installConfigFilename)
		if !strings.Contains(err.Error(), "unknown field") {
			return false, errors.Wrap(err, asset.InstallConfigError)
		}
		err = errors.Wrapf(err, "failed to parse first occurrence of unknown field")
		logrus.Warnf("%s", err.Error())
		logrus.Info("Attempting to unmarshal while ignoring unknown keys because strict unmarshaling failed")
		if err = yaml.Unmarshal(file.Data, config); err != nil {
			err = errors.Wrapf(err, "failed to unmarshal %s", installConfigFilename)
			return false, errors.Wrap(err, asset.InstallConfigError)
		}
	}
	a.Config = config

	// Upconvert any deprecated fields
	if err := conversion.ConvertInstallConfig(a.Config); err != nil {
		return false, errors.Wrap(errors.Wrap(err, "failed to upconvert install config"), asset.InstallConfigError)
	}

	defaults.SetInstallConfigDefaults(a.Config)

	return true, nil
}

// RecordFile generates the asset manifest file from the config CR.
func (a *AssetBase) RecordFile() error {
	data, err := yaml.Marshal(a.Config)
	if err != nil {
		return errors.Wrap(err, "failed to Marshal InstallConfig")
	}
	a.File = &asset.File{
		Filename: installConfigFilename,
		Data:     data,
	}
	return nil
}
