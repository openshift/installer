// Code generated by MockGen. DO NOT EDIT.
// Source: ./validation.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tags "github.com/vmware/govmomi/vapi/tags"
	mo "github.com/vmware/govmomi/vim25/mo"
)

// MockTagManager is a mock of TagManager interface.
type MockTagManager struct {
	ctrl     *gomock.Controller
	recorder *MockTagManagerMockRecorder
}

// MockTagManagerMockRecorder is the mock recorder for MockTagManager.
type MockTagManagerMockRecorder struct {
	mock *MockTagManager
}

// NewMockTagManager creates a new mock instance.
func NewMockTagManager(ctrl *gomock.Controller) *MockTagManager {
	mock := &MockTagManager{ctrl: ctrl}
	mock.recorder = &MockTagManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagManager) EXPECT() *MockTagManagerMockRecorder {
	return m.recorder
}

// GetAttachedTags mocks base method.
func (m *MockTagManager) GetAttachedTags(ctx context.Context, ref mo.Reference) ([]tags.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachedTags", ctx, ref)
	ret0, _ := ret[0].([]tags.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachedTags indicates an expected call of GetAttachedTags.
func (mr *MockTagManagerMockRecorder) GetAttachedTags(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachedTags", reflect.TypeOf((*MockTagManager)(nil).GetAttachedTags), ctx, ref)
}

// GetAttachedTagsOnObjects mocks base method.
func (m *MockTagManager) GetAttachedTagsOnObjects(ctx context.Context, objectID []mo.Reference) ([]tags.AttachedTags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachedTagsOnObjects", ctx, objectID)
	ret0, _ := ret[0].([]tags.AttachedTags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachedTagsOnObjects indicates an expected call of GetAttachedTagsOnObjects.
func (mr *MockTagManagerMockRecorder) GetAttachedTagsOnObjects(ctx, objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachedTagsOnObjects", reflect.TypeOf((*MockTagManager)(nil).GetAttachedTagsOnObjects), ctx, objectID)
}

// GetCategories mocks base method.
func (m *MockTagManager) GetCategories(ctx context.Context) ([]tags.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", ctx)
	ret0, _ := ret[0].([]tags.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockTagManagerMockRecorder) GetCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockTagManager)(nil).GetCategories), ctx)
}

// GetCategory mocks base method.
func (m *MockTagManager) GetCategory(ctx context.Context, id string) (*tags.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, id)
	ret0, _ := ret[0].(*tags.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockTagManagerMockRecorder) GetCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockTagManager)(nil).GetCategory), ctx, id)
}

// GetTagsForCategory mocks base method.
func (m *MockTagManager) GetTagsForCategory(ctx context.Context, id string) ([]tags.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsForCategory", ctx, id)
	ret0, _ := ret[0].([]tags.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsForCategory indicates an expected call of GetTagsForCategory.
func (mr *MockTagManagerMockRecorder) GetTagsForCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsForCategory", reflect.TypeOf((*MockTagManager)(nil).GetTagsForCategory), ctx, id)
}

// ListCategories mocks base method.
func (m *MockTagManager) ListCategories(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockTagManagerMockRecorder) ListCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockTagManager)(nil).ListCategories), ctx)
}
