// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go
//
// Generated by this command:
//
//	mockgen -source=./client.go -destination=./mock/gcpclient_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	kmspb "cloud.google.com/go/kms/apiv1/kmspb"
	gomock "go.uber.org/mock/gomock"
	google "golang.org/x/oauth2/google"
	cloudresourcemanager "google.golang.org/api/cloudresourcemanager/v3"
	compute "google.golang.org/api/compute/v1"
	dns "google.golang.org/api/dns/v1"
	sets "k8s.io/apimachinery/pkg/util/sets"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
	isgomock struct{}
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// GetCredentials mocks base method.
func (m *MockAPI) GetCredentials() *google.Credentials {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials")
	ret0, _ := ret[0].(*google.Credentials)
	return ret0
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockAPIMockRecorder) GetCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockAPI)(nil).GetCredentials))
}

// GetDNSZone mocks base method.
func (m *MockAPI) GetDNSZone(ctx context.Context, project, baseDomain string, isPublic bool) (*dns.ManagedZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSZone", ctx, project, baseDomain, isPublic)
	ret0, _ := ret[0].(*dns.ManagedZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSZone indicates an expected call of GetDNSZone.
func (mr *MockAPIMockRecorder) GetDNSZone(ctx, project, baseDomain, isPublic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSZone", reflect.TypeOf((*MockAPI)(nil).GetDNSZone), ctx, project, baseDomain, isPublic)
}

// GetDNSZoneByName mocks base method.
func (m *MockAPI) GetDNSZoneByName(ctx context.Context, project, zoneName string) (*dns.ManagedZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSZoneByName", ctx, project, zoneName)
	ret0, _ := ret[0].(*dns.ManagedZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSZoneByName indicates an expected call of GetDNSZoneByName.
func (mr *MockAPIMockRecorder) GetDNSZoneByName(ctx, project, zoneName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSZoneByName", reflect.TypeOf((*MockAPI)(nil).GetDNSZoneByName), ctx, project, zoneName)
}

// GetEnabledServices mocks base method.
func (m *MockAPI) GetEnabledServices(ctx context.Context, project string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledServices", ctx, project)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledServices indicates an expected call of GetEnabledServices.
func (mr *MockAPIMockRecorder) GetEnabledServices(ctx, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledServices", reflect.TypeOf((*MockAPI)(nil).GetEnabledServices), ctx, project)
}

// GetImage mocks base method.
func (m *MockAPI) GetImage(ctx context.Context, name, project string) (*compute.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, name, project)
	ret0, _ := ret[0].(*compute.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockAPIMockRecorder) GetImage(ctx, name, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockAPI)(nil).GetImage), ctx, name, project)
}

// GetKeyRing mocks base method.
func (m *MockAPI) GetKeyRing(ctx context.Context, keyRingName string) (*kmspb.KeyRing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyRing", ctx, keyRingName)
	ret0, _ := ret[0].(*kmspb.KeyRing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyRing indicates an expected call of GetKeyRing.
func (mr *MockAPIMockRecorder) GetKeyRing(ctx, keyRingName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyRing", reflect.TypeOf((*MockAPI)(nil).GetKeyRing), ctx, keyRingName)
}

// GetMachineType mocks base method.
func (m *MockAPI) GetMachineType(ctx context.Context, project, zone, machineType string) (*compute.MachineType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineType", ctx, project, zone, machineType)
	ret0, _ := ret[0].(*compute.MachineType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineType indicates an expected call of GetMachineType.
func (mr *MockAPIMockRecorder) GetMachineType(ctx, project, zone, machineType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineType", reflect.TypeOf((*MockAPI)(nil).GetMachineType), ctx, project, zone, machineType)
}

// GetMachineTypeWithZones mocks base method.
func (m *MockAPI) GetMachineTypeWithZones(ctx context.Context, project, region, machineType string) (*compute.MachineType, sets.Set[string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineTypeWithZones", ctx, project, region, machineType)
	ret0, _ := ret[0].(*compute.MachineType)
	ret1, _ := ret[1].(sets.Set[string])
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMachineTypeWithZones indicates an expected call of GetMachineTypeWithZones.
func (mr *MockAPIMockRecorder) GetMachineTypeWithZones(ctx, project, region, machineType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineTypeWithZones", reflect.TypeOf((*MockAPI)(nil).GetMachineTypeWithZones), ctx, project, region, machineType)
}

// GetNamespacedTagValue mocks base method.
func (m *MockAPI) GetNamespacedTagValue(ctx context.Context, tagNamespacedName string) (*cloudresourcemanager.TagValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespacedTagValue", ctx, tagNamespacedName)
	ret0, _ := ret[0].(*cloudresourcemanager.TagValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespacedTagValue indicates an expected call of GetNamespacedTagValue.
func (mr *MockAPIMockRecorder) GetNamespacedTagValue(ctx, tagNamespacedName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespacedTagValue", reflect.TypeOf((*MockAPI)(nil).GetNamespacedTagValue), ctx, tagNamespacedName)
}

// GetNetwork mocks base method.
func (m *MockAPI) GetNetwork(ctx context.Context, network, project string) (*compute.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", ctx, network, project)
	ret0, _ := ret[0].(*compute.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockAPIMockRecorder) GetNetwork(ctx, network, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockAPI)(nil).GetNetwork), ctx, network, project)
}

// GetProjectByID mocks base method.
func (m *MockAPI) GetProjectByID(ctx context.Context, project string) (*cloudresourcemanager.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByID", ctx, project)
	ret0, _ := ret[0].(*cloudresourcemanager.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByID indicates an expected call of GetProjectByID.
func (mr *MockAPIMockRecorder) GetProjectByID(ctx, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByID", reflect.TypeOf((*MockAPI)(nil).GetProjectByID), ctx, project)
}

// GetProjectPermissions mocks base method.
func (m *MockAPI) GetProjectPermissions(ctx context.Context, project string, permissions []string) (sets.Set[string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectPermissions", ctx, project, permissions)
	ret0, _ := ret[0].(sets.Set[string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectPermissions indicates an expected call of GetProjectPermissions.
func (mr *MockAPIMockRecorder) GetProjectPermissions(ctx, project, permissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectPermissions", reflect.TypeOf((*MockAPI)(nil).GetProjectPermissions), ctx, project, permissions)
}

// GetProjectTags mocks base method.
func (m *MockAPI) GetProjectTags(ctx context.Context, projectID string) (sets.Set[string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectTags", ctx, projectID)
	ret0, _ := ret[0].(sets.Set[string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectTags indicates an expected call of GetProjectTags.
func (mr *MockAPIMockRecorder) GetProjectTags(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectTags", reflect.TypeOf((*MockAPI)(nil).GetProjectTags), ctx, projectID)
}

// GetProjects mocks base method.
func (m *MockAPI) GetProjects(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockAPIMockRecorder) GetProjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockAPI)(nil).GetProjects), ctx)
}

// GetPublicDomains mocks base method.
func (m *MockAPI) GetPublicDomains(ctx context.Context, project string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicDomains", ctx, project)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicDomains indicates an expected call of GetPublicDomains.
func (mr *MockAPIMockRecorder) GetPublicDomains(ctx, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicDomains", reflect.TypeOf((*MockAPI)(nil).GetPublicDomains), ctx, project)
}

// GetRecordSets mocks base method.
func (m *MockAPI) GetRecordSets(ctx context.Context, project, zone string) ([]*dns.ResourceRecordSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordSets", ctx, project, zone)
	ret0, _ := ret[0].([]*dns.ResourceRecordSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordSets indicates an expected call of GetRecordSets.
func (mr *MockAPIMockRecorder) GetRecordSets(ctx, project, zone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordSets", reflect.TypeOf((*MockAPI)(nil).GetRecordSets), ctx, project, zone)
}

// GetRegions mocks base method.
func (m *MockAPI) GetRegions(ctx context.Context, project string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegions", ctx, project)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegions indicates an expected call of GetRegions.
func (mr *MockAPIMockRecorder) GetRegions(ctx, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegions", reflect.TypeOf((*MockAPI)(nil).GetRegions), ctx, project)
}

// GetServiceAccount mocks base method.
func (m *MockAPI) GetServiceAccount(ctx context.Context, project, serviceAccount string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccount", ctx, project, serviceAccount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccount indicates an expected call of GetServiceAccount.
func (mr *MockAPIMockRecorder) GetServiceAccount(ctx, project, serviceAccount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccount", reflect.TypeOf((*MockAPI)(nil).GetServiceAccount), ctx, project, serviceAccount)
}

// GetSubnetworks mocks base method.
func (m *MockAPI) GetSubnetworks(ctx context.Context, network, project, region string) ([]*compute.Subnetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetworks", ctx, network, project, region)
	ret0, _ := ret[0].([]*compute.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetworks indicates an expected call of GetSubnetworks.
func (mr *MockAPIMockRecorder) GetSubnetworks(ctx, network, project, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetworks", reflect.TypeOf((*MockAPI)(nil).GetSubnetworks), ctx, network, project, region)
}

// GetZones mocks base method.
func (m *MockAPI) GetZones(ctx context.Context, project, filter string) ([]*compute.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZones", ctx, project, filter)
	ret0, _ := ret[0].([]*compute.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZones indicates an expected call of GetZones.
func (mr *MockAPIMockRecorder) GetZones(ctx, project, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZones", reflect.TypeOf((*MockAPI)(nil).GetZones), ctx, project, filter)
}

// ValidateServiceAccountHasPermissions mocks base method.
func (m *MockAPI) ValidateServiceAccountHasPermissions(ctx context.Context, project string, permissions []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateServiceAccountHasPermissions", ctx, project, permissions)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateServiceAccountHasPermissions indicates an expected call of ValidateServiceAccountHasPermissions.
func (mr *MockAPIMockRecorder) ValidateServiceAccountHasPermissions(ctx, project, permissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateServiceAccountHasPermissions", reflect.TypeOf((*MockAPI)(nil).ValidateServiceAccountHasPermissions), ctx, project, permissions)
}
