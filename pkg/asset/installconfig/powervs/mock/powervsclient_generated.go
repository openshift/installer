// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	iamidentityv1 "github.com/IBM/platform-services-go-sdk/iamidentityv1"
	vpcv1 "github.com/IBM/vpc-go-sdk/vpcv1"
	gomock "github.com/golang/mock/gomock"
	powervs "github.com/openshift/installer/pkg/asset/installconfig/powervs"
	types "github.com/openshift/installer/pkg/types"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// GetAPIKey mocks base method.
func (m *MockAPI) GetAPIKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockAPIMockRecorder) GetAPIKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockAPI)(nil).GetAPIKey))
}

// GetAuthenticatorAPIKeyDetails mocks base method.
func (m *MockAPI) GetAuthenticatorAPIKeyDetails(ctx context.Context) (*iamidentityv1.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticatorAPIKeyDetails", ctx)
	ret0, _ := ret[0].(*iamidentityv1.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticatorAPIKeyDetails indicates an expected call of GetAuthenticatorAPIKeyDetails.
func (mr *MockAPIMockRecorder) GetAuthenticatorAPIKeyDetails(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticatorAPIKeyDetails", reflect.TypeOf((*MockAPI)(nil).GetAuthenticatorAPIKeyDetails), ctx)
}

// GetDNSInstancePermittedNetworks mocks base method.
func (m *MockAPI) GetDNSInstancePermittedNetworks(ctx context.Context, dnsID, dnsZone string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSInstancePermittedNetworks", ctx, dnsID, dnsZone)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSInstancePermittedNetworks indicates an expected call of GetDNSInstancePermittedNetworks.
func (mr *MockAPIMockRecorder) GetDNSInstancePermittedNetworks(ctx, dnsID, dnsZone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSInstancePermittedNetworks", reflect.TypeOf((*MockAPI)(nil).GetDNSInstancePermittedNetworks), ctx, dnsID, dnsZone)
}

// GetDNSRecordsByName mocks base method.
func (m *MockAPI) GetDNSRecordsByName(ctx context.Context, crnstr, zoneID, recordName string, publish types.PublishingStrategy) ([]powervs.DNSRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSRecordsByName", ctx, crnstr, zoneID, recordName, publish)
	ret0, _ := ret[0].([]powervs.DNSRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSRecordsByName indicates an expected call of GetDNSRecordsByName.
func (mr *MockAPIMockRecorder) GetDNSRecordsByName(ctx, crnstr, zoneID, recordName, publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSRecordsByName", reflect.TypeOf((*MockAPI)(nil).GetDNSRecordsByName), ctx, crnstr, zoneID, recordName, publish)
}

// GetDNSZoneIDByName mocks base method.
func (m *MockAPI) GetDNSZoneIDByName(ctx context.Context, name string, publish types.PublishingStrategy) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSZoneIDByName", ctx, name, publish)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSZoneIDByName indicates an expected call of GetDNSZoneIDByName.
func (mr *MockAPIMockRecorder) GetDNSZoneIDByName(ctx, name, publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSZoneIDByName", reflect.TypeOf((*MockAPI)(nil).GetDNSZoneIDByName), ctx, name, publish)
}

// GetDNSZones mocks base method.
func (m *MockAPI) GetDNSZones(ctx context.Context, publish types.PublishingStrategy) ([]powervs.DNSZoneResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSZones", ctx, publish)
	ret0, _ := ret[0].([]powervs.DNSZoneResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSZones indicates an expected call of GetDNSZones.
func (mr *MockAPIMockRecorder) GetDNSZones(ctx, publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSZones", reflect.TypeOf((*MockAPI)(nil).GetDNSZones), ctx, publish)
}

// GetPublicGatewayByVPC mocks base method.
func (m *MockAPI) GetPublicGatewayByVPC(ctx context.Context, vpcName string) (*vpcv1.PublicGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicGatewayByVPC", ctx, vpcName)
	ret0, _ := ret[0].(*vpcv1.PublicGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicGatewayByVPC indicates an expected call of GetPublicGatewayByVPC.
func (mr *MockAPIMockRecorder) GetPublicGatewayByVPC(ctx, vpcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicGatewayByVPC", reflect.TypeOf((*MockAPI)(nil).GetPublicGatewayByVPC), ctx, vpcName)
}

// GetSubnetByName mocks base method.
func (m *MockAPI) GetSubnetByName(ctx context.Context, subnetName, region string) (*vpcv1.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetByName", ctx, subnetName, region)
	ret0, _ := ret[0].(*vpcv1.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetByName indicates an expected call of GetSubnetByName.
func (mr *MockAPIMockRecorder) GetSubnetByName(ctx, subnetName, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetByName", reflect.TypeOf((*MockAPI)(nil).GetSubnetByName), ctx, subnetName, region)
}

// GetVPCByName mocks base method.
func (m *MockAPI) GetVPCByName(ctx context.Context, vpcName string) (*vpcv1.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCByName", ctx, vpcName)
	ret0, _ := ret[0].(*vpcv1.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCByName indicates an expected call of GetVPCByName.
func (mr *MockAPIMockRecorder) GetVPCByName(ctx, vpcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCByName", reflect.TypeOf((*MockAPI)(nil).GetVPCByName), ctx, vpcName)
}

// GetVPCs mocks base method.
func (m *MockAPI) GetVPCs(ctx context.Context, region string) ([]vpcv1.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCs", ctx, region)
	ret0, _ := ret[0].([]vpcv1.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCs indicates an expected call of GetVPCs.
func (mr *MockAPIMockRecorder) GetVPCs(ctx, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCs", reflect.TypeOf((*MockAPI)(nil).GetVPCs), ctx, region)
}

// SetVPCServiceURLForRegion mocks base method.
func (m *MockAPI) SetVPCServiceURLForRegion(ctx context.Context, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVPCServiceURLForRegion", ctx, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVPCServiceURLForRegion indicates an expected call of SetVPCServiceURLForRegion.
func (mr *MockAPIMockRecorder) SetVPCServiceURLForRegion(ctx, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVPCServiceURLForRegion", reflect.TypeOf((*MockAPI)(nil).SetVPCServiceURLForRegion), ctx, region)
}
