// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	iamidentityv1 "github.com/IBM/platform-services-go-sdk/iamidentityv1"
	resourcemanagerv2 "github.com/IBM/platform-services-go-sdk/resourcemanagerv2"
	vpcv1 "github.com/IBM/vpc-go-sdk/vpcv1"
	gomock "github.com/golang/mock/gomock"
	powervs "github.com/openshift/installer/pkg/asset/installconfig/powervs"
	types "github.com/openshift/installer/pkg/types"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// AddIPToLoadBalancerPool mocks base method.
func (m *MockAPI) AddIPToLoadBalancerPool(ctx context.Context, lbID, poolName string, port int64, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIPToLoadBalancerPool", ctx, lbID, poolName, port, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIPToLoadBalancerPool indicates an expected call of AddIPToLoadBalancerPool.
func (mr *MockAPIMockRecorder) AddIPToLoadBalancerPool(ctx, lbID, poolName, port, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIPToLoadBalancerPool", reflect.TypeOf((*MockAPI)(nil).AddIPToLoadBalancerPool), ctx, lbID, poolName, port, ip)
}

// AddSecurityGroupRule mocks base method.
func (m *MockAPI) AddSecurityGroupRule(ctx context.Context, securityGroupID string, rule *vpcv1.SecurityGroupRulePrototype) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecurityGroupRule", ctx, securityGroupID, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSecurityGroupRule indicates an expected call of AddSecurityGroupRule.
func (mr *MockAPIMockRecorder) AddSecurityGroupRule(ctx, securityGroupID, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecurityGroupRule", reflect.TypeOf((*MockAPI)(nil).AddSecurityGroupRule), ctx, securityGroupID, rule)
}

// CreateDNSRecord mocks base method.
func (m *MockAPI) CreateDNSRecord(ctx context.Context, publish types.PublishingStrategy, crnstr, baseDomain, hostname, cname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDNSRecord", ctx, publish, crnstr, baseDomain, hostname, cname)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDNSRecord indicates an expected call of CreateDNSRecord.
func (mr *MockAPIMockRecorder) CreateDNSRecord(ctx, publish, crnstr, baseDomain, hostname, cname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDNSRecord", reflect.TypeOf((*MockAPI)(nil).CreateDNSRecord), ctx, publish, crnstr, baseDomain, hostname, cname)
}

// CreateSSHKey mocks base method.
func (m *MockAPI) CreateSSHKey(ctx context.Context, serviceInstance, zone, sshKeyName, sshKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSSHKey", ctx, serviceInstance, zone, sshKeyName, sshKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSSHKey indicates an expected call of CreateSSHKey.
func (mr *MockAPIMockRecorder) CreateSSHKey(ctx, serviceInstance, zone, sshKeyName, sshKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSSHKey", reflect.TypeOf((*MockAPI)(nil).CreateSSHKey), ctx, serviceInstance, zone, sshKeyName, sshKey)
}

// GetAPIKey mocks base method.
func (m *MockAPI) GetAPIKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockAPIMockRecorder) GetAPIKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockAPI)(nil).GetAPIKey))
}

// GetAttachedTransitGateway mocks base method.
func (m *MockAPI) GetAttachedTransitGateway(ctx context.Context, svcInsID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachedTransitGateway", ctx, svcInsID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachedTransitGateway indicates an expected call of GetAttachedTransitGateway.
func (mr *MockAPIMockRecorder) GetAttachedTransitGateway(ctx, svcInsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachedTransitGateway", reflect.TypeOf((*MockAPI)(nil).GetAttachedTransitGateway), ctx, svcInsID)
}

// GetAuthenticatorAPIKeyDetails mocks base method.
func (m *MockAPI) GetAuthenticatorAPIKeyDetails(ctx context.Context) (*iamidentityv1.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticatorAPIKeyDetails", ctx)
	ret0, _ := ret[0].(*iamidentityv1.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticatorAPIKeyDetails indicates an expected call of GetAuthenticatorAPIKeyDetails.
func (mr *MockAPIMockRecorder) GetAuthenticatorAPIKeyDetails(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticatorAPIKeyDetails", reflect.TypeOf((*MockAPI)(nil).GetAuthenticatorAPIKeyDetails), ctx)
}

// GetDNSCustomResolverIP mocks base method.
func (m *MockAPI) GetDNSCustomResolverIP(ctx context.Context, dnsID, vpcID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSCustomResolverIP", ctx, dnsID, vpcID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSCustomResolverIP indicates an expected call of GetDNSCustomResolverIP.
func (mr *MockAPIMockRecorder) GetDNSCustomResolverIP(ctx, dnsID, vpcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSCustomResolverIP", reflect.TypeOf((*MockAPI)(nil).GetDNSCustomResolverIP), ctx, dnsID, vpcID)
}

// GetDNSInstancePermittedNetworks mocks base method.
func (m *MockAPI) GetDNSInstancePermittedNetworks(ctx context.Context, dnsID, dnsZone string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSInstancePermittedNetworks", ctx, dnsID, dnsZone)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSInstancePermittedNetworks indicates an expected call of GetDNSInstancePermittedNetworks.
func (mr *MockAPIMockRecorder) GetDNSInstancePermittedNetworks(ctx, dnsID, dnsZone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSInstancePermittedNetworks", reflect.TypeOf((*MockAPI)(nil).GetDNSInstancePermittedNetworks), ctx, dnsID, dnsZone)
}

// GetDNSRecordsByName mocks base method.
func (m *MockAPI) GetDNSRecordsByName(ctx context.Context, crnstr, zoneID, recordName string, publish types.PublishingStrategy) ([]powervs.DNSRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSRecordsByName", ctx, crnstr, zoneID, recordName, publish)
	ret0, _ := ret[0].([]powervs.DNSRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSRecordsByName indicates an expected call of GetDNSRecordsByName.
func (mr *MockAPIMockRecorder) GetDNSRecordsByName(ctx, crnstr, zoneID, recordName, publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSRecordsByName", reflect.TypeOf((*MockAPI)(nil).GetDNSRecordsByName), ctx, crnstr, zoneID, recordName, publish)
}

// GetDNSZoneIDByName mocks base method.
func (m *MockAPI) GetDNSZoneIDByName(ctx context.Context, name string, publish types.PublishingStrategy) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSZoneIDByName", ctx, name, publish)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSZoneIDByName indicates an expected call of GetDNSZoneIDByName.
func (mr *MockAPIMockRecorder) GetDNSZoneIDByName(ctx, name, publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSZoneIDByName", reflect.TypeOf((*MockAPI)(nil).GetDNSZoneIDByName), ctx, name, publish)
}

// GetDNSZones mocks base method.
func (m *MockAPI) GetDNSZones(ctx context.Context, publish types.PublishingStrategy) ([]powervs.DNSZoneResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSZones", ctx, publish)
	ret0, _ := ret[0].([]powervs.DNSZoneResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSZones indicates an expected call of GetDNSZones.
func (mr *MockAPIMockRecorder) GetDNSZones(ctx, publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSZones", reflect.TypeOf((*MockAPI)(nil).GetDNSZones), ctx, publish)
}

// GetDatacenterCapabilities mocks base method.
func (m *MockAPI) GetDatacenterCapabilities(ctx context.Context, region string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatacenterCapabilities", ctx, region)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatacenterCapabilities indicates an expected call of GetDatacenterCapabilities.
func (mr *MockAPIMockRecorder) GetDatacenterCapabilities(ctx, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatacenterCapabilities", reflect.TypeOf((*MockAPI)(nil).GetDatacenterCapabilities), ctx, region)
}

// GetPublicGatewayByVPC mocks base method.
func (m *MockAPI) GetPublicGatewayByVPC(ctx context.Context, vpcName string) (*vpcv1.PublicGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicGatewayByVPC", ctx, vpcName)
	ret0, _ := ret[0].(*vpcv1.PublicGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicGatewayByVPC indicates an expected call of GetPublicGatewayByVPC.
func (mr *MockAPIMockRecorder) GetPublicGatewayByVPC(ctx, vpcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicGatewayByVPC", reflect.TypeOf((*MockAPI)(nil).GetPublicGatewayByVPC), ctx, vpcName)
}

// GetSubnetByName mocks base method.
func (m *MockAPI) GetSubnetByName(ctx context.Context, subnetName, region string) (*vpcv1.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetByName", ctx, subnetName, region)
	ret0, _ := ret[0].(*vpcv1.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetByName indicates an expected call of GetSubnetByName.
func (mr *MockAPIMockRecorder) GetSubnetByName(ctx, subnetName, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetByName", reflect.TypeOf((*MockAPI)(nil).GetSubnetByName), ctx, subnetName, region)
}

// GetTGConnectionVPC mocks base method.
func (m *MockAPI) GetTGConnectionVPC(ctx context.Context, gatewayID, vpcSubnetID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTGConnectionVPC", ctx, gatewayID, vpcSubnetID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTGConnectionVPC indicates an expected call of GetTGConnectionVPC.
func (mr *MockAPIMockRecorder) GetTGConnectionVPC(ctx, gatewayID, vpcSubnetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTGConnectionVPC", reflect.TypeOf((*MockAPI)(nil).GetTGConnectionVPC), ctx, gatewayID, vpcSubnetID)
}

// GetVPCByName mocks base method.
func (m *MockAPI) GetVPCByName(ctx context.Context, vpcName string) (*vpcv1.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCByName", ctx, vpcName)
	ret0, _ := ret[0].(*vpcv1.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCByName indicates an expected call of GetVPCByName.
func (mr *MockAPIMockRecorder) GetVPCByName(ctx, vpcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCByName", reflect.TypeOf((*MockAPI)(nil).GetVPCByName), ctx, vpcName)
}

// GetVPCSubnets mocks base method.
func (m *MockAPI) GetVPCSubnets(ctx context.Context, vpcID string) ([]vpcv1.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCSubnets", ctx, vpcID)
	ret0, _ := ret[0].([]vpcv1.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCSubnets indicates an expected call of GetVPCSubnets.
func (mr *MockAPIMockRecorder) GetVPCSubnets(ctx, vpcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCSubnets", reflect.TypeOf((*MockAPI)(nil).GetVPCSubnets), ctx, vpcID)
}

// GetVPCs mocks base method.
func (m *MockAPI) GetVPCs(ctx context.Context, region string) ([]vpcv1.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCs", ctx, region)
	ret0, _ := ret[0].([]vpcv1.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCs indicates an expected call of GetVPCs.
func (mr *MockAPIMockRecorder) GetVPCs(ctx, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCs", reflect.TypeOf((*MockAPI)(nil).GetVPCs), ctx, region)
}

// ListResourceGroups mocks base method.
func (m *MockAPI) ListResourceGroups(ctx context.Context) (*resourcemanagerv2.ResourceGroupList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceGroups", ctx)
	ret0, _ := ret[0].(*resourcemanagerv2.ResourceGroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceGroups indicates an expected call of ListResourceGroups.
func (mr *MockAPIMockRecorder) ListResourceGroups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceGroups", reflect.TypeOf((*MockAPI)(nil).ListResourceGroups), ctx)
}

// ListSecurityGroupRules mocks base method.
func (m *MockAPI) ListSecurityGroupRules(ctx context.Context, securityGroupID string) (*vpcv1.SecurityGroupRuleCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroupRules", ctx, securityGroupID)
	ret0, _ := ret[0].(*vpcv1.SecurityGroupRuleCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroupRules indicates an expected call of ListSecurityGroupRules.
func (mr *MockAPIMockRecorder) ListSecurityGroupRules(ctx, securityGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroupRules", reflect.TypeOf((*MockAPI)(nil).ListSecurityGroupRules), ctx, securityGroupID)
}

// ListServiceInstances mocks base method.
func (m *MockAPI) ListServiceInstances(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceInstances", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceInstances indicates an expected call of ListServiceInstances.
func (mr *MockAPIMockRecorder) ListServiceInstances(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceInstances", reflect.TypeOf((*MockAPI)(nil).ListServiceInstances), ctx)
}

// ServiceInstanceGUIDToName mocks base method.
func (m *MockAPI) ServiceInstanceGUIDToName(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceInstanceGUIDToName", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceInstanceGUIDToName indicates an expected call of ServiceInstanceGUIDToName.
func (mr *MockAPIMockRecorder) ServiceInstanceGUIDToName(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceInstanceGUIDToName", reflect.TypeOf((*MockAPI)(nil).ServiceInstanceGUIDToName), ctx, id)
}

// ServiceInstanceNameToGUID mocks base method.
func (m *MockAPI) ServiceInstanceNameToGUID(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceInstanceNameToGUID", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceInstanceNameToGUID indicates an expected call of ServiceInstanceNameToGUID.
func (mr *MockAPIMockRecorder) ServiceInstanceNameToGUID(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceInstanceNameToGUID", reflect.TypeOf((*MockAPI)(nil).ServiceInstanceNameToGUID), ctx, name)
}

// SetVPCServiceURLForRegion mocks base method.
func (m *MockAPI) SetVPCServiceURLForRegion(ctx context.Context, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVPCServiceURLForRegion", ctx, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVPCServiceURLForRegion indicates an expected call of SetVPCServiceURLForRegion.
func (mr *MockAPIMockRecorder) SetVPCServiceURLForRegion(ctx, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVPCServiceURLForRegion", reflect.TypeOf((*MockAPI)(nil).SetVPCServiceURLForRegion), ctx, region)
}

// TransitGatewayID mocks base method.
func (m *MockAPI) TransitGatewayID(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransitGatewayID", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransitGatewayID indicates an expected call of TransitGatewayID.
func (mr *MockAPIMockRecorder) TransitGatewayID(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransitGatewayID", reflect.TypeOf((*MockAPI)(nil).TransitGatewayID), ctx, name)
}
