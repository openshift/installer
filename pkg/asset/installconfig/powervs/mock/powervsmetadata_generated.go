// Code generated by MockGen. DO NOT EDIT.
// Source: ./metadata.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetadataAPI is a mock of MetadataAPI interface.
type MockMetadataAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataAPIMockRecorder
}

// MockMetadataAPIMockRecorder is the mock recorder for MockMetadataAPI.
type MockMetadataAPIMockRecorder struct {
	mock *MockMetadataAPI
}

// NewMockMetadataAPI creates a new mock instance.
func NewMockMetadataAPI(ctrl *gomock.Controller) *MockMetadataAPI {
	mock := &MockMetadataAPI{ctrl: ctrl}
	mock.recorder = &MockMetadataAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataAPI) EXPECT() *MockMetadataAPIMockRecorder {
	return m.recorder
}

// APIKey mocks base method.
func (m *MockMetadataAPI) APIKey(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIKey", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIKey indicates an expected call of APIKey.
func (mr *MockMetadataAPIMockRecorder) APIKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIKey", reflect.TypeOf((*MockMetadataAPI)(nil).APIKey), ctx)
}

// AccountID mocks base method.
func (m *MockMetadataAPI) AccountID(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountID", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountID indicates an expected call of AccountID.
func (mr *MockMetadataAPIMockRecorder) AccountID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountID", reflect.TypeOf((*MockMetadataAPI)(nil).AccountID), ctx)
}

// CISInstanceCRN mocks base method.
func (m *MockMetadataAPI) CISInstanceCRN(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CISInstanceCRN", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CISInstanceCRN indicates an expected call of CISInstanceCRN.
func (mr *MockMetadataAPIMockRecorder) CISInstanceCRN(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CISInstanceCRN", reflect.TypeOf((*MockMetadataAPI)(nil).CISInstanceCRN), ctx)
}

// DNSInstanceCRN mocks base method.
func (m *MockMetadataAPI) DNSInstanceCRN(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DNSInstanceCRN", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DNSInstanceCRN indicates an expected call of DNSInstanceCRN.
func (mr *MockMetadataAPIMockRecorder) DNSInstanceCRN(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSInstanceCRN", reflect.TypeOf((*MockMetadataAPI)(nil).DNSInstanceCRN), ctx)
}
