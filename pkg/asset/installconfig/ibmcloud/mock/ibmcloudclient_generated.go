// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dnsrecordsv1 "github.com/IBM/networking-go-sdk/dnsrecordsv1"
	iamidentityv1 "github.com/IBM/platform-services-go-sdk/iamidentityv1"
	resourcecontrollerv2 "github.com/IBM/platform-services-go-sdk/resourcecontrollerv2"
	resourcemanagerv2 "github.com/IBM/platform-services-go-sdk/resourcemanagerv2"
	vpcv1 "github.com/IBM/vpc-go-sdk/vpcv1"
	gomock "github.com/golang/mock/gomock"
	ibmcloud "github.com/openshift/installer/pkg/asset/installconfig/ibmcloud"
	types "github.com/openshift/installer/pkg/types"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// GetAuthenticatorAPIKeyDetails mocks base method.
func (m *MockAPI) GetAuthenticatorAPIKeyDetails(ctx context.Context) (*iamidentityv1.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticatorAPIKeyDetails", ctx)
	ret0, _ := ret[0].(*iamidentityv1.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticatorAPIKeyDetails indicates an expected call of GetAuthenticatorAPIKeyDetails.
func (mr *MockAPIMockRecorder) GetAuthenticatorAPIKeyDetails(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticatorAPIKeyDetails", reflect.TypeOf((*MockAPI)(nil).GetAuthenticatorAPIKeyDetails), ctx)
}

// GetCISInstance mocks base method.
func (m *MockAPI) GetCISInstance(ctx context.Context, crnstr string) (*resourcecontrollerv2.ResourceInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCISInstance", ctx, crnstr)
	ret0, _ := ret[0].(*resourcecontrollerv2.ResourceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCISInstance indicates an expected call of GetCISInstance.
func (mr *MockAPIMockRecorder) GetCISInstance(ctx, crnstr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCISInstance", reflect.TypeOf((*MockAPI)(nil).GetCISInstance), ctx, crnstr)
}

// GetDNSInstance mocks base method.
func (m *MockAPI) GetDNSInstance(ctx context.Context, crnstr string) (*resourcecontrollerv2.ResourceInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSInstance", ctx, crnstr)
	ret0, _ := ret[0].(*resourcecontrollerv2.ResourceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSInstance indicates an expected call of GetDNSInstance.
func (mr *MockAPIMockRecorder) GetDNSInstance(ctx, crnstr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSInstance", reflect.TypeOf((*MockAPI)(nil).GetDNSInstance), ctx, crnstr)
}

// GetDNSInstancePermittedNetworks mocks base method.
func (m *MockAPI) GetDNSInstancePermittedNetworks(ctx context.Context, dnsID, dnsZone string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSInstancePermittedNetworks", ctx, dnsID, dnsZone)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSInstancePermittedNetworks indicates an expected call of GetDNSInstancePermittedNetworks.
func (mr *MockAPIMockRecorder) GetDNSInstancePermittedNetworks(ctx, dnsID, dnsZone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSInstancePermittedNetworks", reflect.TypeOf((*MockAPI)(nil).GetDNSInstancePermittedNetworks), ctx, dnsID, dnsZone)
}

// GetDNSRecordsByName mocks base method.
func (m *MockAPI) GetDNSRecordsByName(ctx context.Context, crnstr, zoneID, recordName string) ([]dnsrecordsv1.DnsrecordDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSRecordsByName", ctx, crnstr, zoneID, recordName)
	ret0, _ := ret[0].([]dnsrecordsv1.DnsrecordDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSRecordsByName indicates an expected call of GetDNSRecordsByName.
func (mr *MockAPIMockRecorder) GetDNSRecordsByName(ctx, crnstr, zoneID, recordName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSRecordsByName", reflect.TypeOf((*MockAPI)(nil).GetDNSRecordsByName), ctx, crnstr, zoneID, recordName)
}

// GetDNSZoneIDByName mocks base method.
func (m *MockAPI) GetDNSZoneIDByName(ctx context.Context, name string, publish types.PublishingStrategy) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSZoneIDByName", ctx, name, publish)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSZoneIDByName indicates an expected call of GetDNSZoneIDByName.
func (mr *MockAPIMockRecorder) GetDNSZoneIDByName(ctx, name, publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSZoneIDByName", reflect.TypeOf((*MockAPI)(nil).GetDNSZoneIDByName), ctx, name, publish)
}

// GetDNSZones mocks base method.
func (m *MockAPI) GetDNSZones(ctx context.Context, publish types.PublishingStrategy) ([]ibmcloud.DNSZoneResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSZones", ctx, publish)
	ret0, _ := ret[0].([]ibmcloud.DNSZoneResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSZones indicates an expected call of GetDNSZones.
func (mr *MockAPIMockRecorder) GetDNSZones(ctx, publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSZones", reflect.TypeOf((*MockAPI)(nil).GetDNSZones), ctx, publish)
}

// GetDedicatedHostByName mocks base method.
func (m *MockAPI) GetDedicatedHostByName(ctx context.Context, name, region string) (*vpcv1.DedicatedHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedHostByName", ctx, name, region)
	ret0, _ := ret[0].(*vpcv1.DedicatedHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedHostByName indicates an expected call of GetDedicatedHostByName.
func (mr *MockAPIMockRecorder) GetDedicatedHostByName(ctx, name, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedHostByName", reflect.TypeOf((*MockAPI)(nil).GetDedicatedHostByName), ctx, name, region)
}

// GetDedicatedHostProfiles mocks base method.
func (m *MockAPI) GetDedicatedHostProfiles(ctx context.Context, region string) ([]vpcv1.DedicatedHostProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedHostProfiles", ctx, region)
	ret0, _ := ret[0].([]vpcv1.DedicatedHostProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedHostProfiles indicates an expected call of GetDedicatedHostProfiles.
func (mr *MockAPIMockRecorder) GetDedicatedHostProfiles(ctx, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedHostProfiles", reflect.TypeOf((*MockAPI)(nil).GetDedicatedHostProfiles), ctx, region)
}

// GetEncryptionKey mocks base method.
func (m *MockAPI) GetEncryptionKey(ctx context.Context, keyCRN string) (*ibmcloud.EncryptionKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptionKey", ctx, keyCRN)
	ret0, _ := ret[0].(*ibmcloud.EncryptionKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptionKey indicates an expected call of GetEncryptionKey.
func (mr *MockAPIMockRecorder) GetEncryptionKey(ctx, keyCRN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionKey", reflect.TypeOf((*MockAPI)(nil).GetEncryptionKey), ctx, keyCRN)
}

// GetResourceGroup mocks base method.
func (m *MockAPI) GetResourceGroup(ctx context.Context, nameOrID string) (*resourcemanagerv2.ResourceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGroup", ctx, nameOrID)
	ret0, _ := ret[0].(*resourcemanagerv2.ResourceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceGroup indicates an expected call of GetResourceGroup.
func (mr *MockAPIMockRecorder) GetResourceGroup(ctx, nameOrID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGroup", reflect.TypeOf((*MockAPI)(nil).GetResourceGroup), ctx, nameOrID)
}

// GetResourceGroups mocks base method.
func (m *MockAPI) GetResourceGroups(ctx context.Context) ([]resourcemanagerv2.ResourceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGroups", ctx)
	ret0, _ := ret[0].([]resourcemanagerv2.ResourceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceGroups indicates an expected call of GetResourceGroups.
func (mr *MockAPIMockRecorder) GetResourceGroups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGroups", reflect.TypeOf((*MockAPI)(nil).GetResourceGroups), ctx)
}

// GetSubnet mocks base method.
func (m *MockAPI) GetSubnet(ctx context.Context, subnetID string) (*vpcv1.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnet", ctx, subnetID)
	ret0, _ := ret[0].(*vpcv1.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockAPIMockRecorder) GetSubnet(ctx, subnetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockAPI)(nil).GetSubnet), ctx, subnetID)
}

// GetSubnetByName mocks base method.
func (m *MockAPI) GetSubnetByName(ctx context.Context, subnetName, region string) (*vpcv1.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetByName", ctx, subnetName, region)
	ret0, _ := ret[0].(*vpcv1.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetByName indicates an expected call of GetSubnetByName.
func (mr *MockAPIMockRecorder) GetSubnetByName(ctx, subnetName, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetByName", reflect.TypeOf((*MockAPI)(nil).GetSubnetByName), ctx, subnetName, region)
}

// GetVPC mocks base method.
func (m *MockAPI) GetVPC(ctx context.Context, vpcID string) (*vpcv1.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPC", ctx, vpcID)
	ret0, _ := ret[0].(*vpcv1.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPC indicates an expected call of GetVPC.
func (mr *MockAPIMockRecorder) GetVPC(ctx, vpcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPC", reflect.TypeOf((*MockAPI)(nil).GetVPC), ctx, vpcID)
}

// GetVPCByName mocks base method.
func (m *MockAPI) GetVPCByName(ctx context.Context, vpcName string) (*vpcv1.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCByName", ctx, vpcName)
	ret0, _ := ret[0].(*vpcv1.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCByName indicates an expected call of GetVPCByName.
func (mr *MockAPIMockRecorder) GetVPCByName(ctx, vpcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCByName", reflect.TypeOf((*MockAPI)(nil).GetVPCByName), ctx, vpcName)
}

// GetVPCZonesForRegion mocks base method.
func (m *MockAPI) GetVPCZonesForRegion(ctx context.Context, region string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCZonesForRegion", ctx, region)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCZonesForRegion indicates an expected call of GetVPCZonesForRegion.
func (mr *MockAPIMockRecorder) GetVPCZonesForRegion(ctx, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCZonesForRegion", reflect.TypeOf((*MockAPI)(nil).GetVPCZonesForRegion), ctx, region)
}

// GetVPCs mocks base method.
func (m *MockAPI) GetVPCs(ctx context.Context, region string) ([]vpcv1.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCs", ctx, region)
	ret0, _ := ret[0].([]vpcv1.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCs indicates an expected call of GetVPCs.
func (mr *MockAPIMockRecorder) GetVPCs(ctx, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCs", reflect.TypeOf((*MockAPI)(nil).GetVPCs), ctx, region)
}

// GetVSIProfiles mocks base method.
func (m *MockAPI) GetVSIProfiles(ctx context.Context) ([]vpcv1.InstanceProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVSIProfiles", ctx)
	ret0, _ := ret[0].([]vpcv1.InstanceProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVSIProfiles indicates an expected call of GetVSIProfiles.
func (mr *MockAPIMockRecorder) GetVSIProfiles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVSIProfiles", reflect.TypeOf((*MockAPI)(nil).GetVSIProfiles), ctx)
}

// SetVPCServiceURLForRegion mocks base method.
func (m *MockAPI) SetVPCServiceURLForRegion(ctx context.Context, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVPCServiceURLForRegion", ctx, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVPCServiceURLForRegion indicates an expected call of SetVPCServiceURLForRegion.
func (mr *MockAPIMockRecorder) SetVPCServiceURLForRegion(ctx, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVPCServiceURLForRegion", reflect.TypeOf((*MockAPI)(nil).SetVPCServiceURLForRegion), ctx, region)
}
