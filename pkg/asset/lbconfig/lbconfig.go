package lbconfig

import (
	"encoding/json"
	"os"
	"path/filepath"

	igntypes "github.com/coreos/ignition/v2/config/v3_2/types"
	"github.com/pkg/errors"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/yaml"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/ignition"
)

const (
	apiLbPlaceholder    = "API_EXTERNAL_LB_PLACEHOLDER"
	apiIntLbPlaceholder = "API_INTERNAL_LB_PLACEHOLDER"
)

var (
	configPath = filepath.Join("openshift", "openshift-lbconfigfordns.yaml")
)

// Config generates the lbConfigForDNS ConfigMap.
type Config struct {
	File *asset.File
}

var _ asset.WritableAsset = (*Config)(nil)

// Name returns a human friendly name for the asset.
func (*Config) Name() string {
	return "OpenShift Load Balancer Config"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*Config) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Generate generates the openshift-install ConfigMap.
func (i *Config) Generate(dependencies asset.Parents) error {
	var apiLBDNSNames, apiIntLBDNSNames []string
	apiLBDNSNames[0] = apiLbPlaceholder
	apiIntLBDNSNames[0] = apiLbPlaceholder
	cm, err := createLBConfigMap("openshift-lbconfigfordns", apiLBDNSNames, apiIntLBDNSNames)
	if err != nil {
		return err
	}

	i.File = &asset.File{
		Filename: configPath,
		Data:     []byte(cm),
	}

	return nil
}

// Files returns the files generated by the asset.
func (i *Config) Files() []*asset.File {
	if i.File != nil {
		return []*asset.File{i.File}
	}
	return []*asset.File{}
}

// Load loads the already-rendered files back from disk.
func (i *Config) Load(f asset.FileFetcher) (bool, error) {
	file, err := f.FetchByName(configPath)
	if os.IsNotExist(err) {
		return false, nil
	} else if err != nil {
		return false, err
	}
	i.File = file
	return true, nil
}

// createLBConfigMap creates a ConfigMap containing API and APi-Int
// LB configuration. Returns an error if marshalling to YAML fails.
func createLBConfigMap(name string, apiLBDNSNames []string, apiIntLBDNSNames []string) (string, error) {
	cm := &corev1.ConfigMap{
		TypeMeta: metav1.TypeMeta{
			APIVersion: corev1.SchemeGroupVersion.String(),
			Kind:       "ConfigMap",
		},
		ObjectMeta: metav1.ObjectMeta{
			Namespace: "openshift-infra",
			Name:      name,
		},
		Data: map[string]string{
			"external-api-lb-dns-name": apiLBDNSNames[0],
			"internal-api-lb-dns-name": apiIntLBDNSNames[0],
		},
	}

	cmData, err := yaml.Marshal(cm)
	if err != nil {
		return "", errors.Wrapf(err, "failed to create %q ConfigMap", name)
	}

	return string(cmData), nil
}

// InjectLBInfo adds information about the Internal and External API Load
// Balancers as ConfigMap to the provided Bootstrap Ignition config.
func InjectLBInfo(bootstrap []byte, apiLBDNSNames []string, apiIntLBDNSNames []string) (string, error) {
	config := &igntypes.Config{}
	if err := json.Unmarshal(bootstrap, &config); err != nil {
		return "", errors.Wrap(err, "failed to unmarshal bootstrap Ignition config to add LB Config")
	}

	lbCM, err := createLBConfigMap("openshift-lbConfigForDNS", apiLBDNSNames, apiIntLBDNSNames)
	if err != nil {
		return "", errors.Wrap(err, "failed to generate openshift-lbConfigForDNS ConfigMap")
	}

	config.Storage.Files = append(config.Storage.Files, ignition.FileFromString("/opt/openshift/manifests/openshift-lbConfigForDNS.yaml", "root", 0644, lbCM))

	ign, err := ignition.Marshal(config)
	if err != nil {
		return "", errors.Wrap(err, "failed to marshal bootstrap Ignition config")
	}

	return string(ign), nil
}
