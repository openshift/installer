package configimage

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"os"
	"path/filepath"

	k8sjson "sigs.k8s.io/json"

	apicfgv1 "github.com/openshift/api/config/v1"
	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/manifests"
	"github.com/openshift/installer/pkg/types"
)

var (
	imageDigestMirrorSetFilename = filepath.Join(manifestsDir, "image-digest-mirror-set.json")

	_ asset.WritableAsset = (*ImageDigestMirrorSet)(nil)
)

// ImageDigestMirrorSet generates the image-based installer image digest sources asset.
type ImageDigestMirrorSet struct {
	File   *asset.File
	Config *apicfgv1.ImageDigestMirrorSet
}

// Name returns a human friendly name for the asset.
func (*ImageDigestMirrorSet) Name() string {
	return "Image-based installer image digest sources"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*ImageDigestMirrorSet) Dependencies() []asset.Asset {
	return []asset.Asset{
		&InstallConfig{},
	}
}

// Generate generates the Image-based Installer ImageDigestMirrorSet manifest.
func (ids *ImageDigestMirrorSet) Generate(_ context.Context, dependencies asset.Parents) error {
	installConfig := &InstallConfig{}

	dependencies.Get(installConfig)

	if installConfig.Config == nil || installConfig.Config.ImageDigestSources == nil {
		return nil
	}

	ids.Config = manifests.ConvertImageDigestMirrorSet(installConfig.Config.ImageDigestSources)

	imageDigestMirrorSetData, err := json.Marshal(ids.Config)
	if err != nil {
		return fmt.Errorf("failed to marshal image-based installer ImageDigestMirrorSet: %w", err)
	}

	ids.File = &asset.File{
		Filename: imageDigestMirrorSetFilename,
		Data:     imageDigestMirrorSetData,
	}

	return ids.finish()
}

// Files returns the files generated by the asset.
func (ids *ImageDigestMirrorSet) Files() []*asset.File {
	if ids.File != nil {
		return []*asset.File{ids.File}
	}
	return []*asset.File{}
}

// Load returns ImageDigestMirrorSet asset from the disk.
func (ids *ImageDigestMirrorSet) Load(f asset.FileFetcher) (bool, error) {
	file, err := f.FetchByName(imageDigestMirrorSetFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, fmt.Errorf("failed to load %s file: %w", imageDigestMirrorSetFilename, err)
	}

	config := []types.ImageDigestSource{}
	strErrs, err := k8sjson.UnmarshalStrict(file.Data, &config)
	if len(strErrs) > 0 {
		return false, fmt.Errorf("failed to unmarshal %s: %w", imageDigestMirrorSetFilename, errors.Join(strErrs...))
	}
	if err != nil {
		return false, fmt.Errorf("failed to unmarshal %s: invalid JSON syntax", imageDigestMirrorSetFilename)
	}

	ids.File, ids.Config = file, manifests.ConvertImageDigestMirrorSet(config)
	if err = ids.finish(); err != nil {
		return false, err
	}

	return true, nil
}

func (ids *ImageDigestMirrorSet) finish() error {
	if ids.Config == nil {
		return errors.New("missing configuration or manifest file")
	}
	return nil
}
