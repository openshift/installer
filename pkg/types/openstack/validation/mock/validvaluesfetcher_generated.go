// Code generated by MockGen. DO NOT EDIT.
// Source: ./validvaluesfetcher.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockValidValuesFetcher is a mock of ValidValuesFetcher interface
type MockValidValuesFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockValidValuesFetcherMockRecorder
}

// MockValidValuesFetcherMockRecorder is the mock recorder for MockValidValuesFetcher
type MockValidValuesFetcherMockRecorder struct {
	mock *MockValidValuesFetcher
}

// NewMockValidValuesFetcher creates a new mock instance
func NewMockValidValuesFetcher(ctrl *gomock.Controller) *MockValidValuesFetcher {
	mock := &MockValidValuesFetcher{ctrl: ctrl}
	mock.recorder = &MockValidValuesFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidValuesFetcher) EXPECT() *MockValidValuesFetcherMockRecorder {
	return m.recorder
}

// GetCloudNames mocks base method
func (m *MockValidValuesFetcher) GetCloudNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudNames indicates an expected call of GetCloudNames
func (mr *MockValidValuesFetcherMockRecorder) GetCloudNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudNames", reflect.TypeOf((*MockValidValuesFetcher)(nil).GetCloudNames))
}

// GetRegionNames mocks base method
func (m *MockValidValuesFetcher) GetRegionNames(cloud string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionNames", cloud)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionNames indicates an expected call of GetRegionNames
func (mr *MockValidValuesFetcherMockRecorder) GetRegionNames(cloud interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionNames", reflect.TypeOf((*MockValidValuesFetcher)(nil).GetRegionNames), cloud)
}

// GetNetworkNames mocks base method
func (m *MockValidValuesFetcher) GetNetworkNames(cloud string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkNames", cloud)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkNames indicates an expected call of GetNetworkNames
func (mr *MockValidValuesFetcherMockRecorder) GetNetworkNames(cloud interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkNames", reflect.TypeOf((*MockValidValuesFetcher)(nil).GetNetworkNames), cloud)
}

// GetFlavorNames mocks base method
func (m *MockValidValuesFetcher) GetFlavorNames(cloud string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlavorNames", cloud)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlavorNames indicates an expected call of GetFlavorNames
func (mr *MockValidValuesFetcherMockRecorder) GetFlavorNames(cloud interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlavorNames", reflect.TypeOf((*MockValidValuesFetcher)(nil).GetFlavorNames), cloud)
}

// GetNetworkExtensionsAliases mocks base method
func (m *MockValidValuesFetcher) GetNetworkExtensionsAliases(cloud string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkExtensionsAliases", cloud)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkExtensionsAliases indicates an expected call of GetNetworkExtensionsAliases
func (mr *MockValidValuesFetcherMockRecorder) GetNetworkExtensionsAliases(cloud interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkExtensionsAliases", reflect.TypeOf((*MockValidValuesFetcher)(nil).GetNetworkExtensionsAliases), cloud)
}

// GetServiceCatalog mocks base method
func (m *MockValidValuesFetcher) GetServiceCatalog(cloud string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceCatalog", cloud)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceCatalog indicates an expected call of GetServiceCatalog
func (mr *MockValidValuesFetcherMockRecorder) GetServiceCatalog(cloud interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceCatalog", reflect.TypeOf((*MockValidValuesFetcher)(nil).GetServiceCatalog), cloud)
}
