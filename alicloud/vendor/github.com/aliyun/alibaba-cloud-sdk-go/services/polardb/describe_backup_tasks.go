package polardb

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeBackupTasks invokes the polardb.DescribeBackupTasks API synchronously
func (client *Client) DescribeBackupTasks(request *DescribeBackupTasksRequest) (response *DescribeBackupTasksResponse, err error) {
	response = CreateDescribeBackupTasksResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeBackupTasksWithChan invokes the polardb.DescribeBackupTasks API asynchronously
func (client *Client) DescribeBackupTasksWithChan(request *DescribeBackupTasksRequest) (<-chan *DescribeBackupTasksResponse, <-chan error) {
	responseChan := make(chan *DescribeBackupTasksResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeBackupTasks(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeBackupTasksWithCallback invokes the polardb.DescribeBackupTasks API asynchronously
func (client *Client) DescribeBackupTasksWithCallback(request *DescribeBackupTasksRequest, callback func(response *DescribeBackupTasksResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeBackupTasksResponse
		var err error
		defer close(result)
		response, err = client.DescribeBackupTasks(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeBackupTasksRequest is the request struct for api DescribeBackupTasks
type DescribeBackupTasksRequest struct {
	*requests.RpcRequest
	BackupJobId          string           `position:"Query" name:"BackupJobId"`
	ResourceOwnerId      requests.Integer `position:"Query" name:"ResourceOwnerId"`
	ResourceOwnerAccount string           `position:"Query" name:"ResourceOwnerAccount"`
	DBClusterId          string           `position:"Query" name:"DBClusterId"`
	OwnerAccount         string           `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer `position:"Query" name:"OwnerId"`
	BackupMode           string           `position:"Query" name:"BackupMode"`
}

// DescribeBackupTasksResponse is the response struct for api DescribeBackupTasks
type DescribeBackupTasksResponse struct {
	*responses.BaseResponse
	RequestId string                     `json:"RequestId" xml:"RequestId"`
	Items     ItemsInDescribeBackupTasks `json:"Items" xml:"Items"`
}

// CreateDescribeBackupTasksRequest creates a request to invoke DescribeBackupTasks API
func CreateDescribeBackupTasksRequest() (request *DescribeBackupTasksRequest) {
	request = &DescribeBackupTasksRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("polardb", "2017-08-01", "DescribeBackupTasks", "polardb", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeBackupTasksResponse creates a response to parse from DescribeBackupTasks response
func CreateDescribeBackupTasksResponse() (response *DescribeBackupTasksResponse) {
	response = &DescribeBackupTasksResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
