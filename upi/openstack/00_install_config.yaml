# Required Python packages:
#
# ansible
# openstacksdk
# netaddr
#
# Required tools installed on the host:
# python3
# jq

- hosts: all

  tasks:
  - name: "Backup the install-config.yaml file"
    command:
      chdir: "{{ install_config_directory }}"
      cmd: "cp install-config.yaml install-config.yaml.backup"

  - name: "Add the subnet range into install-config.yaml"
    command:
      chdir: "{{ install_config_directory }}"
      cmd: >-
        python3 -c 'import yaml;
        path = "install-config.yaml";
        data = yaml.safe_load(open(path));
        data["networking"]["machineCIDR"] = "{{ os_subnet_range }}";
        open(path, "w").write(yaml.dump(data, default_flow_style=False))'

  - name: "Empty out the Compute pools"
    command:
      chdir: "{{ install_config_directory }}"
      cmd: >-
        python3 -c 'import yaml;
        path = "install-config.yaml";
        data = yaml.safe_load(open(path));
        data["compute"][0]["replicas"] = 0;
        open(path, "w").write(yaml.dump(data, default_flow_style=False))'

  - name: "Create manifests"
    command:
      chdir: "{{ install_config_directory }}"
      cmd: "openshift-install create manifests"

  # NOTE: using the `shell` module because `command` doesn't handle globbing
  - name: "Remove Machines and Machinesets manifests"
    shell:
      chdir: "{{ install_config_directory }}"
      cmd: "rm -f openshift/99_openshift-cluster-api_master-machines-*.yaml openshift/99_openshift-cluster-api_worker-machineset-*.yaml"

  - name: "Make control plane nodes unchedulable"
    command:
      chdir: "{{ install_config_directory }}"
      cmd: >-
        python3 -c 'import yaml;
        path = "manifests/cluster-scheduler-02-config.yml";
        data = yaml.safe_load(open(path));
        data["spec"]["mastersSchedulable"] = False;
        open(path, "w").write(yaml.dump(data, default_flow_style=False))'

  - name: "Create ignition configs"
    command:
      chdir: "{{ install_config_directory }}"
      cmd: "openshift-install create ignition-configs"

  - name: "Save the Infra ID"
    command:
      chdir: "{{ install_config_directory }}"
      cmd: "jq -r .infraID metadata.json"
    register: "infraID"

  - name: "Set hostname in bootstrap ignition"
    command:
      chdir: "{{ install_config_directory }}"
      cmd: >-
        python3 -c 'import base64;
        import json;
        import os;
        path = "bootstrap.ign";
        ignition = json.load(open(path, "r"));
        hostname_b64 = base64.standard_b64encode(b"{{ infraID.stdout }}-bootstrap\n").decode().strip();
        ignition["storage"]["files"].append({
            "path": "/etc/hostname",
            "mode": 420,
            "contents": {
                "source": "data:text/plain;charset=utf-8;base64," + hostname_b64,
                "verification": {}
            },
            "filesystem": "root",
        });
        json.dump(ignition, open(path, "w"))'

  - name: "Set hostname in master ignition"
    shell:
      chdir: "{{ install_config_directory }}"
      cmd: >-
        for index in $(seq 0 2); do
          python3 -c "import base64, json, sys;
        ignition = json.load(sys.stdin);
        files = ignition['storage'].get('files', []);
        files.append({'path': '/etc/hostname', 'mode': 420, 'contents': {'source': 'data:text/plain;charset=utf-8;base64,' + base64.standard_b64encode(b'{{ infraID.stdout }}-master-$index\n').decode().strip(), 'verification': {}}, 'filesystem': 'root'});
        ignition['storage']['files'] = files;
        json.dump(ignition, sys.stdout)" <master.ign >"{{ infraID.stdout }}-master-$index-ignition.json";
        done

  - debug: var=infraID.stdout

  - debug: msg="Add the 'infraID.stdout' string into your Ansible inventory as 'os_cluster_name'"

  - debug: msg="Publish the API and Ingress DNS records, resolving to the API and Ingress floating IP addresses"
