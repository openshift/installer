# Required Python packages:
#
# ansible
# openstackclient
# openstacksdk
# netaddr

- hosts: all
  gather_facts: no

  tasks:
  - name: 'Create the cluster network'
    openstack.cloud.network:
      name: "{{ os_network }}"

  - name: 'Create the cluster IPv4 subnet'
    openstack.cloud.subnet:
      name: "{{ os_subnet }}"
      network_name: "{{ os_network }}"
      cidr: "{{ os_subnet_range }}"
      allocation_pool_start: "{{ os_subnet_range | ansible.utils.next_nth_usable(10) }}"
      allocation_pool_end: "{{ os_subnet_range | ansible.utils.ipaddr('last_usable') }}"
      dns_nameservers: "{{ os_external_dns }}"

  - name: 'Create the cluster IPv6 subnet'
    openstack.cloud.subnet:
      name: "{{ os_subnet6 }}"
      network_name: "{{ os_network }}"
      cidr: "{{ os_subnet6_range }}"
      ip_version: 6
      ipv6_address_mode: "{{ os_subnet6_address_mode }}"
      ipv6_ra_mode: "{{ os_subnet6_router_advertisements_mode }}"
    when:
    - os_subnet6_range is defined
    - os_subnet6_range|ansible.utils.ipv6

  - name: 'Create the service network'
    openstack.cloud.network:
      name: "{{ os_svc_network }}"
    when: os_networking_type == "Kuryr"

  - name: 'Set the service network tag'
    ansible.builtin.command:
      cmd: "openstack network set --tag {{ cluster_id_tag }} {{ os_svc_network }}"
    when: os_networking_type == "Kuryr"

  - name: 'Computing facts for service subnet'
    ansible.builtin.set_fact:
      first_ip_svc_subnet_range: "{{ svc_subnet_range | ipv4('network') }}"
      last_ip_svc_subnet_range: "{{ svc_subnet_range | ansible.utils.ipaddr('last_usable') |ipmath(1) }}"
      first_ip_os_svc_network_range: "{{ os_svc_network_range | ipv4('network') }}"
      last_ip_os_svc_network_range: "{{ os_svc_network_range | ansible.utils.ipaddr('last_usable') |ipmath(1) }}"
      allocation_pool: ""
    when: os_networking_type == "Kuryr"

  - name: 'Get first part of OpenStack network'
    ansible.builtin.set_fact:
      allocation_pool: "{{ allocation_pool + '--allocation-pool start={{ first_ip_os_svc_network_range | ipmath(1) }},end={{ first_ip_svc_subnet_range |ipmath(-1) }}' }}"
    when:
    - os_networking_type == "Kuryr"
    - first_ip_svc_subnet_range != first_ip_os_svc_network_range

  - name: 'Get last part of OpenStack network'
    ansible.builtin.set_fact:
      allocation_pool: "{{ allocation_pool + ' --allocation-pool start={{ last_ip_svc_subnet_range | ipmath(1) }},end={{ last_ip_os_svc_network_range |ipmath(-1) }}' }}"
    when:
    - os_networking_type == "Kuryr"
    - last_ip_svc_subnet_range != last_ip_os_svc_network_range

  - name: 'Get end of allocation'
    ansible.builtin.set_fact:
      gateway_ip: "{{ allocation_pool.split('=')[-1] }}"
    when: os_networking_type == "Kuryr"

  - name: 'replace last IP'
    ansible.builtin.set_fact:
      allocation_pool: "{{ allocation_pool | replace(gateway_ip, gateway_ip | ipmath(-1))}}"
    when: os_networking_type == "Kuryr"

  - name: 'list service subnet'
    ansible.builtin.command:
      cmd: "openstack subnet list --name {{ os_svc_subnet }} --tag {{ cluster_id_tag }}"
    when: os_networking_type == "Kuryr"
    register: svc_subnet

  - name: 'Create the service subnet'
    ansible.builtin.command:
      cmd: "openstack subnet create --ip-version 4 --gateway {{ gateway_ip }} --subnet-range {{ os_svc_network_range }} {{ allocation_pool }} --no-dhcp --network {{ os_svc_network }} --tag {{ cluster_id_tag }} {{ os_svc_subnet }}"
    when:
    - os_networking_type == "Kuryr"
    - svc_subnet.stdout == ""

  - name: 'list subnet pool'
    ansible.builtin.command:
      cmd: "openstack subnet pool list --name {{ subnet_pool }} --tags {{ cluster_id_tag }}"
    when: os_networking_type == "Kuryr"
    register: pods_subnet_pool

  - name: 'Create pods subnet pool'
    ansible.builtin.command:
      cmd: "openstack subnet pool create --default-prefix-length {{ host_prefix }} --pool-prefix {{ cluster_network_cidrs }} --tag {{ cluster_id_tag }} {{ subnet_pool }}"
    when:
    - os_networking_type == "Kuryr"
    - pods_subnet_pool.stdout == ""

  - name: 'Create external router'
    openstack.cloud.router:
      name: "{{ os_router }}"
      network: "{{ os_external_network }}"
      interfaces:
      - "{{ os_subnet }}"
    when: os_external_network is defined and os_external_network|length>0

  - name: 'Add IPv6 subnet to the external router'
    openstack.cloud.router:
      name: "{{ os_router }}"
      interfaces:
      - "{{ os_subnet }}"
      - "{{ os_subnet6 }}"
    when:
    - os_subnet6_range is defined
    - os_subnet6_range|ansible.utils.ipv6
    - os_external_network is defined and os_external_network|length>0

  - name: 'Create the API port'
    openstack.cloud.port:
      name: "{{ os_port_api }}"
      network: "{{ os_network }}"
      fixed_ips:
      - subnet: "{{ os_subnet }}"
        ip_address: "{{ os_apiVIP }}"
    register: _api_ports
    when:
    - os_subnet6_range is not defined

  - set_fact:
      api_ports: "{{ _api_ports }}"
    when: _api_ports.changed

  - name: 'Create the dualstack API port'
    openstack.cloud.port:
      name: "{{ os_port_api }}"
      network: "{{ os_network }}"
    register: _api_ports
    when:
    - os_subnet6_range is defined
    - os_subnet6_range|ansible.utils.ipv6

  - set_fact:
      api_ports: "{{ _api_ports }}"
    when: _api_ports.changed

  - name: 'Create the Ingress port'
    openstack.cloud.port:
      name: "{{ os_port_ingress }}"
      network: "{{ os_network }}"
      fixed_ips:
      - subnet: "{{ os_subnet }}"
        ip_address: "{{ os_ingressVIP }}"
    register: _ingress_ports
    when:
    - os_subnet6_range is not defined

  - set_fact:
      ingress_ports: "{{ _ingress_ports }}"
    when: _ingress_ports.changed

  - name: 'Create the dualstack Ingress port'
    openstack.cloud.port:
      name: "{{ os_port_ingress }}"
      network: "{{ os_network }}"
    register: _ingress_ports
    when:
    - os_subnet6_range is defined
    - os_subnet6_range|ansible.utils.ipv6

  - set_fact:
      ingress_ports: "{{ _ingress_ports }}"
    when: _ingress_ports.changed

  - name: 'Populate inventory with API addresses'
    shell: |
      python -c 'import yaml
      path = "inventory.yaml"
      ipv4 = "{{ item.ip_address|ansible.utils.ipv4 }}"
      ipv6 = "{{ item.ip_address|ansible.utils.ipv6 }}"
      if ipv4 != "False":
        key = "os_apiVIP"
        ip = ipv4
      else:
        key = "os_apiVIP6"
        ip = ipv6
      data = yaml.safe_load(open(path))
      data["all"]["hosts"]["localhost"][key] = ip
      open(path, "w").write(yaml.dump(data, default_flow_style=False))'
    when:
    - api_ports.port is defined
    loop: "{{ api_ports.port.fixed_ips }}"

  - name: 'Populate inventory with Ingress addresses'
    shell: |
      python -c 'import yaml
      path = "inventory.yaml"
      ipv4 = "{{ item.ip_address|ansible.utils.ipv4 }}"
      ipv6 = "{{ item.ip_address|ansible.utils.ipv6 }}"
      if ipv4 != "False":
        key = "os_ingressVIP"
        ip = ipv4
      else:
        key = "os_ingressVIP6"
        ip = ipv6
      data = yaml.safe_load(open(path))
      data["all"]["hosts"]["localhost"][key] = ip
      open(path, "w").write(yaml.dump(data, default_flow_style=False))'
    when:
    - ingress_ports.port is defined
    loop: "{{ ingress_ports.port.fixed_ips }}"
