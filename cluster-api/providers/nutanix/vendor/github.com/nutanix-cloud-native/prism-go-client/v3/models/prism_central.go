// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrismCentral Prism Central
//
// Prism central deployment definition.
//
// swagger:model prism_central
type PrismCentral struct {

	// resources
	// Required: true
	Resources *PrismCentralResources `json:"resources"`
}

// Validate validates this prism central
func (m *PrismCentral) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrismCentral) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this prism central based on the context it is used
func (m *PrismCentral) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrismCentral) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {

		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrismCentral) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrismCentral) UnmarshalBinary(b []byte) error {
	var res PrismCentral
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrismCentralResources Prism central deployment resources.
//
// swagger:model PrismCentralResources
type PrismCentralResources struct {

	// The Cluster UUID for the Prism Central Deployment.
	// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
	ClusterUUID string `json:"cluster_uuid,omitempty"`

	// cmsp config
	CmspConfig *CmspConfig `json:"cmsp_config,omitempty"`

	// The MCM environment config.
	Environment string `json:"environment,omitempty"`

	// Initial boot up password for new created Prism Central.
	// Max Length: 50
	// Min Length: 1
	// Format: password
	InitialPassword strfmt.Password `json:"initial_password,omitempty"`

	// If this prism central vm is registered to hosting PE.
	IsRegisteredToHostingPe *bool `json:"is_registered_to_hosting_pe,omitempty"`

	// mcm config
	McmConfig *McmConfig `json:"mcm_config,omitempty"`

	// Size of the PC being deployed(tiny/small/large/XL)
	PcSize string `json:"pc_size,omitempty"`

	// pc vm list
	// Required: true
	PcVMList []*PcVM `json:"pc_vm_list"`

	// Indicates if the new prism central should be automatically register to the cluster.
	//
	ShouldAutoRegister *bool `json:"should_auto_register,omitempty"`

	// The type of the Prism Central cluster.
	Type *string `json:"type,omitempty"`

	// The desired version of Prism Central.
	// Required: true
	Version *string `json:"version"`

	// The desired virtual IP address of Prism Central cluster.
	//
	// Pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
	VirtualIP string `json:"virtual_ip,omitempty"`
}

// Validate validates this prism central resources
func (m *PrismCentralResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCmspConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMcmConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePcVMList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrismCentralResources) validateClusterUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterUUID) { // not required
		return nil
	}

	if err := validate.Pattern("resources"+"."+"cluster_uuid", "body", m.ClusterUUID, `^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$`); err != nil {
		return err
	}

	return nil
}

func (m *PrismCentralResources) validateCmspConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.CmspConfig) { // not required
		return nil
	}

	if m.CmspConfig != nil {
		if err := m.CmspConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "cmsp_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "cmsp_config")
			}
			return err
		}
	}

	return nil
}

func (m *PrismCentralResources) validateInitialPassword(formats strfmt.Registry) error {
	if swag.IsZero(m.InitialPassword) { // not required
		return nil
	}

	if err := validate.MinLength("resources"+"."+"initial_password", "body", m.InitialPassword.String(), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("resources"+"."+"initial_password", "body", m.InitialPassword.String(), 50); err != nil {
		return err
	}

	if err := validate.FormatOf("resources"+"."+"initial_password", "body", "password", m.InitialPassword.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PrismCentralResources) validateMcmConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.McmConfig) { // not required
		return nil
	}

	if m.McmConfig != nil {
		if err := m.McmConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "mcm_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "mcm_config")
			}
			return err
		}
	}

	return nil
}

func (m *PrismCentralResources) validatePcVMList(formats strfmt.Registry) error {

	if err := validate.Required("resources"+"."+"pc_vm_list", "body", m.PcVMList); err != nil {
		return err
	}

	for i := 0; i < len(m.PcVMList); i++ {
		if swag.IsZero(m.PcVMList[i]) { // not required
			continue
		}

		if m.PcVMList[i] != nil {
			if err := m.PcVMList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "pc_vm_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "pc_vm_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrismCentralResources) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("resources"+"."+"version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *PrismCentralResources) validateVirtualIP(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualIP) { // not required
		return nil
	}

	if err := validate.Pattern("resources"+"."+"virtual_ip", "body", m.VirtualIP, `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this prism central resources based on the context it is used
func (m *PrismCentralResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCmspConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMcmConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePcVMList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrismCentralResources) contextValidateCmspConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.CmspConfig != nil {

		if swag.IsZero(m.CmspConfig) { // not required
			return nil
		}

		if err := m.CmspConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "cmsp_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "cmsp_config")
			}
			return err
		}
	}

	return nil
}

func (m *PrismCentralResources) contextValidateMcmConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.McmConfig != nil {

		if swag.IsZero(m.McmConfig) { // not required
			return nil
		}

		if err := m.McmConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources" + "." + "mcm_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources" + "." + "mcm_config")
			}
			return err
		}
	}

	return nil
}

func (m *PrismCentralResources) contextValidatePcVMList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PcVMList); i++ {

		if m.PcVMList[i] != nil {

			if swag.IsZero(m.PcVMList[i]) { // not required
				return nil
			}

			if err := m.PcVMList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "pc_vm_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + "pc_vm_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrismCentralResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrismCentralResources) UnmarshalBinary(b []byte) error {
	var res PrismCentralResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
