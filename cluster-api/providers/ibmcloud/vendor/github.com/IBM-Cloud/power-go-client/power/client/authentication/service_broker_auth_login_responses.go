// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// ServiceBrokerAuthLoginReader is a Reader for the ServiceBrokerAuthLogin structure.
type ServiceBrokerAuthLoginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServiceBrokerAuthLoginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServiceBrokerAuthLoginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewServiceBrokerAuthLoginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewServiceBrokerAuthLoginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /auth/v1/login] serviceBroker.auth.login", response, response.Code())
	}
}

// NewServiceBrokerAuthLoginOK creates a ServiceBrokerAuthLoginOK with default headers values
func NewServiceBrokerAuthLoginOK() *ServiceBrokerAuthLoginOK {
	return &ServiceBrokerAuthLoginOK{}
}

/*
ServiceBrokerAuthLoginOK describes a response with status code 200, with default header values.

OK
*/
type ServiceBrokerAuthLoginOK struct {
	Payload *models.AccessToken
}

// IsSuccess returns true when this service broker auth login o k response has a 2xx status code
func (o *ServiceBrokerAuthLoginOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this service broker auth login o k response has a 3xx status code
func (o *ServiceBrokerAuthLoginOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service broker auth login o k response has a 4xx status code
func (o *ServiceBrokerAuthLoginOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this service broker auth login o k response has a 5xx status code
func (o *ServiceBrokerAuthLoginOK) IsServerError() bool {
	return false
}

// IsCode returns true when this service broker auth login o k response a status code equal to that given
func (o *ServiceBrokerAuthLoginOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the service broker auth login o k response
func (o *ServiceBrokerAuthLoginOK) Code() int {
	return 200
}

func (o *ServiceBrokerAuthLoginOK) Error() string {
	return fmt.Sprintf("[GET /auth/v1/login][%d] serviceBrokerAuthLoginOK  %+v", 200, o.Payload)
}

func (o *ServiceBrokerAuthLoginOK) String() string {
	return fmt.Sprintf("[GET /auth/v1/login][%d] serviceBrokerAuthLoginOK  %+v", 200, o.Payload)
}

func (o *ServiceBrokerAuthLoginOK) GetPayload() *models.AccessToken {
	return o.Payload
}

func (o *ServiceBrokerAuthLoginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccessToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceBrokerAuthLoginUnauthorized creates a ServiceBrokerAuthLoginUnauthorized with default headers values
func NewServiceBrokerAuthLoginUnauthorized() *ServiceBrokerAuthLoginUnauthorized {
	return &ServiceBrokerAuthLoginUnauthorized{}
}

/*
ServiceBrokerAuthLoginUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ServiceBrokerAuthLoginUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this service broker auth login unauthorized response has a 2xx status code
func (o *ServiceBrokerAuthLoginUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this service broker auth login unauthorized response has a 3xx status code
func (o *ServiceBrokerAuthLoginUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service broker auth login unauthorized response has a 4xx status code
func (o *ServiceBrokerAuthLoginUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this service broker auth login unauthorized response has a 5xx status code
func (o *ServiceBrokerAuthLoginUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this service broker auth login unauthorized response a status code equal to that given
func (o *ServiceBrokerAuthLoginUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the service broker auth login unauthorized response
func (o *ServiceBrokerAuthLoginUnauthorized) Code() int {
	return 401
}

func (o *ServiceBrokerAuthLoginUnauthorized) Error() string {
	return fmt.Sprintf("[GET /auth/v1/login][%d] serviceBrokerAuthLoginUnauthorized  %+v", 401, o.Payload)
}

func (o *ServiceBrokerAuthLoginUnauthorized) String() string {
	return fmt.Sprintf("[GET /auth/v1/login][%d] serviceBrokerAuthLoginUnauthorized  %+v", 401, o.Payload)
}

func (o *ServiceBrokerAuthLoginUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ServiceBrokerAuthLoginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceBrokerAuthLoginInternalServerError creates a ServiceBrokerAuthLoginInternalServerError with default headers values
func NewServiceBrokerAuthLoginInternalServerError() *ServiceBrokerAuthLoginInternalServerError {
	return &ServiceBrokerAuthLoginInternalServerError{}
}

/*
ServiceBrokerAuthLoginInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ServiceBrokerAuthLoginInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this service broker auth login internal server error response has a 2xx status code
func (o *ServiceBrokerAuthLoginInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this service broker auth login internal server error response has a 3xx status code
func (o *ServiceBrokerAuthLoginInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service broker auth login internal server error response has a 4xx status code
func (o *ServiceBrokerAuthLoginInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this service broker auth login internal server error response has a 5xx status code
func (o *ServiceBrokerAuthLoginInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this service broker auth login internal server error response a status code equal to that given
func (o *ServiceBrokerAuthLoginInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the service broker auth login internal server error response
func (o *ServiceBrokerAuthLoginInternalServerError) Code() int {
	return 500
}

func (o *ServiceBrokerAuthLoginInternalServerError) Error() string {
	return fmt.Sprintf("[GET /auth/v1/login][%d] serviceBrokerAuthLoginInternalServerError  %+v", 500, o.Payload)
}

func (o *ServiceBrokerAuthLoginInternalServerError) String() string {
	return fmt.Sprintf("[GET /auth/v1/login][%d] serviceBrokerAuthLoginInternalServerError  %+v", 500, o.Payload)
}

func (o *ServiceBrokerAuthLoginInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ServiceBrokerAuthLoginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
