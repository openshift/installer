// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=alertsmanagement.azure.com,resources=prometheusrulegroups,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=alertsmanagement.azure.com,resources={prometheusrulegroups/status,prometheusrulegroups/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1api20230301.PrometheusRuleGroup
// Generator information:
// - Generated from: /alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2023-03-01/PrometheusRuleGroups.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/prometheusRuleGroups/{ruleGroupName}
type PrometheusRuleGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrometheusRuleGroup_Spec   `json:"spec,omitempty"`
	Status            PrometheusRuleGroup_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &PrometheusRuleGroup{}

// GetConditions returns the conditions of the resource
func (group *PrometheusRuleGroup) GetConditions() conditions.Conditions {
	return group.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (group *PrometheusRuleGroup) SetConditions(conditions conditions.Conditions) {
	group.Status.Conditions = conditions
}

var _ configmaps.Exporter = &PrometheusRuleGroup{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (group *PrometheusRuleGroup) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if group.Spec.OperatorSpec == nil {
		return nil
	}
	return group.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &PrometheusRuleGroup{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (group *PrometheusRuleGroup) SecretDestinationExpressions() []*core.DestinationExpression {
	if group.Spec.OperatorSpec == nil {
		return nil
	}
	return group.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.KubernetesResource = &PrometheusRuleGroup{}

// AzureName returns the Azure name of the resource
func (group *PrometheusRuleGroup) AzureName() string {
	return group.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-03-01"
func (group PrometheusRuleGroup) GetAPIVersion() string {
	return "2023-03-01"
}

// GetResourceScope returns the scope of the resource
func (group *PrometheusRuleGroup) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (group *PrometheusRuleGroup) GetSpec() genruntime.ConvertibleSpec {
	return &group.Spec
}

// GetStatus returns the status of this resource
func (group *PrometheusRuleGroup) GetStatus() genruntime.ConvertibleStatus {
	return &group.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (group *PrometheusRuleGroup) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.AlertsManagement/prometheusRuleGroups"
func (group *PrometheusRuleGroup) GetType() string {
	return "Microsoft.AlertsManagement/prometheusRuleGroups"
}

// NewEmptyStatus returns a new empty (blank) status
func (group *PrometheusRuleGroup) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &PrometheusRuleGroup_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (group *PrometheusRuleGroup) Owner() *genruntime.ResourceReference {
	ownerGroup, ownerKind := genruntime.LookupOwnerGroupKind(group.Spec)
	return group.Spec.Owner.AsResourceReference(ownerGroup, ownerKind)
}

// SetStatus sets the status of this resource
func (group *PrometheusRuleGroup) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*PrometheusRuleGroup_STATUS); ok {
		group.Status = *st
		return nil
	}

	// Convert status to required version
	var st PrometheusRuleGroup_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	group.Status = st
	return nil
}

// Hub marks that this PrometheusRuleGroup is the hub type for conversion
func (group *PrometheusRuleGroup) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (group *PrometheusRuleGroup) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: group.Spec.OriginalVersion,
		Kind:    "PrometheusRuleGroup",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1api20230301.PrometheusRuleGroup
// Generator information:
// - Generated from: /alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2023-03-01/PrometheusRuleGroups.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/prometheusRuleGroups/{ruleGroupName}
type PrometheusRuleGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrometheusRuleGroup `json:"items"`
}

// Storage version of v1api20230301.APIVersion
// +kubebuilder:validation:Enum={"2023-03-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2023-03-01")

// Storage version of v1api20230301.PrometheusRuleGroup_Spec
type PrometheusRuleGroup_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName       string                           `json:"azureName,omitempty"`
	ClusterName     *string                          `json:"clusterName,omitempty"`
	Description     *string                          `json:"description,omitempty"`
	Enabled         *bool                            `json:"enabled,omitempty"`
	Interval        *string                          `json:"interval,omitempty"`
	Location        *string                          `json:"location,omitempty"`
	OperatorSpec    *PrometheusRuleGroupOperatorSpec `json:"operatorSpec,omitempty"`
	OriginalVersion string                           `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner            *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PropertyBag      genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	Rules            []PrometheusRule                   `json:"rules,omitempty"`
	ScopesReferences []genruntime.ResourceReference     `armReference:"Scopes" json:"scopesReferences,omitempty"`
	Tags             map[string]string                  `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &PrometheusRuleGroup_Spec{}

// ConvertSpecFrom populates our PrometheusRuleGroup_Spec from the provided source
func (group *PrometheusRuleGroup_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == group {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(group)
}

// ConvertSpecTo populates the provided destination from our PrometheusRuleGroup_Spec
func (group *PrometheusRuleGroup_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == group {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(group)
}

// Storage version of v1api20230301.PrometheusRuleGroup_STATUS
type PrometheusRuleGroup_STATUS struct {
	ClusterName *string                 `json:"clusterName,omitempty"`
	Conditions  []conditions.Condition  `json:"conditions,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Enabled     *bool                   `json:"enabled,omitempty"`
	Id          *string                 `json:"id,omitempty"`
	Interval    *string                 `json:"interval,omitempty"`
	Location    *string                 `json:"location,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag  `json:"$propertyBag,omitempty"`
	Rules       []PrometheusRule_STATUS `json:"rules,omitempty"`
	Scopes      []string                `json:"scopes,omitempty"`
	SystemData  *SystemData_STATUS      `json:"systemData,omitempty"`
	Tags        map[string]string       `json:"tags,omitempty"`
	Type        *string                 `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &PrometheusRuleGroup_STATUS{}

// ConvertStatusFrom populates our PrometheusRuleGroup_STATUS from the provided source
func (group *PrometheusRuleGroup_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == group {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(group)
}

// ConvertStatusTo populates the provided destination from our PrometheusRuleGroup_STATUS
func (group *PrometheusRuleGroup_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == group {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(group)
}

// Storage version of v1api20230301.PrometheusRule
// An Azure Prometheus alerting or recording rule.
type PrometheusRule struct {
	Actions              []PrometheusRuleGroupAction         `json:"actions,omitempty"`
	Alert                *string                             `json:"alert,omitempty"`
	Annotations          map[string]string                   `json:"annotations,omitempty"`
	Enabled              *bool                               `json:"enabled,omitempty"`
	Expression           *string                             `json:"expression,omitempty"`
	For                  *string                             `json:"for,omitempty"`
	Labels               map[string]string                   `json:"labels,omitempty"`
	PropertyBag          genruntime.PropertyBag              `json:"$propertyBag,omitempty"`
	Record               *string                             `json:"record,omitempty"`
	ResolveConfiguration *PrometheusRuleResolveConfiguration `json:"resolveConfiguration,omitempty"`
	Severity             *int                                `json:"severity,omitempty"`
}

// Storage version of v1api20230301.PrometheusRule_STATUS
// An Azure Prometheus alerting or recording rule.
type PrometheusRule_STATUS struct {
	Actions              []PrometheusRuleGroupAction_STATUS         `json:"actions,omitempty"`
	Alert                *string                                    `json:"alert,omitempty"`
	Annotations          map[string]string                          `json:"annotations,omitempty"`
	Enabled              *bool                                      `json:"enabled,omitempty"`
	Expression           *string                                    `json:"expression,omitempty"`
	For                  *string                                    `json:"for,omitempty"`
	Labels               map[string]string                          `json:"labels,omitempty"`
	PropertyBag          genruntime.PropertyBag                     `json:"$propertyBag,omitempty"`
	Record               *string                                    `json:"record,omitempty"`
	ResolveConfiguration *PrometheusRuleResolveConfiguration_STATUS `json:"resolveConfiguration,omitempty"`
	Severity             *int                                       `json:"severity,omitempty"`
}

// Storage version of v1api20230301.PrometheusRuleGroupOperatorSpec
// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type PrometheusRuleGroupOperatorSpec struct {
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`
	PropertyBag          genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	SecretExpressions    []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// Storage version of v1api20230301.SystemData_STATUS
// Metadata pertaining to creation and last modification of the resource.
type SystemData_STATUS struct {
	CreatedAt          *string                `json:"createdAt,omitempty"`
	CreatedBy          *string                `json:"createdBy,omitempty"`
	CreatedByType      *string                `json:"createdByType,omitempty"`
	LastModifiedAt     *string                `json:"lastModifiedAt,omitempty"`
	LastModifiedBy     *string                `json:"lastModifiedBy,omitempty"`
	LastModifiedByType *string                `json:"lastModifiedByType,omitempty"`
	PropertyBag        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20230301.PrometheusRuleGroupAction
// An alert action. Only relevant for alerts.
type PrometheusRuleGroupAction struct {
	// ActionGroupReference: The resource id of the action group to use.
	ActionGroupReference *genruntime.ResourceReference `armReference:"ActionGroupId" json:"actionGroupReference,omitempty"`
	ActionProperties     map[string]string             `json:"actionProperties,omitempty"`
	PropertyBag          genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20230301.PrometheusRuleGroupAction_STATUS
// An alert action. Only relevant for alerts.
type PrometheusRuleGroupAction_STATUS struct {
	ActionGroupId    *string                `json:"actionGroupId,omitempty"`
	ActionProperties map[string]string      `json:"actionProperties,omitempty"`
	PropertyBag      genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20230301.PrometheusRuleResolveConfiguration
// Specifies the Prometheus alert rule configuration.
type PrometheusRuleResolveConfiguration struct {
	AutoResolved  *bool                  `json:"autoResolved,omitempty"`
	PropertyBag   genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	TimeToResolve *string                `json:"timeToResolve,omitempty"`
}

// Storage version of v1api20230301.PrometheusRuleResolveConfiguration_STATUS
// Specifies the Prometheus alert rule configuration.
type PrometheusRuleResolveConfiguration_STATUS struct {
	AutoResolved  *bool                  `json:"autoResolved,omitempty"`
	PropertyBag   genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	TimeToResolve *string                `json:"timeToResolve,omitempty"`
}

func init() {
	SchemeBuilder.Register(&PrometheusRuleGroup{}, &PrometheusRuleGroupList{})
}
