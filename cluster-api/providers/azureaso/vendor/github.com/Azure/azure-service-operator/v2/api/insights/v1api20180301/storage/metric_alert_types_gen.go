// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/pkg/errors"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=insights.azure.com,resources=metricalerts,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=insights.azure.com,resources={metricalerts/status,metricalerts/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1api20180301.MetricAlert
// Generator information:
// - Generated from: /monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/metricAlert_API.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}
type MetricAlert struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MetricAlert_Spec   `json:"spec,omitempty"`
	Status            MetricAlert_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &MetricAlert{}

// GetConditions returns the conditions of the resource
func (alert *MetricAlert) GetConditions() conditions.Conditions {
	return alert.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (alert *MetricAlert) SetConditions(conditions conditions.Conditions) {
	alert.Status.Conditions = conditions
}

var _ configmaps.Exporter = &MetricAlert{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (alert *MetricAlert) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if alert.Spec.OperatorSpec == nil {
		return nil
	}
	return alert.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &MetricAlert{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (alert *MetricAlert) SecretDestinationExpressions() []*core.DestinationExpression {
	if alert.Spec.OperatorSpec == nil {
		return nil
	}
	return alert.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.KubernetesResource = &MetricAlert{}

// AzureName returns the Azure name of the resource
func (alert *MetricAlert) AzureName() string {
	return alert.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2018-03-01"
func (alert MetricAlert) GetAPIVersion() string {
	return "2018-03-01"
}

// GetResourceScope returns the scope of the resource
func (alert *MetricAlert) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (alert *MetricAlert) GetSpec() genruntime.ConvertibleSpec {
	return &alert.Spec
}

// GetStatus returns the status of this resource
func (alert *MetricAlert) GetStatus() genruntime.ConvertibleStatus {
	return &alert.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (alert *MetricAlert) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Insights/metricAlerts"
func (alert *MetricAlert) GetType() string {
	return "Microsoft.Insights/metricAlerts"
}

// NewEmptyStatus returns a new empty (blank) status
func (alert *MetricAlert) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &MetricAlert_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (alert *MetricAlert) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(alert.Spec)
	return alert.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (alert *MetricAlert) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*MetricAlert_STATUS); ok {
		alert.Status = *st
		return nil
	}

	// Convert status to required version
	var st MetricAlert_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	alert.Status = st
	return nil
}

// Hub marks that this MetricAlert is the hub type for conversion
func (alert *MetricAlert) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (alert *MetricAlert) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: alert.Spec.OriginalVersion,
		Kind:    "MetricAlert",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1api20180301.MetricAlert
// Generator information:
// - Generated from: /monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/metricAlert_API.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}
type MetricAlertList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MetricAlert `json:"items"`
}

// Storage version of v1api20180301.APIVersion
// +kubebuilder:validation:Enum={"2018-03-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2018-03-01")

// Storage version of v1api20180301.MetricAlert_Spec
type MetricAlert_Spec struct {
	Actions      []MetricAlertAction `json:"actions,omitempty"`
	AutoMitigate *bool               `json:"autoMitigate,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName           string                   `json:"azureName,omitempty"`
	Criteria            *MetricAlertCriteria     `json:"criteria,omitempty"`
	Description         *string                  `json:"description,omitempty"`
	Enabled             *bool                    `json:"enabled,omitempty"`
	EvaluationFrequency *string                  `json:"evaluationFrequency,omitempty"`
	Location            *string                  `json:"location,omitempty"`
	OperatorSpec        *MetricAlertOperatorSpec `json:"operatorSpec,omitempty"`
	OriginalVersion     string                   `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner                *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PropertyBag          genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	ScopesReferences     []genruntime.ResourceReference     `armReference:"Scopes" json:"scopesReferences,omitempty"`
	Severity             *int                               `json:"severity,omitempty"`
	Tags                 map[string]string                  `json:"tags,omitempty"`
	TargetResourceRegion *string                            `json:"targetResourceRegion,omitempty"`
	TargetResourceType   *string                            `json:"targetResourceType,omitempty"`
	WindowSize           *string                            `json:"windowSize,omitempty"`
}

var _ genruntime.ConvertibleSpec = &MetricAlert_Spec{}

// ConvertSpecFrom populates our MetricAlert_Spec from the provided source
func (alert *MetricAlert_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == alert {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(alert)
}

// ConvertSpecTo populates the provided destination from our MetricAlert_Spec
func (alert *MetricAlert_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == alert {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(alert)
}

// Storage version of v1api20180301.MetricAlert_STATUS
type MetricAlert_STATUS struct {
	Actions              []MetricAlertAction_STATUS  `json:"actions,omitempty"`
	AutoMitigate         *bool                       `json:"autoMitigate,omitempty"`
	Conditions           []conditions.Condition      `json:"conditions,omitempty"`
	Criteria             *MetricAlertCriteria_STATUS `json:"criteria,omitempty"`
	Description          *string                     `json:"description,omitempty"`
	Enabled              *bool                       `json:"enabled,omitempty"`
	EvaluationFrequency  *string                     `json:"evaluationFrequency,omitempty"`
	Id                   *string                     `json:"id,omitempty"`
	IsMigrated           *bool                       `json:"isMigrated,omitempty"`
	LastUpdatedTime      *string                     `json:"lastUpdatedTime,omitempty"`
	Location             *string                     `json:"location,omitempty"`
	Name                 *string                     `json:"name,omitempty"`
	PropertyBag          genruntime.PropertyBag      `json:"$propertyBag,omitempty"`
	Scopes               []string                    `json:"scopes,omitempty"`
	Severity             *int                        `json:"severity,omitempty"`
	Tags                 map[string]string           `json:"tags,omitempty"`
	TargetResourceRegion *string                     `json:"targetResourceRegion,omitempty"`
	TargetResourceType   *string                     `json:"targetResourceType,omitempty"`
	Type                 *string                     `json:"type,omitempty"`
	WindowSize           *string                     `json:"windowSize,omitempty"`
}

var _ genruntime.ConvertibleStatus = &MetricAlert_STATUS{}

// ConvertStatusFrom populates our MetricAlert_STATUS from the provided source
func (alert *MetricAlert_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == alert {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(alert)
}

// ConvertStatusTo populates the provided destination from our MetricAlert_STATUS
func (alert *MetricAlert_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == alert {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(alert)
}

// Storage version of v1api20180301.MetricAlertAction
// An alert action.
type MetricAlertAction struct {
	ActionGroupId     *string                `json:"actionGroupId,omitempty"`
	PropertyBag       genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	WebHookProperties map[string]string      `json:"webHookProperties,omitempty"`
}

// Storage version of v1api20180301.MetricAlertAction_STATUS
// An alert action.
type MetricAlertAction_STATUS struct {
	ActionGroupId     *string                `json:"actionGroupId,omitempty"`
	PropertyBag       genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	WebHookProperties map[string]string      `json:"webHookProperties,omitempty"`
}

// Storage version of v1api20180301.MetricAlertCriteria
type MetricAlertCriteria struct {
	MicrosoftAzureMonitorMultipleResourceMultipleMetric *MetricAlertMultipleResourceMultipleMetricCriteria `json:"microsoftAzureMonitorMultipleResourceMultipleMetricCriteria,omitempty"`
	MicrosoftAzureMonitorSingleResourceMultipleMetric   *MetricAlertSingleResourceMultipleMetricCriteria   `json:"microsoftAzureMonitorSingleResourceMultipleMetricCriteria,omitempty"`
	MicrosoftAzureMonitorWebtestLocationAvailability    *WebtestLocationAvailabilityCriteria               `json:"microsoftAzureMonitorWebtestLocationAvailabilityCriteria,omitempty"`
	PropertyBag                                         genruntime.PropertyBag                             `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20180301.MetricAlertCriteria_STATUS
type MetricAlertCriteria_STATUS struct {
	MicrosoftAzureMonitorMultipleResourceMultipleMetric *MetricAlertMultipleResourceMultipleMetricCriteria_STATUS `json:"microsoftAzureMonitorMultipleResourceMultipleMetricCriteria,omitempty"`
	MicrosoftAzureMonitorSingleResourceMultipleMetric   *MetricAlertSingleResourceMultipleMetricCriteria_STATUS   `json:"microsoftAzureMonitorSingleResourceMultipleMetricCriteria,omitempty"`
	MicrosoftAzureMonitorWebtestLocationAvailability    *WebtestLocationAvailabilityCriteria_STATUS               `json:"microsoftAzureMonitorWebtestLocationAvailabilityCriteria,omitempty"`
	PropertyBag                                         genruntime.PropertyBag                                    `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20180301.MetricAlertOperatorSpec
// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type MetricAlertOperatorSpec struct {
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`
	PropertyBag          genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	SecretExpressions    []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// Storage version of v1api20180301.MetricAlertMultipleResourceMultipleMetricCriteria
type MetricAlertMultipleResourceMultipleMetricCriteria struct {
	AdditionalProperties map[string]v1.JSON     `json:"additionalProperties,omitempty"`
	AllOf                []MultiMetricCriteria  `json:"allOf,omitempty"`
	OdataType            *string                `json:"odata.type,omitempty"`
	PropertyBag          genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20180301.MetricAlertMultipleResourceMultipleMetricCriteria_STATUS
type MetricAlertMultipleResourceMultipleMetricCriteria_STATUS struct {
	AdditionalProperties map[string]v1.JSON           `json:"additionalProperties,omitempty"`
	AllOf                []MultiMetricCriteria_STATUS `json:"allOf,omitempty"`
	OdataType            *string                      `json:"odata.type,omitempty"`
	PropertyBag          genruntime.PropertyBag       `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20180301.MetricAlertSingleResourceMultipleMetricCriteria
type MetricAlertSingleResourceMultipleMetricCriteria struct {
	AdditionalProperties map[string]v1.JSON     `json:"additionalProperties,omitempty"`
	AllOf                []MetricCriteria       `json:"allOf,omitempty"`
	OdataType            *string                `json:"odata.type,omitempty"`
	PropertyBag          genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20180301.MetricAlertSingleResourceMultipleMetricCriteria_STATUS
type MetricAlertSingleResourceMultipleMetricCriteria_STATUS struct {
	AdditionalProperties map[string]v1.JSON      `json:"additionalProperties,omitempty"`
	AllOf                []MetricCriteria_STATUS `json:"allOf,omitempty"`
	OdataType            *string                 `json:"odata.type,omitempty"`
	PropertyBag          genruntime.PropertyBag  `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20180301.WebtestLocationAvailabilityCriteria
type WebtestLocationAvailabilityCriteria struct {
	AdditionalProperties map[string]v1.JSON `json:"additionalProperties,omitempty"`

	// +kubebuilder:validation:Required
	// ComponentReference: The Application Insights resource Id.
	ComponentReference  *genruntime.ResourceReference `armReference:"ComponentId" json:"componentReference,omitempty"`
	FailedLocationCount *float64                      `json:"failedLocationCount,omitempty"`
	OdataType           *string                       `json:"odata.type,omitempty"`
	PropertyBag         genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	WebTestId           *string                       `json:"webTestId,omitempty"`
}

// Storage version of v1api20180301.WebtestLocationAvailabilityCriteria_STATUS
type WebtestLocationAvailabilityCriteria_STATUS struct {
	AdditionalProperties map[string]v1.JSON     `json:"additionalProperties,omitempty"`
	ComponentId          *string                `json:"componentId,omitempty"`
	FailedLocationCount  *float64               `json:"failedLocationCount,omitempty"`
	OdataType            *string                `json:"odata.type,omitempty"`
	PropertyBag          genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	WebTestId            *string                `json:"webTestId,omitempty"`
}

// Storage version of v1api20180301.MetricCriteria
type MetricCriteria struct {
	AdditionalProperties map[string]v1.JSON     `json:"additionalProperties,omitempty"`
	CriterionType        *string                `json:"criterionType,omitempty"`
	Dimensions           []MetricDimension      `json:"dimensions,omitempty"`
	MetricName           *string                `json:"metricName,omitempty"`
	MetricNamespace      *string                `json:"metricNamespace,omitempty"`
	Name                 *string                `json:"name,omitempty"`
	Operator             *string                `json:"operator,omitempty"`
	PropertyBag          genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SkipMetricValidation *bool                  `json:"skipMetricValidation,omitempty"`
	Threshold            *float64               `json:"threshold,omitempty"`
	TimeAggregation      *string                `json:"timeAggregation,omitempty"`
}

// Storage version of v1api20180301.MetricCriteria_STATUS
type MetricCriteria_STATUS struct {
	AdditionalProperties map[string]v1.JSON       `json:"additionalProperties,omitempty"`
	CriterionType        *string                  `json:"criterionType,omitempty"`
	Dimensions           []MetricDimension_STATUS `json:"dimensions,omitempty"`
	MetricName           *string                  `json:"metricName,omitempty"`
	MetricNamespace      *string                  `json:"metricNamespace,omitempty"`
	Name                 *string                  `json:"name,omitempty"`
	Operator             *string                  `json:"operator,omitempty"`
	PropertyBag          genruntime.PropertyBag   `json:"$propertyBag,omitempty"`
	SkipMetricValidation *bool                    `json:"skipMetricValidation,omitempty"`
	Threshold            *float64                 `json:"threshold,omitempty"`
	TimeAggregation      *string                  `json:"timeAggregation,omitempty"`
}

// Storage version of v1api20180301.MultiMetricCriteria
type MultiMetricCriteria struct {
	Dynamic     *DynamicMetricCriteria `json:"dynamicThresholdCriterion,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Static      *MetricCriteria        `json:"staticThresholdCriterion,omitempty"`
}

// Storage version of v1api20180301.MultiMetricCriteria_STATUS
type MultiMetricCriteria_STATUS struct {
	Dynamic     *DynamicMetricCriteria_STATUS `json:"dynamicThresholdCriterion,omitempty"`
	PropertyBag genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	Static      *MetricCriteria_STATUS        `json:"staticThresholdCriterion,omitempty"`
}

// Storage version of v1api20180301.DynamicMetricCriteria
type DynamicMetricCriteria struct {
	AdditionalProperties map[string]v1.JSON              `json:"additionalProperties,omitempty"`
	AlertSensitivity     *string                         `json:"alertSensitivity,omitempty"`
	CriterionType        *string                         `json:"criterionType,omitempty"`
	Dimensions           []MetricDimension               `json:"dimensions,omitempty"`
	FailingPeriods       *DynamicThresholdFailingPeriods `json:"failingPeriods,omitempty"`
	IgnoreDataBefore     *string                         `json:"ignoreDataBefore,omitempty"`
	MetricName           *string                         `json:"metricName,omitempty"`
	MetricNamespace      *string                         `json:"metricNamespace,omitempty"`
	Name                 *string                         `json:"name,omitempty"`
	Operator             *string                         `json:"operator,omitempty"`
	PropertyBag          genruntime.PropertyBag          `json:"$propertyBag,omitempty"`
	SkipMetricValidation *bool                           `json:"skipMetricValidation,omitempty"`
	TimeAggregation      *string                         `json:"timeAggregation,omitempty"`
}

// Storage version of v1api20180301.DynamicMetricCriteria_STATUS
type DynamicMetricCriteria_STATUS struct {
	AdditionalProperties map[string]v1.JSON                     `json:"additionalProperties,omitempty"`
	AlertSensitivity     *string                                `json:"alertSensitivity,omitempty"`
	CriterionType        *string                                `json:"criterionType,omitempty"`
	Dimensions           []MetricDimension_STATUS               `json:"dimensions,omitempty"`
	FailingPeriods       *DynamicThresholdFailingPeriods_STATUS `json:"failingPeriods,omitempty"`
	IgnoreDataBefore     *string                                `json:"ignoreDataBefore,omitempty"`
	MetricName           *string                                `json:"metricName,omitempty"`
	MetricNamespace      *string                                `json:"metricNamespace,omitempty"`
	Name                 *string                                `json:"name,omitempty"`
	Operator             *string                                `json:"operator,omitempty"`
	PropertyBag          genruntime.PropertyBag                 `json:"$propertyBag,omitempty"`
	SkipMetricValidation *bool                                  `json:"skipMetricValidation,omitempty"`
	TimeAggregation      *string                                `json:"timeAggregation,omitempty"`
}

// Storage version of v1api20180301.MetricDimension
// Specifies a metric dimension.
type MetricDimension struct {
	Name        *string                `json:"name,omitempty"`
	Operator    *string                `json:"operator,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values      []string               `json:"values,omitempty"`
}

// Storage version of v1api20180301.MetricDimension_STATUS
// Specifies a metric dimension.
type MetricDimension_STATUS struct {
	Name        *string                `json:"name,omitempty"`
	Operator    *string                `json:"operator,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values      []string               `json:"values,omitempty"`
}

// Storage version of v1api20180301.DynamicThresholdFailingPeriods
// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriods struct {
	MinFailingPeriodsToAlert  *float64               `json:"minFailingPeriodsToAlert,omitempty"`
	NumberOfEvaluationPeriods *float64               `json:"numberOfEvaluationPeriods,omitempty"`
	PropertyBag               genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20180301.DynamicThresholdFailingPeriods_STATUS
// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriods_STATUS struct {
	MinFailingPeriodsToAlert  *float64               `json:"minFailingPeriodsToAlert,omitempty"`
	NumberOfEvaluationPeriods *float64               `json:"numberOfEvaluationPeriods,omitempty"`
	PropertyBag               genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

func init() {
	SchemeBuilder.Register(&MetricAlert{}, &MetricAlertList{})
}
