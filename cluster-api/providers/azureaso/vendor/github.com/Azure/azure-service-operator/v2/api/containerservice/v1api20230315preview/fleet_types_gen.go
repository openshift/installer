// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230315preview

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20230315preview/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20230315preview/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /containerservice/resource-manager/Microsoft.ContainerService/fleet/preview/2023-03-15-preview/fleets.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}
type Fleet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Fleet_Spec   `json:"spec,omitempty"`
	Status            Fleet_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Fleet{}

// GetConditions returns the conditions of the resource
func (fleet *Fleet) GetConditions() conditions.Conditions {
	return fleet.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (fleet *Fleet) SetConditions(conditions conditions.Conditions) {
	fleet.Status.Conditions = conditions
}

var _ conversion.Convertible = &Fleet{}

// ConvertFrom populates our Fleet from the provided hub Fleet
func (fleet *Fleet) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.Fleet)
	if !ok {
		return fmt.Errorf("expected containerservice/v1api20230315preview/storage/Fleet but received %T instead", hub)
	}

	return fleet.AssignProperties_From_Fleet(source)
}

// ConvertTo populates the provided hub Fleet from our Fleet
func (fleet *Fleet) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.Fleet)
	if !ok {
		return fmt.Errorf("expected containerservice/v1api20230315preview/storage/Fleet but received %T instead", hub)
	}

	return fleet.AssignProperties_To_Fleet(destination)
}

// +kubebuilder:webhook:path=/mutate-containerservice-azure-com-v1api20230315preview-fleet,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=containerservice.azure.com,resources=fleets,verbs=create;update,versions=v1api20230315preview,name=default.v1api20230315preview.fleets.containerservice.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Fleet{}

// Default applies defaults to the Fleet resource
func (fleet *Fleet) Default() {
	fleet.defaultImpl()
	var temp any = fleet
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (fleet *Fleet) defaultAzureName() {
	if fleet.Spec.AzureName == "" {
		fleet.Spec.AzureName = fleet.Name
	}
}

// defaultImpl applies the code generated defaults to the Fleet resource
func (fleet *Fleet) defaultImpl() { fleet.defaultAzureName() }

var _ configmaps.Exporter = &Fleet{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (fleet *Fleet) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if fleet.Spec.OperatorSpec == nil {
		return nil
	}
	return fleet.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &Fleet{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (fleet *Fleet) SecretDestinationExpressions() []*core.DestinationExpression {
	if fleet.Spec.OperatorSpec == nil {
		return nil
	}
	return fleet.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &Fleet{}

// InitializeSpec initializes the spec for this resource from the given status
func (fleet *Fleet) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*Fleet_STATUS); ok {
		return fleet.Spec.Initialize_From_Fleet_STATUS(s)
	}

	return fmt.Errorf("expected Status of type Fleet_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &Fleet{}

// AzureName returns the Azure name of the resource
func (fleet *Fleet) AzureName() string {
	return fleet.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-03-15-preview"
func (fleet Fleet) GetAPIVersion() string {
	return "2023-03-15-preview"
}

// GetResourceScope returns the scope of the resource
func (fleet *Fleet) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (fleet *Fleet) GetSpec() genruntime.ConvertibleSpec {
	return &fleet.Spec
}

// GetStatus returns the status of this resource
func (fleet *Fleet) GetStatus() genruntime.ConvertibleStatus {
	return &fleet.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (fleet *Fleet) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ContainerService/fleets"
func (fleet *Fleet) GetType() string {
	return "Microsoft.ContainerService/fleets"
}

// NewEmptyStatus returns a new empty (blank) status
func (fleet *Fleet) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Fleet_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (fleet *Fleet) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(fleet.Spec)
	return fleet.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (fleet *Fleet) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Fleet_STATUS); ok {
		fleet.Status = *st
		return nil
	}

	// Convert status to required version
	var st Fleet_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	fleet.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-containerservice-azure-com-v1api20230315preview-fleet,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=containerservice.azure.com,resources=fleets,verbs=create;update,versions=v1api20230315preview,name=validate.v1api20230315preview.fleets.containerservice.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Fleet{}

// ValidateCreate validates the creation of the resource
func (fleet *Fleet) ValidateCreate() (admission.Warnings, error) {
	validations := fleet.createValidations()
	var temp any = fleet
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (fleet *Fleet) ValidateDelete() (admission.Warnings, error) {
	validations := fleet.deleteValidations()
	var temp any = fleet
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (fleet *Fleet) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := fleet.updateValidations()
	var temp any = fleet
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (fleet *Fleet) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){fleet.validateResourceReferences, fleet.validateOwnerReference, fleet.validateSecretDestinations, fleet.validateConfigMapDestinations}
}

// deleteValidations validates the deletion of the resource
func (fleet *Fleet) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (fleet *Fleet) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return fleet.validateResourceReferences()
		},
		fleet.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return fleet.validateOwnerReference()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return fleet.validateSecretDestinations()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return fleet.validateConfigMapDestinations()
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (fleet *Fleet) validateConfigMapDestinations() (admission.Warnings, error) {
	if fleet.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(fleet, nil, fleet.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (fleet *Fleet) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(fleet)
}

// validateResourceReferences validates all resource references
func (fleet *Fleet) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&fleet.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (fleet *Fleet) validateSecretDestinations() (admission.Warnings, error) {
	if fleet.Spec.OperatorSpec == nil {
		return nil, nil
	}
	var toValidate []*genruntime.SecretDestination
	if fleet.Spec.OperatorSpec.Secrets != nil {
		toValidate = []*genruntime.SecretDestination{
			fleet.Spec.OperatorSpec.Secrets.UserCredentials,
		}
	}
	return secrets.ValidateDestinations(fleet, toValidate, fleet.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (fleet *Fleet) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*Fleet)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, fleet)
}

// AssignProperties_From_Fleet populates our Fleet from the provided source Fleet
func (fleet *Fleet) AssignProperties_From_Fleet(source *storage.Fleet) error {

	// ObjectMeta
	fleet.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Fleet_Spec
	err := spec.AssignProperties_From_Fleet_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Fleet_Spec() to populate field Spec")
	}
	fleet.Spec = spec

	// Status
	var status Fleet_STATUS
	err = status.AssignProperties_From_Fleet_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Fleet_STATUS() to populate field Status")
	}
	fleet.Status = status

	// No error
	return nil
}

// AssignProperties_To_Fleet populates the provided destination Fleet from our Fleet
func (fleet *Fleet) AssignProperties_To_Fleet(destination *storage.Fleet) error {

	// ObjectMeta
	destination.ObjectMeta = *fleet.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.Fleet_Spec
	err := fleet.Spec.AssignProperties_To_Fleet_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Fleet_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.Fleet_STATUS
	err = fleet.Status.AssignProperties_To_Fleet_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Fleet_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (fleet *Fleet) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: fleet.Spec.OriginalVersion(),
		Kind:    "Fleet",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /containerservice/resource-manager/Microsoft.ContainerService/fleet/preview/2023-03-15-preview/fleets.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}
type FleetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Fleet `json:"items"`
}

// +kubebuilder:validation:Enum={"2023-03-15-preview"}
type APIVersion string

const APIVersion_Value = APIVersion("2023-03-15-preview")

type Fleet_Spec struct {
	// +kubebuilder:validation:MaxLength=63
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// HubProfile: The FleetHubProfile configures the Fleet's hub.
	HubProfile *FleetHubProfile `json:"hubProfile,omitempty"`

	// +kubebuilder:validation:Required
	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *FleetOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &Fleet_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (fleet *Fleet_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if fleet == nil {
		return nil, nil
	}
	result := &arm.Fleet_Spec{}

	// Set property "Location":
	if fleet.Location != nil {
		location := *fleet.Location
		result.Location = &location
	}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if fleet.HubProfile != nil {
		result.Properties = &arm.FleetProperties{}
	}
	if fleet.HubProfile != nil {
		hubProfile_ARM, err := (*fleet.HubProfile).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		hubProfile := *hubProfile_ARM.(*arm.FleetHubProfile)
		result.Properties.HubProfile = &hubProfile
	}

	// Set property "Tags":
	if fleet.Tags != nil {
		result.Tags = make(map[string]string, len(fleet.Tags))
		for key, value := range fleet.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (fleet *Fleet_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.Fleet_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (fleet *Fleet_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.Fleet_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.Fleet_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	fleet.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "HubProfile":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HubProfile != nil {
			var hubProfile1 FleetHubProfile
			err := hubProfile1.PopulateFromARM(owner, *typedInput.Properties.HubProfile)
			if err != nil {
				return err
			}
			hubProfile := hubProfile1
			fleet.HubProfile = &hubProfile
		}
	}

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		fleet.Location = &location
	}

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	fleet.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		fleet.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			fleet.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Fleet_Spec{}

// ConvertSpecFrom populates our Fleet_Spec from the provided source
func (fleet *Fleet_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.Fleet_Spec)
	if ok {
		// Populate our instance from source
		return fleet.AssignProperties_From_Fleet_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.Fleet_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = fleet.AssignProperties_From_Fleet_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Fleet_Spec
func (fleet *Fleet_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.Fleet_Spec)
	if ok {
		// Populate destination from our instance
		return fleet.AssignProperties_To_Fleet_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.Fleet_Spec{}
	err := fleet.AssignProperties_To_Fleet_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Fleet_Spec populates our Fleet_Spec from the provided source Fleet_Spec
func (fleet *Fleet_Spec) AssignProperties_From_Fleet_Spec(source *storage.Fleet_Spec) error {

	// AzureName
	fleet.AzureName = source.AzureName

	// HubProfile
	if source.HubProfile != nil {
		var hubProfile FleetHubProfile
		err := hubProfile.AssignProperties_From_FleetHubProfile(source.HubProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_FleetHubProfile() to populate field HubProfile")
		}
		fleet.HubProfile = &hubProfile
	} else {
		fleet.HubProfile = nil
	}

	// Location
	fleet.Location = genruntime.ClonePointerToString(source.Location)

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec FleetOperatorSpec
		err := operatorSpec.AssignProperties_From_FleetOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_FleetOperatorSpec() to populate field OperatorSpec")
		}
		fleet.OperatorSpec = &operatorSpec
	} else {
		fleet.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		fleet.Owner = &owner
	} else {
		fleet.Owner = nil
	}

	// Tags
	fleet.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignProperties_To_Fleet_Spec populates the provided destination Fleet_Spec from our Fleet_Spec
func (fleet *Fleet_Spec) AssignProperties_To_Fleet_Spec(destination *storage.Fleet_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = fleet.AzureName

	// HubProfile
	if fleet.HubProfile != nil {
		var hubProfile storage.FleetHubProfile
		err := fleet.HubProfile.AssignProperties_To_FleetHubProfile(&hubProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_FleetHubProfile() to populate field HubProfile")
		}
		destination.HubProfile = &hubProfile
	} else {
		destination.HubProfile = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(fleet.Location)

	// OperatorSpec
	if fleet.OperatorSpec != nil {
		var operatorSpec storage.FleetOperatorSpec
		err := fleet.OperatorSpec.AssignProperties_To_FleetOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_FleetOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = fleet.OriginalVersion()

	// Owner
	if fleet.Owner != nil {
		owner := fleet.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(fleet.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_Fleet_STATUS populates our Fleet_Spec from the provided source Fleet_STATUS
func (fleet *Fleet_Spec) Initialize_From_Fleet_STATUS(source *Fleet_STATUS) error {

	// HubProfile
	if source.HubProfile != nil {
		var hubProfile FleetHubProfile
		err := hubProfile.Initialize_From_FleetHubProfile_STATUS(source.HubProfile)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_FleetHubProfile_STATUS() to populate field HubProfile")
		}
		fleet.HubProfile = &hubProfile
	} else {
		fleet.HubProfile = nil
	}

	// Location
	fleet.Location = genruntime.ClonePointerToString(source.Location)

	// Tags
	fleet.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (fleet *Fleet_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (fleet *Fleet_Spec) SetAzureName(azureName string) { fleet.AzureName = azureName }

// The Fleet resource.
type Fleet_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// ETag: If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.
	// Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in
	// the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header
	// fields.
	ETag *string `json:"eTag,omitempty"`

	// HubProfile: The FleetHubProfile configures the Fleet's hub.
	HubProfile *FleetHubProfile_STATUS `json:"hubProfile,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The status of the last operation.
	ProvisioningState *FleetProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// SystemData: Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Fleet_STATUS{}

// ConvertStatusFrom populates our Fleet_STATUS from the provided source
func (fleet *Fleet_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.Fleet_STATUS)
	if ok {
		// Populate our instance from source
		return fleet.AssignProperties_From_Fleet_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.Fleet_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = fleet.AssignProperties_From_Fleet_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Fleet_STATUS
func (fleet *Fleet_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.Fleet_STATUS)
	if ok {
		// Populate destination from our instance
		return fleet.AssignProperties_To_Fleet_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.Fleet_STATUS{}
	err := fleet.AssignProperties_To_Fleet_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Fleet_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (fleet *Fleet_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.Fleet_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (fleet *Fleet_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.Fleet_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.Fleet_STATUS, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "ETag":
	if typedInput.ETag != nil {
		eTag := *typedInput.ETag
		fleet.ETag = &eTag
	}

	// Set property "HubProfile":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HubProfile != nil {
			var hubProfile1 FleetHubProfile_STATUS
			err := hubProfile1.PopulateFromARM(owner, *typedInput.Properties.HubProfile)
			if err != nil {
				return err
			}
			hubProfile := hubProfile1
			fleet.HubProfile = &hubProfile
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		fleet.Id = &id
	}

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		fleet.Location = &location
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		fleet.Name = &name
	}

	// Set property "ProvisioningState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			var temp string
			temp = string(*typedInput.Properties.ProvisioningState)
			provisioningState := FleetProvisioningState_STATUS(temp)
			fleet.ProvisioningState = &provisioningState
		}
	}

	// Set property "SystemData":
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		fleet.SystemData = &systemData
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		fleet.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			fleet.Tags[key] = value
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		fleet.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_Fleet_STATUS populates our Fleet_STATUS from the provided source Fleet_STATUS
func (fleet *Fleet_STATUS) AssignProperties_From_Fleet_STATUS(source *storage.Fleet_STATUS) error {

	// Conditions
	fleet.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ETag
	fleet.ETag = genruntime.ClonePointerToString(source.ETag)

	// HubProfile
	if source.HubProfile != nil {
		var hubProfile FleetHubProfile_STATUS
		err := hubProfile.AssignProperties_From_FleetHubProfile_STATUS(source.HubProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_FleetHubProfile_STATUS() to populate field HubProfile")
		}
		fleet.HubProfile = &hubProfile
	} else {
		fleet.HubProfile = nil
	}

	// Id
	fleet.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	fleet.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	fleet.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := *source.ProvisioningState
		provisioningStateTemp := genruntime.ToEnum(provisioningState, fleetProvisioningState_STATUS_Values)
		fleet.ProvisioningState = &provisioningStateTemp
	} else {
		fleet.ProvisioningState = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		fleet.SystemData = &systemDatum
	} else {
		fleet.SystemData = nil
	}

	// Tags
	fleet.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	fleet.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_Fleet_STATUS populates the provided destination Fleet_STATUS from our Fleet_STATUS
func (fleet *Fleet_STATUS) AssignProperties_To_Fleet_STATUS(destination *storage.Fleet_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(fleet.Conditions)

	// ETag
	destination.ETag = genruntime.ClonePointerToString(fleet.ETag)

	// HubProfile
	if fleet.HubProfile != nil {
		var hubProfile storage.FleetHubProfile_STATUS
		err := fleet.HubProfile.AssignProperties_To_FleetHubProfile_STATUS(&hubProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_FleetHubProfile_STATUS() to populate field HubProfile")
		}
		destination.HubProfile = &hubProfile
	} else {
		destination.HubProfile = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(fleet.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(fleet.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(fleet.Name)

	// ProvisioningState
	if fleet.ProvisioningState != nil {
		provisioningState := string(*fleet.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// SystemData
	if fleet.SystemData != nil {
		var systemDatum storage.SystemData_STATUS
		err := fleet.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(fleet.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(fleet.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// The FleetHubProfile configures the fleet hub.
type FleetHubProfile struct {
	// +kubebuilder:validation:MaxLength=54
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern="^[a-zA-Z0-9]$|^[a-zA-Z0-9][a-zA-Z0-9-]{0,52}[a-zA-Z0-9]$"
	// DnsPrefix: DNS prefix used to create the FQDN for the Fleet hub.
	DnsPrefix *string `json:"dnsPrefix,omitempty"`
}

var _ genruntime.ARMTransformer = &FleetHubProfile{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (profile *FleetHubProfile) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if profile == nil {
		return nil, nil
	}
	result := &arm.FleetHubProfile{}

	// Set property "DnsPrefix":
	if profile.DnsPrefix != nil {
		dnsPrefix := *profile.DnsPrefix
		result.DnsPrefix = &dnsPrefix
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *FleetHubProfile) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.FleetHubProfile{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *FleetHubProfile) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.FleetHubProfile)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.FleetHubProfile, got %T", armInput)
	}

	// Set property "DnsPrefix":
	if typedInput.DnsPrefix != nil {
		dnsPrefix := *typedInput.DnsPrefix
		profile.DnsPrefix = &dnsPrefix
	}

	// No error
	return nil
}

// AssignProperties_From_FleetHubProfile populates our FleetHubProfile from the provided source FleetHubProfile
func (profile *FleetHubProfile) AssignProperties_From_FleetHubProfile(source *storage.FleetHubProfile) error {

	// DnsPrefix
	if source.DnsPrefix != nil {
		dnsPrefix := *source.DnsPrefix
		profile.DnsPrefix = &dnsPrefix
	} else {
		profile.DnsPrefix = nil
	}

	// No error
	return nil
}

// AssignProperties_To_FleetHubProfile populates the provided destination FleetHubProfile from our FleetHubProfile
func (profile *FleetHubProfile) AssignProperties_To_FleetHubProfile(destination *storage.FleetHubProfile) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DnsPrefix
	if profile.DnsPrefix != nil {
		dnsPrefix := *profile.DnsPrefix
		destination.DnsPrefix = &dnsPrefix
	} else {
		destination.DnsPrefix = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_FleetHubProfile_STATUS populates our FleetHubProfile from the provided source FleetHubProfile_STATUS
func (profile *FleetHubProfile) Initialize_From_FleetHubProfile_STATUS(source *FleetHubProfile_STATUS) error {

	// DnsPrefix
	if source.DnsPrefix != nil {
		dnsPrefix := *source.DnsPrefix
		profile.DnsPrefix = &dnsPrefix
	} else {
		profile.DnsPrefix = nil
	}

	// No error
	return nil
}

// The FleetHubProfile configures the fleet hub.
type FleetHubProfile_STATUS struct {
	// DnsPrefix: DNS prefix used to create the FQDN for the Fleet hub.
	DnsPrefix *string `json:"dnsPrefix,omitempty"`

	// Fqdn: The FQDN of the Fleet hub.
	Fqdn *string `json:"fqdn,omitempty"`

	// KubernetesVersion: The Kubernetes version of the Fleet hub.
	KubernetesVersion *string `json:"kubernetesVersion,omitempty"`
}

var _ genruntime.FromARMConverter = &FleetHubProfile_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *FleetHubProfile_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.FleetHubProfile_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *FleetHubProfile_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.FleetHubProfile_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.FleetHubProfile_STATUS, got %T", armInput)
	}

	// Set property "DnsPrefix":
	if typedInput.DnsPrefix != nil {
		dnsPrefix := *typedInput.DnsPrefix
		profile.DnsPrefix = &dnsPrefix
	}

	// Set property "Fqdn":
	if typedInput.Fqdn != nil {
		fqdn := *typedInput.Fqdn
		profile.Fqdn = &fqdn
	}

	// Set property "KubernetesVersion":
	if typedInput.KubernetesVersion != nil {
		kubernetesVersion := *typedInput.KubernetesVersion
		profile.KubernetesVersion = &kubernetesVersion
	}

	// No error
	return nil
}

// AssignProperties_From_FleetHubProfile_STATUS populates our FleetHubProfile_STATUS from the provided source FleetHubProfile_STATUS
func (profile *FleetHubProfile_STATUS) AssignProperties_From_FleetHubProfile_STATUS(source *storage.FleetHubProfile_STATUS) error {

	// DnsPrefix
	profile.DnsPrefix = genruntime.ClonePointerToString(source.DnsPrefix)

	// Fqdn
	profile.Fqdn = genruntime.ClonePointerToString(source.Fqdn)

	// KubernetesVersion
	profile.KubernetesVersion = genruntime.ClonePointerToString(source.KubernetesVersion)

	// No error
	return nil
}

// AssignProperties_To_FleetHubProfile_STATUS populates the provided destination FleetHubProfile_STATUS from our FleetHubProfile_STATUS
func (profile *FleetHubProfile_STATUS) AssignProperties_To_FleetHubProfile_STATUS(destination *storage.FleetHubProfile_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DnsPrefix
	destination.DnsPrefix = genruntime.ClonePointerToString(profile.DnsPrefix)

	// Fqdn
	destination.Fqdn = genruntime.ClonePointerToString(profile.Fqdn)

	// KubernetesVersion
	destination.KubernetesVersion = genruntime.ClonePointerToString(profile.KubernetesVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type FleetOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`

	// Secrets: configures where to place Azure generated secrets.
	Secrets *FleetOperatorSecrets `json:"secrets,omitempty"`
}

// AssignProperties_From_FleetOperatorSpec populates our FleetOperatorSpec from the provided source FleetOperatorSpec
func (operator *FleetOperatorSpec) AssignProperties_From_FleetOperatorSpec(source *storage.FleetOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// Secrets
	if source.Secrets != nil {
		var secret FleetOperatorSecrets
		err := secret.AssignProperties_From_FleetOperatorSecrets(source.Secrets)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_FleetOperatorSecrets() to populate field Secrets")
		}
		operator.Secrets = &secret
	} else {
		operator.Secrets = nil
	}

	// No error
	return nil
}

// AssignProperties_To_FleetOperatorSpec populates the provided destination FleetOperatorSpec from our FleetOperatorSpec
func (operator *FleetOperatorSpec) AssignProperties_To_FleetOperatorSpec(destination *storage.FleetOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Secrets
	if operator.Secrets != nil {
		var secret storage.FleetOperatorSecrets
		err := operator.Secrets.AssignProperties_To_FleetOperatorSecrets(&secret)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_FleetOperatorSecrets() to populate field Secrets")
		}
		destination.Secrets = &secret
	} else {
		destination.Secrets = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// The provisioning state of the last accepted operation.
type FleetProvisioningState_STATUS string

const (
	FleetProvisioningState_STATUS_Canceled  = FleetProvisioningState_STATUS("Canceled")
	FleetProvisioningState_STATUS_Creating  = FleetProvisioningState_STATUS("Creating")
	FleetProvisioningState_STATUS_Deleting  = FleetProvisioningState_STATUS("Deleting")
	FleetProvisioningState_STATUS_Failed    = FleetProvisioningState_STATUS("Failed")
	FleetProvisioningState_STATUS_Succeeded = FleetProvisioningState_STATUS("Succeeded")
	FleetProvisioningState_STATUS_Updating  = FleetProvisioningState_STATUS("Updating")
)

// Mapping from string to FleetProvisioningState_STATUS
var fleetProvisioningState_STATUS_Values = map[string]FleetProvisioningState_STATUS{
	"canceled":  FleetProvisioningState_STATUS_Canceled,
	"creating":  FleetProvisioningState_STATUS_Creating,
	"deleting":  FleetProvisioningState_STATUS_Deleting,
	"failed":    FleetProvisioningState_STATUS_Failed,
	"succeeded": FleetProvisioningState_STATUS_Succeeded,
	"updating":  FleetProvisioningState_STATUS_Updating,
}

// Metadata pertaining to creation and last modification of the resource.
type SystemData_STATUS struct {
	// CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreatedByType: The type of identity that created the resource.
	CreatedByType *SystemData_CreatedByType_STATUS `json:"createdByType,omitempty"`

	// LastModifiedAt: The timestamp of resource last modification (UTC)
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	// LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *SystemData_LastModifiedByType_STATUS `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.SystemData_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.SystemData_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.SystemData_STATUS, got %T", armInput)
	}

	// Set property "CreatedAt":
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property "CreatedBy":
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property "CreatedByType":
	if typedInput.CreatedByType != nil {
		var temp string
		temp = string(*typedInput.CreatedByType)
		createdByType := SystemData_CreatedByType_STATUS(temp)
		data.CreatedByType = &createdByType
	}

	// Set property "LastModifiedAt":
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property "LastModifiedBy":
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property "LastModifiedByType":
	if typedInput.LastModifiedByType != nil {
		var temp string
		temp = string(*typedInput.LastModifiedByType)
		lastModifiedByType := SystemData_LastModifiedByType_STATUS(temp)
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignProperties_From_SystemData_STATUS populates our SystemData_STATUS from the provided source SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_From_SystemData_STATUS(source *storage.SystemData_STATUS) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := *source.CreatedByType
		createdByTypeTemp := genruntime.ToEnum(createdByType, systemData_CreatedByType_STATUS_Values)
		data.CreatedByType = &createdByTypeTemp
	} else {
		data.CreatedByType = nil
	}

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := *source.LastModifiedByType
		lastModifiedByTypeTemp := genruntime.ToEnum(lastModifiedByType, systemData_LastModifiedByType_STATUS_Values)
		data.LastModifiedByType = &lastModifiedByTypeTemp
	} else {
		data.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SystemData_STATUS populates the provided destination SystemData_STATUS from our SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_To_SystemData_STATUS(destination *storage.SystemData_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	if data.CreatedByType != nil {
		createdByType := string(*data.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	if data.LastModifiedByType != nil {
		lastModifiedByType := string(*data.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type FleetOperatorSecrets struct {
	// UserCredentials: indicates where the UserCredentials secret should be placed. If omitted, the secret will not be
	// retrieved from Azure.
	UserCredentials *genruntime.SecretDestination `json:"userCredentials,omitempty"`
}

// AssignProperties_From_FleetOperatorSecrets populates our FleetOperatorSecrets from the provided source FleetOperatorSecrets
func (secrets *FleetOperatorSecrets) AssignProperties_From_FleetOperatorSecrets(source *storage.FleetOperatorSecrets) error {

	// UserCredentials
	if source.UserCredentials != nil {
		userCredential := source.UserCredentials.Copy()
		secrets.UserCredentials = &userCredential
	} else {
		secrets.UserCredentials = nil
	}

	// No error
	return nil
}

// AssignProperties_To_FleetOperatorSecrets populates the provided destination FleetOperatorSecrets from our FleetOperatorSecrets
func (secrets *FleetOperatorSecrets) AssignProperties_To_FleetOperatorSecrets(destination *storage.FleetOperatorSecrets) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserCredentials
	if secrets.UserCredentials != nil {
		userCredential := secrets.UserCredentials.Copy()
		destination.UserCredentials = &userCredential
	} else {
		destination.UserCredentials = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SystemData_CreatedByType_STATUS string

const (
	SystemData_CreatedByType_STATUS_Application     = SystemData_CreatedByType_STATUS("Application")
	SystemData_CreatedByType_STATUS_Key             = SystemData_CreatedByType_STATUS("Key")
	SystemData_CreatedByType_STATUS_ManagedIdentity = SystemData_CreatedByType_STATUS("ManagedIdentity")
	SystemData_CreatedByType_STATUS_User            = SystemData_CreatedByType_STATUS("User")
)

// Mapping from string to SystemData_CreatedByType_STATUS
var systemData_CreatedByType_STATUS_Values = map[string]SystemData_CreatedByType_STATUS{
	"application":     SystemData_CreatedByType_STATUS_Application,
	"key":             SystemData_CreatedByType_STATUS_Key,
	"managedidentity": SystemData_CreatedByType_STATUS_ManagedIdentity,
	"user":            SystemData_CreatedByType_STATUS_User,
}

type SystemData_LastModifiedByType_STATUS string

const (
	SystemData_LastModifiedByType_STATUS_Application     = SystemData_LastModifiedByType_STATUS("Application")
	SystemData_LastModifiedByType_STATUS_Key             = SystemData_LastModifiedByType_STATUS("Key")
	SystemData_LastModifiedByType_STATUS_ManagedIdentity = SystemData_LastModifiedByType_STATUS("ManagedIdentity")
	SystemData_LastModifiedByType_STATUS_User            = SystemData_LastModifiedByType_STATUS("User")
)

// Mapping from string to SystemData_LastModifiedByType_STATUS
var systemData_LastModifiedByType_STATUS_Values = map[string]SystemData_LastModifiedByType_STATUS{
	"application":     SystemData_LastModifiedByType_STATUS_Application,
	"key":             SystemData_LastModifiedByType_STATUS_Key,
	"managedidentity": SystemData_LastModifiedByType_STATUS_ManagedIdentity,
	"user":            SystemData_LastModifiedByType_STATUS_User,
}

func init() {
	SchemeBuilder.Register(&Fleet{}, &FleetList{})
}
