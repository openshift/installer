// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=sql.azure.com,resources=serversfailovergroups,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=sql.azure.com,resources={serversfailovergroups/status,serversfailovergroups/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1api20211101.ServersFailoverGroup
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/FailoverGroups.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}
type ServersFailoverGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServersFailoverGroup_Spec   `json:"spec,omitempty"`
	Status            ServersFailoverGroup_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &ServersFailoverGroup{}

// GetConditions returns the conditions of the resource
func (group *ServersFailoverGroup) GetConditions() conditions.Conditions {
	return group.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (group *ServersFailoverGroup) SetConditions(conditions conditions.Conditions) {
	group.Status.Conditions = conditions
}

var _ configmaps.Exporter = &ServersFailoverGroup{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (group *ServersFailoverGroup) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if group.Spec.OperatorSpec == nil {
		return nil
	}
	return group.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &ServersFailoverGroup{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (group *ServersFailoverGroup) SecretDestinationExpressions() []*core.DestinationExpression {
	if group.Spec.OperatorSpec == nil {
		return nil
	}
	return group.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.KubernetesResource = &ServersFailoverGroup{}

// AzureName returns the Azure name of the resource
func (group *ServersFailoverGroup) AzureName() string {
	return group.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (group ServersFailoverGroup) GetAPIVersion() string {
	return "2021-11-01"
}

// GetResourceScope returns the scope of the resource
func (group *ServersFailoverGroup) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (group *ServersFailoverGroup) GetSpec() genruntime.ConvertibleSpec {
	return &group.Spec
}

// GetStatus returns the status of this resource
func (group *ServersFailoverGroup) GetStatus() genruntime.ConvertibleStatus {
	return &group.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (group *ServersFailoverGroup) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Sql/servers/failoverGroups"
func (group *ServersFailoverGroup) GetType() string {
	return "Microsoft.Sql/servers/failoverGroups"
}

// NewEmptyStatus returns a new empty (blank) status
func (group *ServersFailoverGroup) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &ServersFailoverGroup_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (group *ServersFailoverGroup) Owner() *genruntime.ResourceReference {
	ownerGroup, ownerKind := genruntime.LookupOwnerGroupKind(group.Spec)
	return group.Spec.Owner.AsResourceReference(ownerGroup, ownerKind)
}

// SetStatus sets the status of this resource
func (group *ServersFailoverGroup) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*ServersFailoverGroup_STATUS); ok {
		group.Status = *st
		return nil
	}

	// Convert status to required version
	var st ServersFailoverGroup_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	group.Status = st
	return nil
}

// Hub marks that this ServersFailoverGroup is the hub type for conversion
func (group *ServersFailoverGroup) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (group *ServersFailoverGroup) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: group.Spec.OriginalVersion,
		Kind:    "ServersFailoverGroup",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1api20211101.ServersFailoverGroup
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/FailoverGroups.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}
type ServersFailoverGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServersFailoverGroup `json:"items"`
}

// Storage version of v1api20211101.ServersFailoverGroup_Spec
type ServersFailoverGroup_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName           string                            `json:"azureName,omitempty"`
	DatabasesReferences []genruntime.ResourceReference    `armReference:"Databases" json:"databasesReferences,omitempty"`
	OperatorSpec        *ServersFailoverGroupOperatorSpec `json:"operatorSpec,omitempty"`
	OriginalVersion     string                            `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a sql.azure.com/Server resource
	Owner             *genruntime.KnownResourceReference `group:"sql.azure.com" json:"owner,omitempty" kind:"Server"`
	PartnerServers    []PartnerInfo                      `json:"partnerServers,omitempty"`
	PropertyBag       genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	ReadOnlyEndpoint  *FailoverGroupReadOnlyEndpoint     `json:"readOnlyEndpoint,omitempty"`
	ReadWriteEndpoint *FailoverGroupReadWriteEndpoint    `json:"readWriteEndpoint,omitempty"`
	Tags              map[string]string                  `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &ServersFailoverGroup_Spec{}

// ConvertSpecFrom populates our ServersFailoverGroup_Spec from the provided source
func (group *ServersFailoverGroup_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == group {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(group)
}

// ConvertSpecTo populates the provided destination from our ServersFailoverGroup_Spec
func (group *ServersFailoverGroup_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == group {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(group)
}

// Storage version of v1api20211101.ServersFailoverGroup_STATUS
type ServersFailoverGroup_STATUS struct {
	Conditions        []conditions.Condition                 `json:"conditions,omitempty"`
	Databases         []string                               `json:"databases,omitempty"`
	Id                *string                                `json:"id,omitempty"`
	Location          *string                                `json:"location,omitempty"`
	Name              *string                                `json:"name,omitempty"`
	PartnerServers    []PartnerInfo_STATUS                   `json:"partnerServers,omitempty"`
	PropertyBag       genruntime.PropertyBag                 `json:"$propertyBag,omitempty"`
	ReadOnlyEndpoint  *FailoverGroupReadOnlyEndpoint_STATUS  `json:"readOnlyEndpoint,omitempty"`
	ReadWriteEndpoint *FailoverGroupReadWriteEndpoint_STATUS `json:"readWriteEndpoint,omitempty"`
	ReplicationRole   *string                                `json:"replicationRole,omitempty"`
	ReplicationState  *string                                `json:"replicationState,omitempty"`
	Tags              map[string]string                      `json:"tags,omitempty"`
	Type              *string                                `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &ServersFailoverGroup_STATUS{}

// ConvertStatusFrom populates our ServersFailoverGroup_STATUS from the provided source
func (group *ServersFailoverGroup_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == group {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(group)
}

// ConvertStatusTo populates the provided destination from our ServersFailoverGroup_STATUS
func (group *ServersFailoverGroup_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == group {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(group)
}

// Storage version of v1api20211101.FailoverGroupReadOnlyEndpoint
// Read-only endpoint of the failover group instance.
type FailoverGroupReadOnlyEndpoint struct {
	FailoverPolicy *string                `json:"failoverPolicy,omitempty"`
	PropertyBag    genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20211101.FailoverGroupReadOnlyEndpoint_STATUS
// Read-only endpoint of the failover group instance.
type FailoverGroupReadOnlyEndpoint_STATUS struct {
	FailoverPolicy *string                `json:"failoverPolicy,omitempty"`
	PropertyBag    genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20211101.FailoverGroupReadWriteEndpoint
// Read-write endpoint of the failover group instance.
type FailoverGroupReadWriteEndpoint struct {
	FailoverPolicy                         *string                `json:"failoverPolicy,omitempty"`
	FailoverWithDataLossGracePeriodMinutes *int                   `json:"failoverWithDataLossGracePeriodMinutes,omitempty"`
	PropertyBag                            genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20211101.FailoverGroupReadWriteEndpoint_STATUS
// Read-write endpoint of the failover group instance.
type FailoverGroupReadWriteEndpoint_STATUS struct {
	FailoverPolicy                         *string                `json:"failoverPolicy,omitempty"`
	FailoverWithDataLossGracePeriodMinutes *int                   `json:"failoverWithDataLossGracePeriodMinutes,omitempty"`
	PropertyBag                            genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20211101.PartnerInfo
// Partner server information for the failover group.
type PartnerInfo struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`

	// +kubebuilder:validation:Required
	// Reference: Resource identifier of the partner server.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

// Storage version of v1api20211101.PartnerInfo_STATUS
// Partner server information for the failover group.
type PartnerInfo_STATUS struct {
	Id              *string                `json:"id,omitempty"`
	Location        *string                `json:"location,omitempty"`
	PropertyBag     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ReplicationRole *string                `json:"replicationRole,omitempty"`
}

// Storage version of v1api20211101.ServersFailoverGroupOperatorSpec
// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type ServersFailoverGroupOperatorSpec struct {
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`
	PropertyBag          genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	SecretExpressions    []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

func init() {
	SchemeBuilder.Register(&ServersFailoverGroup{}, &ServersFailoverGroupList{})
}
