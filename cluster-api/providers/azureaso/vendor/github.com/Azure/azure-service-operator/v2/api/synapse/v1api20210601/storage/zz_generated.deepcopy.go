//go:build !ignore_autogenerated

/*
Copyright (c) Microsoft Corporation.
Licensed under the MIT license.
*/

// Code generated by controller-gen. DO NOT EDIT.

package storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoPauseProperties) DeepCopyInto(out *AutoPauseProperties) {
	*out = *in
	if in.DelayInMinutes != nil {
		in, out := &in.DelayInMinutes, &out.DelayInMinutes
		*out = new(int)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoPauseProperties.
func (in *AutoPauseProperties) DeepCopy() *AutoPauseProperties {
	if in == nil {
		return nil
	}
	out := new(AutoPauseProperties)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoPauseProperties_STATUS) DeepCopyInto(out *AutoPauseProperties_STATUS) {
	*out = *in
	if in.DelayInMinutes != nil {
		in, out := &in.DelayInMinutes, &out.DelayInMinutes
		*out = new(int)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoPauseProperties_STATUS.
func (in *AutoPauseProperties_STATUS) DeepCopy() *AutoPauseProperties_STATUS {
	if in == nil {
		return nil
	}
	out := new(AutoPauseProperties_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoScaleProperties) DeepCopyInto(out *AutoScaleProperties) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxNodeCount != nil {
		in, out := &in.MaxNodeCount, &out.MaxNodeCount
		*out = new(int)
		**out = **in
	}
	if in.MinNodeCount != nil {
		in, out := &in.MinNodeCount, &out.MinNodeCount
		*out = new(int)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoScaleProperties.
func (in *AutoScaleProperties) DeepCopy() *AutoScaleProperties {
	if in == nil {
		return nil
	}
	out := new(AutoScaleProperties)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoScaleProperties_STATUS) DeepCopyInto(out *AutoScaleProperties_STATUS) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxNodeCount != nil {
		in, out := &in.MaxNodeCount, &out.MaxNodeCount
		*out = new(int)
		**out = **in
	}
	if in.MinNodeCount != nil {
		in, out := &in.MinNodeCount, &out.MinNodeCount
		*out = new(int)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoScaleProperties_STATUS.
func (in *AutoScaleProperties_STATUS) DeepCopy() *AutoScaleProperties_STATUS {
	if in == nil {
		return nil
	}
	out := new(AutoScaleProperties_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CspWorkspaceAdminProperties) DeepCopyInto(out *CspWorkspaceAdminProperties) {
	*out = *in
	if in.InitialWorkspaceAdminObjectId != nil {
		in, out := &in.InitialWorkspaceAdminObjectId, &out.InitialWorkspaceAdminObjectId
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CspWorkspaceAdminProperties.
func (in *CspWorkspaceAdminProperties) DeepCopy() *CspWorkspaceAdminProperties {
	if in == nil {
		return nil
	}
	out := new(CspWorkspaceAdminProperties)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CspWorkspaceAdminProperties_STATUS) DeepCopyInto(out *CspWorkspaceAdminProperties_STATUS) {
	*out = *in
	if in.InitialWorkspaceAdminObjectId != nil {
		in, out := &in.InitialWorkspaceAdminObjectId, &out.InitialWorkspaceAdminObjectId
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CspWorkspaceAdminProperties_STATUS.
func (in *CspWorkspaceAdminProperties_STATUS) DeepCopy() *CspWorkspaceAdminProperties_STATUS {
	if in == nil {
		return nil
	}
	out := new(CspWorkspaceAdminProperties_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomerManagedKeyDetails) DeepCopyInto(out *CustomerManagedKeyDetails) {
	*out = *in
	if in.KekIdentity != nil {
		in, out := &in.KekIdentity, &out.KekIdentity
		*out = new(KekIdentityProperties)
		(*in).DeepCopyInto(*out)
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(WorkspaceKeyDetails)
		(*in).DeepCopyInto(*out)
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomerManagedKeyDetails.
func (in *CustomerManagedKeyDetails) DeepCopy() *CustomerManagedKeyDetails {
	if in == nil {
		return nil
	}
	out := new(CustomerManagedKeyDetails)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomerManagedKeyDetails_STATUS) DeepCopyInto(out *CustomerManagedKeyDetails_STATUS) {
	*out = *in
	if in.KekIdentity != nil {
		in, out := &in.KekIdentity, &out.KekIdentity
		*out = new(KekIdentityProperties_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(WorkspaceKeyDetails_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomerManagedKeyDetails_STATUS.
func (in *CustomerManagedKeyDetails_STATUS) DeepCopy() *CustomerManagedKeyDetails_STATUS {
	if in == nil {
		return nil
	}
	out := new(CustomerManagedKeyDetails_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataLakeStorageAccountDetails) DeepCopyInto(out *DataLakeStorageAccountDetails) {
	*out = *in
	if in.AccountUrl != nil {
		in, out := &in.AccountUrl, &out.AccountUrl
		*out = new(string)
		**out = **in
	}
	if in.AccountUrlFromConfig != nil {
		in, out := &in.AccountUrlFromConfig, &out.AccountUrlFromConfig
		*out = new(genruntime.ConfigMapReference)
		**out = **in
	}
	if in.CreateManagedPrivateEndpoint != nil {
		in, out := &in.CreateManagedPrivateEndpoint, &out.CreateManagedPrivateEndpoint
		*out = new(bool)
		**out = **in
	}
	if in.Filesystem != nil {
		in, out := &in.Filesystem, &out.Filesystem
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ResourceReference != nil {
		in, out := &in.ResourceReference, &out.ResourceReference
		*out = new(genruntime.ResourceReference)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataLakeStorageAccountDetails.
func (in *DataLakeStorageAccountDetails) DeepCopy() *DataLakeStorageAccountDetails {
	if in == nil {
		return nil
	}
	out := new(DataLakeStorageAccountDetails)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataLakeStorageAccountDetails_STATUS) DeepCopyInto(out *DataLakeStorageAccountDetails_STATUS) {
	*out = *in
	if in.AccountUrl != nil {
		in, out := &in.AccountUrl, &out.AccountUrl
		*out = new(string)
		**out = **in
	}
	if in.CreateManagedPrivateEndpoint != nil {
		in, out := &in.CreateManagedPrivateEndpoint, &out.CreateManagedPrivateEndpoint
		*out = new(bool)
		**out = **in
	}
	if in.Filesystem != nil {
		in, out := &in.Filesystem, &out.Filesystem
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ResourceId != nil {
		in, out := &in.ResourceId, &out.ResourceId
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataLakeStorageAccountDetails_STATUS.
func (in *DataLakeStorageAccountDetails_STATUS) DeepCopy() *DataLakeStorageAccountDetails_STATUS {
	if in == nil {
		return nil
	}
	out := new(DataLakeStorageAccountDetails_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DynamicExecutorAllocation) DeepCopyInto(out *DynamicExecutorAllocation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxExecutors != nil {
		in, out := &in.MaxExecutors, &out.MaxExecutors
		*out = new(int)
		**out = **in
	}
	if in.MinExecutors != nil {
		in, out := &in.MinExecutors, &out.MinExecutors
		*out = new(int)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DynamicExecutorAllocation.
func (in *DynamicExecutorAllocation) DeepCopy() *DynamicExecutorAllocation {
	if in == nil {
		return nil
	}
	out := new(DynamicExecutorAllocation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DynamicExecutorAllocation_STATUS) DeepCopyInto(out *DynamicExecutorAllocation_STATUS) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxExecutors != nil {
		in, out := &in.MaxExecutors, &out.MaxExecutors
		*out = new(int)
		**out = **in
	}
	if in.MinExecutors != nil {
		in, out := &in.MinExecutors, &out.MinExecutors
		*out = new(int)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DynamicExecutorAllocation_STATUS.
func (in *DynamicExecutorAllocation_STATUS) DeepCopy() *DynamicExecutorAllocation_STATUS {
	if in == nil {
		return nil
	}
	out := new(DynamicExecutorAllocation_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EncryptionDetails) DeepCopyInto(out *EncryptionDetails) {
	*out = *in
	if in.Cmk != nil {
		in, out := &in.Cmk, &out.Cmk
		*out = new(CustomerManagedKeyDetails)
		(*in).DeepCopyInto(*out)
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EncryptionDetails.
func (in *EncryptionDetails) DeepCopy() *EncryptionDetails {
	if in == nil {
		return nil
	}
	out := new(EncryptionDetails)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EncryptionDetails_STATUS) DeepCopyInto(out *EncryptionDetails_STATUS) {
	*out = *in
	if in.Cmk != nil {
		in, out := &in.Cmk, &out.Cmk
		*out = new(CustomerManagedKeyDetails_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.DoubleEncryptionEnabled != nil {
		in, out := &in.DoubleEncryptionEnabled, &out.DoubleEncryptionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EncryptionDetails_STATUS.
func (in *EncryptionDetails_STATUS) DeepCopy() *EncryptionDetails_STATUS {
	if in == nil {
		return nil
	}
	out := new(EncryptionDetails_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KekIdentityProperties) DeepCopyInto(out *KekIdentityProperties) {
	*out = *in
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.UseSystemAssignedIdentity != nil {
		in, out := &in.UseSystemAssignedIdentity, &out.UseSystemAssignedIdentity
		*out = new(v1.JSON)
		(*in).DeepCopyInto(*out)
	}
	if in.UserAssignedIdentityReference != nil {
		in, out := &in.UserAssignedIdentityReference, &out.UserAssignedIdentityReference
		*out = new(genruntime.ResourceReference)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KekIdentityProperties.
func (in *KekIdentityProperties) DeepCopy() *KekIdentityProperties {
	if in == nil {
		return nil
	}
	out := new(KekIdentityProperties)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KekIdentityProperties_STATUS) DeepCopyInto(out *KekIdentityProperties_STATUS) {
	*out = *in
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.UseSystemAssignedIdentity != nil {
		in, out := &in.UseSystemAssignedIdentity, &out.UseSystemAssignedIdentity
		*out = new(v1.JSON)
		(*in).DeepCopyInto(*out)
	}
	if in.UserAssignedIdentity != nil {
		in, out := &in.UserAssignedIdentity, &out.UserAssignedIdentity
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KekIdentityProperties_STATUS.
func (in *KekIdentityProperties_STATUS) DeepCopy() *KekIdentityProperties_STATUS {
	if in == nil {
		return nil
	}
	out := new(KekIdentityProperties_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LibraryInfo) DeepCopyInto(out *LibraryInfo) {
	*out = *in
	if in.ContainerName != nil {
		in, out := &in.ContainerName, &out.ContainerName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LibraryInfo.
func (in *LibraryInfo) DeepCopy() *LibraryInfo {
	if in == nil {
		return nil
	}
	out := new(LibraryInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LibraryInfo_STATUS) DeepCopyInto(out *LibraryInfo_STATUS) {
	*out = *in
	if in.ContainerName != nil {
		in, out := &in.ContainerName, &out.ContainerName
		*out = new(string)
		**out = **in
	}
	if in.CreatorId != nil {
		in, out := &in.CreatorId, &out.CreatorId
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ProvisioningStatus != nil {
		in, out := &in.ProvisioningStatus, &out.ProvisioningStatus
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UploadedTimestamp != nil {
		in, out := &in.UploadedTimestamp, &out.UploadedTimestamp
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LibraryInfo_STATUS.
func (in *LibraryInfo_STATUS) DeepCopy() *LibraryInfo_STATUS {
	if in == nil {
		return nil
	}
	out := new(LibraryInfo_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LibraryRequirements) DeepCopyInto(out *LibraryRequirements) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LibraryRequirements.
func (in *LibraryRequirements) DeepCopy() *LibraryRequirements {
	if in == nil {
		return nil
	}
	out := new(LibraryRequirements)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LibraryRequirements_STATUS) DeepCopyInto(out *LibraryRequirements_STATUS) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Time != nil {
		in, out := &in.Time, &out.Time
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LibraryRequirements_STATUS.
func (in *LibraryRequirements_STATUS) DeepCopy() *LibraryRequirements_STATUS {
	if in == nil {
		return nil
	}
	out := new(LibraryRequirements_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedIdentity) DeepCopyInto(out *ManagedIdentity) {
	*out = *in
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UserAssignedIdentities != nil {
		in, out := &in.UserAssignedIdentities, &out.UserAssignedIdentities
		*out = make([]UserAssignedIdentityDetails, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedIdentity.
func (in *ManagedIdentity) DeepCopy() *ManagedIdentity {
	if in == nil {
		return nil
	}
	out := new(ManagedIdentity)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedIdentity_STATUS) DeepCopyInto(out *ManagedIdentity_STATUS) {
	*out = *in
	if in.PrincipalId != nil {
		in, out := &in.PrincipalId, &out.PrincipalId
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.TenantId != nil {
		in, out := &in.TenantId, &out.TenantId
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UserAssignedIdentities != nil {
		in, out := &in.UserAssignedIdentities, &out.UserAssignedIdentities
		*out = make(map[string]UserAssignedManagedIdentity_STATUS, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedIdentity_STATUS.
func (in *ManagedIdentity_STATUS) DeepCopy() *ManagedIdentity_STATUS {
	if in == nil {
		return nil
	}
	out := new(ManagedIdentity_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedVirtualNetworkSettings) DeepCopyInto(out *ManagedVirtualNetworkSettings) {
	*out = *in
	if in.AllowedAadTenantIdsForLinking != nil {
		in, out := &in.AllowedAadTenantIdsForLinking, &out.AllowedAadTenantIdsForLinking
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.LinkedAccessCheckOnTargetResource != nil {
		in, out := &in.LinkedAccessCheckOnTargetResource, &out.LinkedAccessCheckOnTargetResource
		*out = new(bool)
		**out = **in
	}
	if in.PreventDataExfiltration != nil {
		in, out := &in.PreventDataExfiltration, &out.PreventDataExfiltration
		*out = new(bool)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedVirtualNetworkSettings.
func (in *ManagedVirtualNetworkSettings) DeepCopy() *ManagedVirtualNetworkSettings {
	if in == nil {
		return nil
	}
	out := new(ManagedVirtualNetworkSettings)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedVirtualNetworkSettings_STATUS) DeepCopyInto(out *ManagedVirtualNetworkSettings_STATUS) {
	*out = *in
	if in.AllowedAadTenantIdsForLinking != nil {
		in, out := &in.AllowedAadTenantIdsForLinking, &out.AllowedAadTenantIdsForLinking
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.LinkedAccessCheckOnTargetResource != nil {
		in, out := &in.LinkedAccessCheckOnTargetResource, &out.LinkedAccessCheckOnTargetResource
		*out = new(bool)
		**out = **in
	}
	if in.PreventDataExfiltration != nil {
		in, out := &in.PreventDataExfiltration, &out.PreventDataExfiltration
		*out = new(bool)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedVirtualNetworkSettings_STATUS.
func (in *ManagedVirtualNetworkSettings_STATUS) DeepCopy() *ManagedVirtualNetworkSettings_STATUS {
	if in == nil {
		return nil
	}
	out := new(ManagedVirtualNetworkSettings_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateEndpointConnection_STATUS) DeepCopyInto(out *PrivateEndpointConnection_STATUS) {
	*out = *in
	if in.Id != nil {
		in, out := &in.Id, &out.Id
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateEndpointConnection_STATUS.
func (in *PrivateEndpointConnection_STATUS) DeepCopy() *PrivateEndpointConnection_STATUS {
	if in == nil {
		return nil
	}
	out := new(PrivateEndpointConnection_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PurviewConfiguration) DeepCopyInto(out *PurviewConfiguration) {
	*out = *in
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PurviewResourceReference != nil {
		in, out := &in.PurviewResourceReference, &out.PurviewResourceReference
		*out = new(genruntime.ResourceReference)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PurviewConfiguration.
func (in *PurviewConfiguration) DeepCopy() *PurviewConfiguration {
	if in == nil {
		return nil
	}
	out := new(PurviewConfiguration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PurviewConfiguration_STATUS) DeepCopyInto(out *PurviewConfiguration_STATUS) {
	*out = *in
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PurviewResourceId != nil {
		in, out := &in.PurviewResourceId, &out.PurviewResourceId
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PurviewConfiguration_STATUS.
func (in *PurviewConfiguration_STATUS) DeepCopy() *PurviewConfiguration_STATUS {
	if in == nil {
		return nil
	}
	out := new(PurviewConfiguration_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkConfigProperties) DeepCopyInto(out *SparkConfigProperties) {
	*out = *in
	if in.ConfigurationType != nil {
		in, out := &in.ConfigurationType, &out.ConfigurationType
		*out = new(string)
		**out = **in
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkConfigProperties.
func (in *SparkConfigProperties) DeepCopy() *SparkConfigProperties {
	if in == nil {
		return nil
	}
	out := new(SparkConfigProperties)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkConfigProperties_STATUS) DeepCopyInto(out *SparkConfigProperties_STATUS) {
	*out = *in
	if in.ConfigurationType != nil {
		in, out := &in.ConfigurationType, &out.ConfigurationType
		*out = new(string)
		**out = **in
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Time != nil {
		in, out := &in.Time, &out.Time
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkConfigProperties_STATUS.
func (in *SparkConfigProperties_STATUS) DeepCopy() *SparkConfigProperties_STATUS {
	if in == nil {
		return nil
	}
	out := new(SparkConfigProperties_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserAssignedIdentityDetails) DeepCopyInto(out *UserAssignedIdentityDetails) {
	*out = *in
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	out.Reference = in.Reference
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserAssignedIdentityDetails.
func (in *UserAssignedIdentityDetails) DeepCopy() *UserAssignedIdentityDetails {
	if in == nil {
		return nil
	}
	out := new(UserAssignedIdentityDetails)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserAssignedManagedIdentity_STATUS) DeepCopyInto(out *UserAssignedManagedIdentity_STATUS) {
	*out = *in
	if in.ClientId != nil {
		in, out := &in.ClientId, &out.ClientId
		*out = new(string)
		**out = **in
	}
	if in.PrincipalId != nil {
		in, out := &in.PrincipalId, &out.PrincipalId
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserAssignedManagedIdentity_STATUS.
func (in *UserAssignedManagedIdentity_STATUS) DeepCopy() *UserAssignedManagedIdentity_STATUS {
	if in == nil {
		return nil
	}
	out := new(UserAssignedManagedIdentity_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualNetworkProfile) DeepCopyInto(out *VirtualNetworkProfile) {
	*out = *in
	if in.ComputeSubnetId != nil {
		in, out := &in.ComputeSubnetId, &out.ComputeSubnetId
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualNetworkProfile.
func (in *VirtualNetworkProfile) DeepCopy() *VirtualNetworkProfile {
	if in == nil {
		return nil
	}
	out := new(VirtualNetworkProfile)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualNetworkProfile_STATUS) DeepCopyInto(out *VirtualNetworkProfile_STATUS) {
	*out = *in
	if in.ComputeSubnetId != nil {
		in, out := &in.ComputeSubnetId, &out.ComputeSubnetId
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualNetworkProfile_STATUS.
func (in *VirtualNetworkProfile_STATUS) DeepCopy() *VirtualNetworkProfile_STATUS {
	if in == nil {
		return nil
	}
	out := new(VirtualNetworkProfile_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Workspace) DeepCopyInto(out *Workspace) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Workspace.
func (in *Workspace) DeepCopy() *Workspace {
	if in == nil {
		return nil
	}
	out := new(Workspace)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Workspace) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceKeyDetails) DeepCopyInto(out *WorkspaceKeyDetails) {
	*out = *in
	if in.KeyVaultUrl != nil {
		in, out := &in.KeyVaultUrl, &out.KeyVaultUrl
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceKeyDetails.
func (in *WorkspaceKeyDetails) DeepCopy() *WorkspaceKeyDetails {
	if in == nil {
		return nil
	}
	out := new(WorkspaceKeyDetails)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceKeyDetails_STATUS) DeepCopyInto(out *WorkspaceKeyDetails_STATUS) {
	*out = *in
	if in.KeyVaultUrl != nil {
		in, out := &in.KeyVaultUrl, &out.KeyVaultUrl
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceKeyDetails_STATUS.
func (in *WorkspaceKeyDetails_STATUS) DeepCopy() *WorkspaceKeyDetails_STATUS {
	if in == nil {
		return nil
	}
	out := new(WorkspaceKeyDetails_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceList) DeepCopyInto(out *WorkspaceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Workspace, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceList.
func (in *WorkspaceList) DeepCopy() *WorkspaceList {
	if in == nil {
		return nil
	}
	out := new(WorkspaceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *WorkspaceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceOperatorSpec) DeepCopyInto(out *WorkspaceOperatorSpec) {
	*out = *in
	if in.ConfigMapExpressions != nil {
		in, out := &in.ConfigMapExpressions, &out.ConfigMapExpressions
		*out = make([]*core.DestinationExpression, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(core.DestinationExpression)
				**out = **in
			}
		}
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.SecretExpressions != nil {
		in, out := &in.SecretExpressions, &out.SecretExpressions
		*out = make([]*core.DestinationExpression, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(core.DestinationExpression)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceOperatorSpec.
func (in *WorkspaceOperatorSpec) DeepCopy() *WorkspaceOperatorSpec {
	if in == nil {
		return nil
	}
	out := new(WorkspaceOperatorSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceRepositoryConfiguration) DeepCopyInto(out *WorkspaceRepositoryConfiguration) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.CollaborationBranch != nil {
		in, out := &in.CollaborationBranch, &out.CollaborationBranch
		*out = new(string)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.LastCommitId != nil {
		in, out := &in.LastCommitId, &out.LastCommitId
		*out = new(string)
		**out = **in
	}
	if in.ProjectName != nil {
		in, out := &in.ProjectName, &out.ProjectName
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RepositoryName != nil {
		in, out := &in.RepositoryName, &out.RepositoryName
		*out = new(string)
		**out = **in
	}
	if in.RootFolder != nil {
		in, out := &in.RootFolder, &out.RootFolder
		*out = new(string)
		**out = **in
	}
	if in.TenantId != nil {
		in, out := &in.TenantId, &out.TenantId
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceRepositoryConfiguration.
func (in *WorkspaceRepositoryConfiguration) DeepCopy() *WorkspaceRepositoryConfiguration {
	if in == nil {
		return nil
	}
	out := new(WorkspaceRepositoryConfiguration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceRepositoryConfiguration_STATUS) DeepCopyInto(out *WorkspaceRepositoryConfiguration_STATUS) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.CollaborationBranch != nil {
		in, out := &in.CollaborationBranch, &out.CollaborationBranch
		*out = new(string)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.LastCommitId != nil {
		in, out := &in.LastCommitId, &out.LastCommitId
		*out = new(string)
		**out = **in
	}
	if in.ProjectName != nil {
		in, out := &in.ProjectName, &out.ProjectName
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RepositoryName != nil {
		in, out := &in.RepositoryName, &out.RepositoryName
		*out = new(string)
		**out = **in
	}
	if in.RootFolder != nil {
		in, out := &in.RootFolder, &out.RootFolder
		*out = new(string)
		**out = **in
	}
	if in.TenantId != nil {
		in, out := &in.TenantId, &out.TenantId
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceRepositoryConfiguration_STATUS.
func (in *WorkspaceRepositoryConfiguration_STATUS) DeepCopy() *WorkspaceRepositoryConfiguration_STATUS {
	if in == nil {
		return nil
	}
	out := new(WorkspaceRepositoryConfiguration_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Workspace_STATUS) DeepCopyInto(out *Workspace_STATUS) {
	*out = *in
	if in.AdlaResourceId != nil {
		in, out := &in.AdlaResourceId, &out.AdlaResourceId
		*out = new(string)
		**out = **in
	}
	if in.AzureADOnlyAuthentication != nil {
		in, out := &in.AzureADOnlyAuthentication, &out.AzureADOnlyAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]conditions.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ConnectivityEndpoints != nil {
		in, out := &in.ConnectivityEndpoints, &out.ConnectivityEndpoints
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.CspWorkspaceAdminProperties != nil {
		in, out := &in.CspWorkspaceAdminProperties, &out.CspWorkspaceAdminProperties
		*out = new(CspWorkspaceAdminProperties_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.DefaultDataLakeStorage != nil {
		in, out := &in.DefaultDataLakeStorage, &out.DefaultDataLakeStorage
		*out = new(DataLakeStorageAccountDetails_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Encryption != nil {
		in, out := &in.Encryption, &out.Encryption
		*out = new(EncryptionDetails_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.ExtraProperties != nil {
		in, out := &in.ExtraProperties, &out.ExtraProperties
		*out = make(map[string]v1.JSON, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Id != nil {
		in, out := &in.Id, &out.Id
		*out = new(string)
		**out = **in
	}
	if in.Identity != nil {
		in, out := &in.Identity, &out.Identity
		*out = new(ManagedIdentity_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.ManagedResourceGroupName != nil {
		in, out := &in.ManagedResourceGroupName, &out.ManagedResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.ManagedVirtualNetwork != nil {
		in, out := &in.ManagedVirtualNetwork, &out.ManagedVirtualNetwork
		*out = new(string)
		**out = **in
	}
	if in.ManagedVirtualNetworkSettings != nil {
		in, out := &in.ManagedVirtualNetworkSettings, &out.ManagedVirtualNetworkSettings
		*out = new(ManagedVirtualNetworkSettings_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateEndpointConnections != nil {
		in, out := &in.PrivateEndpointConnections, &out.PrivateEndpointConnections
		*out = make([]PrivateEndpointConnection_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ProvisioningState != nil {
		in, out := &in.ProvisioningState, &out.ProvisioningState
		*out = new(string)
		**out = **in
	}
	if in.PublicNetworkAccess != nil {
		in, out := &in.PublicNetworkAccess, &out.PublicNetworkAccess
		*out = new(string)
		**out = **in
	}
	if in.PurviewConfiguration != nil {
		in, out := &in.PurviewConfiguration, &out.PurviewConfiguration
		*out = new(PurviewConfiguration_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]v1.JSON, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.SqlAdministratorLogin != nil {
		in, out := &in.SqlAdministratorLogin, &out.SqlAdministratorLogin
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.TrustedServiceBypassEnabled != nil {
		in, out := &in.TrustedServiceBypassEnabled, &out.TrustedServiceBypassEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.VirtualNetworkProfile != nil {
		in, out := &in.VirtualNetworkProfile, &out.VirtualNetworkProfile
		*out = new(VirtualNetworkProfile_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkspaceRepositoryConfiguration != nil {
		in, out := &in.WorkspaceRepositoryConfiguration, &out.WorkspaceRepositoryConfiguration
		*out = new(WorkspaceRepositoryConfiguration_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkspaceUID != nil {
		in, out := &in.WorkspaceUID, &out.WorkspaceUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Workspace_STATUS.
func (in *Workspace_STATUS) DeepCopy() *Workspace_STATUS {
	if in == nil {
		return nil
	}
	out := new(Workspace_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Workspace_Spec) DeepCopyInto(out *Workspace_Spec) {
	*out = *in
	if in.AzureADOnlyAuthentication != nil {
		in, out := &in.AzureADOnlyAuthentication, &out.AzureADOnlyAuthentication
		*out = new(bool)
		**out = **in
	}
	if in.CspWorkspaceAdminProperties != nil {
		in, out := &in.CspWorkspaceAdminProperties, &out.CspWorkspaceAdminProperties
		*out = new(CspWorkspaceAdminProperties)
		(*in).DeepCopyInto(*out)
	}
	if in.DefaultDataLakeStorage != nil {
		in, out := &in.DefaultDataLakeStorage, &out.DefaultDataLakeStorage
		*out = new(DataLakeStorageAccountDetails)
		(*in).DeepCopyInto(*out)
	}
	if in.Encryption != nil {
		in, out := &in.Encryption, &out.Encryption
		*out = new(EncryptionDetails)
		(*in).DeepCopyInto(*out)
	}
	if in.Identity != nil {
		in, out := &in.Identity, &out.Identity
		*out = new(ManagedIdentity)
		(*in).DeepCopyInto(*out)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.ManagedResourceGroupName != nil {
		in, out := &in.ManagedResourceGroupName, &out.ManagedResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.ManagedVirtualNetwork != nil {
		in, out := &in.ManagedVirtualNetwork, &out.ManagedVirtualNetwork
		*out = new(string)
		**out = **in
	}
	if in.ManagedVirtualNetworkSettings != nil {
		in, out := &in.ManagedVirtualNetworkSettings, &out.ManagedVirtualNetworkSettings
		*out = new(ManagedVirtualNetworkSettings)
		(*in).DeepCopyInto(*out)
	}
	if in.OperatorSpec != nil {
		in, out := &in.OperatorSpec, &out.OperatorSpec
		*out = new(WorkspaceOperatorSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(genruntime.KnownResourceReference)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PublicNetworkAccess != nil {
		in, out := &in.PublicNetworkAccess, &out.PublicNetworkAccess
		*out = new(string)
		**out = **in
	}
	if in.PurviewConfiguration != nil {
		in, out := &in.PurviewConfiguration, &out.PurviewConfiguration
		*out = new(PurviewConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.SqlAdministratorLogin != nil {
		in, out := &in.SqlAdministratorLogin, &out.SqlAdministratorLogin
		*out = new(string)
		**out = **in
	}
	if in.SqlAdministratorLoginPassword != nil {
		in, out := &in.SqlAdministratorLoginPassword, &out.SqlAdministratorLoginPassword
		*out = new(genruntime.SecretReference)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.TrustedServiceBypassEnabled != nil {
		in, out := &in.TrustedServiceBypassEnabled, &out.TrustedServiceBypassEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VirtualNetworkProfile != nil {
		in, out := &in.VirtualNetworkProfile, &out.VirtualNetworkProfile
		*out = new(VirtualNetworkProfile)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkspaceRepositoryConfiguration != nil {
		in, out := &in.WorkspaceRepositoryConfiguration, &out.WorkspaceRepositoryConfiguration
		*out = new(WorkspaceRepositoryConfiguration)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Workspace_Spec.
func (in *Workspace_Spec) DeepCopy() *Workspace_Spec {
	if in == nil {
		return nil
	}
	out := new(Workspace_Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspacesBigDataPool) DeepCopyInto(out *WorkspacesBigDataPool) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspacesBigDataPool.
func (in *WorkspacesBigDataPool) DeepCopy() *WorkspacesBigDataPool {
	if in == nil {
		return nil
	}
	out := new(WorkspacesBigDataPool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *WorkspacesBigDataPool) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspacesBigDataPoolList) DeepCopyInto(out *WorkspacesBigDataPoolList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]WorkspacesBigDataPool, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspacesBigDataPoolList.
func (in *WorkspacesBigDataPoolList) DeepCopy() *WorkspacesBigDataPoolList {
	if in == nil {
		return nil
	}
	out := new(WorkspacesBigDataPoolList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *WorkspacesBigDataPoolList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspacesBigDataPoolOperatorSpec) DeepCopyInto(out *WorkspacesBigDataPoolOperatorSpec) {
	*out = *in
	if in.ConfigMapExpressions != nil {
		in, out := &in.ConfigMapExpressions, &out.ConfigMapExpressions
		*out = make([]*core.DestinationExpression, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(core.DestinationExpression)
				**out = **in
			}
		}
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.SecretExpressions != nil {
		in, out := &in.SecretExpressions, &out.SecretExpressions
		*out = make([]*core.DestinationExpression, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(core.DestinationExpression)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspacesBigDataPoolOperatorSpec.
func (in *WorkspacesBigDataPoolOperatorSpec) DeepCopy() *WorkspacesBigDataPoolOperatorSpec {
	if in == nil {
		return nil
	}
	out := new(WorkspacesBigDataPoolOperatorSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspacesBigDataPool_STATUS) DeepCopyInto(out *WorkspacesBigDataPool_STATUS) {
	*out = *in
	if in.AutoPause != nil {
		in, out := &in.AutoPause, &out.AutoPause
		*out = new(AutoPauseProperties_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.AutoScale != nil {
		in, out := &in.AutoScale, &out.AutoScale
		*out = new(AutoScaleProperties_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.CacheSize != nil {
		in, out := &in.CacheSize, &out.CacheSize
		*out = new(int)
		**out = **in
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]conditions.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CreationDate != nil {
		in, out := &in.CreationDate, &out.CreationDate
		*out = new(string)
		**out = **in
	}
	if in.CustomLibraries != nil {
		in, out := &in.CustomLibraries, &out.CustomLibraries
		*out = make([]LibraryInfo_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultSparkLogFolder != nil {
		in, out := &in.DefaultSparkLogFolder, &out.DefaultSparkLogFolder
		*out = new(string)
		**out = **in
	}
	if in.DynamicExecutorAllocation != nil {
		in, out := &in.DynamicExecutorAllocation, &out.DynamicExecutorAllocation
		*out = new(DynamicExecutorAllocation_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Id != nil {
		in, out := &in.Id, &out.Id
		*out = new(string)
		**out = **in
	}
	if in.IsAutotuneEnabled != nil {
		in, out := &in.IsAutotuneEnabled, &out.IsAutotuneEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsComputeIsolationEnabled != nil {
		in, out := &in.IsComputeIsolationEnabled, &out.IsComputeIsolationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LastSucceededTimestamp != nil {
		in, out := &in.LastSucceededTimestamp, &out.LastSucceededTimestamp
		*out = new(string)
		**out = **in
	}
	if in.LibraryRequirements != nil {
		in, out := &in.LibraryRequirements, &out.LibraryRequirements
		*out = new(LibraryRequirements_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(int)
		**out = **in
	}
	if in.NodeSize != nil {
		in, out := &in.NodeSize, &out.NodeSize
		*out = new(string)
		**out = **in
	}
	if in.NodeSizeFamily != nil {
		in, out := &in.NodeSizeFamily, &out.NodeSizeFamily
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ProvisioningState != nil {
		in, out := &in.ProvisioningState, &out.ProvisioningState
		*out = new(string)
		**out = **in
	}
	if in.SessionLevelPackagesEnabled != nil {
		in, out := &in.SessionLevelPackagesEnabled, &out.SessionLevelPackagesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SparkConfigProperties != nil {
		in, out := &in.SparkConfigProperties, &out.SparkConfigProperties
		*out = new(SparkConfigProperties_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkEventsFolder != nil {
		in, out := &in.SparkEventsFolder, &out.SparkEventsFolder
		*out = new(string)
		**out = **in
	}
	if in.SparkVersion != nil {
		in, out := &in.SparkVersion, &out.SparkVersion
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspacesBigDataPool_STATUS.
func (in *WorkspacesBigDataPool_STATUS) DeepCopy() *WorkspacesBigDataPool_STATUS {
	if in == nil {
		return nil
	}
	out := new(WorkspacesBigDataPool_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspacesBigDataPool_Spec) DeepCopyInto(out *WorkspacesBigDataPool_Spec) {
	*out = *in
	if in.AutoPause != nil {
		in, out := &in.AutoPause, &out.AutoPause
		*out = new(AutoPauseProperties)
		(*in).DeepCopyInto(*out)
	}
	if in.AutoScale != nil {
		in, out := &in.AutoScale, &out.AutoScale
		*out = new(AutoScaleProperties)
		(*in).DeepCopyInto(*out)
	}
	if in.CacheSize != nil {
		in, out := &in.CacheSize, &out.CacheSize
		*out = new(int)
		**out = **in
	}
	if in.CustomLibraries != nil {
		in, out := &in.CustomLibraries, &out.CustomLibraries
		*out = make([]LibraryInfo, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultSparkLogFolder != nil {
		in, out := &in.DefaultSparkLogFolder, &out.DefaultSparkLogFolder
		*out = new(string)
		**out = **in
	}
	if in.DynamicExecutorAllocation != nil {
		in, out := &in.DynamicExecutorAllocation, &out.DynamicExecutorAllocation
		*out = new(DynamicExecutorAllocation)
		(*in).DeepCopyInto(*out)
	}
	if in.IsAutotuneEnabled != nil {
		in, out := &in.IsAutotuneEnabled, &out.IsAutotuneEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsComputeIsolationEnabled != nil {
		in, out := &in.IsComputeIsolationEnabled, &out.IsComputeIsolationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LibraryRequirements != nil {
		in, out := &in.LibraryRequirements, &out.LibraryRequirements
		*out = new(LibraryRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(int)
		**out = **in
	}
	if in.NodeSize != nil {
		in, out := &in.NodeSize, &out.NodeSize
		*out = new(string)
		**out = **in
	}
	if in.NodeSizeFamily != nil {
		in, out := &in.NodeSizeFamily, &out.NodeSizeFamily
		*out = new(string)
		**out = **in
	}
	if in.OperatorSpec != nil {
		in, out := &in.OperatorSpec, &out.OperatorSpec
		*out = new(WorkspacesBigDataPoolOperatorSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(genruntime.KnownResourceReference)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ProvisioningState != nil {
		in, out := &in.ProvisioningState, &out.ProvisioningState
		*out = new(string)
		**out = **in
	}
	if in.SessionLevelPackagesEnabled != nil {
		in, out := &in.SessionLevelPackagesEnabled, &out.SessionLevelPackagesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SparkConfigProperties != nil {
		in, out := &in.SparkConfigProperties, &out.SparkConfigProperties
		*out = new(SparkConfigProperties)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkEventsFolder != nil {
		in, out := &in.SparkEventsFolder, &out.SparkEventsFolder
		*out = new(string)
		**out = **in
	}
	if in.SparkVersion != nil {
		in, out := &in.SparkVersion, &out.SparkVersion
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspacesBigDataPool_Spec.
func (in *WorkspacesBigDataPool_Spec) DeepCopy() *WorkspacesBigDataPool_Spec {
	if in == nil {
		return nil
	}
	out := new(WorkspacesBigDataPool_Spec)
	in.DeepCopyInto(out)
	return out
}
