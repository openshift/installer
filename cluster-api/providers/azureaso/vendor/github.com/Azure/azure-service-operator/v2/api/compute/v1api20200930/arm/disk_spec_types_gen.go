// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type Disk_Spec struct {
	// ExtendedLocation: The extended location where the disk will be created. Extended location cannot be changed.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// Location: Resource location
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: Disk resource properties.
	Properties *DiskProperties `json:"properties,omitempty"`

	// Sku: The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
	Sku *DiskSku `json:"sku,omitempty"`

	// Tags: Resource tags
	Tags map[string]string `json:"tags,omitempty"`

	// Zones: The Logical zone list for Disk.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMResourceSpec = &Disk_Spec{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-09-30"
func (disk Disk_Spec) GetAPIVersion() string {
	return "2020-09-30"
}

// GetName returns the Name of the resource
func (disk *Disk_Spec) GetName() string {
	return disk.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Compute/disks"
func (disk *Disk_Spec) GetType() string {
	return "Microsoft.Compute/disks"
}

// Disk resource properties.
type DiskProperties struct {
	// BurstingEnabled: Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is
	// disabled by default. Does not apply to Ultra disks.
	BurstingEnabled *bool `json:"burstingEnabled,omitempty"`

	// CreationData: Disk source information. CreationData information cannot be changed after the disk has been created.
	CreationData *CreationData `json:"creationData,omitempty"`
	DiskAccessId *string       `json:"diskAccessId,omitempty"`

	// DiskIOPSReadOnly: The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One
	// operation can transfer between 4k and 256k bytes.
	DiskIOPSReadOnly *int `json:"diskIOPSReadOnly,omitempty"`

	// DiskIOPSReadWrite: The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can
	// transfer between 4k and 256k bytes.
	DiskIOPSReadWrite *int `json:"diskIOPSReadWrite,omitempty"`

	// DiskMBpsReadOnly: The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly.
	// MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
	DiskMBpsReadOnly *int `json:"diskMBpsReadOnly,omitempty"`

	// DiskMBpsReadWrite: The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes
	// per second - MB here uses the ISO notation, of powers of 10.
	DiskMBpsReadWrite *int `json:"diskMBpsReadWrite,omitempty"`

	// DiskSizeGB: If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to
	// create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only
	// allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB *int `json:"diskSizeGB,omitempty"`

	// Encryption: Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *Encryption `json:"encryption,omitempty"`

	// EncryptionSettingsCollection: Encryption settings collection used for Azure Disk Encryption, can contain multiple
	// encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollection `json:"encryptionSettingsCollection,omitempty"`

	// HyperVGeneration: The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *DiskProperties_HyperVGeneration `json:"hyperVGeneration,omitempty"`

	// MaxShares: The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a
	// disk that can be mounted on multiple VMs at the same time.
	MaxShares *int `json:"maxShares,omitempty"`

	// NetworkAccessPolicy: Policy for accessing the disk via network.
	NetworkAccessPolicy *NetworkAccessPolicy `json:"networkAccessPolicy,omitempty"`

	// OsType: The Operating System type.
	OsType *DiskProperties_OsType `json:"osType,omitempty"`

	// PurchasePlan: Purchase plan information for the the image from which the OS disk was created. E.g. - {name:
	// 2019-Datacenter, publisher: MicrosoftWindowsServer, product: WindowsServer}
	PurchasePlan *PurchasePlan `json:"purchasePlan,omitempty"`

	// Tier: Performance tier of the disk (e.g, P4, S10) as described here:
	// https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks.
	Tier *string `json:"tier,omitempty"`
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSku struct {
	// Name: The sku name.
	Name *DiskSku_Name `json:"name,omitempty"`
}

// The complex type of the extended location.
type ExtendedLocation struct {
	// Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	// Type: The type of the extended location.
	Type *ExtendedLocationType `json:"type,omitempty"`
}

// Data used when creating a disk.
type CreationData struct {
	// CreateOption: This enumerates the possible sources of a disk's creation.
	CreateOption *CreationData_CreateOption `json:"createOption,omitempty"`

	// GalleryImageReference: Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of
	// the shared galley image version from which to create a disk.
	GalleryImageReference *ImageDiskReference `json:"galleryImageReference,omitempty"`

	// ImageReference: Disk source information.
	ImageReference *ImageDiskReference `json:"imageReference,omitempty"`

	// LogicalSectorSize: Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
	LogicalSectorSize *int    `json:"logicalSectorSize,omitempty"`
	SourceResourceId  *string `json:"sourceResourceId,omitempty"`

	// SourceUri: If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri *string `json:"sourceUri,omitempty"`

	// StorageAccountId: Required if createOption is Import. The Azure Resource Manager identifier of the storage account
	// containing the blob to import as a disk.
	StorageAccountId *string `json:"storageAccountId,omitempty"`

	// UploadSizeBytes: If createOption is Upload, this is the size of the contents of the upload including the VHD footer.
	// This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512
	// bytes for the VHD footer).
	UploadSizeBytes *int `json:"uploadSizeBytes,omitempty"`
}

// +kubebuilder:validation:Enum={"V1","V2"}
type DiskProperties_HyperVGeneration string

const (
	DiskProperties_HyperVGeneration_V1 = DiskProperties_HyperVGeneration("V1")
	DiskProperties_HyperVGeneration_V2 = DiskProperties_HyperVGeneration("V2")
)

// Mapping from string to DiskProperties_HyperVGeneration
var diskProperties_HyperVGeneration_Values = map[string]DiskProperties_HyperVGeneration{
	"v1": DiskProperties_HyperVGeneration_V1,
	"v2": DiskProperties_HyperVGeneration_V2,
}

// +kubebuilder:validation:Enum={"Linux","Windows"}
type DiskProperties_OsType string

const (
	DiskProperties_OsType_Linux   = DiskProperties_OsType("Linux")
	DiskProperties_OsType_Windows = DiskProperties_OsType("Windows")
)

// Mapping from string to DiskProperties_OsType
var diskProperties_OsType_Values = map[string]DiskProperties_OsType{
	"linux":   DiskProperties_OsType_Linux,
	"windows": DiskProperties_OsType_Windows,
}

// +kubebuilder:validation:Enum={"Premium_LRS","StandardSSD_LRS","Standard_LRS","UltraSSD_LRS"}
type DiskSku_Name string

const (
	DiskSku_Name_Premium_LRS     = DiskSku_Name("Premium_LRS")
	DiskSku_Name_StandardSSD_LRS = DiskSku_Name("StandardSSD_LRS")
	DiskSku_Name_Standard_LRS    = DiskSku_Name("Standard_LRS")
	DiskSku_Name_UltraSSD_LRS    = DiskSku_Name("UltraSSD_LRS")
)

// Mapping from string to DiskSku_Name
var diskSku_Name_Values = map[string]DiskSku_Name{
	"premium_lrs":     DiskSku_Name_Premium_LRS,
	"standardssd_lrs": DiskSku_Name_StandardSSD_LRS,
	"standard_lrs":    DiskSku_Name_Standard_LRS,
	"ultrassd_lrs":    DiskSku_Name_UltraSSD_LRS,
}

// Encryption at rest settings for disk or snapshot
type Encryption struct {
	DiskEncryptionSetId *string `json:"diskEncryptionSetId,omitempty"`

	// Type: The type of key used to encrypt the data of the disk.
	Type *EncryptionType `json:"type,omitempty"`
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollection struct {
	// Enabled: Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set
	// this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is
	// null in the request object, the existing settings remain unchanged.
	Enabled *bool `json:"enabled,omitempty"`

	// EncryptionSettings: A collection of encryption settings, one for each disk volume.
	EncryptionSettings []EncryptionSettingsElement `json:"encryptionSettings,omitempty"`

	// EncryptionSettingsVersion: Describes what type of encryption is used for the disks. Once this field is set, it cannot be
	// overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
	EncryptionSettingsVersion *string `json:"encryptionSettingsVersion,omitempty"`
}

// The type of extendedLocation.
// +kubebuilder:validation:Enum={"EdgeZone"}
type ExtendedLocationType string

const ExtendedLocationType_EdgeZone = ExtendedLocationType("EdgeZone")

// Mapping from string to ExtendedLocationType
var extendedLocationType_Values = map[string]ExtendedLocationType{
	"edgezone": ExtendedLocationType_EdgeZone,
}

// Policy for accessing the disk via network.
// +kubebuilder:validation:Enum={"AllowAll","AllowPrivate","DenyAll"}
type NetworkAccessPolicy string

const (
	NetworkAccessPolicy_AllowAll     = NetworkAccessPolicy("AllowAll")
	NetworkAccessPolicy_AllowPrivate = NetworkAccessPolicy("AllowPrivate")
	NetworkAccessPolicy_DenyAll      = NetworkAccessPolicy("DenyAll")
)

// Mapping from string to NetworkAccessPolicy
var networkAccessPolicy_Values = map[string]NetworkAccessPolicy{
	"allowall":     NetworkAccessPolicy_AllowAll,
	"allowprivate": NetworkAccessPolicy_AllowPrivate,
	"denyall":      NetworkAccessPolicy_DenyAll,
}

// Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
type PurchasePlan struct {
	// Name: The plan ID.
	Name *string `json:"name,omitempty"`

	// Product: Specifies the product of the image from the marketplace. This is the same value as Offer under the
	// imageReference element.
	Product *string `json:"product,omitempty"`

	// PromotionCode: The Offer Promotion Code.
	PromotionCode *string `json:"promotionCode,omitempty"`

	// Publisher: The publisher ID.
	Publisher *string `json:"publisher,omitempty"`
}

// +kubebuilder:validation:Enum={"Attach","Copy","Empty","FromImage","Import","Restore","Upload"}
type CreationData_CreateOption string

const (
	CreationData_CreateOption_Attach    = CreationData_CreateOption("Attach")
	CreationData_CreateOption_Copy      = CreationData_CreateOption("Copy")
	CreationData_CreateOption_Empty     = CreationData_CreateOption("Empty")
	CreationData_CreateOption_FromImage = CreationData_CreateOption("FromImage")
	CreationData_CreateOption_Import    = CreationData_CreateOption("Import")
	CreationData_CreateOption_Restore   = CreationData_CreateOption("Restore")
	CreationData_CreateOption_Upload    = CreationData_CreateOption("Upload")
)

// Mapping from string to CreationData_CreateOption
var creationData_CreateOption_Values = map[string]CreationData_CreateOption{
	"attach":    CreationData_CreateOption_Attach,
	"copy":      CreationData_CreateOption_Copy,
	"empty":     CreationData_CreateOption_Empty,
	"fromimage": CreationData_CreateOption_FromImage,
	"import":    CreationData_CreateOption_Import,
	"restore":   CreationData_CreateOption_Restore,
	"upload":    CreationData_CreateOption_Upload,
}

// Encryption settings for one disk volume.
type EncryptionSettingsElement struct {
	// DiskEncryptionKey: Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReference `json:"diskEncryptionKey,omitempty"`

	// KeyEncryptionKey: Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when
	// provided is used to unwrap the disk encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReference `json:"keyEncryptionKey,omitempty"`
}

// The type of key used to encrypt the data of the disk.
// +kubebuilder:validation:Enum={"EncryptionAtRestWithCustomerKey","EncryptionAtRestWithPlatformAndCustomerKeys","EncryptionAtRestWithPlatformKey"}
type EncryptionType string

const (
	EncryptionType_EncryptionAtRestWithCustomerKey             = EncryptionType("EncryptionAtRestWithCustomerKey")
	EncryptionType_EncryptionAtRestWithPlatformAndCustomerKeys = EncryptionType("EncryptionAtRestWithPlatformAndCustomerKeys")
	EncryptionType_EncryptionAtRestWithPlatformKey             = EncryptionType("EncryptionAtRestWithPlatformKey")
)

// Mapping from string to EncryptionType
var encryptionType_Values = map[string]EncryptionType{
	"encryptionatrestwithcustomerkey":             EncryptionType_EncryptionAtRestWithCustomerKey,
	"encryptionatrestwithplatformandcustomerkeys": EncryptionType_EncryptionAtRestWithPlatformAndCustomerKeys,
	"encryptionatrestwithplatformkey":             EncryptionType_EncryptionAtRestWithPlatformKey,
}

// The source image used for creating the disk.
type ImageDiskReference struct {
	Id *string `json:"id,omitempty"`

	// Lun: If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the
	// image to use. For OS disks, this field is null.
	Lun *int `json:"lun,omitempty"`
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReference struct {
	// KeyUrl: Url pointing to a key or secret in KeyVault
	KeyUrl *string `json:"keyUrl,omitempty"`

	// SourceVault: Resource id of the KeyVault containing the key or secret
	SourceVault *SourceVault `json:"sourceVault,omitempty"`
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReference struct {
	// SecretUrl: Url pointing to a key or secret in KeyVault
	SecretUrl *string `json:"secretUrl,omitempty"`

	// SourceVault: Resource id of the KeyVault containing the key or secret
	SourceVault *SourceVault `json:"sourceVault,omitempty"`
}

// The vault id is an Azure Resource Manager Resource id in the form
// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVault struct {
	Id *string `json:"id,omitempty"`
}
