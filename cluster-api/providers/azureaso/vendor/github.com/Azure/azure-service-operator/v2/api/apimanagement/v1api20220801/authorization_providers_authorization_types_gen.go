// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220801

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/apimanagement/v1api20220801/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/apimanagement/v1api20220801/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /apimanagement/resource-manager/Microsoft.ApiManagement/stable/2022-08-01/apimauthorizationproviders.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationProviders/{authorizationProviderId}/authorizations/{authorizationId}
type AuthorizationProvidersAuthorization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuthorizationProvidersAuthorization_Spec   `json:"spec,omitempty"`
	Status            AuthorizationProvidersAuthorization_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &AuthorizationProvidersAuthorization{}

// GetConditions returns the conditions of the resource
func (authorization *AuthorizationProvidersAuthorization) GetConditions() conditions.Conditions {
	return authorization.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (authorization *AuthorizationProvidersAuthorization) SetConditions(conditions conditions.Conditions) {
	authorization.Status.Conditions = conditions
}

var _ conversion.Convertible = &AuthorizationProvidersAuthorization{}

// ConvertFrom populates our AuthorizationProvidersAuthorization from the provided hub AuthorizationProvidersAuthorization
func (authorization *AuthorizationProvidersAuthorization) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.AuthorizationProvidersAuthorization)
	if !ok {
		return fmt.Errorf("expected apimanagement/v1api20220801/storage/AuthorizationProvidersAuthorization but received %T instead", hub)
	}

	return authorization.AssignProperties_From_AuthorizationProvidersAuthorization(source)
}

// ConvertTo populates the provided hub AuthorizationProvidersAuthorization from our AuthorizationProvidersAuthorization
func (authorization *AuthorizationProvidersAuthorization) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.AuthorizationProvidersAuthorization)
	if !ok {
		return fmt.Errorf("expected apimanagement/v1api20220801/storage/AuthorizationProvidersAuthorization but received %T instead", hub)
	}

	return authorization.AssignProperties_To_AuthorizationProvidersAuthorization(destination)
}

// +kubebuilder:webhook:path=/mutate-apimanagement-azure-com-v1api20220801-authorizationprovidersauthorization,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=apimanagement.azure.com,resources=authorizationprovidersauthorizations,verbs=create;update,versions=v1api20220801,name=default.v1api20220801.authorizationprovidersauthorizations.apimanagement.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &AuthorizationProvidersAuthorization{}

// Default applies defaults to the AuthorizationProvidersAuthorization resource
func (authorization *AuthorizationProvidersAuthorization) Default() {
	authorization.defaultImpl()
	var temp any = authorization
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (authorization *AuthorizationProvidersAuthorization) defaultAzureName() {
	if authorization.Spec.AzureName == "" {
		authorization.Spec.AzureName = authorization.Name
	}
}

// defaultImpl applies the code generated defaults to the AuthorizationProvidersAuthorization resource
func (authorization *AuthorizationProvidersAuthorization) defaultImpl() {
	authorization.defaultAzureName()
}

var _ configmaps.Exporter = &AuthorizationProvidersAuthorization{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (authorization *AuthorizationProvidersAuthorization) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if authorization.Spec.OperatorSpec == nil {
		return nil
	}
	return authorization.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &AuthorizationProvidersAuthorization{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (authorization *AuthorizationProvidersAuthorization) SecretDestinationExpressions() []*core.DestinationExpression {
	if authorization.Spec.OperatorSpec == nil {
		return nil
	}
	return authorization.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &AuthorizationProvidersAuthorization{}

// InitializeSpec initializes the spec for this resource from the given status
func (authorization *AuthorizationProvidersAuthorization) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*AuthorizationProvidersAuthorization_STATUS); ok {
		return authorization.Spec.Initialize_From_AuthorizationProvidersAuthorization_STATUS(s)
	}

	return fmt.Errorf("expected Status of type AuthorizationProvidersAuthorization_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &AuthorizationProvidersAuthorization{}

// AzureName returns the Azure name of the resource
func (authorization *AuthorizationProvidersAuthorization) AzureName() string {
	return authorization.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2022-08-01"
func (authorization AuthorizationProvidersAuthorization) GetAPIVersion() string {
	return "2022-08-01"
}

// GetResourceScope returns the scope of the resource
func (authorization *AuthorizationProvidersAuthorization) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (authorization *AuthorizationProvidersAuthorization) GetSpec() genruntime.ConvertibleSpec {
	return &authorization.Spec
}

// GetStatus returns the status of this resource
func (authorization *AuthorizationProvidersAuthorization) GetStatus() genruntime.ConvertibleStatus {
	return &authorization.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (authorization *AuthorizationProvidersAuthorization) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ApiManagement/service/authorizationProviders/authorizations"
func (authorization *AuthorizationProvidersAuthorization) GetType() string {
	return "Microsoft.ApiManagement/service/authorizationProviders/authorizations"
}

// NewEmptyStatus returns a new empty (blank) status
func (authorization *AuthorizationProvidersAuthorization) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &AuthorizationProvidersAuthorization_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (authorization *AuthorizationProvidersAuthorization) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(authorization.Spec)
	return authorization.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (authorization *AuthorizationProvidersAuthorization) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*AuthorizationProvidersAuthorization_STATUS); ok {
		authorization.Status = *st
		return nil
	}

	// Convert status to required version
	var st AuthorizationProvidersAuthorization_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	authorization.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-apimanagement-azure-com-v1api20220801-authorizationprovidersauthorization,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=apimanagement.azure.com,resources=authorizationprovidersauthorizations,verbs=create;update,versions=v1api20220801,name=validate.v1api20220801.authorizationprovidersauthorizations.apimanagement.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &AuthorizationProvidersAuthorization{}

// ValidateCreate validates the creation of the resource
func (authorization *AuthorizationProvidersAuthorization) ValidateCreate() (admission.Warnings, error) {
	validations := authorization.createValidations()
	var temp any = authorization
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (authorization *AuthorizationProvidersAuthorization) ValidateDelete() (admission.Warnings, error) {
	validations := authorization.deleteValidations()
	var temp any = authorization
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (authorization *AuthorizationProvidersAuthorization) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := authorization.updateValidations()
	var temp any = authorization
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (authorization *AuthorizationProvidersAuthorization) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){authorization.validateResourceReferences, authorization.validateOwnerReference, authorization.validateSecretDestinations, authorization.validateConfigMapDestinations}
}

// deleteValidations validates the deletion of the resource
func (authorization *AuthorizationProvidersAuthorization) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (authorization *AuthorizationProvidersAuthorization) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return authorization.validateResourceReferences()
		},
		authorization.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return authorization.validateOwnerReference()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return authorization.validateSecretDestinations()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return authorization.validateConfigMapDestinations()
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (authorization *AuthorizationProvidersAuthorization) validateConfigMapDestinations() (admission.Warnings, error) {
	if authorization.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(authorization, nil, authorization.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (authorization *AuthorizationProvidersAuthorization) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(authorization)
}

// validateResourceReferences validates all resource references
func (authorization *AuthorizationProvidersAuthorization) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&authorization.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (authorization *AuthorizationProvidersAuthorization) validateSecretDestinations() (admission.Warnings, error) {
	if authorization.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(authorization, nil, authorization.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (authorization *AuthorizationProvidersAuthorization) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*AuthorizationProvidersAuthorization)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, authorization)
}

// AssignProperties_From_AuthorizationProvidersAuthorization populates our AuthorizationProvidersAuthorization from the provided source AuthorizationProvidersAuthorization
func (authorization *AuthorizationProvidersAuthorization) AssignProperties_From_AuthorizationProvidersAuthorization(source *storage.AuthorizationProvidersAuthorization) error {

	// ObjectMeta
	authorization.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec AuthorizationProvidersAuthorization_Spec
	err := spec.AssignProperties_From_AuthorizationProvidersAuthorization_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_AuthorizationProvidersAuthorization_Spec() to populate field Spec")
	}
	authorization.Spec = spec

	// Status
	var status AuthorizationProvidersAuthorization_STATUS
	err = status.AssignProperties_From_AuthorizationProvidersAuthorization_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_AuthorizationProvidersAuthorization_STATUS() to populate field Status")
	}
	authorization.Status = status

	// No error
	return nil
}

// AssignProperties_To_AuthorizationProvidersAuthorization populates the provided destination AuthorizationProvidersAuthorization from our AuthorizationProvidersAuthorization
func (authorization *AuthorizationProvidersAuthorization) AssignProperties_To_AuthorizationProvidersAuthorization(destination *storage.AuthorizationProvidersAuthorization) error {

	// ObjectMeta
	destination.ObjectMeta = *authorization.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.AuthorizationProvidersAuthorization_Spec
	err := authorization.Spec.AssignProperties_To_AuthorizationProvidersAuthorization_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_AuthorizationProvidersAuthorization_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.AuthorizationProvidersAuthorization_STATUS
	err = authorization.Status.AssignProperties_To_AuthorizationProvidersAuthorization_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_AuthorizationProvidersAuthorization_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (authorization *AuthorizationProvidersAuthorization) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: authorization.Spec.OriginalVersion(),
		Kind:    "AuthorizationProvidersAuthorization",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /apimanagement/resource-manager/Microsoft.ApiManagement/stable/2022-08-01/apimauthorizationproviders.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/authorizationProviders/{authorizationProviderId}/authorizations/{authorizationId}
type AuthorizationProvidersAuthorizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthorizationProvidersAuthorization `json:"items"`
}

type AuthorizationProvidersAuthorization_Spec struct {
	// AuthorizationType: Authorization type options
	AuthorizationType *AuthorizationContractProperties_AuthorizationType `json:"authorizationType,omitempty"`

	// +kubebuilder:validation:MaxLength=256
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern="^[^*#&+:<>?]+$"
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// Oauth2GrantType: OAuth2 grant type options
	Oauth2GrantType *AuthorizationContractProperties_Oauth2GrantType `json:"oauth2grantType,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *AuthorizationProvidersAuthorizationOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a apimanagement.azure.com/AuthorizationProvider resource
	Owner *genruntime.KnownResourceReference `group:"apimanagement.azure.com" json:"owner,omitempty" kind:"AuthorizationProvider"`

	// Parameters: Authorization parameters
	Parameters *genruntime.SecretMapReference `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &AuthorizationProvidersAuthorization_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (authorization *AuthorizationProvidersAuthorization_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if authorization == nil {
		return nil, nil
	}
	result := &arm.AuthorizationProvidersAuthorization_Spec{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if authorization.AuthorizationType != nil ||
		authorization.Oauth2GrantType != nil ||
		authorization.Parameters != nil {
		result.Properties = &arm.AuthorizationContractProperties{}
	}
	if authorization.AuthorizationType != nil {
		var temp string
		temp = string(*authorization.AuthorizationType)
		authorizationType := arm.AuthorizationContractProperties_AuthorizationType(temp)
		result.Properties.AuthorizationType = &authorizationType
	}
	if authorization.Oauth2GrantType != nil {
		var temp string
		temp = string(*authorization.Oauth2GrantType)
		oauth2GrantType := arm.AuthorizationContractProperties_Oauth2GrantType(temp)
		result.Properties.Oauth2GrantType = &oauth2GrantType
	}
	if authorization.Parameters != nil {
		var temp map[string]string
		tempSecret, err := resolved.ResolvedSecretMaps.Lookup(*authorization.Parameters)
		if err != nil {
			return nil, errors.Wrap(err, "looking up secret for property temp")
		}
		temp = tempSecret
		result.Properties.Parameters = temp
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (authorization *AuthorizationProvidersAuthorization_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.AuthorizationProvidersAuthorization_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (authorization *AuthorizationProvidersAuthorization_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.AuthorizationProvidersAuthorization_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.AuthorizationProvidersAuthorization_Spec, got %T", armInput)
	}

	// Set property "AuthorizationType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AuthorizationType != nil {
			var temp string
			temp = string(*typedInput.Properties.AuthorizationType)
			authorizationType := AuthorizationContractProperties_AuthorizationType(temp)
			authorization.AuthorizationType = &authorizationType
		}
	}

	// Set property "AzureName":
	authorization.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Oauth2GrantType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Oauth2GrantType != nil {
			var temp string
			temp = string(*typedInput.Properties.Oauth2GrantType)
			oauth2GrantType := AuthorizationContractProperties_Oauth2GrantType(temp)
			authorization.Oauth2GrantType = &oauth2GrantType
		}
	}

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	authorization.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// no assignment for property "Parameters"

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &AuthorizationProvidersAuthorization_Spec{}

// ConvertSpecFrom populates our AuthorizationProvidersAuthorization_Spec from the provided source
func (authorization *AuthorizationProvidersAuthorization_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.AuthorizationProvidersAuthorization_Spec)
	if ok {
		// Populate our instance from source
		return authorization.AssignProperties_From_AuthorizationProvidersAuthorization_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.AuthorizationProvidersAuthorization_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = authorization.AssignProperties_From_AuthorizationProvidersAuthorization_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our AuthorizationProvidersAuthorization_Spec
func (authorization *AuthorizationProvidersAuthorization_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.AuthorizationProvidersAuthorization_Spec)
	if ok {
		// Populate destination from our instance
		return authorization.AssignProperties_To_AuthorizationProvidersAuthorization_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.AuthorizationProvidersAuthorization_Spec{}
	err := authorization.AssignProperties_To_AuthorizationProvidersAuthorization_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_AuthorizationProvidersAuthorization_Spec populates our AuthorizationProvidersAuthorization_Spec from the provided source AuthorizationProvidersAuthorization_Spec
func (authorization *AuthorizationProvidersAuthorization_Spec) AssignProperties_From_AuthorizationProvidersAuthorization_Spec(source *storage.AuthorizationProvidersAuthorization_Spec) error {

	// AuthorizationType
	if source.AuthorizationType != nil {
		authorizationType := *source.AuthorizationType
		authorizationTypeTemp := genruntime.ToEnum(authorizationType, authorizationContractProperties_AuthorizationType_Values)
		authorization.AuthorizationType = &authorizationTypeTemp
	} else {
		authorization.AuthorizationType = nil
	}

	// AzureName
	authorization.AzureName = source.AzureName

	// Oauth2GrantType
	if source.Oauth2GrantType != nil {
		oauth2GrantType := *source.Oauth2GrantType
		oauth2GrantTypeTemp := genruntime.ToEnum(oauth2GrantType, authorizationContractProperties_Oauth2GrantType_Values)
		authorization.Oauth2GrantType = &oauth2GrantTypeTemp
	} else {
		authorization.Oauth2GrantType = nil
	}

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec AuthorizationProvidersAuthorizationOperatorSpec
		err := operatorSpec.AssignProperties_From_AuthorizationProvidersAuthorizationOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AuthorizationProvidersAuthorizationOperatorSpec() to populate field OperatorSpec")
		}
		authorization.OperatorSpec = &operatorSpec
	} else {
		authorization.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		authorization.Owner = &owner
	} else {
		authorization.Owner = nil
	}

	// Parameters
	if source.Parameters != nil {
		parameter := source.Parameters.Copy()
		authorization.Parameters = &parameter
	} else {
		authorization.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AuthorizationProvidersAuthorization_Spec populates the provided destination AuthorizationProvidersAuthorization_Spec from our AuthorizationProvidersAuthorization_Spec
func (authorization *AuthorizationProvidersAuthorization_Spec) AssignProperties_To_AuthorizationProvidersAuthorization_Spec(destination *storage.AuthorizationProvidersAuthorization_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AuthorizationType
	if authorization.AuthorizationType != nil {
		authorizationType := string(*authorization.AuthorizationType)
		destination.AuthorizationType = &authorizationType
	} else {
		destination.AuthorizationType = nil
	}

	// AzureName
	destination.AzureName = authorization.AzureName

	// Oauth2GrantType
	if authorization.Oauth2GrantType != nil {
		oauth2GrantType := string(*authorization.Oauth2GrantType)
		destination.Oauth2GrantType = &oauth2GrantType
	} else {
		destination.Oauth2GrantType = nil
	}

	// OperatorSpec
	if authorization.OperatorSpec != nil {
		var operatorSpec storage.AuthorizationProvidersAuthorizationOperatorSpec
		err := authorization.OperatorSpec.AssignProperties_To_AuthorizationProvidersAuthorizationOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AuthorizationProvidersAuthorizationOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = authorization.OriginalVersion()

	// Owner
	if authorization.Owner != nil {
		owner := authorization.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Parameters
	if authorization.Parameters != nil {
		parameter := authorization.Parameters.Copy()
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_AuthorizationProvidersAuthorization_STATUS populates our AuthorizationProvidersAuthorization_Spec from the provided source AuthorizationProvidersAuthorization_STATUS
func (authorization *AuthorizationProvidersAuthorization_Spec) Initialize_From_AuthorizationProvidersAuthorization_STATUS(source *AuthorizationProvidersAuthorization_STATUS) error {

	// AuthorizationType
	if source.AuthorizationType != nil {
		authorizationType := genruntime.ToEnum(string(*source.AuthorizationType), authorizationContractProperties_AuthorizationType_Values)
		authorization.AuthorizationType = &authorizationType
	} else {
		authorization.AuthorizationType = nil
	}

	// Oauth2GrantType
	if source.Oauth2GrantType != nil {
		oauth2GrantType := genruntime.ToEnum(string(*source.Oauth2GrantType), authorizationContractProperties_Oauth2GrantType_Values)
		authorization.Oauth2GrantType = &oauth2GrantType
	} else {
		authorization.Oauth2GrantType = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (authorization *AuthorizationProvidersAuthorization_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (authorization *AuthorizationProvidersAuthorization_Spec) SetAzureName(azureName string) {
	authorization.AzureName = azureName
}

type AuthorizationProvidersAuthorization_STATUS struct {
	// AuthorizationType: Authorization type options
	AuthorizationType *AuthorizationContractProperties_AuthorizationType_STATUS `json:"authorizationType,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Error: Authorization error details.
	Error *AuthorizationError_STATUS `json:"error,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// Oauth2GrantType: OAuth2 grant type options
	Oauth2GrantType *AuthorizationContractProperties_Oauth2GrantType_STATUS `json:"oauth2grantType,omitempty"`

	// Parameters: Authorization parameters
	Parameters map[string]string `json:"parameters,omitempty"`

	// Status: Status of the Authorization
	Status *string `json:"status,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &AuthorizationProvidersAuthorization_STATUS{}

// ConvertStatusFrom populates our AuthorizationProvidersAuthorization_STATUS from the provided source
func (authorization *AuthorizationProvidersAuthorization_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.AuthorizationProvidersAuthorization_STATUS)
	if ok {
		// Populate our instance from source
		return authorization.AssignProperties_From_AuthorizationProvidersAuthorization_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.AuthorizationProvidersAuthorization_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = authorization.AssignProperties_From_AuthorizationProvidersAuthorization_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our AuthorizationProvidersAuthorization_STATUS
func (authorization *AuthorizationProvidersAuthorization_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.AuthorizationProvidersAuthorization_STATUS)
	if ok {
		// Populate destination from our instance
		return authorization.AssignProperties_To_AuthorizationProvidersAuthorization_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.AuthorizationProvidersAuthorization_STATUS{}
	err := authorization.AssignProperties_To_AuthorizationProvidersAuthorization_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &AuthorizationProvidersAuthorization_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (authorization *AuthorizationProvidersAuthorization_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.AuthorizationProvidersAuthorization_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (authorization *AuthorizationProvidersAuthorization_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.AuthorizationProvidersAuthorization_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.AuthorizationProvidersAuthorization_STATUS, got %T", armInput)
	}

	// Set property "AuthorizationType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AuthorizationType != nil {
			var temp string
			temp = string(*typedInput.Properties.AuthorizationType)
			authorizationType := AuthorizationContractProperties_AuthorizationType_STATUS(temp)
			authorization.AuthorizationType = &authorizationType
		}
	}

	// no assignment for property "Conditions"

	// Set property "Error":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Error != nil {
			var error1 AuthorizationError_STATUS
			err := error1.PopulateFromARM(owner, *typedInput.Properties.Error)
			if err != nil {
				return err
			}
			error := error1
			authorization.Error = &error
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		authorization.Id = &id
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		authorization.Name = &name
	}

	// Set property "Oauth2GrantType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Oauth2GrantType != nil {
			var temp string
			temp = string(*typedInput.Properties.Oauth2GrantType)
			oauth2GrantType := AuthorizationContractProperties_Oauth2GrantType_STATUS(temp)
			authorization.Oauth2GrantType = &oauth2GrantType
		}
	}

	// Set property "Parameters":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Parameters != nil {
			authorization.Parameters = make(map[string]string, len(typedInput.Properties.Parameters))
			for key, value := range typedInput.Properties.Parameters {
				authorization.Parameters[key] = value
			}
		}
	}

	// Set property "Status":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			status := *typedInput.Properties.Status
			authorization.Status = &status
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		authorization.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_AuthorizationProvidersAuthorization_STATUS populates our AuthorizationProvidersAuthorization_STATUS from the provided source AuthorizationProvidersAuthorization_STATUS
func (authorization *AuthorizationProvidersAuthorization_STATUS) AssignProperties_From_AuthorizationProvidersAuthorization_STATUS(source *storage.AuthorizationProvidersAuthorization_STATUS) error {

	// AuthorizationType
	if source.AuthorizationType != nil {
		authorizationType := *source.AuthorizationType
		authorizationTypeTemp := genruntime.ToEnum(authorizationType, authorizationContractProperties_AuthorizationType_STATUS_Values)
		authorization.AuthorizationType = &authorizationTypeTemp
	} else {
		authorization.AuthorizationType = nil
	}

	// Conditions
	authorization.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Error
	if source.Error != nil {
		var error AuthorizationError_STATUS
		err := error.AssignProperties_From_AuthorizationError_STATUS(source.Error)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AuthorizationError_STATUS() to populate field Error")
		}
		authorization.Error = &error
	} else {
		authorization.Error = nil
	}

	// Id
	authorization.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	authorization.Name = genruntime.ClonePointerToString(source.Name)

	// Oauth2GrantType
	if source.Oauth2GrantType != nil {
		oauth2GrantType := *source.Oauth2GrantType
		oauth2GrantTypeTemp := genruntime.ToEnum(oauth2GrantType, authorizationContractProperties_Oauth2GrantType_STATUS_Values)
		authorization.Oauth2GrantType = &oauth2GrantTypeTemp
	} else {
		authorization.Oauth2GrantType = nil
	}

	// Parameters
	authorization.Parameters = genruntime.CloneMapOfStringToString(source.Parameters)

	// Status
	authorization.Status = genruntime.ClonePointerToString(source.Status)

	// Type
	authorization.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_AuthorizationProvidersAuthorization_STATUS populates the provided destination AuthorizationProvidersAuthorization_STATUS from our AuthorizationProvidersAuthorization_STATUS
func (authorization *AuthorizationProvidersAuthorization_STATUS) AssignProperties_To_AuthorizationProvidersAuthorization_STATUS(destination *storage.AuthorizationProvidersAuthorization_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AuthorizationType
	if authorization.AuthorizationType != nil {
		authorizationType := string(*authorization.AuthorizationType)
		destination.AuthorizationType = &authorizationType
	} else {
		destination.AuthorizationType = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(authorization.Conditions)

	// Error
	if authorization.Error != nil {
		var error storage.AuthorizationError_STATUS
		err := authorization.Error.AssignProperties_To_AuthorizationError_STATUS(&error)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AuthorizationError_STATUS() to populate field Error")
		}
		destination.Error = &error
	} else {
		destination.Error = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(authorization.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(authorization.Name)

	// Oauth2GrantType
	if authorization.Oauth2GrantType != nil {
		oauth2GrantType := string(*authorization.Oauth2GrantType)
		destination.Oauth2GrantType = &oauth2GrantType
	} else {
		destination.Oauth2GrantType = nil
	}

	// Parameters
	destination.Parameters = genruntime.CloneMapOfStringToString(authorization.Parameters)

	// Status
	destination.Status = genruntime.ClonePointerToString(authorization.Status)

	// Type
	destination.Type = genruntime.ClonePointerToString(authorization.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"OAuth2"}
type AuthorizationContractProperties_AuthorizationType string

const AuthorizationContractProperties_AuthorizationType_OAuth2 = AuthorizationContractProperties_AuthorizationType("OAuth2")

// Mapping from string to AuthorizationContractProperties_AuthorizationType
var authorizationContractProperties_AuthorizationType_Values = map[string]AuthorizationContractProperties_AuthorizationType{
	"oauth2": AuthorizationContractProperties_AuthorizationType_OAuth2,
}

type AuthorizationContractProperties_AuthorizationType_STATUS string

const AuthorizationContractProperties_AuthorizationType_STATUS_OAuth2 = AuthorizationContractProperties_AuthorizationType_STATUS("OAuth2")

// Mapping from string to AuthorizationContractProperties_AuthorizationType_STATUS
var authorizationContractProperties_AuthorizationType_STATUS_Values = map[string]AuthorizationContractProperties_AuthorizationType_STATUS{
	"oauth2": AuthorizationContractProperties_AuthorizationType_STATUS_OAuth2,
}

// +kubebuilder:validation:Enum={"AuthorizationCode","ClientCredentials"}
type AuthorizationContractProperties_Oauth2GrantType string

const (
	AuthorizationContractProperties_Oauth2GrantType_AuthorizationCode = AuthorizationContractProperties_Oauth2GrantType("AuthorizationCode")
	AuthorizationContractProperties_Oauth2GrantType_ClientCredentials = AuthorizationContractProperties_Oauth2GrantType("ClientCredentials")
)

// Mapping from string to AuthorizationContractProperties_Oauth2GrantType
var authorizationContractProperties_Oauth2GrantType_Values = map[string]AuthorizationContractProperties_Oauth2GrantType{
	"authorizationcode": AuthorizationContractProperties_Oauth2GrantType_AuthorizationCode,
	"clientcredentials": AuthorizationContractProperties_Oauth2GrantType_ClientCredentials,
}

type AuthorizationContractProperties_Oauth2GrantType_STATUS string

const (
	AuthorizationContractProperties_Oauth2GrantType_STATUS_AuthorizationCode = AuthorizationContractProperties_Oauth2GrantType_STATUS("AuthorizationCode")
	AuthorizationContractProperties_Oauth2GrantType_STATUS_ClientCredentials = AuthorizationContractProperties_Oauth2GrantType_STATUS("ClientCredentials")
)

// Mapping from string to AuthorizationContractProperties_Oauth2GrantType_STATUS
var authorizationContractProperties_Oauth2GrantType_STATUS_Values = map[string]AuthorizationContractProperties_Oauth2GrantType_STATUS{
	"authorizationcode": AuthorizationContractProperties_Oauth2GrantType_STATUS_AuthorizationCode,
	"clientcredentials": AuthorizationContractProperties_Oauth2GrantType_STATUS_ClientCredentials,
}

// Authorization error details.
type AuthorizationError_STATUS struct {
	// Code: Error code
	Code *string `json:"code,omitempty"`

	// Message: Error message
	Message *string `json:"message,omitempty"`
}

var _ genruntime.FromARMConverter = &AuthorizationError_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (error *AuthorizationError_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.AuthorizationError_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (error *AuthorizationError_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.AuthorizationError_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.AuthorizationError_STATUS, got %T", armInput)
	}

	// Set property "Code":
	if typedInput.Code != nil {
		code := *typedInput.Code
		error.Code = &code
	}

	// Set property "Message":
	if typedInput.Message != nil {
		message := *typedInput.Message
		error.Message = &message
	}

	// No error
	return nil
}

// AssignProperties_From_AuthorizationError_STATUS populates our AuthorizationError_STATUS from the provided source AuthorizationError_STATUS
func (error *AuthorizationError_STATUS) AssignProperties_From_AuthorizationError_STATUS(source *storage.AuthorizationError_STATUS) error {

	// Code
	error.Code = genruntime.ClonePointerToString(source.Code)

	// Message
	error.Message = genruntime.ClonePointerToString(source.Message)

	// No error
	return nil
}

// AssignProperties_To_AuthorizationError_STATUS populates the provided destination AuthorizationError_STATUS from our AuthorizationError_STATUS
func (error *AuthorizationError_STATUS) AssignProperties_To_AuthorizationError_STATUS(destination *storage.AuthorizationError_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Code
	destination.Code = genruntime.ClonePointerToString(error.Code)

	// Message
	destination.Message = genruntime.ClonePointerToString(error.Message)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type AuthorizationProvidersAuthorizationOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_AuthorizationProvidersAuthorizationOperatorSpec populates our AuthorizationProvidersAuthorizationOperatorSpec from the provided source AuthorizationProvidersAuthorizationOperatorSpec
func (operator *AuthorizationProvidersAuthorizationOperatorSpec) AssignProperties_From_AuthorizationProvidersAuthorizationOperatorSpec(source *storage.AuthorizationProvidersAuthorizationOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AuthorizationProvidersAuthorizationOperatorSpec populates the provided destination AuthorizationProvidersAuthorizationOperatorSpec from our AuthorizationProvidersAuthorizationOperatorSpec
func (operator *AuthorizationProvidersAuthorizationOperatorSpec) AssignProperties_To_AuthorizationProvidersAuthorizationOperatorSpec(destination *storage.AuthorizationProvidersAuthorizationOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&AuthorizationProvidersAuthorization{}, &AuthorizationProvidersAuthorizationList{})
}
