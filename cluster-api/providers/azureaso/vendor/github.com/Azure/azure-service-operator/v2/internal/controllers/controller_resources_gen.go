// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package controllers

import (
	alertsmanagement_customizations "github.com/Azure/azure-service-operator/v2/api/alertsmanagement/customizations"
	alertsmanagement_v20210401 "github.com/Azure/azure-service-operator/v2/api/alertsmanagement/v1api20210401"
	alertsmanagement_v20210401s "github.com/Azure/azure-service-operator/v2/api/alertsmanagement/v1api20210401/storage"
	alertsmanagement_v20230301 "github.com/Azure/azure-service-operator/v2/api/alertsmanagement/v1api20230301"
	alertsmanagement_v20230301s "github.com/Azure/azure-service-operator/v2/api/alertsmanagement/v1api20230301/storage"
	apimanagement_customizations "github.com/Azure/azure-service-operator/v2/api/apimanagement/customizations"
	apimanagement_v20220801 "github.com/Azure/azure-service-operator/v2/api/apimanagement/v1api20220801"
	apimanagement_v20220801s "github.com/Azure/azure-service-operator/v2/api/apimanagement/v1api20220801/storage"
	apimanagement_v20230501p "github.com/Azure/azure-service-operator/v2/api/apimanagement/v1api20230501preview"
	apimanagement_v20230501ps "github.com/Azure/azure-service-operator/v2/api/apimanagement/v1api20230501preview/storage"
	appconfiguration_customizations "github.com/Azure/azure-service-operator/v2/api/appconfiguration/customizations"
	appconfiguration_v20220501 "github.com/Azure/azure-service-operator/v2/api/appconfiguration/v1api20220501"
	appconfiguration_v20220501s "github.com/Azure/azure-service-operator/v2/api/appconfiguration/v1api20220501/storage"
	authorization_customizations "github.com/Azure/azure-service-operator/v2/api/authorization/customizations"
	authorization_v20200801p "github.com/Azure/azure-service-operator/v2/api/authorization/v1api20200801preview"
	authorization_v20200801ps "github.com/Azure/azure-service-operator/v2/api/authorization/v1api20200801preview/storage"
	authorization_v20220401 "github.com/Azure/azure-service-operator/v2/api/authorization/v1api20220401"
	authorization_v20220401s "github.com/Azure/azure-service-operator/v2/api/authorization/v1api20220401/storage"
	batch_customizations "github.com/Azure/azure-service-operator/v2/api/batch/customizations"
	batch_v20210101 "github.com/Azure/azure-service-operator/v2/api/batch/v1api20210101"
	batch_v20210101s "github.com/Azure/azure-service-operator/v2/api/batch/v1api20210101/storage"
	cache_customizations "github.com/Azure/azure-service-operator/v2/api/cache/customizations"
	cache_v20201201 "github.com/Azure/azure-service-operator/v2/api/cache/v1api20201201"
	cache_v20201201s "github.com/Azure/azure-service-operator/v2/api/cache/v1api20201201/storage"
	cache_v20210301 "github.com/Azure/azure-service-operator/v2/api/cache/v1api20210301"
	cache_v20210301s "github.com/Azure/azure-service-operator/v2/api/cache/v1api20210301/storage"
	cache_v20230401 "github.com/Azure/azure-service-operator/v2/api/cache/v1api20230401"
	cache_v20230401s "github.com/Azure/azure-service-operator/v2/api/cache/v1api20230401/storage"
	cache_v20230701 "github.com/Azure/azure-service-operator/v2/api/cache/v1api20230701"
	cache_v20230701s "github.com/Azure/azure-service-operator/v2/api/cache/v1api20230701/storage"
	cache_v20230801 "github.com/Azure/azure-service-operator/v2/api/cache/v1api20230801"
	cache_v20230801s "github.com/Azure/azure-service-operator/v2/api/cache/v1api20230801/storage"
	cdn_customizations "github.com/Azure/azure-service-operator/v2/api/cdn/customizations"
	cdn_v20210601 "github.com/Azure/azure-service-operator/v2/api/cdn/v1api20210601"
	cdn_v20210601s "github.com/Azure/azure-service-operator/v2/api/cdn/v1api20210601/storage"
	cdn_v20230501 "github.com/Azure/azure-service-operator/v2/api/cdn/v1api20230501"
	cdn_v20230501s "github.com/Azure/azure-service-operator/v2/api/cdn/v1api20230501/storage"
	compute_customizations "github.com/Azure/azure-service-operator/v2/api/compute/customizations"
	compute_v20200930 "github.com/Azure/azure-service-operator/v2/api/compute/v1api20200930"
	compute_v20200930s "github.com/Azure/azure-service-operator/v2/api/compute/v1api20200930/storage"
	compute_v20201201 "github.com/Azure/azure-service-operator/v2/api/compute/v1api20201201"
	compute_v20201201s "github.com/Azure/azure-service-operator/v2/api/compute/v1api20201201/storage"
	compute_v20210701 "github.com/Azure/azure-service-operator/v2/api/compute/v1api20210701"
	compute_v20210701s "github.com/Azure/azure-service-operator/v2/api/compute/v1api20210701/storage"
	compute_v20220301 "github.com/Azure/azure-service-operator/v2/api/compute/v1api20220301"
	compute_v20220301s "github.com/Azure/azure-service-operator/v2/api/compute/v1api20220301/storage"
	compute_v20220702 "github.com/Azure/azure-service-operator/v2/api/compute/v1api20220702"
	compute_v20220702s "github.com/Azure/azure-service-operator/v2/api/compute/v1api20220702/storage"
	compute_v20240302 "github.com/Azure/azure-service-operator/v2/api/compute/v1api20240302"
	compute_v20240302s "github.com/Azure/azure-service-operator/v2/api/compute/v1api20240302/storage"
	containerinstance_customizations "github.com/Azure/azure-service-operator/v2/api/containerinstance/customizations"
	containerinstance_v20211001 "github.com/Azure/azure-service-operator/v2/api/containerinstance/v1api20211001"
	containerinstance_v20211001s "github.com/Azure/azure-service-operator/v2/api/containerinstance/v1api20211001/storage"
	containerregistry_customizations "github.com/Azure/azure-service-operator/v2/api/containerregistry/customizations"
	containerregistry_v20210901 "github.com/Azure/azure-service-operator/v2/api/containerregistry/v1api20210901"
	containerregistry_v20210901s "github.com/Azure/azure-service-operator/v2/api/containerregistry/v1api20210901/storage"
	containerservice_customizations "github.com/Azure/azure-service-operator/v2/api/containerservice/customizations"
	containerservice_v20210501 "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20210501"
	containerservice_v20210501s "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20210501/storage"
	containerservice_v20230201 "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20230201"
	containerservice_v20230201s "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20230201/storage"
	containerservice_v20230315p "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20230315preview"
	containerservice_v20230315ps "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20230315preview/storage"
	containerservice_v20231001 "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20231001"
	containerservice_v20231001s "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20231001/storage"
	containerservice_v20231102p "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20231102preview"
	containerservice_v20231102ps "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20231102preview/storage"
	containerservice_v20240402p "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20240402preview"
	containerservice_v20240402ps "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20240402preview/storage"
	containerservice_v20240901 "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20240901"
	containerservice_v20240901s "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20240901/storage"
	datafactory_customizations "github.com/Azure/azure-service-operator/v2/api/datafactory/customizations"
	datafactory_v20180601 "github.com/Azure/azure-service-operator/v2/api/datafactory/v1api20180601"
	datafactory_v20180601s "github.com/Azure/azure-service-operator/v2/api/datafactory/v1api20180601/storage"
	dataprotection_customizations "github.com/Azure/azure-service-operator/v2/api/dataprotection/customizations"
	dataprotection_v20230101 "github.com/Azure/azure-service-operator/v2/api/dataprotection/v1api20230101"
	dataprotection_v20230101s "github.com/Azure/azure-service-operator/v2/api/dataprotection/v1api20230101/storage"
	dataprotection_v20231101 "github.com/Azure/azure-service-operator/v2/api/dataprotection/v1api20231101"
	dataprotection_v20231101s "github.com/Azure/azure-service-operator/v2/api/dataprotection/v1api20231101/storage"
	dbformariadb_customizations "github.com/Azure/azure-service-operator/v2/api/dbformariadb/customizations"
	dbformariadb_v20180601 "github.com/Azure/azure-service-operator/v2/api/dbformariadb/v1api20180601"
	dbformariadb_v20180601s "github.com/Azure/azure-service-operator/v2/api/dbformariadb/v1api20180601/storage"
	dbformysql_customizations "github.com/Azure/azure-service-operator/v2/api/dbformysql/customizations"
	dbformysql_v20210501 "github.com/Azure/azure-service-operator/v2/api/dbformysql/v1api20210501"
	dbformysql_v20210501s "github.com/Azure/azure-service-operator/v2/api/dbformysql/v1api20210501/storage"
	dbformysql_v20220101 "github.com/Azure/azure-service-operator/v2/api/dbformysql/v1api20220101"
	dbformysql_v20220101s "github.com/Azure/azure-service-operator/v2/api/dbformysql/v1api20220101/storage"
	dbformysql_v20230630 "github.com/Azure/azure-service-operator/v2/api/dbformysql/v1api20230630"
	dbformysql_v20230630s "github.com/Azure/azure-service-operator/v2/api/dbformysql/v1api20230630/storage"
	dbforpostgresql_customizations "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/customizations"
	dbforpostgresql_v20210601 "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1api20210601"
	dbforpostgresql_v20210601s "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1api20210601/storage"
	dbforpostgresql_v20220120p "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1api20220120preview"
	dbforpostgresql_v20220120ps "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1api20220120preview/storage"
	dbforpostgresql_v20221201 "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1api20221201"
	dbforpostgresql_v20221201s "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1api20221201/storage"
	dbforpostgresql_v20230601p "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1api20230601preview"
	dbforpostgresql_v20230601ps "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1api20230601preview/storage"
	devices_customizations "github.com/Azure/azure-service-operator/v2/api/devices/customizations"
	devices_v20210702 "github.com/Azure/azure-service-operator/v2/api/devices/v1api20210702"
	devices_v20210702s "github.com/Azure/azure-service-operator/v2/api/devices/v1api20210702/storage"
	documentdb_customizations "github.com/Azure/azure-service-operator/v2/api/documentdb/customizations"
	documentdb_v20210515 "github.com/Azure/azure-service-operator/v2/api/documentdb/v1api20210515"
	documentdb_v20210515s "github.com/Azure/azure-service-operator/v2/api/documentdb/v1api20210515/storage"
	documentdb_v20231115 "github.com/Azure/azure-service-operator/v2/api/documentdb/v1api20231115"
	documentdb_v20231115s "github.com/Azure/azure-service-operator/v2/api/documentdb/v1api20231115/storage"
	eventgrid_customizations "github.com/Azure/azure-service-operator/v2/api/eventgrid/customizations"
	eventgrid_v20200601 "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1api20200601"
	eventgrid_v20200601s "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1api20200601/storage"
	eventhub_customizations "github.com/Azure/azure-service-operator/v2/api/eventhub/customizations"
	eventhub_v20211101 "github.com/Azure/azure-service-operator/v2/api/eventhub/v1api20211101"
	eventhub_v20211101s "github.com/Azure/azure-service-operator/v2/api/eventhub/v1api20211101/storage"
	insights_customizations "github.com/Azure/azure-service-operator/v2/api/insights/customizations"
	insights_v20180301 "github.com/Azure/azure-service-operator/v2/api/insights/v1api20180301"
	insights_v20180301s "github.com/Azure/azure-service-operator/v2/api/insights/v1api20180301/storage"
	insights_v20180501p "github.com/Azure/azure-service-operator/v2/api/insights/v1api20180501preview"
	insights_v20180501ps "github.com/Azure/azure-service-operator/v2/api/insights/v1api20180501preview/storage"
	insights_v20200202 "github.com/Azure/azure-service-operator/v2/api/insights/v1api20200202"
	insights_v20200202s "github.com/Azure/azure-service-operator/v2/api/insights/v1api20200202/storage"
	insights_v20210501p "github.com/Azure/azure-service-operator/v2/api/insights/v1api20210501preview"
	insights_v20210501ps "github.com/Azure/azure-service-operator/v2/api/insights/v1api20210501preview/storage"
	insights_v20220615 "github.com/Azure/azure-service-operator/v2/api/insights/v1api20220615"
	insights_v20220615s "github.com/Azure/azure-service-operator/v2/api/insights/v1api20220615/storage"
	insights_v20221001 "github.com/Azure/azure-service-operator/v2/api/insights/v1api20221001"
	insights_v20221001s "github.com/Azure/azure-service-operator/v2/api/insights/v1api20221001/storage"
	insights_v20230101 "github.com/Azure/azure-service-operator/v2/api/insights/v1api20230101"
	insights_v20230101s "github.com/Azure/azure-service-operator/v2/api/insights/v1api20230101/storage"
	keyvault_customizations "github.com/Azure/azure-service-operator/v2/api/keyvault/customizations"
	keyvault_v20210401p "github.com/Azure/azure-service-operator/v2/api/keyvault/v1api20210401preview"
	keyvault_v20210401ps "github.com/Azure/azure-service-operator/v2/api/keyvault/v1api20210401preview/storage"
	keyvault_v20230701 "github.com/Azure/azure-service-operator/v2/api/keyvault/v1api20230701"
	keyvault_v20230701s "github.com/Azure/azure-service-operator/v2/api/keyvault/v1api20230701/storage"
	kubernetesconfiguration_customizations "github.com/Azure/azure-service-operator/v2/api/kubernetesconfiguration/customizations"
	kubernetesconfiguration_v20230501 "github.com/Azure/azure-service-operator/v2/api/kubernetesconfiguration/v1api20230501"
	kubernetesconfiguration_v20230501s "github.com/Azure/azure-service-operator/v2/api/kubernetesconfiguration/v1api20230501/storage"
	machinelearningservices_customizations "github.com/Azure/azure-service-operator/v2/api/machinelearningservices/customizations"
	machinelearningservices_v20210701 "github.com/Azure/azure-service-operator/v2/api/machinelearningservices/v1api20210701"
	machinelearningservices_v20210701s "github.com/Azure/azure-service-operator/v2/api/machinelearningservices/v1api20210701/storage"
	machinelearningservices_v20240401 "github.com/Azure/azure-service-operator/v2/api/machinelearningservices/v1api20240401"
	machinelearningservices_v20240401s "github.com/Azure/azure-service-operator/v2/api/machinelearningservices/v1api20240401/storage"
	managedidentity_customizations "github.com/Azure/azure-service-operator/v2/api/managedidentity/customizations"
	managedidentity_v20181130 "github.com/Azure/azure-service-operator/v2/api/managedidentity/v1api20181130"
	managedidentity_v20181130s "github.com/Azure/azure-service-operator/v2/api/managedidentity/v1api20181130/storage"
	managedidentity_v20220131p "github.com/Azure/azure-service-operator/v2/api/managedidentity/v1api20220131preview"
	managedidentity_v20220131ps "github.com/Azure/azure-service-operator/v2/api/managedidentity/v1api20220131preview/storage"
	managedidentity_v20230131 "github.com/Azure/azure-service-operator/v2/api/managedidentity/v1api20230131"
	managedidentity_v20230131s "github.com/Azure/azure-service-operator/v2/api/managedidentity/v1api20230131/storage"
	monitor_customizations "github.com/Azure/azure-service-operator/v2/api/monitor/customizations"
	monitor_v20230403 "github.com/Azure/azure-service-operator/v2/api/monitor/v1api20230403"
	monitor_v20230403s "github.com/Azure/azure-service-operator/v2/api/monitor/v1api20230403/storage"
	networkfrontdoor_customizations "github.com/Azure/azure-service-operator/v2/api/network.frontdoor/customizations"
	networkfrontdoor_v20220501 "github.com/Azure/azure-service-operator/v2/api/network.frontdoor/v1api20220501"
	networkfrontdoor_v20220501s "github.com/Azure/azure-service-operator/v2/api/network.frontdoor/v1api20220501/storage"
	network_customizations "github.com/Azure/azure-service-operator/v2/api/network/customizations"
	network_v20180501 "github.com/Azure/azure-service-operator/v2/api/network/v1api20180501"
	network_v20180501s "github.com/Azure/azure-service-operator/v2/api/network/v1api20180501/storage"
	network_v20180901 "github.com/Azure/azure-service-operator/v2/api/network/v1api20180901"
	network_v20180901s "github.com/Azure/azure-service-operator/v2/api/network/v1api20180901/storage"
	network_v20200601 "github.com/Azure/azure-service-operator/v2/api/network/v1api20200601"
	network_v20200601s "github.com/Azure/azure-service-operator/v2/api/network/v1api20200601/storage"
	network_v20201101 "github.com/Azure/azure-service-operator/v2/api/network/v1api20201101"
	network_v20201101s "github.com/Azure/azure-service-operator/v2/api/network/v1api20201101/storage"
	network_v20220401 "github.com/Azure/azure-service-operator/v2/api/network/v1api20220401"
	network_v20220401s "github.com/Azure/azure-service-operator/v2/api/network/v1api20220401/storage"
	network_v20220701 "github.com/Azure/azure-service-operator/v2/api/network/v1api20220701"
	network_v20220701s "github.com/Azure/azure-service-operator/v2/api/network/v1api20220701/storage"
	network_v20240101 "github.com/Azure/azure-service-operator/v2/api/network/v1api20240101"
	network_v20240101s "github.com/Azure/azure-service-operator/v2/api/network/v1api20240101/storage"
	network_v20240301 "github.com/Azure/azure-service-operator/v2/api/network/v1api20240301"
	network_v20240301s "github.com/Azure/azure-service-operator/v2/api/network/v1api20240301/storage"
	network_v20240601 "github.com/Azure/azure-service-operator/v2/api/network/v1api20240601"
	network_v20240601s "github.com/Azure/azure-service-operator/v2/api/network/v1api20240601/storage"
	operationalinsights_customizations "github.com/Azure/azure-service-operator/v2/api/operationalinsights/customizations"
	operationalinsights_v20210601 "github.com/Azure/azure-service-operator/v2/api/operationalinsights/v1api20210601"
	operationalinsights_v20210601s "github.com/Azure/azure-service-operator/v2/api/operationalinsights/v1api20210601/storage"
	redhatopenshift_customizations "github.com/Azure/azure-service-operator/v2/api/redhatopenshift/customizations"
	redhatopenshift_v20231122 "github.com/Azure/azure-service-operator/v2/api/redhatopenshift/v1api20231122"
	redhatopenshift_v20231122s "github.com/Azure/azure-service-operator/v2/api/redhatopenshift/v1api20231122/storage"
	resources_customizations "github.com/Azure/azure-service-operator/v2/api/resources/customizations"
	resources_v20200601 "github.com/Azure/azure-service-operator/v2/api/resources/v1api20200601"
	resources_v20200601s "github.com/Azure/azure-service-operator/v2/api/resources/v1api20200601/storage"
	search_customizations "github.com/Azure/azure-service-operator/v2/api/search/customizations"
	search_v20220901 "github.com/Azure/azure-service-operator/v2/api/search/v1api20220901"
	search_v20220901s "github.com/Azure/azure-service-operator/v2/api/search/v1api20220901/storage"
	servicebus_customizations "github.com/Azure/azure-service-operator/v2/api/servicebus/customizations"
	servicebus_v20210101p "github.com/Azure/azure-service-operator/v2/api/servicebus/v1api20210101preview"
	servicebus_v20210101ps "github.com/Azure/azure-service-operator/v2/api/servicebus/v1api20210101preview/storage"
	servicebus_v20211101 "github.com/Azure/azure-service-operator/v2/api/servicebus/v1api20211101"
	servicebus_v20211101s "github.com/Azure/azure-service-operator/v2/api/servicebus/v1api20211101/storage"
	servicebus_v20221001p "github.com/Azure/azure-service-operator/v2/api/servicebus/v1api20221001preview"
	servicebus_v20221001ps "github.com/Azure/azure-service-operator/v2/api/servicebus/v1api20221001preview/storage"
	signalrservice_customizations "github.com/Azure/azure-service-operator/v2/api/signalrservice/customizations"
	signalrservice_v20211001 "github.com/Azure/azure-service-operator/v2/api/signalrservice/v1api20211001"
	signalrservice_v20211001s "github.com/Azure/azure-service-operator/v2/api/signalrservice/v1api20211001/storage"
	sql_customizations "github.com/Azure/azure-service-operator/v2/api/sql/customizations"
	sql_v20211101 "github.com/Azure/azure-service-operator/v2/api/sql/v1api20211101"
	sql_v20211101s "github.com/Azure/azure-service-operator/v2/api/sql/v1api20211101/storage"
	storage_customizations "github.com/Azure/azure-service-operator/v2/api/storage/customizations"
	storage_v20210401 "github.com/Azure/azure-service-operator/v2/api/storage/v1api20210401"
	storage_v20210401s "github.com/Azure/azure-service-operator/v2/api/storage/v1api20210401/storage"
	storage_v20220901 "github.com/Azure/azure-service-operator/v2/api/storage/v1api20220901"
	storage_v20220901s "github.com/Azure/azure-service-operator/v2/api/storage/v1api20220901/storage"
	storage_v20230101 "github.com/Azure/azure-service-operator/v2/api/storage/v1api20230101"
	storage_v20230101s "github.com/Azure/azure-service-operator/v2/api/storage/v1api20230101/storage"
	subscription_customizations "github.com/Azure/azure-service-operator/v2/api/subscription/customizations"
	subscription_v20211001 "github.com/Azure/azure-service-operator/v2/api/subscription/v1api20211001"
	subscription_v20211001s "github.com/Azure/azure-service-operator/v2/api/subscription/v1api20211001/storage"
	synapse_customizations "github.com/Azure/azure-service-operator/v2/api/synapse/customizations"
	synapse_v20210601 "github.com/Azure/azure-service-operator/v2/api/synapse/v1api20210601"
	synapse_v20210601s "github.com/Azure/azure-service-operator/v2/api/synapse/v1api20210601/storage"
	web_customizations "github.com/Azure/azure-service-operator/v2/api/web/customizations"
	web_v20220301 "github.com/Azure/azure-service-operator/v2/api/web/v1api20220301"
	web_v20220301s "github.com/Azure/azure-service-operator/v2/api/web/v1api20220301/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/registration"
	"k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/runtime"
	clientgoscheme "k8s.io/client-go/kubernetes/scheme"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// getKnownStorageTypes returns the list of storage types which can be reconciled.
func getKnownStorageTypes() []*registration.StorageType {
	var result []*registration.StorageType
	result = append(result, &registration.StorageType{Obj: new(alertsmanagement_v20210401s.SmartDetectorAlertRule)})
	result = append(result, &registration.StorageType{Obj: new(alertsmanagement_v20230301s.PrometheusRuleGroup)})
	result = append(result, &registration.StorageType{Obj: new(apimanagement_v20220801s.Api)})
	result = append(result, &registration.StorageType{Obj: new(apimanagement_v20220801s.ApiVersionSet)})
	result = append(result, &registration.StorageType{
		Obj: new(apimanagement_v20220801s.AuthorizationProvider),
		Indexes: []registration.Index{
			{
				Key:  ".spec.oauth2.grantTypes.authorizationCode",
				Func: indexApimanagementAuthorizationProviderAuthorizationCode,
			},
			{
				Key:  ".spec.oauth2.grantTypes.clientCredentials",
				Func: indexApimanagementAuthorizationProviderClientCredentials,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.oauth2.grantTypes.authorizationCode", ".spec.oauth2.grantTypes.clientCredentials"}, &apimanagement_v20220801s.AuthorizationProviderList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(apimanagement_v20220801s.AuthorizationProvidersAuthorization),
		Indexes: []registration.Index{
			{
				Key:  ".spec.parameters",
				Func: indexApimanagementAuthorizationProvidersAuthorizationParameters,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.parameters"}, &apimanagement_v20220801s.AuthorizationProvidersAuthorizationList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(apimanagement_v20220801s.AuthorizationProvidersAuthorizationsAccessPolicy),
		Indexes: []registration.Index{
			{
				Key:  ".spec.objectIdFromConfig",
				Func: indexApimanagementAuthorizationProvidersAuthorizationsAccessPolicyObjectIdFromConfig,
			},
			{
				Key:  ".spec.tenantIdFromConfig",
				Func: indexApimanagementAuthorizationProvidersAuthorizationsAccessPolicyTenantIdFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.objectIdFromConfig", ".spec.tenantIdFromConfig"}, &apimanagement_v20220801s.AuthorizationProvidersAuthorizationsAccessPolicyList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(apimanagement_v20220801s.Backend),
		Indexes: []registration.Index{
			{
				Key:  ".spec.proxy.password",
				Func: indexApimanagementBackendPassword,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.proxy.password"}, &apimanagement_v20220801s.BackendList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(apimanagement_v20220801s.NamedValue),
		Indexes: []registration.Index{
			{
				Key:  ".spec.keyVault.identityClientIdFromConfig",
				Func: indexApimanagementNamedValueIdentityClientIdFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.keyVault.identityClientIdFromConfig"}, &apimanagement_v20220801s.NamedValueList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(apimanagement_v20220801s.Policy)})
	result = append(result, &registration.StorageType{Obj: new(apimanagement_v20220801s.PolicyFragment)})
	result = append(result, &registration.StorageType{Obj: new(apimanagement_v20220801s.Product)})
	result = append(result, &registration.StorageType{Obj: new(apimanagement_v20220801s.ProductApi)})
	result = append(result, &registration.StorageType{Obj: new(apimanagement_v20220801s.ProductPolicy)})
	result = append(result, &registration.StorageType{
		Obj: new(apimanagement_v20220801s.Service),
		Indexes: []registration.Index{
			{
				Key:  ".spec.certificates.certificatePassword",
				Func: indexApimanagementServiceCertificatesCertificatePassword,
			},
			{
				Key:  ".spec.certificates.certificate.expiryFromConfig",
				Func: indexApimanagementServiceCertificatesExpiryFromConfig,
			},
			{
				Key:  ".spec.certificates.certificate.subjectFromConfig",
				Func: indexApimanagementServiceCertificatesSubjectFromConfig,
			},
			{
				Key:  ".spec.certificates.certificate.thumbprintFromConfig",
				Func: indexApimanagementServiceCertificatesThumbprintFromConfig,
			},
			{
				Key:  ".spec.hostnameConfigurations.certificatePassword",
				Func: indexApimanagementServiceHostnameConfigurationsCertificatePassword,
			},
			{
				Key:  ".spec.hostnameConfigurations.certificate.expiryFromConfig",
				Func: indexApimanagementServiceHostnameConfigurationsExpiryFromConfig,
			},
			{
				Key:  ".spec.hostnameConfigurations.identityClientIdFromConfig",
				Func: indexApimanagementServiceHostnameConfigurationsIdentityClientIdFromConfig,
			},
			{
				Key:  ".spec.hostnameConfigurations.certificate.subjectFromConfig",
				Func: indexApimanagementServiceHostnameConfigurationsSubjectFromConfig,
			},
			{
				Key:  ".spec.hostnameConfigurations.certificate.thumbprintFromConfig",
				Func: indexApimanagementServiceHostnameConfigurationsThumbprintFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.certificates.certificatePassword", ".spec.hostnameConfigurations.certificatePassword"}, &apimanagement_v20220801s.ServiceList{}),
			},
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.certificates.certificate.expiryFromConfig", ".spec.certificates.certificate.subjectFromConfig", ".spec.certificates.certificate.thumbprintFromConfig", ".spec.hostnameConfigurations.certificate.expiryFromConfig", ".spec.hostnameConfigurations.certificate.subjectFromConfig", ".spec.hostnameConfigurations.certificate.thumbprintFromConfig", ".spec.hostnameConfigurations.identityClientIdFromConfig"}, &apimanagement_v20220801s.ServiceList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(apimanagement_v20220801s.Subscription),
		Indexes: []registration.Index{
			{
				Key:  ".spec.primaryKey",
				Func: indexApimanagementSubscriptionPrimaryKey,
			},
			{
				Key:  ".spec.secondaryKey",
				Func: indexApimanagementSubscriptionSecondaryKey,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.primaryKey", ".spec.secondaryKey"}, &apimanagement_v20220801s.SubscriptionList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(appconfiguration_v20220501s.ConfigurationStore)})
	result = append(result, &registration.StorageType{
		Obj: new(authorization_v20220401s.RoleAssignment),
		Indexes: []registration.Index{
			{
				Key:  ".spec.principalIdFromConfig",
				Func: indexAuthorizationRoleAssignmentPrincipalIdFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.principalIdFromConfig"}, &authorization_v20220401s.RoleAssignmentList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(authorization_v20220401s.RoleDefinition)})
	result = append(result, &registration.StorageType{Obj: new(batch_v20210101s.BatchAccount)})
	result = append(result, &registration.StorageType{Obj: new(cache_v20230701s.RedisEnterprise)})
	result = append(result, &registration.StorageType{Obj: new(cache_v20230701s.RedisEnterpriseDatabase)})
	result = append(result, &registration.StorageType{Obj: new(cache_v20230801s.Redis)})
	result = append(result, &registration.StorageType{Obj: new(cache_v20230801s.RedisFirewallRule)})
	result = append(result, &registration.StorageType{Obj: new(cache_v20230801s.RedisLinkedServer)})
	result = append(result, &registration.StorageType{Obj: new(cache_v20230801s.RedisPatchSchedule)})
	result = append(result, &registration.StorageType{Obj: new(cdn_v20210601s.ProfilesEndpoint)})
	result = append(result, &registration.StorageType{Obj: new(cdn_v20230501s.AfdCustomDomain)})
	result = append(result, &registration.StorageType{Obj: new(cdn_v20230501s.AfdEndpoint)})
	result = append(result, &registration.StorageType{Obj: new(cdn_v20230501s.AfdOrigin)})
	result = append(result, &registration.StorageType{Obj: new(cdn_v20230501s.AfdOriginGroup)})
	result = append(result, &registration.StorageType{Obj: new(cdn_v20230501s.Profile)})
	result = append(result, &registration.StorageType{Obj: new(cdn_v20230501s.Route)})
	result = append(result, &registration.StorageType{Obj: new(cdn_v20230501s.Rule)})
	result = append(result, &registration.StorageType{Obj: new(cdn_v20230501s.RuleSet)})
	result = append(result, &registration.StorageType{Obj: new(cdn_v20230501s.Secret)})
	result = append(result, &registration.StorageType{Obj: new(cdn_v20230501s.SecurityPolicy)})
	result = append(result, &registration.StorageType{Obj: new(compute_v20220301s.Image)})
	result = append(result, &registration.StorageType{
		Obj: new(compute_v20220301s.VirtualMachine),
		Indexes: []registration.Index{
			{
				Key:  ".spec.osProfile.adminPassword",
				Func: indexComputeVirtualMachineAdminPassword,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.osProfile.adminPassword"}, &compute_v20220301s.VirtualMachineList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(compute_v20220301s.VirtualMachineScaleSet),
		Indexes: []registration.Index{
			{
				Key:  ".spec.virtualMachineProfile.osProfile.adminPassword",
				Func: indexComputeVirtualMachineScaleSetAdminPassword,
			},
			{
				Key:  ".spec.virtualMachineProfile.extensionProfile.extensions.protectedSettings",
				Func: indexComputeVirtualMachineScaleSetProtectedSettings,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.virtualMachineProfile.extensionProfile.extensions.protectedSettings", ".spec.virtualMachineProfile.osProfile.adminPassword"}, &compute_v20220301s.VirtualMachineScaleSetList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(compute_v20220301s.VirtualMachineScaleSetsExtension),
		Indexes: []registration.Index{
			{
				Key:  ".spec.protectedSettings",
				Func: indexComputeVirtualMachineScaleSetsExtensionProtectedSettings,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.protectedSettings"}, &compute_v20220301s.VirtualMachineScaleSetsExtensionList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(compute_v20220301s.VirtualMachinesExtension),
		Indexes: []registration.Index{
			{
				Key:  ".spec.protectedSettings",
				Func: indexComputeVirtualMachinesExtensionProtectedSettings,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.protectedSettings"}, &compute_v20220301s.VirtualMachinesExtensionList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(compute_v20240302s.Disk)})
	result = append(result, &registration.StorageType{Obj: new(compute_v20240302s.DiskAccess)})
	result = append(result, &registration.StorageType{
		Obj: new(compute_v20240302s.DiskEncryptionSet),
		Indexes: []registration.Index{
			{
				Key:  ".spec.federatedClientIdFromConfig",
				Func: indexComputeDiskEncryptionSetFederatedClientIdFromConfig,
			},
			{
				Key:  ".spec.activeKey.keyUrlFromConfig",
				Func: indexComputeDiskEncryptionSetKeyUrlFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.activeKey.keyUrlFromConfig", ".spec.federatedClientIdFromConfig"}, &compute_v20240302s.DiskEncryptionSetList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(compute_v20240302s.Snapshot)})
	result = append(result, &registration.StorageType{
		Obj: new(containerinstance_v20211001s.ContainerGroup),
		Indexes: []registration.Index{
			{
				Key:  ".spec.containers.environmentVariables.secureValue",
				Func: indexContainerinstanceContainerGroupContainersSecureValue,
			},
			{
				Key:  ".spec.initContainers.environmentVariables.secureValue",
				Func: indexContainerinstanceContainerGroupInitContainersSecureValue,
			},
			{
				Key:  ".spec.imageRegistryCredentials.password",
				Func: indexContainerinstanceContainerGroupPassword,
			},
			{
				Key:  ".spec.diagnostics.logAnalytics.workspaceKey",
				Func: indexContainerinstanceContainerGroupWorkspaceKey,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.containers.environmentVariables.secureValue", ".spec.diagnostics.logAnalytics.workspaceKey", ".spec.imageRegistryCredentials.password", ".spec.initContainers.environmentVariables.secureValue"}, &containerinstance_v20211001s.ContainerGroupList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(containerregistry_v20210901s.Registry)})
	result = append(result, &registration.StorageType{Obj: new(containerservice_v20230315ps.Fleet)})
	result = append(result, &registration.StorageType{Obj: new(containerservice_v20230315ps.FleetsMember)})
	result = append(result, &registration.StorageType{Obj: new(containerservice_v20230315ps.FleetsUpdateRun)})
	result = append(result, &registration.StorageType{Obj: new(containerservice_v20240901s.MaintenanceConfiguration)})
	result = append(result, &registration.StorageType{
		Obj: new(containerservice_v20240901s.ManagedCluster),
		Indexes: []registration.Index{
			{
				Key:  ".spec.windowsProfile.adminPassword",
				Func: indexContainerserviceManagedClusterAdminPassword,
			},
			{
				Key:  ".spec.servicePrincipalProfile.secret",
				Func: indexContainerserviceManagedClusterSecret,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.servicePrincipalProfile.secret", ".spec.windowsProfile.adminPassword"}, &containerservice_v20240901s.ManagedClusterList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(containerservice_v20240901s.ManagedClustersAgentPool)})
	result = append(result, &registration.StorageType{Obj: new(containerservice_v20240901s.TrustedAccessRoleBinding)})
	result = append(result, &registration.StorageType{Obj: new(datafactory_v20180601s.Factory)})
	result = append(result, &registration.StorageType{Obj: new(dataprotection_v20231101s.BackupVault)})
	result = append(result, &registration.StorageType{Obj: new(dataprotection_v20231101s.BackupVaultsBackupInstance)})
	result = append(result, &registration.StorageType{Obj: new(dataprotection_v20231101s.BackupVaultsBackupPolicy)})
	result = append(result, &registration.StorageType{Obj: new(dbformariadb_v20180601s.Configuration)})
	result = append(result, &registration.StorageType{Obj: new(dbformariadb_v20180601s.Database)})
	result = append(result, &registration.StorageType{
		Obj: new(dbformariadb_v20180601s.Server),
		Indexes: []registration.Index{
			{
				Key:  ".spec.properties.default.administratorLoginPassword",
				Func: indexDbformariadbServerAdministratorLoginPassword,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.properties.default.administratorLoginPassword"}, &dbformariadb_v20180601s.ServerList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(dbformysql_v20230630s.FlexibleServer),
		Indexes: []registration.Index{
			{
				Key:  ".spec.administratorLoginPassword",
				Func: indexDbformysqlFlexibleServerAdministratorLoginPassword,
			},
			{
				Key:  ".spec.importSourceProperties.sasToken",
				Func: indexDbformysqlFlexibleServerSasToken,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.administratorLoginPassword", ".spec.importSourceProperties.sasToken"}, &dbformysql_v20230630s.FlexibleServerList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(dbformysql_v20230630s.FlexibleServersAdministrator),
		Indexes: []registration.Index{
			{
				Key:  ".spec.sidFromConfig",
				Func: indexDbformysqlFlexibleServersAdministratorSidFromConfig,
			},
			{
				Key:  ".spec.tenantIdFromConfig",
				Func: indexDbformysqlFlexibleServersAdministratorTenantIdFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.sidFromConfig", ".spec.tenantIdFromConfig"}, &dbformysql_v20230630s.FlexibleServersAdministratorList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(dbformysql_v20230630s.FlexibleServersConfiguration)})
	result = append(result, &registration.StorageType{Obj: new(dbformysql_v20230630s.FlexibleServersDatabase)})
	result = append(result, &registration.StorageType{Obj: new(dbformysql_v20230630s.FlexibleServersFirewallRule)})
	result = append(result, &registration.StorageType{
		Obj: new(dbforpostgresql_v20221201s.FlexibleServer),
		Indexes: []registration.Index{
			{
				Key:  ".spec.administratorLoginPassword",
				Func: indexDbforpostgresqlFlexibleServerAdministratorLoginPassword,
			},
			{
				Key:  ".spec.dataEncryption.primaryKeyURIFromConfig",
				Func: indexDbforpostgresqlFlexibleServerPrimaryKeyURIFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.administratorLoginPassword"}, &dbforpostgresql_v20221201s.FlexibleServerList{}),
			},
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.dataEncryption.primaryKeyURIFromConfig"}, &dbforpostgresql_v20221201s.FlexibleServerList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(dbforpostgresql_v20221201s.FlexibleServersConfiguration)})
	result = append(result, &registration.StorageType{Obj: new(dbforpostgresql_v20221201s.FlexibleServersDatabase)})
	result = append(result, &registration.StorageType{Obj: new(dbforpostgresql_v20221201s.FlexibleServersFirewallRule)})
	result = append(result, &registration.StorageType{
		Obj: new(devices_v20210702s.IotHub),
		Indexes: []registration.Index{
			{
				Key:  ".spec.properties.routing.endpoints.eventHubs.connectionString",
				Func: indexDevicesIotHubEventHubsConnectionString,
			},
			{
				Key:  ".spec.properties.routing.endpoints.serviceBusQueues.connectionString",
				Func: indexDevicesIotHubServiceBusQueuesConnectionString,
			},
			{
				Key:  ".spec.properties.routing.endpoints.serviceBusTopics.connectionString",
				Func: indexDevicesIotHubServiceBusTopicsConnectionString,
			},
			{
				Key:  ".spec.properties.routing.endpoints.storageContainers.connectionString",
				Func: indexDevicesIotHubStorageContainersConnectionString,
			},
			{
				Key:  ".spec.properties.storageEndpoints.connectionString",
				Func: indexDevicesIotHubStorageEndpointsConnectionString,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.properties.routing.endpoints.eventHubs.connectionString", ".spec.properties.routing.endpoints.serviceBusQueues.connectionString", ".spec.properties.routing.endpoints.serviceBusTopics.connectionString", ".spec.properties.routing.endpoints.storageContainers.connectionString", ".spec.properties.storageEndpoints.connectionString"}, &devices_v20210702s.IotHubList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(documentdb_v20231115s.DatabaseAccount)})
	result = append(result, &registration.StorageType{Obj: new(documentdb_v20231115s.MongodbDatabase)})
	result = append(result, &registration.StorageType{Obj: new(documentdb_v20231115s.MongodbDatabaseCollection)})
	result = append(result, &registration.StorageType{Obj: new(documentdb_v20231115s.MongodbDatabaseCollectionThroughputSetting)})
	result = append(result, &registration.StorageType{Obj: new(documentdb_v20231115s.MongodbDatabaseThroughputSetting)})
	result = append(result, &registration.StorageType{Obj: new(documentdb_v20231115s.SqlDatabase)})
	result = append(result, &registration.StorageType{Obj: new(documentdb_v20231115s.SqlDatabaseContainer)})
	result = append(result, &registration.StorageType{Obj: new(documentdb_v20231115s.SqlDatabaseContainerStoredProcedure)})
	result = append(result, &registration.StorageType{Obj: new(documentdb_v20231115s.SqlDatabaseContainerThroughputSetting)})
	result = append(result, &registration.StorageType{Obj: new(documentdb_v20231115s.SqlDatabaseContainerTrigger)})
	result = append(result, &registration.StorageType{Obj: new(documentdb_v20231115s.SqlDatabaseContainerUserDefinedFunction)})
	result = append(result, &registration.StorageType{Obj: new(documentdb_v20231115s.SqlDatabaseThroughputSetting)})
	result = append(result, &registration.StorageType{
		Obj: new(documentdb_v20231115s.SqlRoleAssignment),
		Indexes: []registration.Index{
			{
				Key:  ".spec.principalIdFromConfig",
				Func: indexDocumentdbSqlRoleAssignmentPrincipalIdFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.principalIdFromConfig"}, &documentdb_v20231115s.SqlRoleAssignmentList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(eventgrid_v20200601s.Domain)})
	result = append(result, &registration.StorageType{Obj: new(eventgrid_v20200601s.DomainsTopic)})
	result = append(result, &registration.StorageType{
		Obj: new(eventgrid_v20200601s.EventSubscription),
		Indexes: []registration.Index{
			{
				Key:  ".spec.destination.webHook.endpointUrl",
				Func: indexEventgridEventSubscriptionEndpointUrl,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.destination.webHook.endpointUrl"}, &eventgrid_v20200601s.EventSubscriptionList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(eventgrid_v20200601s.Topic)})
	result = append(result, &registration.StorageType{Obj: new(eventhub_v20211101s.Namespace)})
	result = append(result, &registration.StorageType{Obj: new(eventhub_v20211101s.NamespacesAuthorizationRule)})
	result = append(result, &registration.StorageType{Obj: new(eventhub_v20211101s.NamespacesEventhub)})
	result = append(result, &registration.StorageType{Obj: new(eventhub_v20211101s.NamespacesEventhubsAuthorizationRule)})
	result = append(result, &registration.StorageType{Obj: new(eventhub_v20211101s.NamespacesEventhubsConsumerGroup)})
	result = append(result, &registration.StorageType{Obj: new(insights_v20180301s.MetricAlert)})
	result = append(result, &registration.StorageType{Obj: new(insights_v20200202s.Component)})
	result = append(result, &registration.StorageType{Obj: new(insights_v20210501ps.DiagnosticSetting)})
	result = append(result, &registration.StorageType{Obj: new(insights_v20220615s.ScheduledQueryRule)})
	result = append(result, &registration.StorageType{Obj: new(insights_v20220615s.Webtest)})
	result = append(result, &registration.StorageType{Obj: new(insights_v20221001s.AutoscaleSetting)})
	result = append(result, &registration.StorageType{Obj: new(insights_v20230101s.ActionGroup)})
	result = append(result, &registration.StorageType{
		Obj: new(keyvault_v20230701s.Vault),
		Indexes: []registration.Index{
			{
				Key:  ".spec.properties.accessPolicies.applicationIdFromConfig",
				Func: indexKeyvaultVaultPropertiesAccessPoliciesApplicationIdFromConfig,
			},
			{
				Key:  ".spec.properties.accessPolicies.objectIdFromConfig",
				Func: indexKeyvaultVaultPropertiesAccessPoliciesObjectIdFromConfig,
			},
			{
				Key:  ".spec.properties.accessPolicies.tenantIdFromConfig",
				Func: indexKeyvaultVaultPropertiesAccessPoliciesTenantIdFromConfig,
			},
			{
				Key:  ".spec.properties.tenantIdFromConfig",
				Func: indexKeyvaultVaultPropertiesTenantIdFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.properties.accessPolicies.applicationIdFromConfig", ".spec.properties.accessPolicies.objectIdFromConfig", ".spec.properties.accessPolicies.tenantIdFromConfig", ".spec.properties.tenantIdFromConfig"}, &keyvault_v20230701s.VaultList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(kubernetesconfiguration_v20230501s.Extension),
		Indexes: []registration.Index{
			{
				Key:  ".spec.configurationProtectedSettings",
				Func: indexKubernetesconfigurationExtensionConfigurationProtectedSettings,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.configurationProtectedSettings"}, &kubernetesconfiguration_v20230501s.ExtensionList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(kubernetesconfiguration_v20230501s.FluxConfiguration),
		Indexes: []registration.Index{
			{
				Key:  ".spec.bucket.accessKey",
				Func: indexKubernetesconfigurationFluxConfigurationAccessKey,
			},
			{
				Key:  ".spec.azureBlob.accountKey",
				Func: indexKubernetesconfigurationFluxConfigurationAccountKey,
			},
			{
				Key:  ".spec.azureBlob.servicePrincipal.clientCertificate",
				Func: indexKubernetesconfigurationFluxConfigurationClientCertificate,
			},
			{
				Key:  ".spec.azureBlob.servicePrincipal.clientCertificatePassword",
				Func: indexKubernetesconfigurationFluxConfigurationClientCertificatePassword,
			},
			{
				Key:  ".spec.azureBlob.servicePrincipal.clientIdFromConfig",
				Func: indexKubernetesconfigurationFluxConfigurationClientIdFromConfig,
			},
			{
				Key:  ".spec.azureBlob.servicePrincipal.clientSecret",
				Func: indexKubernetesconfigurationFluxConfigurationClientSecret,
			},
			{
				Key:  ".spec.configurationProtectedSettings",
				Func: indexKubernetesconfigurationFluxConfigurationConfigurationProtectedSettings,
			},
			{
				Key:  ".spec.gitRepository.httpsCACert",
				Func: indexKubernetesconfigurationFluxConfigurationHttpsCACert,
			},
			{
				Key:  ".spec.azureBlob.sasToken",
				Func: indexKubernetesconfigurationFluxConfigurationSasToken,
			},
			{
				Key:  ".spec.azureBlob.servicePrincipal.tenantIdFromConfig",
				Func: indexKubernetesconfigurationFluxConfigurationTenantIdFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.azureBlob.accountKey", ".spec.azureBlob.sasToken", ".spec.azureBlob.servicePrincipal.clientCertificate", ".spec.azureBlob.servicePrincipal.clientCertificatePassword", ".spec.azureBlob.servicePrincipal.clientSecret", ".spec.bucket.accessKey", ".spec.configurationProtectedSettings", ".spec.gitRepository.httpsCACert"}, &kubernetesconfiguration_v20230501s.FluxConfigurationList{}),
			},
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.azureBlob.servicePrincipal.clientIdFromConfig", ".spec.azureBlob.servicePrincipal.tenantIdFromConfig"}, &kubernetesconfiguration_v20230501s.FluxConfigurationList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(machinelearningservices_v20240401s.Registry)})
	result = append(result, &registration.StorageType{
		Obj: new(machinelearningservices_v20240401s.Workspace),
		Indexes: []registration.Index{
			{
				Key:  ".spec.encryption.keyVaultProperties.identityClientIdFromConfig",
				Func: indexMachinelearningservicesWorkspaceIdentityClientIdFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.encryption.keyVaultProperties.identityClientIdFromConfig"}, &machinelearningservices_v20240401s.WorkspaceList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(machinelearningservices_v20240401s.WorkspacesCompute),
		Indexes: []registration.Index{
			{
				Key:  ".spec.properties.amlCompute.properties.userAccountCredentials.adminUserPassword",
				Func: indexMachinelearningservicesWorkspacesComputeAdminUserPassword,
			},
			{
				Key:  ".spec.properties.amlCompute.properties.userAccountCredentials.adminUserSshPublicKey",
				Func: indexMachinelearningservicesWorkspacesComputeAdminUserSshPublicKey,
			},
			{
				Key:  ".spec.properties.aks.properties.sslConfiguration.cert",
				Func: indexMachinelearningservicesWorkspacesComputeCert,
			},
			{
				Key:  ".spec.properties.databricks.properties.databricksAccessToken",
				Func: indexMachinelearningservicesWorkspacesComputeDatabricksAccessToken,
			},
			{
				Key:  ".spec.properties.kubernetes.properties.extensionPrincipalIdFromConfig",
				Func: indexMachinelearningservicesWorkspacesComputeExtensionPrincipalIdFromConfig,
			},
			{
				Key:  ".spec.properties.hdInsight.properties.administratorAccount.password",
				Func: indexMachinelearningservicesWorkspacesComputeHDInsightPassword,
			},
			{
				Key:  ".spec.properties.hdInsight.properties.administratorAccount.privateKeyData",
				Func: indexMachinelearningservicesWorkspacesComputeHDInsightPrivateKeyData,
			},
			{
				Key:  ".spec.properties.hdInsight.properties.administratorAccount.publicKeyData",
				Func: indexMachinelearningservicesWorkspacesComputeHDInsightPublicKeyData,
			},
			{
				Key:  ".spec.properties.aks.properties.sslConfiguration.key",
				Func: indexMachinelearningservicesWorkspacesComputeKey,
			},
			{
				Key:  ".spec.properties.computeInstance.properties.personalComputeInstanceSettings.assignedUser.objectIdFromConfig",
				Func: indexMachinelearningservicesWorkspacesComputeObjectIdFromConfig,
			},
			{
				Key:  ".spec.properties.kubernetes.properties.relayConnectionString",
				Func: indexMachinelearningservicesWorkspacesComputeRelayConnectionString,
			},
			{
				Key:  ".spec.properties.kubernetes.properties.serviceBusConnectionString",
				Func: indexMachinelearningservicesWorkspacesComputeServiceBusConnectionString,
			},
			{
				Key:  ".spec.properties.computeInstance.properties.personalComputeInstanceSettings.assignedUser.tenantIdFromConfig",
				Func: indexMachinelearningservicesWorkspacesComputeTenantIdFromConfig,
			},
			{
				Key:  ".spec.properties.virtualMachine.properties.administratorAccount.password",
				Func: indexMachinelearningservicesWorkspacesComputeVirtualMachinePassword,
			},
			{
				Key:  ".spec.properties.virtualMachine.properties.administratorAccount.privateKeyData",
				Func: indexMachinelearningservicesWorkspacesComputeVirtualMachinePrivateKeyData,
			},
			{
				Key:  ".spec.properties.virtualMachine.properties.administratorAccount.publicKeyData",
				Func: indexMachinelearningservicesWorkspacesComputeVirtualMachinePublicKeyData,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.properties.aks.properties.sslConfiguration.cert", ".spec.properties.aks.properties.sslConfiguration.key", ".spec.properties.amlCompute.properties.userAccountCredentials.adminUserPassword", ".spec.properties.amlCompute.properties.userAccountCredentials.adminUserSshPublicKey", ".spec.properties.databricks.properties.databricksAccessToken", ".spec.properties.hdInsight.properties.administratorAccount.password", ".spec.properties.hdInsight.properties.administratorAccount.privateKeyData", ".spec.properties.hdInsight.properties.administratorAccount.publicKeyData", ".spec.properties.kubernetes.properties.relayConnectionString", ".spec.properties.kubernetes.properties.serviceBusConnectionString", ".spec.properties.virtualMachine.properties.administratorAccount.password", ".spec.properties.virtualMachine.properties.administratorAccount.privateKeyData", ".spec.properties.virtualMachine.properties.administratorAccount.publicKeyData"}, &machinelearningservices_v20240401s.WorkspacesComputeList{}),
			},
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.properties.computeInstance.properties.personalComputeInstanceSettings.assignedUser.objectIdFromConfig", ".spec.properties.computeInstance.properties.personalComputeInstanceSettings.assignedUser.tenantIdFromConfig", ".spec.properties.kubernetes.properties.extensionPrincipalIdFromConfig"}, &machinelearningservices_v20240401s.WorkspacesComputeList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(machinelearningservices_v20240401s.WorkspacesConnection),
		Indexes: []registration.Index{
			{
				Key:  ".spec.properties.accountKey.credentials.key",
				Func: indexMachinelearningservicesWorkspacesConnectionAccountKeyKey,
			},
			{
				Key:  ".spec.properties.apiKey.credentials.key",
				Func: indexMachinelearningservicesWorkspacesConnectionApiKeyKey,
			},
			{
				Key:  ".spec.properties.customKeys.credentials.keys",
				Func: indexMachinelearningservicesWorkspacesConnectionKeys,
			},
			{
				Key:  ".spec.properties.managedIdentity.credentials.clientIdFromConfig",
				Func: indexMachinelearningservicesWorkspacesConnectionManagedIdentityClientIdFromConfig,
			},
			{
				Key:  ".spec.properties.oAuth2.credentials.clientIdFromConfig",
				Func: indexMachinelearningservicesWorkspacesConnectionOAuth2ClientIdFromConfig,
			},
			{
				Key:  ".spec.properties.oAuth2.credentials.clientSecret",
				Func: indexMachinelearningservicesWorkspacesConnectionOAuth2ClientSecret,
			},
			{
				Key:  ".spec.properties.oAuth2.credentials.developerToken",
				Func: indexMachinelearningservicesWorkspacesConnectionOAuth2DeveloperToken,
			},
			{
				Key:  ".spec.properties.oAuth2.credentials.password",
				Func: indexMachinelearningservicesWorkspacesConnectionOAuth2Password,
			},
			{
				Key:  ".spec.properties.oAuth2.credentials.refreshToken",
				Func: indexMachinelearningservicesWorkspacesConnectionOAuth2RefreshToken,
			},
			{
				Key:  ".spec.properties.oAuth2.credentials.tenantIdFromConfig",
				Func: indexMachinelearningservicesWorkspacesConnectionOAuth2TenantIdFromConfig,
			},
			{
				Key:  ".spec.properties.pat.credentials.pat",
				Func: indexMachinelearningservicesWorkspacesConnectionPat,
			},
			{
				Key:  ".spec.properties.sas.credentials.sas",
				Func: indexMachinelearningservicesWorkspacesConnectionSas,
			},
			{
				Key:  ".spec.properties.accessKey.credentials.secretAccessKey",
				Func: indexMachinelearningservicesWorkspacesConnectionSecretAccessKey,
			},
			{
				Key:  ".spec.properties.servicePrincipal.credentials.clientIdFromConfig",
				Func: indexMachinelearningservicesWorkspacesConnectionServicePrincipalClientIdFromConfig,
			},
			{
				Key:  ".spec.properties.servicePrincipal.credentials.clientSecret",
				Func: indexMachinelearningservicesWorkspacesConnectionServicePrincipalClientSecret,
			},
			{
				Key:  ".spec.properties.servicePrincipal.credentials.tenantIdFromConfig",
				Func: indexMachinelearningservicesWorkspacesConnectionServicePrincipalTenantIdFromConfig,
			},
			{
				Key:  ".spec.properties.usernamePassword.credentials.password",
				Func: indexMachinelearningservicesWorkspacesConnectionUsernamePasswordPassword,
			},
			{
				Key:  ".spec.properties.usernamePassword.credentials.securityToken",
				Func: indexMachinelearningservicesWorkspacesConnectionUsernamePasswordSecurityToken,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.properties.accessKey.credentials.secretAccessKey", ".spec.properties.accountKey.credentials.key", ".spec.properties.apiKey.credentials.key", ".spec.properties.customKeys.credentials.keys", ".spec.properties.oAuth2.credentials.clientSecret", ".spec.properties.oAuth2.credentials.developerToken", ".spec.properties.oAuth2.credentials.password", ".spec.properties.oAuth2.credentials.refreshToken", ".spec.properties.pat.credentials.pat", ".spec.properties.sas.credentials.sas", ".spec.properties.servicePrincipal.credentials.clientSecret", ".spec.properties.usernamePassword.credentials.password", ".spec.properties.usernamePassword.credentials.securityToken"}, &machinelearningservices_v20240401s.WorkspacesConnectionList{}),
			},
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.properties.managedIdentity.credentials.clientIdFromConfig", ".spec.properties.oAuth2.credentials.clientIdFromConfig", ".spec.properties.oAuth2.credentials.tenantIdFromConfig", ".spec.properties.servicePrincipal.credentials.clientIdFromConfig", ".spec.properties.servicePrincipal.credentials.tenantIdFromConfig"}, &machinelearningservices_v20240401s.WorkspacesConnectionList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(managedidentity_v20230131s.FederatedIdentityCredential),
		Indexes: []registration.Index{
			{
				Key:  ".spec.issuerFromConfig",
				Func: indexManagedidentityFederatedIdentityCredentialIssuerFromConfig,
			},
			{
				Key:  ".spec.subjectFromConfig",
				Func: indexManagedidentityFederatedIdentityCredentialSubjectFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.issuerFromConfig", ".spec.subjectFromConfig"}, &managedidentity_v20230131s.FederatedIdentityCredentialList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(managedidentity_v20230131s.UserAssignedIdentity)})
	result = append(result, &registration.StorageType{Obj: new(monitor_v20230403s.Account)})
	result = append(result, &registration.StorageType{Obj: new(network_v20180501s.DnsZone)})
	result = append(result, &registration.StorageType{Obj: new(network_v20180501s.DnsZonesAAAARecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20180501s.DnsZonesARecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20180501s.DnsZonesCAARecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20180501s.DnsZonesCNAMERecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20180501s.DnsZonesMXRecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20180501s.DnsZonesNSRecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20180501s.DnsZonesPTRRecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20180501s.DnsZonesSRVRecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20180501s.DnsZonesTXTRecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20220401s.TrafficManagerProfile)})
	result = append(result, &registration.StorageType{Obj: new(network_v20220401s.TrafficManagerProfilesAzureEndpoint)})
	result = append(result, &registration.StorageType{Obj: new(network_v20220401s.TrafficManagerProfilesExternalEndpoint)})
	result = append(result, &registration.StorageType{Obj: new(network_v20220401s.TrafficManagerProfilesNestedEndpoint)})
	result = append(result, &registration.StorageType{
		Obj: new(network_v20220701s.ApplicationGateway),
		Indexes: []registration.Index{
			{
				Key:  ".spec.authenticationCertificates.data",
				Func: indexNetworkApplicationGatewayAuthenticationCertificatesData,
			},
			{
				Key:  ".spec.sslCertificates.data",
				Func: indexNetworkApplicationGatewaySslCertificatesData,
			},
			{
				Key:  ".spec.sslCertificates.password",
				Func: indexNetworkApplicationGatewaySslCertificatesPassword,
			},
			{
				Key:  ".spec.trustedClientCertificates.data",
				Func: indexNetworkApplicationGatewayTrustedClientCertificatesData,
			},
			{
				Key:  ".spec.trustedRootCertificates.data",
				Func: indexNetworkApplicationGatewayTrustedRootCertificatesData,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.authenticationCertificates.data", ".spec.sslCertificates.data", ".spec.sslCertificates.password", ".spec.trustedClientCertificates.data", ".spec.trustedRootCertificates.data"}, &network_v20220701s.ApplicationGatewayList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(network_v20220701s.DnsForwardingRuleSetsForwardingRule),
		Indexes: []registration.Index{
			{
				Key:  ".spec.targetDnsServers.ipAddressFromConfig",
				Func: indexNetworkDnsForwardingRuleSetsForwardingRuleIpAddressFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.targetDnsServers.ipAddressFromConfig"}, &network_v20220701s.DnsForwardingRuleSetsForwardingRuleList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(network_v20220701s.DnsForwardingRuleSetsVirtualNetworkLink)})
	result = append(result, &registration.StorageType{Obj: new(network_v20220701s.DnsForwardingRuleset)})
	result = append(result, &registration.StorageType{Obj: new(network_v20220701s.DnsResolver)})
	result = append(result, &registration.StorageType{Obj: new(network_v20220701s.DnsResolversInboundEndpoint)})
	result = append(result, &registration.StorageType{Obj: new(network_v20220701s.DnsResolversOutboundEndpoint)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240101s.ApplicationSecurityGroup)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240101s.WebApplicationFirewallPolicy)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.BastionHost)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.LoadBalancer)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.LoadBalancersInboundNatRule)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.NatGateway)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.NetworkInterface)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.NetworkSecurityGroup)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.NetworkSecurityGroupsSecurityRule)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.PrivateEndpoint)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.PrivateEndpointsPrivateDnsZoneGroup)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.PrivateLinkService)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.PublicIPAddress)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.PublicIPPrefix)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.RouteTable)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.RouteTablesRoute)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.VirtualNetwork)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.VirtualNetworkGateway)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.VirtualNetworksSubnet)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240301s.VirtualNetworksVirtualNetworkPeering)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240601s.PrivateDnsZone)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240601s.PrivateDnsZonesAAAARecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240601s.PrivateDnsZonesARecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240601s.PrivateDnsZonesCNAMERecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240601s.PrivateDnsZonesMXRecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240601s.PrivateDnsZonesPTRRecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240601s.PrivateDnsZonesSRVRecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240601s.PrivateDnsZonesTXTRecord)})
	result = append(result, &registration.StorageType{Obj: new(network_v20240601s.PrivateDnsZonesVirtualNetworkLink)})
	result = append(result, &registration.StorageType{Obj: new(networkfrontdoor_v20220501s.WebApplicationFirewallPolicy)})
	result = append(result, &registration.StorageType{Obj: new(operationalinsights_v20210601s.Workspace)})
	result = append(result, &registration.StorageType{
		Obj: new(redhatopenshift_v20231122s.OpenShiftCluster),
		Indexes: []registration.Index{
			{
				Key:  ".spec.servicePrincipalProfile.clientIdFromConfig",
				Func: indexRedhatopenshiftOpenShiftClusterClientIdFromConfig,
			},
			{
				Key:  ".spec.servicePrincipalProfile.clientSecret",
				Func: indexRedhatopenshiftOpenShiftClusterClientSecret,
			},
			{
				Key:  ".spec.clusterProfile.pullSecret",
				Func: indexRedhatopenshiftOpenShiftClusterPullSecret,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.clusterProfile.pullSecret", ".spec.servicePrincipalProfile.clientSecret"}, &redhatopenshift_v20231122s.OpenShiftClusterList{}),
			},
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.servicePrincipalProfile.clientIdFromConfig"}, &redhatopenshift_v20231122s.OpenShiftClusterList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(resources_v20200601s.ResourceGroup)})
	result = append(result, &registration.StorageType{Obj: new(search_v20220901s.SearchService)})
	result = append(result, &registration.StorageType{Obj: new(servicebus_v20211101s.Namespace)})
	result = append(result, &registration.StorageType{Obj: new(servicebus_v20211101s.NamespacesAuthorizationRule)})
	result = append(result, &registration.StorageType{Obj: new(servicebus_v20211101s.NamespacesQueue)})
	result = append(result, &registration.StorageType{Obj: new(servicebus_v20211101s.NamespacesTopic)})
	result = append(result, &registration.StorageType{Obj: new(servicebus_v20211101s.NamespacesTopicsSubscription)})
	result = append(result, &registration.StorageType{Obj: new(servicebus_v20211101s.NamespacesTopicsSubscriptionsRule)})
	result = append(result, &registration.StorageType{Obj: new(signalrservice_v20211001s.SignalR)})
	result = append(result, &registration.StorageType{
		Obj: new(sql_v20211101s.Server),
		Indexes: []registration.Index{
			{
				Key:  ".spec.administratorLoginPassword",
				Func: indexSqlServerAdministratorLoginPassword,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.administratorLoginPassword"}, &sql_v20211101s.ServerList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{
		Obj: new(sql_v20211101s.ServersAdministrator),
		Indexes: []registration.Index{
			{
				Key:  ".spec.sidFromConfig",
				Func: indexSqlServersAdministratorSidFromConfig,
			},
			{
				Key:  ".spec.tenantIdFromConfig",
				Func: indexSqlServersAdministratorTenantIdFromConfig,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.sidFromConfig", ".spec.tenantIdFromConfig"}, &sql_v20211101s.ServersAdministratorList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersAdvancedThreatProtectionSetting)})
	result = append(result, &registration.StorageType{
		Obj: new(sql_v20211101s.ServersAuditingSetting),
		Indexes: []registration.Index{
			{
				Key:  ".spec.storageAccountAccessKey",
				Func: indexSqlServersAuditingSettingStorageAccountAccessKey,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.storageAccountAccessKey"}, &sql_v20211101s.ServersAuditingSettingList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersAzureADOnlyAuthentication)})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersConnectionPolicy)})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersDatabase)})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersDatabasesAdvancedThreatProtectionSetting)})
	result = append(result, &registration.StorageType{
		Obj: new(sql_v20211101s.ServersDatabasesAuditingSetting),
		Indexes: []registration.Index{
			{
				Key:  ".spec.storageAccountAccessKey",
				Func: indexSqlServersDatabasesAuditingSettingStorageAccountAccessKey,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.storageAccountAccessKey"}, &sql_v20211101s.ServersDatabasesAuditingSettingList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersDatabasesBackupLongTermRetentionPolicy)})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersDatabasesBackupShortTermRetentionPolicy)})
	result = append(result, &registration.StorageType{
		Obj: new(sql_v20211101s.ServersDatabasesSecurityAlertPolicy),
		Indexes: []registration.Index{
			{
				Key:  ".spec.storageAccountAccessKey",
				Func: indexSqlServersDatabasesSecurityAlertPolicyStorageAccountAccessKey,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.storageAccountAccessKey"}, &sql_v20211101s.ServersDatabasesSecurityAlertPolicyList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersDatabasesTransparentDataEncryption)})
	result = append(result, &registration.StorageType{
		Obj: new(sql_v20211101s.ServersDatabasesVulnerabilityAssessment),
		Indexes: []registration.Index{
			{
				Key:  ".spec.storageAccountAccessKey",
				Func: indexSqlServersDatabasesVulnerabilityAssessmentStorageAccountAccessKey,
			},
			{
				Key:  ".spec.storageContainerPathFromConfig",
				Func: indexSqlServersDatabasesVulnerabilityAssessmentStorageContainerPathFromConfig,
			},
			{
				Key:  ".spec.storageContainerSasKey",
				Func: indexSqlServersDatabasesVulnerabilityAssessmentStorageContainerSasKey,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.storageAccountAccessKey", ".spec.storageContainerSasKey"}, &sql_v20211101s.ServersDatabasesVulnerabilityAssessmentList{}),
			},
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.storageContainerPathFromConfig"}, &sql_v20211101s.ServersDatabasesVulnerabilityAssessmentList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersElasticPool)})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersFailoverGroup)})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersFirewallRule)})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersIPV6FirewallRule)})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersOutboundFirewallRule)})
	result = append(result, &registration.StorageType{
		Obj: new(sql_v20211101s.ServersSecurityAlertPolicy),
		Indexes: []registration.Index{
			{
				Key:  ".spec.storageAccountAccessKey",
				Func: indexSqlServersSecurityAlertPolicyStorageAccountAccessKey,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.storageAccountAccessKey"}, &sql_v20211101s.ServersSecurityAlertPolicyList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(sql_v20211101s.ServersVirtualNetworkRule)})
	result = append(result, &registration.StorageType{
		Obj: new(sql_v20211101s.ServersVulnerabilityAssessment),
		Indexes: []registration.Index{
			{
				Key:  ".spec.storageAccountAccessKey",
				Func: indexSqlServersVulnerabilityAssessmentStorageAccountAccessKey,
			},
			{
				Key:  ".spec.storageContainerPathFromConfig",
				Func: indexSqlServersVulnerabilityAssessmentStorageContainerPathFromConfig,
			},
			{
				Key:  ".spec.storageContainerSasKey",
				Func: indexSqlServersVulnerabilityAssessmentStorageContainerSasKey,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.storageAccountAccessKey", ".spec.storageContainerSasKey"}, &sql_v20211101s.ServersVulnerabilityAssessmentList{}),
			},
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.storageContainerPathFromConfig"}, &sql_v20211101s.ServersVulnerabilityAssessmentList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(storage_v20230101s.StorageAccount)})
	result = append(result, &registration.StorageType{Obj: new(storage_v20230101s.StorageAccountsBlobService)})
	result = append(result, &registration.StorageType{Obj: new(storage_v20230101s.StorageAccountsBlobServicesContainer)})
	result = append(result, &registration.StorageType{Obj: new(storage_v20230101s.StorageAccountsFileService)})
	result = append(result, &registration.StorageType{Obj: new(storage_v20230101s.StorageAccountsFileServicesShare)})
	result = append(result, &registration.StorageType{Obj: new(storage_v20230101s.StorageAccountsManagementPolicy)})
	result = append(result, &registration.StorageType{Obj: new(storage_v20230101s.StorageAccountsQueueService)})
	result = append(result, &registration.StorageType{Obj: new(storage_v20230101s.StorageAccountsQueueServicesQueue)})
	result = append(result, &registration.StorageType{Obj: new(storage_v20230101s.StorageAccountsTableService)})
	result = append(result, &registration.StorageType{Obj: new(storage_v20230101s.StorageAccountsTableServicesTable)})
	result = append(result, &registration.StorageType{Obj: new(subscription_v20211001s.Alias)})
	result = append(result, &registration.StorageType{
		Obj: new(synapse_v20210601s.Workspace),
		Indexes: []registration.Index{
			{
				Key:  ".spec.defaultDataLakeStorage.accountUrlFromConfig",
				Func: indexSynapseWorkspaceAccountUrlFromConfig,
			},
			{
				Key:  ".spec.sqlAdministratorLoginPassword",
				Func: indexSynapseWorkspaceSqlAdministratorLoginPassword,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.sqlAdministratorLoginPassword"}, &synapse_v20210601s.WorkspaceList{}),
			},
			{
				Type:             &v1.ConfigMap{},
				MakeEventHandler: watchConfigMapsFactory([]string{".spec.defaultDataLakeStorage.accountUrlFromConfig"}, &synapse_v20210601s.WorkspaceList{}),
			},
		},
	})
	result = append(result, &registration.StorageType{Obj: new(synapse_v20210601s.WorkspacesBigDataPool)})
	result = append(result, &registration.StorageType{Obj: new(web_v20220301s.ServerFarm)})
	result = append(result, &registration.StorageType{
		Obj: new(web_v20220301s.Site),
		Indexes: []registration.Index{
			{
				Key:  ".spec.siteConfig.azureStorageAccounts.accessKey",
				Func: indexWebSiteAccessKey,
			},
		},
		Watches: []registration.Watch{
			{
				Type:             &v1.Secret{},
				MakeEventHandler: watchSecretsFactory([]string{".spec.siteConfig.azureStorageAccounts.accessKey"}, &web_v20220301s.SiteList{}),
			},
		},
	})
	return result
}

// getKnownTypes returns the list of all types.
func getKnownTypes() []client.Object {
	var result []client.Object
	result = append(result, new(alertsmanagement_v20210401.SmartDetectorAlertRule))
	result = append(result, new(alertsmanagement_v20210401s.SmartDetectorAlertRule))
	result = append(result, new(alertsmanagement_v20230301.PrometheusRuleGroup))
	result = append(result, new(alertsmanagement_v20230301s.PrometheusRuleGroup))
	result = append(
		result,
		new(apimanagement_v20220801.Api),
		new(apimanagement_v20220801.ApiVersionSet),
		new(apimanagement_v20220801.AuthorizationProvider),
		new(apimanagement_v20220801.AuthorizationProvidersAuthorization),
		new(apimanagement_v20220801.AuthorizationProvidersAuthorizationsAccessPolicy),
		new(apimanagement_v20220801.Backend),
		new(apimanagement_v20220801.NamedValue),
		new(apimanagement_v20220801.Policy),
		new(apimanagement_v20220801.PolicyFragment),
		new(apimanagement_v20220801.Product),
		new(apimanagement_v20220801.ProductApi),
		new(apimanagement_v20220801.ProductPolicy),
		new(apimanagement_v20220801.Service),
		new(apimanagement_v20220801.Subscription))
	result = append(
		result,
		new(apimanagement_v20220801s.Api),
		new(apimanagement_v20220801s.ApiVersionSet),
		new(apimanagement_v20220801s.AuthorizationProvider),
		new(apimanagement_v20220801s.AuthorizationProvidersAuthorization),
		new(apimanagement_v20220801s.AuthorizationProvidersAuthorizationsAccessPolicy),
		new(apimanagement_v20220801s.Backend),
		new(apimanagement_v20220801s.NamedValue),
		new(apimanagement_v20220801s.Policy),
		new(apimanagement_v20220801s.PolicyFragment),
		new(apimanagement_v20220801s.Product),
		new(apimanagement_v20220801s.ProductApi),
		new(apimanagement_v20220801s.ProductPolicy),
		new(apimanagement_v20220801s.Service),
		new(apimanagement_v20220801s.Subscription))
	result = append(
		result,
		new(apimanagement_v20230501p.Api),
		new(apimanagement_v20230501p.ApiVersionSet),
		new(apimanagement_v20230501p.AuthorizationProvider),
		new(apimanagement_v20230501p.AuthorizationProvidersAuthorization),
		new(apimanagement_v20230501p.AuthorizationProvidersAuthorizationsAccessPolicy),
		new(apimanagement_v20230501p.Backend),
		new(apimanagement_v20230501p.NamedValue),
		new(apimanagement_v20230501p.Policy),
		new(apimanagement_v20230501p.PolicyFragment),
		new(apimanagement_v20230501p.Product),
		new(apimanagement_v20230501p.ProductApi),
		new(apimanagement_v20230501p.ProductPolicy),
		new(apimanagement_v20230501p.Service),
		new(apimanagement_v20230501p.Subscription))
	result = append(
		result,
		new(apimanagement_v20230501ps.Api),
		new(apimanagement_v20230501ps.ApiVersionSet),
		new(apimanagement_v20230501ps.AuthorizationProvider),
		new(apimanagement_v20230501ps.AuthorizationProvidersAuthorization),
		new(apimanagement_v20230501ps.AuthorizationProvidersAuthorizationsAccessPolicy),
		new(apimanagement_v20230501ps.Backend),
		new(apimanagement_v20230501ps.NamedValue),
		new(apimanagement_v20230501ps.Policy),
		new(apimanagement_v20230501ps.PolicyFragment),
		new(apimanagement_v20230501ps.Product),
		new(apimanagement_v20230501ps.ProductApi),
		new(apimanagement_v20230501ps.ProductPolicy),
		new(apimanagement_v20230501ps.Service),
		new(apimanagement_v20230501ps.Subscription))
	result = append(result, new(appconfiguration_v20220501.ConfigurationStore))
	result = append(result, new(appconfiguration_v20220501s.ConfigurationStore))
	result = append(result, new(authorization_v20200801p.RoleAssignment))
	result = append(result, new(authorization_v20200801ps.RoleAssignment))
	result = append(
		result,
		new(authorization_v20220401.RoleAssignment),
		new(authorization_v20220401.RoleDefinition))
	result = append(
		result,
		new(authorization_v20220401s.RoleAssignment),
		new(authorization_v20220401s.RoleDefinition))
	result = append(result, new(batch_v20210101.BatchAccount))
	result = append(result, new(batch_v20210101s.BatchAccount))
	result = append(
		result,
		new(cache_v20201201.Redis),
		new(cache_v20201201.RedisFirewallRule),
		new(cache_v20201201.RedisLinkedServer),
		new(cache_v20201201.RedisPatchSchedule))
	result = append(
		result,
		new(cache_v20201201s.Redis),
		new(cache_v20201201s.RedisFirewallRule),
		new(cache_v20201201s.RedisLinkedServer),
		new(cache_v20201201s.RedisPatchSchedule))
	result = append(
		result,
		new(cache_v20210301.RedisEnterprise),
		new(cache_v20210301.RedisEnterpriseDatabase))
	result = append(
		result,
		new(cache_v20210301s.RedisEnterprise),
		new(cache_v20210301s.RedisEnterpriseDatabase))
	result = append(
		result,
		new(cache_v20230401.Redis),
		new(cache_v20230401.RedisFirewallRule),
		new(cache_v20230401.RedisLinkedServer),
		new(cache_v20230401.RedisPatchSchedule))
	result = append(
		result,
		new(cache_v20230401s.Redis),
		new(cache_v20230401s.RedisFirewallRule),
		new(cache_v20230401s.RedisLinkedServer),
		new(cache_v20230401s.RedisPatchSchedule))
	result = append(
		result,
		new(cache_v20230701.RedisEnterprise),
		new(cache_v20230701.RedisEnterpriseDatabase))
	result = append(
		result,
		new(cache_v20230701s.RedisEnterprise),
		new(cache_v20230701s.RedisEnterpriseDatabase))
	result = append(
		result,
		new(cache_v20230801.Redis),
		new(cache_v20230801.RedisFirewallRule),
		new(cache_v20230801.RedisLinkedServer),
		new(cache_v20230801.RedisPatchSchedule))
	result = append(
		result,
		new(cache_v20230801s.Redis),
		new(cache_v20230801s.RedisFirewallRule),
		new(cache_v20230801s.RedisLinkedServer),
		new(cache_v20230801s.RedisPatchSchedule))
	result = append(
		result,
		new(cdn_v20210601.Profile),
		new(cdn_v20210601.ProfilesEndpoint))
	result = append(
		result,
		new(cdn_v20210601s.Profile),
		new(cdn_v20210601s.ProfilesEndpoint))
	result = append(
		result,
		new(cdn_v20230501.AfdCustomDomain),
		new(cdn_v20230501.AfdEndpoint),
		new(cdn_v20230501.AfdOrigin),
		new(cdn_v20230501.AfdOriginGroup),
		new(cdn_v20230501.Profile),
		new(cdn_v20230501.Route),
		new(cdn_v20230501.Rule),
		new(cdn_v20230501.RuleSet),
		new(cdn_v20230501.Secret),
		new(cdn_v20230501.SecurityPolicy))
	result = append(
		result,
		new(cdn_v20230501s.AfdCustomDomain),
		new(cdn_v20230501s.AfdEndpoint),
		new(cdn_v20230501s.AfdOrigin),
		new(cdn_v20230501s.AfdOriginGroup),
		new(cdn_v20230501s.Profile),
		new(cdn_v20230501s.Route),
		new(cdn_v20230501s.Rule),
		new(cdn_v20230501s.RuleSet),
		new(cdn_v20230501s.Secret),
		new(cdn_v20230501s.SecurityPolicy))
	result = append(
		result,
		new(compute_v20200930.Disk),
		new(compute_v20200930.Snapshot))
	result = append(
		result,
		new(compute_v20200930s.Disk),
		new(compute_v20200930s.Snapshot))
	result = append(
		result,
		new(compute_v20201201.VirtualMachine),
		new(compute_v20201201.VirtualMachineScaleSet),
		new(compute_v20201201.VirtualMachineScaleSetsExtension),
		new(compute_v20201201.VirtualMachinesExtension))
	result = append(
		result,
		new(compute_v20201201s.VirtualMachine),
		new(compute_v20201201s.VirtualMachineScaleSet),
		new(compute_v20201201s.VirtualMachineScaleSetsExtension),
		new(compute_v20201201s.VirtualMachinesExtension))
	result = append(result, new(compute_v20210701.Image))
	result = append(result, new(compute_v20210701s.Image))
	result = append(
		result,
		new(compute_v20220301.Image),
		new(compute_v20220301.VirtualMachine),
		new(compute_v20220301.VirtualMachineScaleSet),
		new(compute_v20220301.VirtualMachineScaleSetsExtension),
		new(compute_v20220301.VirtualMachinesExtension))
	result = append(
		result,
		new(compute_v20220301s.Image),
		new(compute_v20220301s.VirtualMachine),
		new(compute_v20220301s.VirtualMachineScaleSet),
		new(compute_v20220301s.VirtualMachineScaleSetsExtension),
		new(compute_v20220301s.VirtualMachinesExtension))
	result = append(result, new(compute_v20220702.DiskEncryptionSet))
	result = append(result, new(compute_v20220702s.DiskEncryptionSet))
	result = append(
		result,
		new(compute_v20240302.Disk),
		new(compute_v20240302.DiskAccess),
		new(compute_v20240302.DiskEncryptionSet),
		new(compute_v20240302.Snapshot))
	result = append(
		result,
		new(compute_v20240302s.Disk),
		new(compute_v20240302s.DiskAccess),
		new(compute_v20240302s.DiskEncryptionSet),
		new(compute_v20240302s.Snapshot))
	result = append(result, new(containerinstance_v20211001.ContainerGroup))
	result = append(result, new(containerinstance_v20211001s.ContainerGroup))
	result = append(result, new(containerregistry_v20210901.Registry))
	result = append(result, new(containerregistry_v20210901s.Registry))
	result = append(
		result,
		new(containerservice_v20210501.ManagedCluster),
		new(containerservice_v20210501.ManagedClustersAgentPool))
	result = append(
		result,
		new(containerservice_v20210501s.ManagedCluster),
		new(containerservice_v20210501s.ManagedClustersAgentPool))
	result = append(
		result,
		new(containerservice_v20230201.ManagedCluster),
		new(containerservice_v20230201.ManagedClustersAgentPool))
	result = append(
		result,
		new(containerservice_v20230201s.ManagedCluster),
		new(containerservice_v20230201s.ManagedClustersAgentPool))
	result = append(
		result,
		new(containerservice_v20230315p.Fleet),
		new(containerservice_v20230315p.FleetsMember),
		new(containerservice_v20230315p.FleetsUpdateRun))
	result = append(
		result,
		new(containerservice_v20230315ps.Fleet),
		new(containerservice_v20230315ps.FleetsMember),
		new(containerservice_v20230315ps.FleetsUpdateRun))
	result = append(
		result,
		new(containerservice_v20231001.ManagedCluster),
		new(containerservice_v20231001.ManagedClustersAgentPool),
		new(containerservice_v20231001.TrustedAccessRoleBinding))
	result = append(
		result,
		new(containerservice_v20231001s.ManagedCluster),
		new(containerservice_v20231001s.ManagedClustersAgentPool),
		new(containerservice_v20231001s.TrustedAccessRoleBinding))
	result = append(
		result,
		new(containerservice_v20231102p.ManagedCluster),
		new(containerservice_v20231102p.ManagedClustersAgentPool))
	result = append(
		result,
		new(containerservice_v20231102ps.ManagedCluster),
		new(containerservice_v20231102ps.ManagedClustersAgentPool))
	result = append(
		result,
		new(containerservice_v20240402p.ManagedCluster),
		new(containerservice_v20240402p.ManagedClustersAgentPool),
		new(containerservice_v20240402p.TrustedAccessRoleBinding))
	result = append(
		result,
		new(containerservice_v20240402ps.ManagedCluster),
		new(containerservice_v20240402ps.ManagedClustersAgentPool),
		new(containerservice_v20240402ps.TrustedAccessRoleBinding))
	result = append(
		result,
		new(containerservice_v20240901.MaintenanceConfiguration),
		new(containerservice_v20240901.ManagedCluster),
		new(containerservice_v20240901.ManagedClustersAgentPool),
		new(containerservice_v20240901.TrustedAccessRoleBinding))
	result = append(
		result,
		new(containerservice_v20240901s.MaintenanceConfiguration),
		new(containerservice_v20240901s.ManagedCluster),
		new(containerservice_v20240901s.ManagedClustersAgentPool),
		new(containerservice_v20240901s.TrustedAccessRoleBinding))
	result = append(result, new(datafactory_v20180601.Factory))
	result = append(result, new(datafactory_v20180601s.Factory))
	result = append(
		result,
		new(dataprotection_v20230101.BackupVault),
		new(dataprotection_v20230101.BackupVaultsBackupPolicy))
	result = append(
		result,
		new(dataprotection_v20230101s.BackupVault),
		new(dataprotection_v20230101s.BackupVaultsBackupPolicy))
	result = append(
		result,
		new(dataprotection_v20231101.BackupVault),
		new(dataprotection_v20231101.BackupVaultsBackupInstance),
		new(dataprotection_v20231101.BackupVaultsBackupPolicy))
	result = append(
		result,
		new(dataprotection_v20231101s.BackupVault),
		new(dataprotection_v20231101s.BackupVaultsBackupInstance),
		new(dataprotection_v20231101s.BackupVaultsBackupPolicy))
	result = append(
		result,
		new(dbformariadb_v20180601.Configuration),
		new(dbformariadb_v20180601.Database),
		new(dbformariadb_v20180601.Server))
	result = append(
		result,
		new(dbformariadb_v20180601s.Configuration),
		new(dbformariadb_v20180601s.Database),
		new(dbformariadb_v20180601s.Server))
	result = append(
		result,
		new(dbformysql_v20210501.FlexibleServer),
		new(dbformysql_v20210501.FlexibleServersDatabase),
		new(dbformysql_v20210501.FlexibleServersFirewallRule))
	result = append(
		result,
		new(dbformysql_v20210501s.FlexibleServer),
		new(dbformysql_v20210501s.FlexibleServersDatabase),
		new(dbformysql_v20210501s.FlexibleServersFirewallRule))
	result = append(
		result,
		new(dbformysql_v20220101.FlexibleServersAdministrator),
		new(dbformysql_v20220101.FlexibleServersConfiguration))
	result = append(
		result,
		new(dbformysql_v20220101s.FlexibleServersAdministrator),
		new(dbformysql_v20220101s.FlexibleServersConfiguration))
	result = append(
		result,
		new(dbformysql_v20230630.FlexibleServer),
		new(dbformysql_v20230630.FlexibleServersAdministrator),
		new(dbformysql_v20230630.FlexibleServersConfiguration),
		new(dbformysql_v20230630.FlexibleServersDatabase),
		new(dbformysql_v20230630.FlexibleServersFirewallRule))
	result = append(
		result,
		new(dbformysql_v20230630s.FlexibleServer),
		new(dbformysql_v20230630s.FlexibleServersAdministrator),
		new(dbformysql_v20230630s.FlexibleServersConfiguration),
		new(dbformysql_v20230630s.FlexibleServersDatabase),
		new(dbformysql_v20230630s.FlexibleServersFirewallRule))
	result = append(
		result,
		new(dbforpostgresql_v20210601.FlexibleServer),
		new(dbforpostgresql_v20210601.FlexibleServersConfiguration),
		new(dbforpostgresql_v20210601.FlexibleServersDatabase),
		new(dbforpostgresql_v20210601.FlexibleServersFirewallRule))
	result = append(
		result,
		new(dbforpostgresql_v20210601s.FlexibleServer),
		new(dbforpostgresql_v20210601s.FlexibleServersConfiguration),
		new(dbforpostgresql_v20210601s.FlexibleServersDatabase),
		new(dbforpostgresql_v20210601s.FlexibleServersFirewallRule))
	result = append(
		result,
		new(dbforpostgresql_v20220120p.FlexibleServer),
		new(dbforpostgresql_v20220120p.FlexibleServersConfiguration),
		new(dbforpostgresql_v20220120p.FlexibleServersDatabase),
		new(dbforpostgresql_v20220120p.FlexibleServersFirewallRule))
	result = append(
		result,
		new(dbforpostgresql_v20220120ps.FlexibleServer),
		new(dbforpostgresql_v20220120ps.FlexibleServersConfiguration),
		new(dbforpostgresql_v20220120ps.FlexibleServersDatabase),
		new(dbforpostgresql_v20220120ps.FlexibleServersFirewallRule))
	result = append(
		result,
		new(dbforpostgresql_v20221201.FlexibleServer),
		new(dbforpostgresql_v20221201.FlexibleServersConfiguration),
		new(dbforpostgresql_v20221201.FlexibleServersDatabase),
		new(dbforpostgresql_v20221201.FlexibleServersFirewallRule))
	result = append(
		result,
		new(dbforpostgresql_v20221201s.FlexibleServer),
		new(dbforpostgresql_v20221201s.FlexibleServersConfiguration),
		new(dbforpostgresql_v20221201s.FlexibleServersDatabase),
		new(dbforpostgresql_v20221201s.FlexibleServersFirewallRule))
	result = append(
		result,
		new(dbforpostgresql_v20230601p.FlexibleServer),
		new(dbforpostgresql_v20230601p.FlexibleServersConfiguration),
		new(dbforpostgresql_v20230601p.FlexibleServersDatabase),
		new(dbforpostgresql_v20230601p.FlexibleServersFirewallRule))
	result = append(
		result,
		new(dbforpostgresql_v20230601ps.FlexibleServer),
		new(dbforpostgresql_v20230601ps.FlexibleServersConfiguration),
		new(dbforpostgresql_v20230601ps.FlexibleServersDatabase),
		new(dbforpostgresql_v20230601ps.FlexibleServersFirewallRule))
	result = append(result, new(devices_v20210702.IotHub))
	result = append(result, new(devices_v20210702s.IotHub))
	result = append(
		result,
		new(documentdb_v20210515.DatabaseAccount),
		new(documentdb_v20210515.MongodbDatabase),
		new(documentdb_v20210515.MongodbDatabaseCollection),
		new(documentdb_v20210515.MongodbDatabaseCollectionThroughputSetting),
		new(documentdb_v20210515.MongodbDatabaseThroughputSetting),
		new(documentdb_v20210515.SqlDatabase),
		new(documentdb_v20210515.SqlDatabaseContainer),
		new(documentdb_v20210515.SqlDatabaseContainerStoredProcedure),
		new(documentdb_v20210515.SqlDatabaseContainerThroughputSetting),
		new(documentdb_v20210515.SqlDatabaseContainerTrigger),
		new(documentdb_v20210515.SqlDatabaseContainerUserDefinedFunction),
		new(documentdb_v20210515.SqlDatabaseThroughputSetting),
		new(documentdb_v20210515.SqlRoleAssignment))
	result = append(
		result,
		new(documentdb_v20210515s.DatabaseAccount),
		new(documentdb_v20210515s.MongodbDatabase),
		new(documentdb_v20210515s.MongodbDatabaseCollection),
		new(documentdb_v20210515s.MongodbDatabaseCollectionThroughputSetting),
		new(documentdb_v20210515s.MongodbDatabaseThroughputSetting),
		new(documentdb_v20210515s.SqlDatabase),
		new(documentdb_v20210515s.SqlDatabaseContainer),
		new(documentdb_v20210515s.SqlDatabaseContainerStoredProcedure),
		new(documentdb_v20210515s.SqlDatabaseContainerThroughputSetting),
		new(documentdb_v20210515s.SqlDatabaseContainerTrigger),
		new(documentdb_v20210515s.SqlDatabaseContainerUserDefinedFunction),
		new(documentdb_v20210515s.SqlDatabaseThroughputSetting),
		new(documentdb_v20210515s.SqlRoleAssignment))
	result = append(
		result,
		new(documentdb_v20231115.DatabaseAccount),
		new(documentdb_v20231115.MongodbDatabase),
		new(documentdb_v20231115.MongodbDatabaseCollection),
		new(documentdb_v20231115.MongodbDatabaseCollectionThroughputSetting),
		new(documentdb_v20231115.MongodbDatabaseThroughputSetting),
		new(documentdb_v20231115.SqlDatabase),
		new(documentdb_v20231115.SqlDatabaseContainer),
		new(documentdb_v20231115.SqlDatabaseContainerStoredProcedure),
		new(documentdb_v20231115.SqlDatabaseContainerThroughputSetting),
		new(documentdb_v20231115.SqlDatabaseContainerTrigger),
		new(documentdb_v20231115.SqlDatabaseContainerUserDefinedFunction),
		new(documentdb_v20231115.SqlDatabaseThroughputSetting),
		new(documentdb_v20231115.SqlRoleAssignment))
	result = append(
		result,
		new(documentdb_v20231115s.DatabaseAccount),
		new(documentdb_v20231115s.MongodbDatabase),
		new(documentdb_v20231115s.MongodbDatabaseCollection),
		new(documentdb_v20231115s.MongodbDatabaseCollectionThroughputSetting),
		new(documentdb_v20231115s.MongodbDatabaseThroughputSetting),
		new(documentdb_v20231115s.SqlDatabase),
		new(documentdb_v20231115s.SqlDatabaseContainer),
		new(documentdb_v20231115s.SqlDatabaseContainerStoredProcedure),
		new(documentdb_v20231115s.SqlDatabaseContainerThroughputSetting),
		new(documentdb_v20231115s.SqlDatabaseContainerTrigger),
		new(documentdb_v20231115s.SqlDatabaseContainerUserDefinedFunction),
		new(documentdb_v20231115s.SqlDatabaseThroughputSetting),
		new(documentdb_v20231115s.SqlRoleAssignment))
	result = append(
		result,
		new(eventgrid_v20200601.Domain),
		new(eventgrid_v20200601.DomainsTopic),
		new(eventgrid_v20200601.EventSubscription),
		new(eventgrid_v20200601.Topic))
	result = append(
		result,
		new(eventgrid_v20200601s.Domain),
		new(eventgrid_v20200601s.DomainsTopic),
		new(eventgrid_v20200601s.EventSubscription),
		new(eventgrid_v20200601s.Topic))
	result = append(
		result,
		new(eventhub_v20211101.Namespace),
		new(eventhub_v20211101.NamespacesAuthorizationRule),
		new(eventhub_v20211101.NamespacesEventhub),
		new(eventhub_v20211101.NamespacesEventhubsAuthorizationRule),
		new(eventhub_v20211101.NamespacesEventhubsConsumerGroup))
	result = append(
		result,
		new(eventhub_v20211101s.Namespace),
		new(eventhub_v20211101s.NamespacesAuthorizationRule),
		new(eventhub_v20211101s.NamespacesEventhub),
		new(eventhub_v20211101s.NamespacesEventhubsAuthorizationRule),
		new(eventhub_v20211101s.NamespacesEventhubsConsumerGroup))
	result = append(result, new(insights_v20180301.MetricAlert))
	result = append(result, new(insights_v20180301s.MetricAlert))
	result = append(result, new(insights_v20180501p.Webtest))
	result = append(result, new(insights_v20180501ps.Webtest))
	result = append(result, new(insights_v20200202.Component))
	result = append(result, new(insights_v20200202s.Component))
	result = append(result, new(insights_v20210501p.DiagnosticSetting))
	result = append(result, new(insights_v20210501ps.DiagnosticSetting))
	result = append(
		result,
		new(insights_v20220615.ScheduledQueryRule),
		new(insights_v20220615.Webtest))
	result = append(
		result,
		new(insights_v20220615s.ScheduledQueryRule),
		new(insights_v20220615s.Webtest))
	result = append(result, new(insights_v20221001.AutoscaleSetting))
	result = append(result, new(insights_v20221001s.AutoscaleSetting))
	result = append(result, new(insights_v20230101.ActionGroup))
	result = append(result, new(insights_v20230101s.ActionGroup))
	result = append(result, new(keyvault_v20210401p.Vault))
	result = append(result, new(keyvault_v20210401ps.Vault))
	result = append(result, new(keyvault_v20230701.Vault))
	result = append(result, new(keyvault_v20230701s.Vault))
	result = append(
		result,
		new(kubernetesconfiguration_v20230501.Extension),
		new(kubernetesconfiguration_v20230501.FluxConfiguration))
	result = append(
		result,
		new(kubernetesconfiguration_v20230501s.Extension),
		new(kubernetesconfiguration_v20230501s.FluxConfiguration))
	result = append(
		result,
		new(machinelearningservices_v20210701.Workspace),
		new(machinelearningservices_v20210701.WorkspacesCompute),
		new(machinelearningservices_v20210701.WorkspacesConnection))
	result = append(
		result,
		new(machinelearningservices_v20210701s.Workspace),
		new(machinelearningservices_v20210701s.WorkspacesCompute),
		new(machinelearningservices_v20210701s.WorkspacesConnection))
	result = append(
		result,
		new(machinelearningservices_v20240401.Registry),
		new(machinelearningservices_v20240401.Workspace),
		new(machinelearningservices_v20240401.WorkspacesCompute),
		new(machinelearningservices_v20240401.WorkspacesConnection))
	result = append(
		result,
		new(machinelearningservices_v20240401s.Registry),
		new(machinelearningservices_v20240401s.Workspace),
		new(machinelearningservices_v20240401s.WorkspacesCompute),
		new(machinelearningservices_v20240401s.WorkspacesConnection))
	result = append(result, new(managedidentity_v20181130.UserAssignedIdentity))
	result = append(result, new(managedidentity_v20181130s.UserAssignedIdentity))
	result = append(result, new(managedidentity_v20220131p.FederatedIdentityCredential))
	result = append(result, new(managedidentity_v20220131ps.FederatedIdentityCredential))
	result = append(
		result,
		new(managedidentity_v20230131.FederatedIdentityCredential),
		new(managedidentity_v20230131.UserAssignedIdentity))
	result = append(
		result,
		new(managedidentity_v20230131s.FederatedIdentityCredential),
		new(managedidentity_v20230131s.UserAssignedIdentity))
	result = append(result, new(monitor_v20230403.Account))
	result = append(result, new(monitor_v20230403s.Account))
	result = append(
		result,
		new(network_v20180501.DnsZone),
		new(network_v20180501.DnsZonesAAAARecord),
		new(network_v20180501.DnsZonesARecord),
		new(network_v20180501.DnsZonesCAARecord),
		new(network_v20180501.DnsZonesCNAMERecord),
		new(network_v20180501.DnsZonesMXRecord),
		new(network_v20180501.DnsZonesNSRecord),
		new(network_v20180501.DnsZonesPTRRecord),
		new(network_v20180501.DnsZonesSRVRecord),
		new(network_v20180501.DnsZonesTXTRecord))
	result = append(
		result,
		new(network_v20180501s.DnsZone),
		new(network_v20180501s.DnsZonesAAAARecord),
		new(network_v20180501s.DnsZonesARecord),
		new(network_v20180501s.DnsZonesCAARecord),
		new(network_v20180501s.DnsZonesCNAMERecord),
		new(network_v20180501s.DnsZonesMXRecord),
		new(network_v20180501s.DnsZonesNSRecord),
		new(network_v20180501s.DnsZonesPTRRecord),
		new(network_v20180501s.DnsZonesSRVRecord),
		new(network_v20180501s.DnsZonesTXTRecord))
	result = append(result, new(network_v20180901.PrivateDnsZone))
	result = append(result, new(network_v20180901s.PrivateDnsZone))
	result = append(
		result,
		new(network_v20200601.PrivateDnsZonesAAAARecord),
		new(network_v20200601.PrivateDnsZonesARecord),
		new(network_v20200601.PrivateDnsZonesCNAMERecord),
		new(network_v20200601.PrivateDnsZonesMXRecord),
		new(network_v20200601.PrivateDnsZonesPTRRecord),
		new(network_v20200601.PrivateDnsZonesSRVRecord),
		new(network_v20200601.PrivateDnsZonesTXTRecord),
		new(network_v20200601.PrivateDnsZonesVirtualNetworkLink))
	result = append(
		result,
		new(network_v20200601s.PrivateDnsZonesAAAARecord),
		new(network_v20200601s.PrivateDnsZonesARecord),
		new(network_v20200601s.PrivateDnsZonesCNAMERecord),
		new(network_v20200601s.PrivateDnsZonesMXRecord),
		new(network_v20200601s.PrivateDnsZonesPTRRecord),
		new(network_v20200601s.PrivateDnsZonesSRVRecord),
		new(network_v20200601s.PrivateDnsZonesTXTRecord),
		new(network_v20200601s.PrivateDnsZonesVirtualNetworkLink))
	result = append(
		result,
		new(network_v20201101.LoadBalancer),
		new(network_v20201101.LoadBalancersInboundNatRule),
		new(network_v20201101.NetworkInterface),
		new(network_v20201101.NetworkSecurityGroup),
		new(network_v20201101.NetworkSecurityGroupsSecurityRule),
		new(network_v20201101.PublicIPAddress),
		new(network_v20201101.RouteTable),
		new(network_v20201101.RouteTablesRoute),
		new(network_v20201101.VirtualNetwork),
		new(network_v20201101.VirtualNetworkGateway),
		new(network_v20201101.VirtualNetworksSubnet),
		new(network_v20201101.VirtualNetworksVirtualNetworkPeering))
	result = append(
		result,
		new(network_v20201101s.LoadBalancer),
		new(network_v20201101s.LoadBalancersInboundNatRule),
		new(network_v20201101s.NetworkInterface),
		new(network_v20201101s.NetworkSecurityGroup),
		new(network_v20201101s.NetworkSecurityGroupsSecurityRule),
		new(network_v20201101s.PublicIPAddress),
		new(network_v20201101s.RouteTable),
		new(network_v20201101s.RouteTablesRoute),
		new(network_v20201101s.VirtualNetwork),
		new(network_v20201101s.VirtualNetworkGateway),
		new(network_v20201101s.VirtualNetworksSubnet),
		new(network_v20201101s.VirtualNetworksVirtualNetworkPeering))
	result = append(
		result,
		new(network_v20220401.TrafficManagerProfile),
		new(network_v20220401.TrafficManagerProfilesAzureEndpoint),
		new(network_v20220401.TrafficManagerProfilesExternalEndpoint),
		new(network_v20220401.TrafficManagerProfilesNestedEndpoint))
	result = append(
		result,
		new(network_v20220401s.TrafficManagerProfile),
		new(network_v20220401s.TrafficManagerProfilesAzureEndpoint),
		new(network_v20220401s.TrafficManagerProfilesExternalEndpoint),
		new(network_v20220401s.TrafficManagerProfilesNestedEndpoint))
	result = append(
		result,
		new(network_v20220701.ApplicationGateway),
		new(network_v20220701.BastionHost),
		new(network_v20220701.DnsForwardingRuleSetsForwardingRule),
		new(network_v20220701.DnsForwardingRuleSetsVirtualNetworkLink),
		new(network_v20220701.DnsForwardingRuleset),
		new(network_v20220701.DnsResolver),
		new(network_v20220701.DnsResolversInboundEndpoint),
		new(network_v20220701.DnsResolversOutboundEndpoint),
		new(network_v20220701.NatGateway),
		new(network_v20220701.PrivateEndpoint),
		new(network_v20220701.PrivateEndpointsPrivateDnsZoneGroup),
		new(network_v20220701.PrivateLinkService),
		new(network_v20220701.PublicIPPrefix))
	result = append(
		result,
		new(network_v20220701s.ApplicationGateway),
		new(network_v20220701s.BastionHost),
		new(network_v20220701s.DnsForwardingRuleSetsForwardingRule),
		new(network_v20220701s.DnsForwardingRuleSetsVirtualNetworkLink),
		new(network_v20220701s.DnsForwardingRuleset),
		new(network_v20220701s.DnsResolver),
		new(network_v20220701s.DnsResolversInboundEndpoint),
		new(network_v20220701s.DnsResolversOutboundEndpoint),
		new(network_v20220701s.NatGateway),
		new(network_v20220701s.PrivateEndpoint),
		new(network_v20220701s.PrivateEndpointsPrivateDnsZoneGroup),
		new(network_v20220701s.PrivateLinkService),
		new(network_v20220701s.PublicIPPrefix))
	result = append(
		result,
		new(network_v20240101.ApplicationSecurityGroup),
		new(network_v20240101.WebApplicationFirewallPolicy))
	result = append(
		result,
		new(network_v20240101s.ApplicationSecurityGroup),
		new(network_v20240101s.WebApplicationFirewallPolicy))
	result = append(
		result,
		new(network_v20240301.BastionHost),
		new(network_v20240301.LoadBalancer),
		new(network_v20240301.LoadBalancersInboundNatRule),
		new(network_v20240301.NatGateway),
		new(network_v20240301.NetworkInterface),
		new(network_v20240301.NetworkSecurityGroup),
		new(network_v20240301.NetworkSecurityGroupsSecurityRule),
		new(network_v20240301.PrivateEndpoint),
		new(network_v20240301.PrivateEndpointsPrivateDnsZoneGroup),
		new(network_v20240301.PrivateLinkService),
		new(network_v20240301.PublicIPAddress),
		new(network_v20240301.PublicIPPrefix),
		new(network_v20240301.RouteTable),
		new(network_v20240301.RouteTablesRoute),
		new(network_v20240301.VirtualNetwork),
		new(network_v20240301.VirtualNetworkGateway),
		new(network_v20240301.VirtualNetworksSubnet),
		new(network_v20240301.VirtualNetworksVirtualNetworkPeering))
	result = append(
		result,
		new(network_v20240301s.BastionHost),
		new(network_v20240301s.LoadBalancer),
		new(network_v20240301s.LoadBalancersInboundNatRule),
		new(network_v20240301s.NatGateway),
		new(network_v20240301s.NetworkInterface),
		new(network_v20240301s.NetworkSecurityGroup),
		new(network_v20240301s.NetworkSecurityGroupsSecurityRule),
		new(network_v20240301s.PrivateEndpoint),
		new(network_v20240301s.PrivateEndpointsPrivateDnsZoneGroup),
		new(network_v20240301s.PrivateLinkService),
		new(network_v20240301s.PublicIPAddress),
		new(network_v20240301s.PublicIPPrefix),
		new(network_v20240301s.RouteTable),
		new(network_v20240301s.RouteTablesRoute),
		new(network_v20240301s.VirtualNetwork),
		new(network_v20240301s.VirtualNetworkGateway),
		new(network_v20240301s.VirtualNetworksSubnet),
		new(network_v20240301s.VirtualNetworksVirtualNetworkPeering))
	result = append(
		result,
		new(network_v20240601.PrivateDnsZone),
		new(network_v20240601.PrivateDnsZonesAAAARecord),
		new(network_v20240601.PrivateDnsZonesARecord),
		new(network_v20240601.PrivateDnsZonesCNAMERecord),
		new(network_v20240601.PrivateDnsZonesMXRecord),
		new(network_v20240601.PrivateDnsZonesPTRRecord),
		new(network_v20240601.PrivateDnsZonesSRVRecord),
		new(network_v20240601.PrivateDnsZonesTXTRecord),
		new(network_v20240601.PrivateDnsZonesVirtualNetworkLink))
	result = append(
		result,
		new(network_v20240601s.PrivateDnsZone),
		new(network_v20240601s.PrivateDnsZonesAAAARecord),
		new(network_v20240601s.PrivateDnsZonesARecord),
		new(network_v20240601s.PrivateDnsZonesCNAMERecord),
		new(network_v20240601s.PrivateDnsZonesMXRecord),
		new(network_v20240601s.PrivateDnsZonesPTRRecord),
		new(network_v20240601s.PrivateDnsZonesSRVRecord),
		new(network_v20240601s.PrivateDnsZonesTXTRecord),
		new(network_v20240601s.PrivateDnsZonesVirtualNetworkLink))
	result = append(result, new(networkfrontdoor_v20220501.WebApplicationFirewallPolicy))
	result = append(result, new(networkfrontdoor_v20220501s.WebApplicationFirewallPolicy))
	result = append(result, new(operationalinsights_v20210601.Workspace))
	result = append(result, new(operationalinsights_v20210601s.Workspace))
	result = append(result, new(redhatopenshift_v20231122.OpenShiftCluster))
	result = append(result, new(redhatopenshift_v20231122s.OpenShiftCluster))
	result = append(result, new(resources_v20200601.ResourceGroup))
	result = append(result, new(resources_v20200601s.ResourceGroup))
	result = append(result, new(search_v20220901.SearchService))
	result = append(result, new(search_v20220901s.SearchService))
	result = append(
		result,
		new(servicebus_v20210101p.Namespace),
		new(servicebus_v20210101p.NamespacesAuthorizationRule),
		new(servicebus_v20210101p.NamespacesQueue),
		new(servicebus_v20210101p.NamespacesTopic),
		new(servicebus_v20210101p.NamespacesTopicsSubscription),
		new(servicebus_v20210101p.NamespacesTopicsSubscriptionsRule))
	result = append(
		result,
		new(servicebus_v20210101ps.Namespace),
		new(servicebus_v20210101ps.NamespacesAuthorizationRule),
		new(servicebus_v20210101ps.NamespacesQueue),
		new(servicebus_v20210101ps.NamespacesTopic),
		new(servicebus_v20210101ps.NamespacesTopicsSubscription),
		new(servicebus_v20210101ps.NamespacesTopicsSubscriptionsRule))
	result = append(
		result,
		new(servicebus_v20211101.Namespace),
		new(servicebus_v20211101.NamespacesAuthorizationRule),
		new(servicebus_v20211101.NamespacesQueue),
		new(servicebus_v20211101.NamespacesTopic),
		new(servicebus_v20211101.NamespacesTopicsSubscription),
		new(servicebus_v20211101.NamespacesTopicsSubscriptionsRule))
	result = append(
		result,
		new(servicebus_v20211101s.Namespace),
		new(servicebus_v20211101s.NamespacesAuthorizationRule),
		new(servicebus_v20211101s.NamespacesQueue),
		new(servicebus_v20211101s.NamespacesTopic),
		new(servicebus_v20211101s.NamespacesTopicsSubscription),
		new(servicebus_v20211101s.NamespacesTopicsSubscriptionsRule))
	result = append(
		result,
		new(servicebus_v20221001p.Namespace),
		new(servicebus_v20221001p.NamespacesAuthorizationRule),
		new(servicebus_v20221001p.NamespacesQueue),
		new(servicebus_v20221001p.NamespacesTopic),
		new(servicebus_v20221001p.NamespacesTopicsSubscription),
		new(servicebus_v20221001p.NamespacesTopicsSubscriptionsRule))
	result = append(
		result,
		new(servicebus_v20221001ps.Namespace),
		new(servicebus_v20221001ps.NamespacesAuthorizationRule),
		new(servicebus_v20221001ps.NamespacesQueue),
		new(servicebus_v20221001ps.NamespacesTopic),
		new(servicebus_v20221001ps.NamespacesTopicsSubscription),
		new(servicebus_v20221001ps.NamespacesTopicsSubscriptionsRule))
	result = append(result, new(signalrservice_v20211001.SignalR))
	result = append(result, new(signalrservice_v20211001s.SignalR))
	result = append(
		result,
		new(sql_v20211101.Server),
		new(sql_v20211101.ServersAdministrator),
		new(sql_v20211101.ServersAdvancedThreatProtectionSetting),
		new(sql_v20211101.ServersAuditingSetting),
		new(sql_v20211101.ServersAzureADOnlyAuthentication),
		new(sql_v20211101.ServersConnectionPolicy),
		new(sql_v20211101.ServersDatabase),
		new(sql_v20211101.ServersDatabasesAdvancedThreatProtectionSetting),
		new(sql_v20211101.ServersDatabasesAuditingSetting),
		new(sql_v20211101.ServersDatabasesBackupLongTermRetentionPolicy),
		new(sql_v20211101.ServersDatabasesBackupShortTermRetentionPolicy),
		new(sql_v20211101.ServersDatabasesSecurityAlertPolicy),
		new(sql_v20211101.ServersDatabasesTransparentDataEncryption),
		new(sql_v20211101.ServersDatabasesVulnerabilityAssessment),
		new(sql_v20211101.ServersElasticPool),
		new(sql_v20211101.ServersFailoverGroup),
		new(sql_v20211101.ServersFirewallRule),
		new(sql_v20211101.ServersIPV6FirewallRule),
		new(sql_v20211101.ServersOutboundFirewallRule),
		new(sql_v20211101.ServersSecurityAlertPolicy),
		new(sql_v20211101.ServersVirtualNetworkRule),
		new(sql_v20211101.ServersVulnerabilityAssessment))
	result = append(
		result,
		new(sql_v20211101s.Server),
		new(sql_v20211101s.ServersAdministrator),
		new(sql_v20211101s.ServersAdvancedThreatProtectionSetting),
		new(sql_v20211101s.ServersAuditingSetting),
		new(sql_v20211101s.ServersAzureADOnlyAuthentication),
		new(sql_v20211101s.ServersConnectionPolicy),
		new(sql_v20211101s.ServersDatabase),
		new(sql_v20211101s.ServersDatabasesAdvancedThreatProtectionSetting),
		new(sql_v20211101s.ServersDatabasesAuditingSetting),
		new(sql_v20211101s.ServersDatabasesBackupLongTermRetentionPolicy),
		new(sql_v20211101s.ServersDatabasesBackupShortTermRetentionPolicy),
		new(sql_v20211101s.ServersDatabasesSecurityAlertPolicy),
		new(sql_v20211101s.ServersDatabasesTransparentDataEncryption),
		new(sql_v20211101s.ServersDatabasesVulnerabilityAssessment),
		new(sql_v20211101s.ServersElasticPool),
		new(sql_v20211101s.ServersFailoverGroup),
		new(sql_v20211101s.ServersFirewallRule),
		new(sql_v20211101s.ServersIPV6FirewallRule),
		new(sql_v20211101s.ServersOutboundFirewallRule),
		new(sql_v20211101s.ServersSecurityAlertPolicy),
		new(sql_v20211101s.ServersVirtualNetworkRule),
		new(sql_v20211101s.ServersVulnerabilityAssessment))
	result = append(
		result,
		new(storage_v20210401.StorageAccount),
		new(storage_v20210401.StorageAccountsBlobService),
		new(storage_v20210401.StorageAccountsBlobServicesContainer),
		new(storage_v20210401.StorageAccountsManagementPolicy),
		new(storage_v20210401.StorageAccountsQueueService),
		new(storage_v20210401.StorageAccountsQueueServicesQueue))
	result = append(
		result,
		new(storage_v20210401s.StorageAccount),
		new(storage_v20210401s.StorageAccountsBlobService),
		new(storage_v20210401s.StorageAccountsBlobServicesContainer),
		new(storage_v20210401s.StorageAccountsManagementPolicy),
		new(storage_v20210401s.StorageAccountsQueueService),
		new(storage_v20210401s.StorageAccountsQueueServicesQueue))
	result = append(
		result,
		new(storage_v20220901.StorageAccount),
		new(storage_v20220901.StorageAccountsBlobService),
		new(storage_v20220901.StorageAccountsBlobServicesContainer),
		new(storage_v20220901.StorageAccountsFileService),
		new(storage_v20220901.StorageAccountsFileServicesShare),
		new(storage_v20220901.StorageAccountsManagementPolicy),
		new(storage_v20220901.StorageAccountsQueueService),
		new(storage_v20220901.StorageAccountsQueueServicesQueue),
		new(storage_v20220901.StorageAccountsTableService),
		new(storage_v20220901.StorageAccountsTableServicesTable))
	result = append(
		result,
		new(storage_v20220901s.StorageAccount),
		new(storage_v20220901s.StorageAccountsBlobService),
		new(storage_v20220901s.StorageAccountsBlobServicesContainer),
		new(storage_v20220901s.StorageAccountsFileService),
		new(storage_v20220901s.StorageAccountsFileServicesShare),
		new(storage_v20220901s.StorageAccountsManagementPolicy),
		new(storage_v20220901s.StorageAccountsQueueService),
		new(storage_v20220901s.StorageAccountsQueueServicesQueue),
		new(storage_v20220901s.StorageAccountsTableService),
		new(storage_v20220901s.StorageAccountsTableServicesTable))
	result = append(
		result,
		new(storage_v20230101.StorageAccount),
		new(storage_v20230101.StorageAccountsBlobService),
		new(storage_v20230101.StorageAccountsBlobServicesContainer),
		new(storage_v20230101.StorageAccountsFileService),
		new(storage_v20230101.StorageAccountsFileServicesShare),
		new(storage_v20230101.StorageAccountsManagementPolicy),
		new(storage_v20230101.StorageAccountsQueueService),
		new(storage_v20230101.StorageAccountsQueueServicesQueue),
		new(storage_v20230101.StorageAccountsTableService),
		new(storage_v20230101.StorageAccountsTableServicesTable))
	result = append(
		result,
		new(storage_v20230101s.StorageAccount),
		new(storage_v20230101s.StorageAccountsBlobService),
		new(storage_v20230101s.StorageAccountsBlobServicesContainer),
		new(storage_v20230101s.StorageAccountsFileService),
		new(storage_v20230101s.StorageAccountsFileServicesShare),
		new(storage_v20230101s.StorageAccountsManagementPolicy),
		new(storage_v20230101s.StorageAccountsQueueService),
		new(storage_v20230101s.StorageAccountsQueueServicesQueue),
		new(storage_v20230101s.StorageAccountsTableService),
		new(storage_v20230101s.StorageAccountsTableServicesTable))
	result = append(result, new(subscription_v20211001.Alias))
	result = append(result, new(subscription_v20211001s.Alias))
	result = append(
		result,
		new(synapse_v20210601.Workspace),
		new(synapse_v20210601.WorkspacesBigDataPool))
	result = append(
		result,
		new(synapse_v20210601s.Workspace),
		new(synapse_v20210601s.WorkspacesBigDataPool))
	result = append(
		result,
		new(web_v20220301.ServerFarm),
		new(web_v20220301.Site))
	result = append(
		result,
		new(web_v20220301s.ServerFarm),
		new(web_v20220301s.Site))
	return result
}

// createScheme creates a Scheme containing the clientgo types and all of the custom types returned by getKnownTypes
func createScheme() *runtime.Scheme {
	scheme := runtime.NewScheme()
	_ = clientgoscheme.AddToScheme(scheme)
	_ = alertsmanagement_v20210401.AddToScheme(scheme)
	_ = alertsmanagement_v20210401s.AddToScheme(scheme)
	_ = alertsmanagement_v20230301.AddToScheme(scheme)
	_ = alertsmanagement_v20230301s.AddToScheme(scheme)
	_ = apimanagement_v20220801.AddToScheme(scheme)
	_ = apimanagement_v20220801s.AddToScheme(scheme)
	_ = apimanagement_v20230501p.AddToScheme(scheme)
	_ = apimanagement_v20230501ps.AddToScheme(scheme)
	_ = appconfiguration_v20220501.AddToScheme(scheme)
	_ = appconfiguration_v20220501s.AddToScheme(scheme)
	_ = authorization_v20200801p.AddToScheme(scheme)
	_ = authorization_v20200801ps.AddToScheme(scheme)
	_ = authorization_v20220401.AddToScheme(scheme)
	_ = authorization_v20220401s.AddToScheme(scheme)
	_ = batch_v20210101.AddToScheme(scheme)
	_ = batch_v20210101s.AddToScheme(scheme)
	_ = cache_v20201201.AddToScheme(scheme)
	_ = cache_v20201201s.AddToScheme(scheme)
	_ = cache_v20210301.AddToScheme(scheme)
	_ = cache_v20210301s.AddToScheme(scheme)
	_ = cache_v20230401.AddToScheme(scheme)
	_ = cache_v20230401s.AddToScheme(scheme)
	_ = cache_v20230701.AddToScheme(scheme)
	_ = cache_v20230701s.AddToScheme(scheme)
	_ = cache_v20230801.AddToScheme(scheme)
	_ = cache_v20230801s.AddToScheme(scheme)
	_ = cdn_v20210601.AddToScheme(scheme)
	_ = cdn_v20210601s.AddToScheme(scheme)
	_ = cdn_v20230501.AddToScheme(scheme)
	_ = cdn_v20230501s.AddToScheme(scheme)
	_ = compute_v20200930.AddToScheme(scheme)
	_ = compute_v20200930s.AddToScheme(scheme)
	_ = compute_v20201201.AddToScheme(scheme)
	_ = compute_v20201201s.AddToScheme(scheme)
	_ = compute_v20210701.AddToScheme(scheme)
	_ = compute_v20210701s.AddToScheme(scheme)
	_ = compute_v20220301.AddToScheme(scheme)
	_ = compute_v20220301s.AddToScheme(scheme)
	_ = compute_v20220702.AddToScheme(scheme)
	_ = compute_v20220702s.AddToScheme(scheme)
	_ = compute_v20240302.AddToScheme(scheme)
	_ = compute_v20240302s.AddToScheme(scheme)
	_ = containerinstance_v20211001.AddToScheme(scheme)
	_ = containerinstance_v20211001s.AddToScheme(scheme)
	_ = containerregistry_v20210901.AddToScheme(scheme)
	_ = containerregistry_v20210901s.AddToScheme(scheme)
	_ = containerservice_v20210501.AddToScheme(scheme)
	_ = containerservice_v20210501s.AddToScheme(scheme)
	_ = containerservice_v20230201.AddToScheme(scheme)
	_ = containerservice_v20230201s.AddToScheme(scheme)
	_ = containerservice_v20230315p.AddToScheme(scheme)
	_ = containerservice_v20230315ps.AddToScheme(scheme)
	_ = containerservice_v20231001.AddToScheme(scheme)
	_ = containerservice_v20231001s.AddToScheme(scheme)
	_ = containerservice_v20231102p.AddToScheme(scheme)
	_ = containerservice_v20231102ps.AddToScheme(scheme)
	_ = containerservice_v20240402p.AddToScheme(scheme)
	_ = containerservice_v20240402ps.AddToScheme(scheme)
	_ = containerservice_v20240901.AddToScheme(scheme)
	_ = containerservice_v20240901s.AddToScheme(scheme)
	_ = datafactory_v20180601.AddToScheme(scheme)
	_ = datafactory_v20180601s.AddToScheme(scheme)
	_ = dataprotection_v20230101.AddToScheme(scheme)
	_ = dataprotection_v20230101s.AddToScheme(scheme)
	_ = dataprotection_v20231101.AddToScheme(scheme)
	_ = dataprotection_v20231101s.AddToScheme(scheme)
	_ = dbformariadb_v20180601.AddToScheme(scheme)
	_ = dbformariadb_v20180601s.AddToScheme(scheme)
	_ = dbformysql_v20210501.AddToScheme(scheme)
	_ = dbformysql_v20210501s.AddToScheme(scheme)
	_ = dbformysql_v20220101.AddToScheme(scheme)
	_ = dbformysql_v20220101s.AddToScheme(scheme)
	_ = dbformysql_v20230630.AddToScheme(scheme)
	_ = dbformysql_v20230630s.AddToScheme(scheme)
	_ = dbforpostgresql_v20210601.AddToScheme(scheme)
	_ = dbforpostgresql_v20210601s.AddToScheme(scheme)
	_ = dbforpostgresql_v20220120p.AddToScheme(scheme)
	_ = dbforpostgresql_v20220120ps.AddToScheme(scheme)
	_ = dbforpostgresql_v20221201.AddToScheme(scheme)
	_ = dbforpostgresql_v20221201s.AddToScheme(scheme)
	_ = dbforpostgresql_v20230601p.AddToScheme(scheme)
	_ = dbforpostgresql_v20230601ps.AddToScheme(scheme)
	_ = devices_v20210702.AddToScheme(scheme)
	_ = devices_v20210702s.AddToScheme(scheme)
	_ = documentdb_v20210515.AddToScheme(scheme)
	_ = documentdb_v20210515s.AddToScheme(scheme)
	_ = documentdb_v20231115.AddToScheme(scheme)
	_ = documentdb_v20231115s.AddToScheme(scheme)
	_ = eventgrid_v20200601.AddToScheme(scheme)
	_ = eventgrid_v20200601s.AddToScheme(scheme)
	_ = eventhub_v20211101.AddToScheme(scheme)
	_ = eventhub_v20211101s.AddToScheme(scheme)
	_ = insights_v20180301.AddToScheme(scheme)
	_ = insights_v20180301s.AddToScheme(scheme)
	_ = insights_v20180501p.AddToScheme(scheme)
	_ = insights_v20180501ps.AddToScheme(scheme)
	_ = insights_v20200202.AddToScheme(scheme)
	_ = insights_v20200202s.AddToScheme(scheme)
	_ = insights_v20210501p.AddToScheme(scheme)
	_ = insights_v20210501ps.AddToScheme(scheme)
	_ = insights_v20220615.AddToScheme(scheme)
	_ = insights_v20220615s.AddToScheme(scheme)
	_ = insights_v20221001.AddToScheme(scheme)
	_ = insights_v20221001s.AddToScheme(scheme)
	_ = insights_v20230101.AddToScheme(scheme)
	_ = insights_v20230101s.AddToScheme(scheme)
	_ = keyvault_v20210401p.AddToScheme(scheme)
	_ = keyvault_v20210401ps.AddToScheme(scheme)
	_ = keyvault_v20230701.AddToScheme(scheme)
	_ = keyvault_v20230701s.AddToScheme(scheme)
	_ = kubernetesconfiguration_v20230501.AddToScheme(scheme)
	_ = kubernetesconfiguration_v20230501s.AddToScheme(scheme)
	_ = machinelearningservices_v20210701.AddToScheme(scheme)
	_ = machinelearningservices_v20210701s.AddToScheme(scheme)
	_ = machinelearningservices_v20240401.AddToScheme(scheme)
	_ = machinelearningservices_v20240401s.AddToScheme(scheme)
	_ = managedidentity_v20181130.AddToScheme(scheme)
	_ = managedidentity_v20181130s.AddToScheme(scheme)
	_ = managedidentity_v20220131p.AddToScheme(scheme)
	_ = managedidentity_v20220131ps.AddToScheme(scheme)
	_ = managedidentity_v20230131.AddToScheme(scheme)
	_ = managedidentity_v20230131s.AddToScheme(scheme)
	_ = monitor_v20230403.AddToScheme(scheme)
	_ = monitor_v20230403s.AddToScheme(scheme)
	_ = network_v20180501.AddToScheme(scheme)
	_ = network_v20180501s.AddToScheme(scheme)
	_ = network_v20180901.AddToScheme(scheme)
	_ = network_v20180901s.AddToScheme(scheme)
	_ = network_v20200601.AddToScheme(scheme)
	_ = network_v20200601s.AddToScheme(scheme)
	_ = network_v20201101.AddToScheme(scheme)
	_ = network_v20201101s.AddToScheme(scheme)
	_ = network_v20220401.AddToScheme(scheme)
	_ = network_v20220401s.AddToScheme(scheme)
	_ = network_v20220701.AddToScheme(scheme)
	_ = network_v20220701s.AddToScheme(scheme)
	_ = network_v20240101.AddToScheme(scheme)
	_ = network_v20240101s.AddToScheme(scheme)
	_ = network_v20240301.AddToScheme(scheme)
	_ = network_v20240301s.AddToScheme(scheme)
	_ = network_v20240601.AddToScheme(scheme)
	_ = network_v20240601s.AddToScheme(scheme)
	_ = networkfrontdoor_v20220501.AddToScheme(scheme)
	_ = networkfrontdoor_v20220501s.AddToScheme(scheme)
	_ = operationalinsights_v20210601.AddToScheme(scheme)
	_ = operationalinsights_v20210601s.AddToScheme(scheme)
	_ = redhatopenshift_v20231122.AddToScheme(scheme)
	_ = redhatopenshift_v20231122s.AddToScheme(scheme)
	_ = resources_v20200601.AddToScheme(scheme)
	_ = resources_v20200601s.AddToScheme(scheme)
	_ = search_v20220901.AddToScheme(scheme)
	_ = search_v20220901s.AddToScheme(scheme)
	_ = servicebus_v20210101p.AddToScheme(scheme)
	_ = servicebus_v20210101ps.AddToScheme(scheme)
	_ = servicebus_v20211101.AddToScheme(scheme)
	_ = servicebus_v20211101s.AddToScheme(scheme)
	_ = servicebus_v20221001p.AddToScheme(scheme)
	_ = servicebus_v20221001ps.AddToScheme(scheme)
	_ = signalrservice_v20211001.AddToScheme(scheme)
	_ = signalrservice_v20211001s.AddToScheme(scheme)
	_ = sql_v20211101.AddToScheme(scheme)
	_ = sql_v20211101s.AddToScheme(scheme)
	_ = storage_v20210401.AddToScheme(scheme)
	_ = storage_v20210401s.AddToScheme(scheme)
	_ = storage_v20220901.AddToScheme(scheme)
	_ = storage_v20220901s.AddToScheme(scheme)
	_ = storage_v20230101.AddToScheme(scheme)
	_ = storage_v20230101s.AddToScheme(scheme)
	_ = subscription_v20211001.AddToScheme(scheme)
	_ = subscription_v20211001s.AddToScheme(scheme)
	_ = synapse_v20210601.AddToScheme(scheme)
	_ = synapse_v20210601s.AddToScheme(scheme)
	_ = web_v20220301.AddToScheme(scheme)
	_ = web_v20220301s.AddToScheme(scheme)
	return scheme
}

// getResourceExtensions returns a list of resource extensions
func getResourceExtensions() []genruntime.ResourceExtension {
	var result []genruntime.ResourceExtension
	result = append(result, &alertsmanagement_customizations.PrometheusRuleGroupExtension{})
	result = append(result, &alertsmanagement_customizations.SmartDetectorAlertRuleExtension{})
	result = append(result, &apimanagement_customizations.ApiExtension{})
	result = append(result, &apimanagement_customizations.ApiVersionSetExtension{})
	result = append(result, &apimanagement_customizations.AuthorizationProviderExtension{})
	result = append(result, &apimanagement_customizations.AuthorizationProvidersAuthorizationExtension{})
	result = append(result, &apimanagement_customizations.AuthorizationProvidersAuthorizationsAccessPolicyExtension{})
	result = append(result, &apimanagement_customizations.BackendExtension{})
	result = append(result, &apimanagement_customizations.NamedValueExtension{})
	result = append(result, &apimanagement_customizations.PolicyExtension{})
	result = append(result, &apimanagement_customizations.PolicyFragmentExtension{})
	result = append(result, &apimanagement_customizations.ProductApiExtension{})
	result = append(result, &apimanagement_customizations.ProductExtension{})
	result = append(result, &apimanagement_customizations.ProductPolicyExtension{})
	result = append(result, &apimanagement_customizations.ServiceExtension{})
	result = append(result, &apimanagement_customizations.SubscriptionExtension{})
	result = append(result, &appconfiguration_customizations.ConfigurationStoreExtension{})
	result = append(result, &authorization_customizations.RoleAssignmentExtension{})
	result = append(result, &authorization_customizations.RoleDefinitionExtension{})
	result = append(result, &batch_customizations.BatchAccountExtension{})
	result = append(result, &cache_customizations.RedisEnterpriseDatabaseExtension{})
	result = append(result, &cache_customizations.RedisEnterpriseExtension{})
	result = append(result, &cache_customizations.RedisExtension{})
	result = append(result, &cache_customizations.RedisFirewallRuleExtension{})
	result = append(result, &cache_customizations.RedisLinkedServerExtension{})
	result = append(result, &cache_customizations.RedisPatchScheduleExtension{})
	result = append(result, &cdn_customizations.AfdCustomDomainExtension{})
	result = append(result, &cdn_customizations.AfdEndpointExtension{})
	result = append(result, &cdn_customizations.AfdOriginExtension{})
	result = append(result, &cdn_customizations.AfdOriginGroupExtension{})
	result = append(result, &cdn_customizations.ProfileExtension{})
	result = append(result, &cdn_customizations.ProfilesEndpointExtension{})
	result = append(result, &cdn_customizations.RouteExtension{})
	result = append(result, &cdn_customizations.RuleExtension{})
	result = append(result, &cdn_customizations.RuleSetExtension{})
	result = append(result, &cdn_customizations.SecretExtension{})
	result = append(result, &cdn_customizations.SecurityPolicyExtension{})
	result = append(result, &compute_customizations.DiskAccessExtension{})
	result = append(result, &compute_customizations.DiskEncryptionSetExtension{})
	result = append(result, &compute_customizations.DiskExtension{})
	result = append(result, &compute_customizations.ImageExtension{})
	result = append(result, &compute_customizations.SnapshotExtension{})
	result = append(result, &compute_customizations.VirtualMachineExtension{})
	result = append(result, &compute_customizations.VirtualMachineScaleSetExtension{})
	result = append(result, &compute_customizations.VirtualMachineScaleSetsExtensionExtension{})
	result = append(result, &compute_customizations.VirtualMachinesExtensionExtension{})
	result = append(result, &containerinstance_customizations.ContainerGroupExtension{})
	result = append(result, &containerregistry_customizations.RegistryExtension{})
	result = append(result, &containerservice_customizations.FleetExtension{})
	result = append(result, &containerservice_customizations.FleetsMemberExtension{})
	result = append(result, &containerservice_customizations.FleetsUpdateRunExtension{})
	result = append(result, &containerservice_customizations.MaintenanceConfigurationExtension{})
	result = append(result, &containerservice_customizations.ManagedClusterExtension{})
	result = append(result, &containerservice_customizations.ManagedClustersAgentPoolExtension{})
	result = append(result, &containerservice_customizations.TrustedAccessRoleBindingExtension{})
	result = append(result, &datafactory_customizations.FactoryExtension{})
	result = append(result, &dataprotection_customizations.BackupVaultExtension{})
	result = append(result, &dataprotection_customizations.BackupVaultsBackupInstanceExtension{})
	result = append(result, &dataprotection_customizations.BackupVaultsBackupPolicyExtension{})
	result = append(result, &dbformariadb_customizations.ConfigurationExtension{})
	result = append(result, &dbformariadb_customizations.DatabaseExtension{})
	result = append(result, &dbformariadb_customizations.ServerExtension{})
	result = append(result, &dbformysql_customizations.FlexibleServerExtension{})
	result = append(result, &dbformysql_customizations.FlexibleServersAdministratorExtension{})
	result = append(result, &dbformysql_customizations.FlexibleServersConfigurationExtension{})
	result = append(result, &dbformysql_customizations.FlexibleServersDatabaseExtension{})
	result = append(result, &dbformysql_customizations.FlexibleServersFirewallRuleExtension{})
	result = append(result, &dbforpostgresql_customizations.FlexibleServerExtension{})
	result = append(result, &dbforpostgresql_customizations.FlexibleServersConfigurationExtension{})
	result = append(result, &dbforpostgresql_customizations.FlexibleServersDatabaseExtension{})
	result = append(result, &dbforpostgresql_customizations.FlexibleServersFirewallRuleExtension{})
	result = append(result, &devices_customizations.IotHubExtension{})
	result = append(result, &documentdb_customizations.DatabaseAccountExtension{})
	result = append(result, &documentdb_customizations.MongodbDatabaseCollectionExtension{})
	result = append(result, &documentdb_customizations.MongodbDatabaseCollectionThroughputSettingExtension{})
	result = append(result, &documentdb_customizations.MongodbDatabaseExtension{})
	result = append(result, &documentdb_customizations.MongodbDatabaseThroughputSettingExtension{})
	result = append(result, &documentdb_customizations.SqlDatabaseContainerExtension{})
	result = append(result, &documentdb_customizations.SqlDatabaseContainerStoredProcedureExtension{})
	result = append(result, &documentdb_customizations.SqlDatabaseContainerThroughputSettingExtension{})
	result = append(result, &documentdb_customizations.SqlDatabaseContainerTriggerExtension{})
	result = append(result, &documentdb_customizations.SqlDatabaseContainerUserDefinedFunctionExtension{})
	result = append(result, &documentdb_customizations.SqlDatabaseExtension{})
	result = append(result, &documentdb_customizations.SqlDatabaseThroughputSettingExtension{})
	result = append(result, &documentdb_customizations.SqlRoleAssignmentExtension{})
	result = append(result, &eventgrid_customizations.DomainExtension{})
	result = append(result, &eventgrid_customizations.DomainsTopicExtension{})
	result = append(result, &eventgrid_customizations.EventSubscriptionExtension{})
	result = append(result, &eventgrid_customizations.TopicExtension{})
	result = append(result, &eventhub_customizations.NamespaceExtension{})
	result = append(result, &eventhub_customizations.NamespacesAuthorizationRuleExtension{})
	result = append(result, &eventhub_customizations.NamespacesEventhubExtension{})
	result = append(result, &eventhub_customizations.NamespacesEventhubsAuthorizationRuleExtension{})
	result = append(result, &eventhub_customizations.NamespacesEventhubsConsumerGroupExtension{})
	result = append(result, &insights_customizations.ActionGroupExtension{})
	result = append(result, &insights_customizations.AutoscaleSettingExtension{})
	result = append(result, &insights_customizations.ComponentExtension{})
	result = append(result, &insights_customizations.DiagnosticSettingExtension{})
	result = append(result, &insights_customizations.MetricAlertExtension{})
	result = append(result, &insights_customizations.ScheduledQueryRuleExtension{})
	result = append(result, &insights_customizations.WebtestExtension{})
	result = append(result, &keyvault_customizations.VaultExtension{})
	result = append(result, &kubernetesconfiguration_customizations.ExtensionExtension{})
	result = append(result, &kubernetesconfiguration_customizations.FluxConfigurationExtension{})
	result = append(result, &machinelearningservices_customizations.RegistryExtension{})
	result = append(result, &machinelearningservices_customizations.WorkspaceExtension{})
	result = append(result, &machinelearningservices_customizations.WorkspacesComputeExtension{})
	result = append(result, &machinelearningservices_customizations.WorkspacesConnectionExtension{})
	result = append(result, &managedidentity_customizations.FederatedIdentityCredentialExtension{})
	result = append(result, &managedidentity_customizations.UserAssignedIdentityExtension{})
	result = append(result, &monitor_customizations.AccountExtension{})
	result = append(result, &network_customizations.ApplicationGatewayExtension{})
	result = append(result, &network_customizations.ApplicationSecurityGroupExtension{})
	result = append(result, &network_customizations.BastionHostExtension{})
	result = append(result, &network_customizations.DnsForwardingRuleSetsForwardingRuleExtension{})
	result = append(result, &network_customizations.DnsForwardingRuleSetsVirtualNetworkLinkExtension{})
	result = append(result, &network_customizations.DnsForwardingRulesetExtension{})
	result = append(result, &network_customizations.DnsResolverExtension{})
	result = append(result, &network_customizations.DnsResolversInboundEndpointExtension{})
	result = append(result, &network_customizations.DnsResolversOutboundEndpointExtension{})
	result = append(result, &network_customizations.DnsZoneExtension{})
	result = append(result, &network_customizations.DnsZonesAAAARecordExtension{})
	result = append(result, &network_customizations.DnsZonesARecordExtension{})
	result = append(result, &network_customizations.DnsZonesCAARecordExtension{})
	result = append(result, &network_customizations.DnsZonesCNAMERecordExtension{})
	result = append(result, &network_customizations.DnsZonesMXRecordExtension{})
	result = append(result, &network_customizations.DnsZonesNSRecordExtension{})
	result = append(result, &network_customizations.DnsZonesPTRRecordExtension{})
	result = append(result, &network_customizations.DnsZonesSRVRecordExtension{})
	result = append(result, &network_customizations.DnsZonesTXTRecordExtension{})
	result = append(result, &network_customizations.LoadBalancerExtension{})
	result = append(result, &network_customizations.LoadBalancersInboundNatRuleExtension{})
	result = append(result, &network_customizations.NatGatewayExtension{})
	result = append(result, &network_customizations.NetworkInterfaceExtension{})
	result = append(result, &network_customizations.NetworkSecurityGroupExtension{})
	result = append(result, &network_customizations.NetworkSecurityGroupsSecurityRuleExtension{})
	result = append(result, &network_customizations.PrivateDnsZoneExtension{})
	result = append(result, &network_customizations.PrivateDnsZonesAAAARecordExtension{})
	result = append(result, &network_customizations.PrivateDnsZonesARecordExtension{})
	result = append(result, &network_customizations.PrivateDnsZonesCNAMERecordExtension{})
	result = append(result, &network_customizations.PrivateDnsZonesMXRecordExtension{})
	result = append(result, &network_customizations.PrivateDnsZonesPTRRecordExtension{})
	result = append(result, &network_customizations.PrivateDnsZonesSRVRecordExtension{})
	result = append(result, &network_customizations.PrivateDnsZonesTXTRecordExtension{})
	result = append(result, &network_customizations.PrivateDnsZonesVirtualNetworkLinkExtension{})
	result = append(result, &network_customizations.PrivateEndpointExtension{})
	result = append(result, &network_customizations.PrivateEndpointsPrivateDnsZoneGroupExtension{})
	result = append(result, &network_customizations.PrivateLinkServiceExtension{})
	result = append(result, &network_customizations.PublicIPAddressExtension{})
	result = append(result, &network_customizations.PublicIPPrefixExtension{})
	result = append(result, &network_customizations.RouteTableExtension{})
	result = append(result, &network_customizations.RouteTablesRouteExtension{})
	result = append(result, &network_customizations.TrafficManagerProfileExtension{})
	result = append(result, &network_customizations.TrafficManagerProfilesAzureEndpointExtension{})
	result = append(result, &network_customizations.TrafficManagerProfilesExternalEndpointExtension{})
	result = append(result, &network_customizations.TrafficManagerProfilesNestedEndpointExtension{})
	result = append(result, &network_customizations.VirtualNetworkExtension{})
	result = append(result, &network_customizations.VirtualNetworkGatewayExtension{})
	result = append(result, &network_customizations.VirtualNetworksSubnetExtension{})
	result = append(result, &network_customizations.VirtualNetworksVirtualNetworkPeeringExtension{})
	result = append(result, &network_customizations.WebApplicationFirewallPolicyExtension{})
	result = append(result, &networkfrontdoor_customizations.WebApplicationFirewallPolicyExtension{})
	result = append(result, &operationalinsights_customizations.WorkspaceExtension{})
	result = append(result, &redhatopenshift_customizations.OpenShiftClusterExtension{})
	result = append(result, &resources_customizations.ResourceGroupExtension{})
	result = append(result, &search_customizations.SearchServiceExtension{})
	result = append(result, &servicebus_customizations.NamespaceExtension{})
	result = append(result, &servicebus_customizations.NamespacesAuthorizationRuleExtension{})
	result = append(result, &servicebus_customizations.NamespacesQueueExtension{})
	result = append(result, &servicebus_customizations.NamespacesTopicExtension{})
	result = append(result, &servicebus_customizations.NamespacesTopicsSubscriptionExtension{})
	result = append(result, &servicebus_customizations.NamespacesTopicsSubscriptionsRuleExtension{})
	result = append(result, &signalrservice_customizations.SignalRExtension{})
	result = append(result, &sql_customizations.ServerExtension{})
	result = append(result, &sql_customizations.ServersAdministratorExtension{})
	result = append(result, &sql_customizations.ServersAdvancedThreatProtectionSettingExtension{})
	result = append(result, &sql_customizations.ServersAuditingSettingExtension{})
	result = append(result, &sql_customizations.ServersAzureADOnlyAuthenticationExtension{})
	result = append(result, &sql_customizations.ServersConnectionPolicyExtension{})
	result = append(result, &sql_customizations.ServersDatabaseExtension{})
	result = append(result, &sql_customizations.ServersDatabasesAdvancedThreatProtectionSettingExtension{})
	result = append(result, &sql_customizations.ServersDatabasesAuditingSettingExtension{})
	result = append(result, &sql_customizations.ServersDatabasesBackupLongTermRetentionPolicyExtension{})
	result = append(result, &sql_customizations.ServersDatabasesBackupShortTermRetentionPolicyExtension{})
	result = append(result, &sql_customizations.ServersDatabasesSecurityAlertPolicyExtension{})
	result = append(result, &sql_customizations.ServersDatabasesTransparentDataEncryptionExtension{})
	result = append(result, &sql_customizations.ServersDatabasesVulnerabilityAssessmentExtension{})
	result = append(result, &sql_customizations.ServersElasticPoolExtension{})
	result = append(result, &sql_customizations.ServersFailoverGroupExtension{})
	result = append(result, &sql_customizations.ServersFirewallRuleExtension{})
	result = append(result, &sql_customizations.ServersIPV6FirewallRuleExtension{})
	result = append(result, &sql_customizations.ServersOutboundFirewallRuleExtension{})
	result = append(result, &sql_customizations.ServersSecurityAlertPolicyExtension{})
	result = append(result, &sql_customizations.ServersVirtualNetworkRuleExtension{})
	result = append(result, &sql_customizations.ServersVulnerabilityAssessmentExtension{})
	result = append(result, &storage_customizations.StorageAccountExtension{})
	result = append(result, &storage_customizations.StorageAccountsBlobServiceExtension{})
	result = append(result, &storage_customizations.StorageAccountsBlobServicesContainerExtension{})
	result = append(result, &storage_customizations.StorageAccountsFileServiceExtension{})
	result = append(result, &storage_customizations.StorageAccountsFileServicesShareExtension{})
	result = append(result, &storage_customizations.StorageAccountsManagementPolicyExtension{})
	result = append(result, &storage_customizations.StorageAccountsQueueServiceExtension{})
	result = append(result, &storage_customizations.StorageAccountsQueueServicesQueueExtension{})
	result = append(result, &storage_customizations.StorageAccountsTableServiceExtension{})
	result = append(result, &storage_customizations.StorageAccountsTableServicesTableExtension{})
	result = append(result, &subscription_customizations.AliasExtension{})
	result = append(result, &synapse_customizations.WorkspaceExtension{})
	result = append(result, &synapse_customizations.WorkspacesBigDataPoolExtension{})
	result = append(result, &web_customizations.ServerFarmExtension{})
	result = append(result, &web_customizations.SiteExtension{})
	return result
}

// indexApimanagementAuthorizationProviderAuthorizationCode an index function for apimanagement_v20220801s.AuthorizationProvider .spec.oauth2.grantTypes.authorizationCode
func indexApimanagementAuthorizationProviderAuthorizationCode(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.AuthorizationProvider)
	if !ok {
		return nil
	}
	if obj.Spec.Oauth2 == nil {
		return nil
	}
	if obj.Spec.Oauth2.GrantTypes == nil {
		return nil
	}
	if obj.Spec.Oauth2.GrantTypes.AuthorizationCode == nil {
		return nil
	}
	return obj.Spec.Oauth2.GrantTypes.AuthorizationCode.Index()
}

// indexApimanagementAuthorizationProviderClientCredentials an index function for apimanagement_v20220801s.AuthorizationProvider .spec.oauth2.grantTypes.clientCredentials
func indexApimanagementAuthorizationProviderClientCredentials(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.AuthorizationProvider)
	if !ok {
		return nil
	}
	if obj.Spec.Oauth2 == nil {
		return nil
	}
	if obj.Spec.Oauth2.GrantTypes == nil {
		return nil
	}
	if obj.Spec.Oauth2.GrantTypes.ClientCredentials == nil {
		return nil
	}
	return obj.Spec.Oauth2.GrantTypes.ClientCredentials.Index()
}

// indexApimanagementAuthorizationProvidersAuthorizationParameters an index function for apimanagement_v20220801s.AuthorizationProvidersAuthorization .spec.parameters
func indexApimanagementAuthorizationProvidersAuthorizationParameters(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.AuthorizationProvidersAuthorization)
	if !ok {
		return nil
	}
	if obj.Spec.Parameters == nil {
		return nil
	}
	return obj.Spec.Parameters.Index()
}

// indexApimanagementAuthorizationProvidersAuthorizationsAccessPolicyObjectIdFromConfig an index function for apimanagement_v20220801s.AuthorizationProvidersAuthorizationsAccessPolicy .spec.objectIdFromConfig
func indexApimanagementAuthorizationProvidersAuthorizationsAccessPolicyObjectIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.AuthorizationProvidersAuthorizationsAccessPolicy)
	if !ok {
		return nil
	}
	if obj.Spec.ObjectIdFromConfig == nil {
		return nil
	}
	return obj.Spec.ObjectIdFromConfig.Index()
}

// indexApimanagementAuthorizationProvidersAuthorizationsAccessPolicyTenantIdFromConfig an index function for apimanagement_v20220801s.AuthorizationProvidersAuthorizationsAccessPolicy .spec.tenantIdFromConfig
func indexApimanagementAuthorizationProvidersAuthorizationsAccessPolicyTenantIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.AuthorizationProvidersAuthorizationsAccessPolicy)
	if !ok {
		return nil
	}
	if obj.Spec.TenantIdFromConfig == nil {
		return nil
	}
	return obj.Spec.TenantIdFromConfig.Index()
}

// indexApimanagementBackendPassword an index function for apimanagement_v20220801s.Backend .spec.proxy.password
func indexApimanagementBackendPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.Backend)
	if !ok {
		return nil
	}
	if obj.Spec.Proxy == nil {
		return nil
	}
	if obj.Spec.Proxy.Password == nil {
		return nil
	}
	return obj.Spec.Proxy.Password.Index()
}

// indexApimanagementNamedValueIdentityClientIdFromConfig an index function for apimanagement_v20220801s.NamedValue .spec.keyVault.identityClientIdFromConfig
func indexApimanagementNamedValueIdentityClientIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.NamedValue)
	if !ok {
		return nil
	}
	if obj.Spec.KeyVault == nil {
		return nil
	}
	if obj.Spec.KeyVault.IdentityClientIdFromConfig == nil {
		return nil
	}
	return obj.Spec.KeyVault.IdentityClientIdFromConfig.Index()
}

// indexApimanagementServiceCertificatesCertificatePassword an index function for apimanagement_v20220801s.Service .spec.certificates.certificatePassword
func indexApimanagementServiceCertificatesCertificatePassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.Service)
	if !ok {
		return nil
	}
	var result []string
	for _, certificateItem := range obj.Spec.Certificates {
		if certificateItem.CertificatePassword == nil {
			continue
		}
		result = append(result, certificateItem.CertificatePassword.Index()...)
	}
	return result
}

// indexApimanagementServiceCertificatesExpiryFromConfig an index function for apimanagement_v20220801s.Service .spec.certificates.certificate.expiryFromConfig
func indexApimanagementServiceCertificatesExpiryFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.Service)
	if !ok {
		return nil
	}
	var result []string
	for _, certificateItem := range obj.Spec.Certificates {
		if certificateItem.Certificate == nil {
			continue
		}
		if certificateItem.Certificate.ExpiryFromConfig == nil {
			continue
		}
		result = append(result, certificateItem.Certificate.ExpiryFromConfig.Index()...)
	}
	return result
}

// indexApimanagementServiceCertificatesSubjectFromConfig an index function for apimanagement_v20220801s.Service .spec.certificates.certificate.subjectFromConfig
func indexApimanagementServiceCertificatesSubjectFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.Service)
	if !ok {
		return nil
	}
	var result []string
	for _, certificateItem := range obj.Spec.Certificates {
		if certificateItem.Certificate == nil {
			continue
		}
		if certificateItem.Certificate.SubjectFromConfig == nil {
			continue
		}
		result = append(result, certificateItem.Certificate.SubjectFromConfig.Index()...)
	}
	return result
}

// indexApimanagementServiceCertificatesThumbprintFromConfig an index function for apimanagement_v20220801s.Service .spec.certificates.certificate.thumbprintFromConfig
func indexApimanagementServiceCertificatesThumbprintFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.Service)
	if !ok {
		return nil
	}
	var result []string
	for _, certificateItem := range obj.Spec.Certificates {
		if certificateItem.Certificate == nil {
			continue
		}
		if certificateItem.Certificate.ThumbprintFromConfig == nil {
			continue
		}
		result = append(result, certificateItem.Certificate.ThumbprintFromConfig.Index()...)
	}
	return result
}

// indexApimanagementServiceHostnameConfigurationsCertificatePassword an index function for apimanagement_v20220801s.Service .spec.hostnameConfigurations.certificatePassword
func indexApimanagementServiceHostnameConfigurationsCertificatePassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.Service)
	if !ok {
		return nil
	}
	var result []string
	for _, hostnameConfigurationItem := range obj.Spec.HostnameConfigurations {
		if hostnameConfigurationItem.CertificatePassword == nil {
			continue
		}
		result = append(result, hostnameConfigurationItem.CertificatePassword.Index()...)
	}
	return result
}

// indexApimanagementServiceHostnameConfigurationsExpiryFromConfig an index function for apimanagement_v20220801s.Service .spec.hostnameConfigurations.certificate.expiryFromConfig
func indexApimanagementServiceHostnameConfigurationsExpiryFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.Service)
	if !ok {
		return nil
	}
	var result []string
	for _, hostnameConfigurationItem := range obj.Spec.HostnameConfigurations {
		if hostnameConfigurationItem.Certificate == nil {
			continue
		}
		if hostnameConfigurationItem.Certificate.ExpiryFromConfig == nil {
			continue
		}
		result = append(result, hostnameConfigurationItem.Certificate.ExpiryFromConfig.Index()...)
	}
	return result
}

// indexApimanagementServiceHostnameConfigurationsIdentityClientIdFromConfig an index function for apimanagement_v20220801s.Service .spec.hostnameConfigurations.identityClientIdFromConfig
func indexApimanagementServiceHostnameConfigurationsIdentityClientIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.Service)
	if !ok {
		return nil
	}
	var result []string
	for _, hostnameConfigurationItem := range obj.Spec.HostnameConfigurations {
		if hostnameConfigurationItem.IdentityClientIdFromConfig == nil {
			continue
		}
		result = append(result, hostnameConfigurationItem.IdentityClientIdFromConfig.Index()...)
	}
	return result
}

// indexApimanagementServiceHostnameConfigurationsSubjectFromConfig an index function for apimanagement_v20220801s.Service .spec.hostnameConfigurations.certificate.subjectFromConfig
func indexApimanagementServiceHostnameConfigurationsSubjectFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.Service)
	if !ok {
		return nil
	}
	var result []string
	for _, hostnameConfigurationItem := range obj.Spec.HostnameConfigurations {
		if hostnameConfigurationItem.Certificate == nil {
			continue
		}
		if hostnameConfigurationItem.Certificate.SubjectFromConfig == nil {
			continue
		}
		result = append(result, hostnameConfigurationItem.Certificate.SubjectFromConfig.Index()...)
	}
	return result
}

// indexApimanagementServiceHostnameConfigurationsThumbprintFromConfig an index function for apimanagement_v20220801s.Service .spec.hostnameConfigurations.certificate.thumbprintFromConfig
func indexApimanagementServiceHostnameConfigurationsThumbprintFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.Service)
	if !ok {
		return nil
	}
	var result []string
	for _, hostnameConfigurationItem := range obj.Spec.HostnameConfigurations {
		if hostnameConfigurationItem.Certificate == nil {
			continue
		}
		if hostnameConfigurationItem.Certificate.ThumbprintFromConfig == nil {
			continue
		}
		result = append(result, hostnameConfigurationItem.Certificate.ThumbprintFromConfig.Index()...)
	}
	return result
}

// indexApimanagementSubscriptionPrimaryKey an index function for apimanagement_v20220801s.Subscription .spec.primaryKey
func indexApimanagementSubscriptionPrimaryKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.Subscription)
	if !ok {
		return nil
	}
	if obj.Spec.PrimaryKey == nil {
		return nil
	}
	return obj.Spec.PrimaryKey.Index()
}

// indexApimanagementSubscriptionSecondaryKey an index function for apimanagement_v20220801s.Subscription .spec.secondaryKey
func indexApimanagementSubscriptionSecondaryKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*apimanagement_v20220801s.Subscription)
	if !ok {
		return nil
	}
	if obj.Spec.SecondaryKey == nil {
		return nil
	}
	return obj.Spec.SecondaryKey.Index()
}

// indexAuthorizationRoleAssignmentPrincipalIdFromConfig an index function for authorization_v20220401s.RoleAssignment .spec.principalIdFromConfig
func indexAuthorizationRoleAssignmentPrincipalIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*authorization_v20220401s.RoleAssignment)
	if !ok {
		return nil
	}
	if obj.Spec.PrincipalIdFromConfig == nil {
		return nil
	}
	return obj.Spec.PrincipalIdFromConfig.Index()
}

// indexComputeDiskEncryptionSetFederatedClientIdFromConfig an index function for compute_v20240302s.DiskEncryptionSet .spec.federatedClientIdFromConfig
func indexComputeDiskEncryptionSetFederatedClientIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*compute_v20240302s.DiskEncryptionSet)
	if !ok {
		return nil
	}
	if obj.Spec.FederatedClientIdFromConfig == nil {
		return nil
	}
	return obj.Spec.FederatedClientIdFromConfig.Index()
}

// indexComputeDiskEncryptionSetKeyUrlFromConfig an index function for compute_v20240302s.DiskEncryptionSet .spec.activeKey.keyUrlFromConfig
func indexComputeDiskEncryptionSetKeyUrlFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*compute_v20240302s.DiskEncryptionSet)
	if !ok {
		return nil
	}
	if obj.Spec.ActiveKey == nil {
		return nil
	}
	if obj.Spec.ActiveKey.KeyUrlFromConfig == nil {
		return nil
	}
	return obj.Spec.ActiveKey.KeyUrlFromConfig.Index()
}

// indexComputeVirtualMachineAdminPassword an index function for compute_v20220301s.VirtualMachine .spec.osProfile.adminPassword
func indexComputeVirtualMachineAdminPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*compute_v20220301s.VirtualMachine)
	if !ok {
		return nil
	}
	if obj.Spec.OsProfile == nil {
		return nil
	}
	if obj.Spec.OsProfile.AdminPassword == nil {
		return nil
	}
	return obj.Spec.OsProfile.AdminPassword.Index()
}

// indexComputeVirtualMachineScaleSetAdminPassword an index function for compute_v20220301s.VirtualMachineScaleSet .spec.virtualMachineProfile.osProfile.adminPassword
func indexComputeVirtualMachineScaleSetAdminPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*compute_v20220301s.VirtualMachineScaleSet)
	if !ok {
		return nil
	}
	if obj.Spec.VirtualMachineProfile == nil {
		return nil
	}
	if obj.Spec.VirtualMachineProfile.OsProfile == nil {
		return nil
	}
	if obj.Spec.VirtualMachineProfile.OsProfile.AdminPassword == nil {
		return nil
	}
	return obj.Spec.VirtualMachineProfile.OsProfile.AdminPassword.Index()
}

// indexComputeVirtualMachineScaleSetProtectedSettings an index function for compute_v20220301s.VirtualMachineScaleSet .spec.virtualMachineProfile.extensionProfile.extensions.protectedSettings
func indexComputeVirtualMachineScaleSetProtectedSettings(rawObj client.Object) []string {
	obj, ok := rawObj.(*compute_v20220301s.VirtualMachineScaleSet)
	if !ok {
		return nil
	}
	var result []string
	if obj.Spec.VirtualMachineProfile == nil {
		return nil
	}
	if obj.Spec.VirtualMachineProfile.ExtensionProfile == nil {
		return nil
	}
	for _, extensionItem := range obj.Spec.VirtualMachineProfile.ExtensionProfile.Extensions {
		if extensionItem.ProtectedSettings == nil {
			continue
		}
		result = append(result, extensionItem.ProtectedSettings.Index()...)
	}
	return result
}

// indexComputeVirtualMachineScaleSetsExtensionProtectedSettings an index function for compute_v20220301s.VirtualMachineScaleSetsExtension .spec.protectedSettings
func indexComputeVirtualMachineScaleSetsExtensionProtectedSettings(rawObj client.Object) []string {
	obj, ok := rawObj.(*compute_v20220301s.VirtualMachineScaleSetsExtension)
	if !ok {
		return nil
	}
	if obj.Spec.ProtectedSettings == nil {
		return nil
	}
	return obj.Spec.ProtectedSettings.Index()
}

// indexComputeVirtualMachinesExtensionProtectedSettings an index function for compute_v20220301s.VirtualMachinesExtension .spec.protectedSettings
func indexComputeVirtualMachinesExtensionProtectedSettings(rawObj client.Object) []string {
	obj, ok := rawObj.(*compute_v20220301s.VirtualMachinesExtension)
	if !ok {
		return nil
	}
	if obj.Spec.ProtectedSettings == nil {
		return nil
	}
	return obj.Spec.ProtectedSettings.Index()
}

// indexContainerinstanceContainerGroupContainersSecureValue an index function for containerinstance_v20211001s.ContainerGroup .spec.containers.environmentVariables.secureValue
func indexContainerinstanceContainerGroupContainersSecureValue(rawObj client.Object) []string {
	obj, ok := rawObj.(*containerinstance_v20211001s.ContainerGroup)
	if !ok {
		return nil
	}
	var result []string
	for _, containerItem := range obj.Spec.Containers {
		for _, environmentVariableItem := range containerItem.EnvironmentVariables {
			if environmentVariableItem.SecureValue == nil {
				continue
			}
			result = append(result, environmentVariableItem.SecureValue.Index()...)
		}
	}
	return result
}

// indexContainerinstanceContainerGroupInitContainersSecureValue an index function for containerinstance_v20211001s.ContainerGroup .spec.initContainers.environmentVariables.secureValue
func indexContainerinstanceContainerGroupInitContainersSecureValue(rawObj client.Object) []string {
	obj, ok := rawObj.(*containerinstance_v20211001s.ContainerGroup)
	if !ok {
		return nil
	}
	var result []string
	for _, initContainerItem := range obj.Spec.InitContainers {
		for _, environmentVariableItem := range initContainerItem.EnvironmentVariables {
			if environmentVariableItem.SecureValue == nil {
				continue
			}
			result = append(result, environmentVariableItem.SecureValue.Index()...)
		}
	}
	return result
}

// indexContainerinstanceContainerGroupPassword an index function for containerinstance_v20211001s.ContainerGroup .spec.imageRegistryCredentials.password
func indexContainerinstanceContainerGroupPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*containerinstance_v20211001s.ContainerGroup)
	if !ok {
		return nil
	}
	var result []string
	for _, imageRegistryCredentialItem := range obj.Spec.ImageRegistryCredentials {
		if imageRegistryCredentialItem.Password == nil {
			continue
		}
		result = append(result, imageRegistryCredentialItem.Password.Index()...)
	}
	return result
}

// indexContainerinstanceContainerGroupWorkspaceKey an index function for containerinstance_v20211001s.ContainerGroup .spec.diagnostics.logAnalytics.workspaceKey
func indexContainerinstanceContainerGroupWorkspaceKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*containerinstance_v20211001s.ContainerGroup)
	if !ok {
		return nil
	}
	if obj.Spec.Diagnostics == nil {
		return nil
	}
	if obj.Spec.Diagnostics.LogAnalytics == nil {
		return nil
	}
	if obj.Spec.Diagnostics.LogAnalytics.WorkspaceKey == nil {
		return nil
	}
	return obj.Spec.Diagnostics.LogAnalytics.WorkspaceKey.Index()
}

// indexContainerserviceManagedClusterAdminPassword an index function for containerservice_v20240901s.ManagedCluster .spec.windowsProfile.adminPassword
func indexContainerserviceManagedClusterAdminPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*containerservice_v20240901s.ManagedCluster)
	if !ok {
		return nil
	}
	if obj.Spec.WindowsProfile == nil {
		return nil
	}
	if obj.Spec.WindowsProfile.AdminPassword == nil {
		return nil
	}
	return obj.Spec.WindowsProfile.AdminPassword.Index()
}

// indexContainerserviceManagedClusterSecret an index function for containerservice_v20240901s.ManagedCluster .spec.servicePrincipalProfile.secret
func indexContainerserviceManagedClusterSecret(rawObj client.Object) []string {
	obj, ok := rawObj.(*containerservice_v20240901s.ManagedCluster)
	if !ok {
		return nil
	}
	if obj.Spec.ServicePrincipalProfile == nil {
		return nil
	}
	if obj.Spec.ServicePrincipalProfile.Secret == nil {
		return nil
	}
	return obj.Spec.ServicePrincipalProfile.Secret.Index()
}

// indexDbformariadbServerAdministratorLoginPassword an index function for dbformariadb_v20180601s.Server .spec.properties.default.administratorLoginPassword
func indexDbformariadbServerAdministratorLoginPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*dbformariadb_v20180601s.Server)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.Default == nil {
		return nil
	}
	if obj.Spec.Properties.Default.AdministratorLoginPassword == nil {
		return nil
	}
	return obj.Spec.Properties.Default.AdministratorLoginPassword.Index()
}

// indexDbformysqlFlexibleServerAdministratorLoginPassword an index function for dbformysql_v20230630s.FlexibleServer .spec.administratorLoginPassword
func indexDbformysqlFlexibleServerAdministratorLoginPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*dbformysql_v20230630s.FlexibleServer)
	if !ok {
		return nil
	}
	if obj.Spec.AdministratorLoginPassword == nil {
		return nil
	}
	return obj.Spec.AdministratorLoginPassword.Index()
}

// indexDbformysqlFlexibleServerSasToken an index function for dbformysql_v20230630s.FlexibleServer .spec.importSourceProperties.sasToken
func indexDbformysqlFlexibleServerSasToken(rawObj client.Object) []string {
	obj, ok := rawObj.(*dbformysql_v20230630s.FlexibleServer)
	if !ok {
		return nil
	}
	if obj.Spec.ImportSourceProperties == nil {
		return nil
	}
	if obj.Spec.ImportSourceProperties.SasToken == nil {
		return nil
	}
	return obj.Spec.ImportSourceProperties.SasToken.Index()
}

// indexDbformysqlFlexibleServersAdministratorSidFromConfig an index function for dbformysql_v20230630s.FlexibleServersAdministrator .spec.sidFromConfig
func indexDbformysqlFlexibleServersAdministratorSidFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*dbformysql_v20230630s.FlexibleServersAdministrator)
	if !ok {
		return nil
	}
	if obj.Spec.SidFromConfig == nil {
		return nil
	}
	return obj.Spec.SidFromConfig.Index()
}

// indexDbformysqlFlexibleServersAdministratorTenantIdFromConfig an index function for dbformysql_v20230630s.FlexibleServersAdministrator .spec.tenantIdFromConfig
func indexDbformysqlFlexibleServersAdministratorTenantIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*dbformysql_v20230630s.FlexibleServersAdministrator)
	if !ok {
		return nil
	}
	if obj.Spec.TenantIdFromConfig == nil {
		return nil
	}
	return obj.Spec.TenantIdFromConfig.Index()
}

// indexDbforpostgresqlFlexibleServerAdministratorLoginPassword an index function for dbforpostgresql_v20221201s.FlexibleServer .spec.administratorLoginPassword
func indexDbforpostgresqlFlexibleServerAdministratorLoginPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*dbforpostgresql_v20221201s.FlexibleServer)
	if !ok {
		return nil
	}
	if obj.Spec.AdministratorLoginPassword == nil {
		return nil
	}
	return obj.Spec.AdministratorLoginPassword.Index()
}

// indexDbforpostgresqlFlexibleServerPrimaryKeyURIFromConfig an index function for dbforpostgresql_v20221201s.FlexibleServer .spec.dataEncryption.primaryKeyURIFromConfig
func indexDbforpostgresqlFlexibleServerPrimaryKeyURIFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*dbforpostgresql_v20221201s.FlexibleServer)
	if !ok {
		return nil
	}
	if obj.Spec.DataEncryption == nil {
		return nil
	}
	if obj.Spec.DataEncryption.PrimaryKeyURIFromConfig == nil {
		return nil
	}
	return obj.Spec.DataEncryption.PrimaryKeyURIFromConfig.Index()
}

// indexDevicesIotHubEventHubsConnectionString an index function for devices_v20210702s.IotHub .spec.properties.routing.endpoints.eventHubs.connectionString
func indexDevicesIotHubEventHubsConnectionString(rawObj client.Object) []string {
	obj, ok := rawObj.(*devices_v20210702s.IotHub)
	if !ok {
		return nil
	}
	var result []string
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.Routing == nil {
		return nil
	}
	if obj.Spec.Properties.Routing.Endpoints == nil {
		return nil
	}
	for _, eventHubItem := range obj.Spec.Properties.Routing.Endpoints.EventHubs {
		if eventHubItem.ConnectionString == nil {
			continue
		}
		result = append(result, eventHubItem.ConnectionString.Index()...)
	}
	return result
}

// indexDevicesIotHubServiceBusQueuesConnectionString an index function for devices_v20210702s.IotHub .spec.properties.routing.endpoints.serviceBusQueues.connectionString
func indexDevicesIotHubServiceBusQueuesConnectionString(rawObj client.Object) []string {
	obj, ok := rawObj.(*devices_v20210702s.IotHub)
	if !ok {
		return nil
	}
	var result []string
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.Routing == nil {
		return nil
	}
	if obj.Spec.Properties.Routing.Endpoints == nil {
		return nil
	}
	for _, serviceBusQueueItem := range obj.Spec.Properties.Routing.Endpoints.ServiceBusQueues {
		if serviceBusQueueItem.ConnectionString == nil {
			continue
		}
		result = append(result, serviceBusQueueItem.ConnectionString.Index()...)
	}
	return result
}

// indexDevicesIotHubServiceBusTopicsConnectionString an index function for devices_v20210702s.IotHub .spec.properties.routing.endpoints.serviceBusTopics.connectionString
func indexDevicesIotHubServiceBusTopicsConnectionString(rawObj client.Object) []string {
	obj, ok := rawObj.(*devices_v20210702s.IotHub)
	if !ok {
		return nil
	}
	var result []string
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.Routing == nil {
		return nil
	}
	if obj.Spec.Properties.Routing.Endpoints == nil {
		return nil
	}
	for _, serviceBusTopicItem := range obj.Spec.Properties.Routing.Endpoints.ServiceBusTopics {
		if serviceBusTopicItem.ConnectionString == nil {
			continue
		}
		result = append(result, serviceBusTopicItem.ConnectionString.Index()...)
	}
	return result
}

// indexDevicesIotHubStorageContainersConnectionString an index function for devices_v20210702s.IotHub .spec.properties.routing.endpoints.storageContainers.connectionString
func indexDevicesIotHubStorageContainersConnectionString(rawObj client.Object) []string {
	obj, ok := rawObj.(*devices_v20210702s.IotHub)
	if !ok {
		return nil
	}
	var result []string
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.Routing == nil {
		return nil
	}
	if obj.Spec.Properties.Routing.Endpoints == nil {
		return nil
	}
	for _, storageContainerItem := range obj.Spec.Properties.Routing.Endpoints.StorageContainers {
		if storageContainerItem.ConnectionString == nil {
			continue
		}
		result = append(result, storageContainerItem.ConnectionString.Index()...)
	}
	return result
}

// indexDevicesIotHubStorageEndpointsConnectionString an index function for devices_v20210702s.IotHub .spec.properties.storageEndpoints.connectionString
func indexDevicesIotHubStorageEndpointsConnectionString(rawObj client.Object) []string {
	obj, ok := rawObj.(*devices_v20210702s.IotHub)
	if !ok {
		return nil
	}
	var result []string
	if obj.Spec.Properties == nil {
		return nil
	}
	for _, value := range obj.Spec.Properties.StorageEndpoints {
		if value.ConnectionString == nil {
			continue
		}
		result = append(result, value.ConnectionString.Index()...)
	}
	return result
}

// indexDocumentdbSqlRoleAssignmentPrincipalIdFromConfig an index function for documentdb_v20231115s.SqlRoleAssignment .spec.principalIdFromConfig
func indexDocumentdbSqlRoleAssignmentPrincipalIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*documentdb_v20231115s.SqlRoleAssignment)
	if !ok {
		return nil
	}
	if obj.Spec.PrincipalIdFromConfig == nil {
		return nil
	}
	return obj.Spec.PrincipalIdFromConfig.Index()
}

// indexEventgridEventSubscriptionEndpointUrl an index function for eventgrid_v20200601s.EventSubscription .spec.destination.webHook.endpointUrl
func indexEventgridEventSubscriptionEndpointUrl(rawObj client.Object) []string {
	obj, ok := rawObj.(*eventgrid_v20200601s.EventSubscription)
	if !ok {
		return nil
	}
	if obj.Spec.Destination == nil {
		return nil
	}
	if obj.Spec.Destination.WebHook == nil {
		return nil
	}
	if obj.Spec.Destination.WebHook.EndpointUrl == nil {
		return nil
	}
	return obj.Spec.Destination.WebHook.EndpointUrl.Index()
}

// indexKeyvaultVaultPropertiesAccessPoliciesApplicationIdFromConfig an index function for keyvault_v20230701s.Vault .spec.properties.accessPolicies.applicationIdFromConfig
func indexKeyvaultVaultPropertiesAccessPoliciesApplicationIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*keyvault_v20230701s.Vault)
	if !ok {
		return nil
	}
	var result []string
	if obj.Spec.Properties == nil {
		return nil
	}
	for _, accessPolicyItem := range obj.Spec.Properties.AccessPolicies {
		if accessPolicyItem.ApplicationIdFromConfig == nil {
			continue
		}
		result = append(result, accessPolicyItem.ApplicationIdFromConfig.Index()...)
	}
	return result
}

// indexKeyvaultVaultPropertiesAccessPoliciesObjectIdFromConfig an index function for keyvault_v20230701s.Vault .spec.properties.accessPolicies.objectIdFromConfig
func indexKeyvaultVaultPropertiesAccessPoliciesObjectIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*keyvault_v20230701s.Vault)
	if !ok {
		return nil
	}
	var result []string
	if obj.Spec.Properties == nil {
		return nil
	}
	for _, accessPolicyItem := range obj.Spec.Properties.AccessPolicies {
		if accessPolicyItem.ObjectIdFromConfig == nil {
			continue
		}
		result = append(result, accessPolicyItem.ObjectIdFromConfig.Index()...)
	}
	return result
}

// indexKeyvaultVaultPropertiesAccessPoliciesTenantIdFromConfig an index function for keyvault_v20230701s.Vault .spec.properties.accessPolicies.tenantIdFromConfig
func indexKeyvaultVaultPropertiesAccessPoliciesTenantIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*keyvault_v20230701s.Vault)
	if !ok {
		return nil
	}
	var result []string
	if obj.Spec.Properties == nil {
		return nil
	}
	for _, accessPolicyItem := range obj.Spec.Properties.AccessPolicies {
		if accessPolicyItem.TenantIdFromConfig == nil {
			continue
		}
		result = append(result, accessPolicyItem.TenantIdFromConfig.Index()...)
	}
	return result
}

// indexKeyvaultVaultPropertiesTenantIdFromConfig an index function for keyvault_v20230701s.Vault .spec.properties.tenantIdFromConfig
func indexKeyvaultVaultPropertiesTenantIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*keyvault_v20230701s.Vault)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.TenantIdFromConfig == nil {
		return nil
	}
	return obj.Spec.Properties.TenantIdFromConfig.Index()
}

// indexKubernetesconfigurationExtensionConfigurationProtectedSettings an index function for kubernetesconfiguration_v20230501s.Extension .spec.configurationProtectedSettings
func indexKubernetesconfigurationExtensionConfigurationProtectedSettings(rawObj client.Object) []string {
	obj, ok := rawObj.(*kubernetesconfiguration_v20230501s.Extension)
	if !ok {
		return nil
	}
	if obj.Spec.ConfigurationProtectedSettings == nil {
		return nil
	}
	return obj.Spec.ConfigurationProtectedSettings.Index()
}

// indexKubernetesconfigurationFluxConfigurationAccessKey an index function for kubernetesconfiguration_v20230501s.FluxConfiguration .spec.bucket.accessKey
func indexKubernetesconfigurationFluxConfigurationAccessKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*kubernetesconfiguration_v20230501s.FluxConfiguration)
	if !ok {
		return nil
	}
	if obj.Spec.Bucket == nil {
		return nil
	}
	if obj.Spec.Bucket.AccessKey == nil {
		return nil
	}
	return obj.Spec.Bucket.AccessKey.Index()
}

// indexKubernetesconfigurationFluxConfigurationAccountKey an index function for kubernetesconfiguration_v20230501s.FluxConfiguration .spec.azureBlob.accountKey
func indexKubernetesconfigurationFluxConfigurationAccountKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*kubernetesconfiguration_v20230501s.FluxConfiguration)
	if !ok {
		return nil
	}
	if obj.Spec.AzureBlob == nil {
		return nil
	}
	if obj.Spec.AzureBlob.AccountKey == nil {
		return nil
	}
	return obj.Spec.AzureBlob.AccountKey.Index()
}

// indexKubernetesconfigurationFluxConfigurationClientCertificate an index function for kubernetesconfiguration_v20230501s.FluxConfiguration .spec.azureBlob.servicePrincipal.clientCertificate
func indexKubernetesconfigurationFluxConfigurationClientCertificate(rawObj client.Object) []string {
	obj, ok := rawObj.(*kubernetesconfiguration_v20230501s.FluxConfiguration)
	if !ok {
		return nil
	}
	if obj.Spec.AzureBlob == nil {
		return nil
	}
	if obj.Spec.AzureBlob.ServicePrincipal == nil {
		return nil
	}
	if obj.Spec.AzureBlob.ServicePrincipal.ClientCertificate == nil {
		return nil
	}
	return obj.Spec.AzureBlob.ServicePrincipal.ClientCertificate.Index()
}

// indexKubernetesconfigurationFluxConfigurationClientCertificatePassword an index function for kubernetesconfiguration_v20230501s.FluxConfiguration .spec.azureBlob.servicePrincipal.clientCertificatePassword
func indexKubernetesconfigurationFluxConfigurationClientCertificatePassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*kubernetesconfiguration_v20230501s.FluxConfiguration)
	if !ok {
		return nil
	}
	if obj.Spec.AzureBlob == nil {
		return nil
	}
	if obj.Spec.AzureBlob.ServicePrincipal == nil {
		return nil
	}
	if obj.Spec.AzureBlob.ServicePrincipal.ClientCertificatePassword == nil {
		return nil
	}
	return obj.Spec.AzureBlob.ServicePrincipal.ClientCertificatePassword.Index()
}

// indexKubernetesconfigurationFluxConfigurationClientIdFromConfig an index function for kubernetesconfiguration_v20230501s.FluxConfiguration .spec.azureBlob.servicePrincipal.clientIdFromConfig
func indexKubernetesconfigurationFluxConfigurationClientIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*kubernetesconfiguration_v20230501s.FluxConfiguration)
	if !ok {
		return nil
	}
	if obj.Spec.AzureBlob == nil {
		return nil
	}
	if obj.Spec.AzureBlob.ServicePrincipal == nil {
		return nil
	}
	if obj.Spec.AzureBlob.ServicePrincipal.ClientIdFromConfig == nil {
		return nil
	}
	return obj.Spec.AzureBlob.ServicePrincipal.ClientIdFromConfig.Index()
}

// indexKubernetesconfigurationFluxConfigurationClientSecret an index function for kubernetesconfiguration_v20230501s.FluxConfiguration .spec.azureBlob.servicePrincipal.clientSecret
func indexKubernetesconfigurationFluxConfigurationClientSecret(rawObj client.Object) []string {
	obj, ok := rawObj.(*kubernetesconfiguration_v20230501s.FluxConfiguration)
	if !ok {
		return nil
	}
	if obj.Spec.AzureBlob == nil {
		return nil
	}
	if obj.Spec.AzureBlob.ServicePrincipal == nil {
		return nil
	}
	if obj.Spec.AzureBlob.ServicePrincipal.ClientSecret == nil {
		return nil
	}
	return obj.Spec.AzureBlob.ServicePrincipal.ClientSecret.Index()
}

// indexKubernetesconfigurationFluxConfigurationConfigurationProtectedSettings an index function for kubernetesconfiguration_v20230501s.FluxConfiguration .spec.configurationProtectedSettings
func indexKubernetesconfigurationFluxConfigurationConfigurationProtectedSettings(rawObj client.Object) []string {
	obj, ok := rawObj.(*kubernetesconfiguration_v20230501s.FluxConfiguration)
	if !ok {
		return nil
	}
	if obj.Spec.ConfigurationProtectedSettings == nil {
		return nil
	}
	return obj.Spec.ConfigurationProtectedSettings.Index()
}

// indexKubernetesconfigurationFluxConfigurationHttpsCACert an index function for kubernetesconfiguration_v20230501s.FluxConfiguration .spec.gitRepository.httpsCACert
func indexKubernetesconfigurationFluxConfigurationHttpsCACert(rawObj client.Object) []string {
	obj, ok := rawObj.(*kubernetesconfiguration_v20230501s.FluxConfiguration)
	if !ok {
		return nil
	}
	if obj.Spec.GitRepository == nil {
		return nil
	}
	if obj.Spec.GitRepository.HttpsCACert == nil {
		return nil
	}
	return obj.Spec.GitRepository.HttpsCACert.Index()
}

// indexKubernetesconfigurationFluxConfigurationSasToken an index function for kubernetesconfiguration_v20230501s.FluxConfiguration .spec.azureBlob.sasToken
func indexKubernetesconfigurationFluxConfigurationSasToken(rawObj client.Object) []string {
	obj, ok := rawObj.(*kubernetesconfiguration_v20230501s.FluxConfiguration)
	if !ok {
		return nil
	}
	if obj.Spec.AzureBlob == nil {
		return nil
	}
	if obj.Spec.AzureBlob.SasToken == nil {
		return nil
	}
	return obj.Spec.AzureBlob.SasToken.Index()
}

// indexKubernetesconfigurationFluxConfigurationTenantIdFromConfig an index function for kubernetesconfiguration_v20230501s.FluxConfiguration .spec.azureBlob.servicePrincipal.tenantIdFromConfig
func indexKubernetesconfigurationFluxConfigurationTenantIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*kubernetesconfiguration_v20230501s.FluxConfiguration)
	if !ok {
		return nil
	}
	if obj.Spec.AzureBlob == nil {
		return nil
	}
	if obj.Spec.AzureBlob.ServicePrincipal == nil {
		return nil
	}
	if obj.Spec.AzureBlob.ServicePrincipal.TenantIdFromConfig == nil {
		return nil
	}
	return obj.Spec.AzureBlob.ServicePrincipal.TenantIdFromConfig.Index()
}

// indexMachinelearningservicesWorkspaceIdentityClientIdFromConfig an index function for machinelearningservices_v20240401s.Workspace .spec.encryption.keyVaultProperties.identityClientIdFromConfig
func indexMachinelearningservicesWorkspaceIdentityClientIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.Workspace)
	if !ok {
		return nil
	}
	if obj.Spec.Encryption == nil {
		return nil
	}
	if obj.Spec.Encryption.KeyVaultProperties == nil {
		return nil
	}
	if obj.Spec.Encryption.KeyVaultProperties.IdentityClientIdFromConfig == nil {
		return nil
	}
	return obj.Spec.Encryption.KeyVaultProperties.IdentityClientIdFromConfig.Index()
}

// indexMachinelearningservicesWorkspacesComputeAdminUserPassword an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.amlCompute.properties.userAccountCredentials.adminUserPassword
func indexMachinelearningservicesWorkspacesComputeAdminUserPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.AmlCompute == nil {
		return nil
	}
	if obj.Spec.Properties.AmlCompute.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.AmlCompute.Properties.UserAccountCredentials == nil {
		return nil
	}
	if obj.Spec.Properties.AmlCompute.Properties.UserAccountCredentials.AdminUserPassword == nil {
		return nil
	}
	return obj.Spec.Properties.AmlCompute.Properties.UserAccountCredentials.AdminUserPassword.Index()
}

// indexMachinelearningservicesWorkspacesComputeAdminUserSshPublicKey an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.amlCompute.properties.userAccountCredentials.adminUserSshPublicKey
func indexMachinelearningservicesWorkspacesComputeAdminUserSshPublicKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.AmlCompute == nil {
		return nil
	}
	if obj.Spec.Properties.AmlCompute.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.AmlCompute.Properties.UserAccountCredentials == nil {
		return nil
	}
	if obj.Spec.Properties.AmlCompute.Properties.UserAccountCredentials.AdminUserSshPublicKey == nil {
		return nil
	}
	return obj.Spec.Properties.AmlCompute.Properties.UserAccountCredentials.AdminUserSshPublicKey.Index()
}

// indexMachinelearningservicesWorkspacesComputeCert an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.aks.properties.sslConfiguration.cert
func indexMachinelearningservicesWorkspacesComputeCert(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.AKS == nil {
		return nil
	}
	if obj.Spec.Properties.AKS.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.AKS.Properties.SslConfiguration == nil {
		return nil
	}
	if obj.Spec.Properties.AKS.Properties.SslConfiguration.Cert == nil {
		return nil
	}
	return obj.Spec.Properties.AKS.Properties.SslConfiguration.Cert.Index()
}

// indexMachinelearningservicesWorkspacesComputeDatabricksAccessToken an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.databricks.properties.databricksAccessToken
func indexMachinelearningservicesWorkspacesComputeDatabricksAccessToken(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.Databricks == nil {
		return nil
	}
	if obj.Spec.Properties.Databricks.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.Databricks.Properties.DatabricksAccessToken == nil {
		return nil
	}
	return obj.Spec.Properties.Databricks.Properties.DatabricksAccessToken.Index()
}

// indexMachinelearningservicesWorkspacesComputeExtensionPrincipalIdFromConfig an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.kubernetes.properties.extensionPrincipalIdFromConfig
func indexMachinelearningservicesWorkspacesComputeExtensionPrincipalIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.Kubernetes == nil {
		return nil
	}
	if obj.Spec.Properties.Kubernetes.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.Kubernetes.Properties.ExtensionPrincipalIdFromConfig == nil {
		return nil
	}
	return obj.Spec.Properties.Kubernetes.Properties.ExtensionPrincipalIdFromConfig.Index()
}

// indexMachinelearningservicesWorkspacesComputeHDInsightPassword an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.hdInsight.properties.administratorAccount.password
func indexMachinelearningservicesWorkspacesComputeHDInsightPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.HDInsight == nil {
		return nil
	}
	if obj.Spec.Properties.HDInsight.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.HDInsight.Properties.AdministratorAccount == nil {
		return nil
	}
	if obj.Spec.Properties.HDInsight.Properties.AdministratorAccount.Password == nil {
		return nil
	}
	return obj.Spec.Properties.HDInsight.Properties.AdministratorAccount.Password.Index()
}

// indexMachinelearningservicesWorkspacesComputeHDInsightPrivateKeyData an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.hdInsight.properties.administratorAccount.privateKeyData
func indexMachinelearningservicesWorkspacesComputeHDInsightPrivateKeyData(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.HDInsight == nil {
		return nil
	}
	if obj.Spec.Properties.HDInsight.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.HDInsight.Properties.AdministratorAccount == nil {
		return nil
	}
	if obj.Spec.Properties.HDInsight.Properties.AdministratorAccount.PrivateKeyData == nil {
		return nil
	}
	return obj.Spec.Properties.HDInsight.Properties.AdministratorAccount.PrivateKeyData.Index()
}

// indexMachinelearningservicesWorkspacesComputeHDInsightPublicKeyData an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.hdInsight.properties.administratorAccount.publicKeyData
func indexMachinelearningservicesWorkspacesComputeHDInsightPublicKeyData(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.HDInsight == nil {
		return nil
	}
	if obj.Spec.Properties.HDInsight.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.HDInsight.Properties.AdministratorAccount == nil {
		return nil
	}
	if obj.Spec.Properties.HDInsight.Properties.AdministratorAccount.PublicKeyData == nil {
		return nil
	}
	return obj.Spec.Properties.HDInsight.Properties.AdministratorAccount.PublicKeyData.Index()
}

// indexMachinelearningservicesWorkspacesComputeKey an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.aks.properties.sslConfiguration.key
func indexMachinelearningservicesWorkspacesComputeKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.AKS == nil {
		return nil
	}
	if obj.Spec.Properties.AKS.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.AKS.Properties.SslConfiguration == nil {
		return nil
	}
	if obj.Spec.Properties.AKS.Properties.SslConfiguration.Key == nil {
		return nil
	}
	return obj.Spec.Properties.AKS.Properties.SslConfiguration.Key.Index()
}

// indexMachinelearningservicesWorkspacesComputeObjectIdFromConfig an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.computeInstance.properties.personalComputeInstanceSettings.assignedUser.objectIdFromConfig
func indexMachinelearningservicesWorkspacesComputeObjectIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.ComputeInstance == nil {
		return nil
	}
	if obj.Spec.Properties.ComputeInstance.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.ComputeInstance.Properties.PersonalComputeInstanceSettings == nil {
		return nil
	}
	if obj.Spec.Properties.ComputeInstance.Properties.PersonalComputeInstanceSettings.AssignedUser == nil {
		return nil
	}
	if obj.Spec.Properties.ComputeInstance.Properties.PersonalComputeInstanceSettings.AssignedUser.ObjectIdFromConfig == nil {
		return nil
	}
	return obj.Spec.Properties.ComputeInstance.Properties.PersonalComputeInstanceSettings.AssignedUser.ObjectIdFromConfig.Index()
}

// indexMachinelearningservicesWorkspacesComputeRelayConnectionString an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.kubernetes.properties.relayConnectionString
func indexMachinelearningservicesWorkspacesComputeRelayConnectionString(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.Kubernetes == nil {
		return nil
	}
	if obj.Spec.Properties.Kubernetes.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.Kubernetes.Properties.RelayConnectionString == nil {
		return nil
	}
	return obj.Spec.Properties.Kubernetes.Properties.RelayConnectionString.Index()
}

// indexMachinelearningservicesWorkspacesComputeServiceBusConnectionString an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.kubernetes.properties.serviceBusConnectionString
func indexMachinelearningservicesWorkspacesComputeServiceBusConnectionString(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.Kubernetes == nil {
		return nil
	}
	if obj.Spec.Properties.Kubernetes.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.Kubernetes.Properties.ServiceBusConnectionString == nil {
		return nil
	}
	return obj.Spec.Properties.Kubernetes.Properties.ServiceBusConnectionString.Index()
}

// indexMachinelearningservicesWorkspacesComputeTenantIdFromConfig an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.computeInstance.properties.personalComputeInstanceSettings.assignedUser.tenantIdFromConfig
func indexMachinelearningservicesWorkspacesComputeTenantIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.ComputeInstance == nil {
		return nil
	}
	if obj.Spec.Properties.ComputeInstance.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.ComputeInstance.Properties.PersonalComputeInstanceSettings == nil {
		return nil
	}
	if obj.Spec.Properties.ComputeInstance.Properties.PersonalComputeInstanceSettings.AssignedUser == nil {
		return nil
	}
	if obj.Spec.Properties.ComputeInstance.Properties.PersonalComputeInstanceSettings.AssignedUser.TenantIdFromConfig == nil {
		return nil
	}
	return obj.Spec.Properties.ComputeInstance.Properties.PersonalComputeInstanceSettings.AssignedUser.TenantIdFromConfig.Index()
}

// indexMachinelearningservicesWorkspacesComputeVirtualMachinePassword an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.virtualMachine.properties.administratorAccount.password
func indexMachinelearningservicesWorkspacesComputeVirtualMachinePassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.VirtualMachine == nil {
		return nil
	}
	if obj.Spec.Properties.VirtualMachine.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.VirtualMachine.Properties.AdministratorAccount == nil {
		return nil
	}
	if obj.Spec.Properties.VirtualMachine.Properties.AdministratorAccount.Password == nil {
		return nil
	}
	return obj.Spec.Properties.VirtualMachine.Properties.AdministratorAccount.Password.Index()
}

// indexMachinelearningservicesWorkspacesComputeVirtualMachinePrivateKeyData an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.virtualMachine.properties.administratorAccount.privateKeyData
func indexMachinelearningservicesWorkspacesComputeVirtualMachinePrivateKeyData(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.VirtualMachine == nil {
		return nil
	}
	if obj.Spec.Properties.VirtualMachine.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.VirtualMachine.Properties.AdministratorAccount == nil {
		return nil
	}
	if obj.Spec.Properties.VirtualMachine.Properties.AdministratorAccount.PrivateKeyData == nil {
		return nil
	}
	return obj.Spec.Properties.VirtualMachine.Properties.AdministratorAccount.PrivateKeyData.Index()
}

// indexMachinelearningservicesWorkspacesComputeVirtualMachinePublicKeyData an index function for machinelearningservices_v20240401s.WorkspacesCompute .spec.properties.virtualMachine.properties.administratorAccount.publicKeyData
func indexMachinelearningservicesWorkspacesComputeVirtualMachinePublicKeyData(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesCompute)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.VirtualMachine == nil {
		return nil
	}
	if obj.Spec.Properties.VirtualMachine.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.VirtualMachine.Properties.AdministratorAccount == nil {
		return nil
	}
	if obj.Spec.Properties.VirtualMachine.Properties.AdministratorAccount.PublicKeyData == nil {
		return nil
	}
	return obj.Spec.Properties.VirtualMachine.Properties.AdministratorAccount.PublicKeyData.Index()
}

// indexMachinelearningservicesWorkspacesConnectionAccountKeyKey an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.accountKey.credentials.key
func indexMachinelearningservicesWorkspacesConnectionAccountKeyKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.AccountKey == nil {
		return nil
	}
	if obj.Spec.Properties.AccountKey.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.AccountKey.Credentials.Key == nil {
		return nil
	}
	return obj.Spec.Properties.AccountKey.Credentials.Key.Index()
}

// indexMachinelearningservicesWorkspacesConnectionApiKeyKey an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.apiKey.credentials.key
func indexMachinelearningservicesWorkspacesConnectionApiKeyKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.ApiKey == nil {
		return nil
	}
	if obj.Spec.Properties.ApiKey.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.ApiKey.Credentials.Key == nil {
		return nil
	}
	return obj.Spec.Properties.ApiKey.Credentials.Key.Index()
}

// indexMachinelearningservicesWorkspacesConnectionKeys an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.customKeys.credentials.keys
func indexMachinelearningservicesWorkspacesConnectionKeys(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.CustomKeys == nil {
		return nil
	}
	if obj.Spec.Properties.CustomKeys.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.CustomKeys.Credentials.Keys == nil {
		return nil
	}
	return obj.Spec.Properties.CustomKeys.Credentials.Keys.Index()
}

// indexMachinelearningservicesWorkspacesConnectionManagedIdentityClientIdFromConfig an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.managedIdentity.credentials.clientIdFromConfig
func indexMachinelearningservicesWorkspacesConnectionManagedIdentityClientIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.ManagedIdentity == nil {
		return nil
	}
	if obj.Spec.Properties.ManagedIdentity.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.ManagedIdentity.Credentials.ClientIdFromConfig == nil {
		return nil
	}
	return obj.Spec.Properties.ManagedIdentity.Credentials.ClientIdFromConfig.Index()
}

// indexMachinelearningservicesWorkspacesConnectionOAuth2ClientIdFromConfig an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.oAuth2.credentials.clientIdFromConfig
func indexMachinelearningservicesWorkspacesConnectionOAuth2ClientIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2 == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2.Credentials.ClientIdFromConfig == nil {
		return nil
	}
	return obj.Spec.Properties.OAuth2.Credentials.ClientIdFromConfig.Index()
}

// indexMachinelearningservicesWorkspacesConnectionOAuth2ClientSecret an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.oAuth2.credentials.clientSecret
func indexMachinelearningservicesWorkspacesConnectionOAuth2ClientSecret(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2 == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2.Credentials.ClientSecret == nil {
		return nil
	}
	return obj.Spec.Properties.OAuth2.Credentials.ClientSecret.Index()
}

// indexMachinelearningservicesWorkspacesConnectionOAuth2DeveloperToken an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.oAuth2.credentials.developerToken
func indexMachinelearningservicesWorkspacesConnectionOAuth2DeveloperToken(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2 == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2.Credentials.DeveloperToken == nil {
		return nil
	}
	return obj.Spec.Properties.OAuth2.Credentials.DeveloperToken.Index()
}

// indexMachinelearningservicesWorkspacesConnectionOAuth2Password an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.oAuth2.credentials.password
func indexMachinelearningservicesWorkspacesConnectionOAuth2Password(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2 == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2.Credentials.Password == nil {
		return nil
	}
	return obj.Spec.Properties.OAuth2.Credentials.Password.Index()
}

// indexMachinelearningservicesWorkspacesConnectionOAuth2RefreshToken an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.oAuth2.credentials.refreshToken
func indexMachinelearningservicesWorkspacesConnectionOAuth2RefreshToken(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2 == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2.Credentials.RefreshToken == nil {
		return nil
	}
	return obj.Spec.Properties.OAuth2.Credentials.RefreshToken.Index()
}

// indexMachinelearningservicesWorkspacesConnectionOAuth2TenantIdFromConfig an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.oAuth2.credentials.tenantIdFromConfig
func indexMachinelearningservicesWorkspacesConnectionOAuth2TenantIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2 == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.OAuth2.Credentials.TenantIdFromConfig == nil {
		return nil
	}
	return obj.Spec.Properties.OAuth2.Credentials.TenantIdFromConfig.Index()
}

// indexMachinelearningservicesWorkspacesConnectionPat an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.pat.credentials.pat
func indexMachinelearningservicesWorkspacesConnectionPat(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.PAT == nil {
		return nil
	}
	if obj.Spec.Properties.PAT.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.PAT.Credentials.Pat == nil {
		return nil
	}
	return obj.Spec.Properties.PAT.Credentials.Pat.Index()
}

// indexMachinelearningservicesWorkspacesConnectionSas an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.sas.credentials.sas
func indexMachinelearningservicesWorkspacesConnectionSas(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.SAS == nil {
		return nil
	}
	if obj.Spec.Properties.SAS.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.SAS.Credentials.Sas == nil {
		return nil
	}
	return obj.Spec.Properties.SAS.Credentials.Sas.Index()
}

// indexMachinelearningservicesWorkspacesConnectionSecretAccessKey an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.accessKey.credentials.secretAccessKey
func indexMachinelearningservicesWorkspacesConnectionSecretAccessKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.AccessKey == nil {
		return nil
	}
	if obj.Spec.Properties.AccessKey.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.AccessKey.Credentials.SecretAccessKey == nil {
		return nil
	}
	return obj.Spec.Properties.AccessKey.Credentials.SecretAccessKey.Index()
}

// indexMachinelearningservicesWorkspacesConnectionServicePrincipalClientIdFromConfig an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.servicePrincipal.credentials.clientIdFromConfig
func indexMachinelearningservicesWorkspacesConnectionServicePrincipalClientIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.ServicePrincipal == nil {
		return nil
	}
	if obj.Spec.Properties.ServicePrincipal.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.ServicePrincipal.Credentials.ClientIdFromConfig == nil {
		return nil
	}
	return obj.Spec.Properties.ServicePrincipal.Credentials.ClientIdFromConfig.Index()
}

// indexMachinelearningservicesWorkspacesConnectionServicePrincipalClientSecret an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.servicePrincipal.credentials.clientSecret
func indexMachinelearningservicesWorkspacesConnectionServicePrincipalClientSecret(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.ServicePrincipal == nil {
		return nil
	}
	if obj.Spec.Properties.ServicePrincipal.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.ServicePrincipal.Credentials.ClientSecret == nil {
		return nil
	}
	return obj.Spec.Properties.ServicePrincipal.Credentials.ClientSecret.Index()
}

// indexMachinelearningservicesWorkspacesConnectionServicePrincipalTenantIdFromConfig an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.servicePrincipal.credentials.tenantIdFromConfig
func indexMachinelearningservicesWorkspacesConnectionServicePrincipalTenantIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.ServicePrincipal == nil {
		return nil
	}
	if obj.Spec.Properties.ServicePrincipal.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.ServicePrincipal.Credentials.TenantIdFromConfig == nil {
		return nil
	}
	return obj.Spec.Properties.ServicePrincipal.Credentials.TenantIdFromConfig.Index()
}

// indexMachinelearningservicesWorkspacesConnectionUsernamePasswordPassword an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.usernamePassword.credentials.password
func indexMachinelearningservicesWorkspacesConnectionUsernamePasswordPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.UsernamePassword == nil {
		return nil
	}
	if obj.Spec.Properties.UsernamePassword.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.UsernamePassword.Credentials.Password == nil {
		return nil
	}
	return obj.Spec.Properties.UsernamePassword.Credentials.Password.Index()
}

// indexMachinelearningservicesWorkspacesConnectionUsernamePasswordSecurityToken an index function for machinelearningservices_v20240401s.WorkspacesConnection .spec.properties.usernamePassword.credentials.securityToken
func indexMachinelearningservicesWorkspacesConnectionUsernamePasswordSecurityToken(rawObj client.Object) []string {
	obj, ok := rawObj.(*machinelearningservices_v20240401s.WorkspacesConnection)
	if !ok {
		return nil
	}
	if obj.Spec.Properties == nil {
		return nil
	}
	if obj.Spec.Properties.UsernamePassword == nil {
		return nil
	}
	if obj.Spec.Properties.UsernamePassword.Credentials == nil {
		return nil
	}
	if obj.Spec.Properties.UsernamePassword.Credentials.SecurityToken == nil {
		return nil
	}
	return obj.Spec.Properties.UsernamePassword.Credentials.SecurityToken.Index()
}

// indexManagedidentityFederatedIdentityCredentialIssuerFromConfig an index function for managedidentity_v20230131s.FederatedIdentityCredential .spec.issuerFromConfig
func indexManagedidentityFederatedIdentityCredentialIssuerFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*managedidentity_v20230131s.FederatedIdentityCredential)
	if !ok {
		return nil
	}
	if obj.Spec.IssuerFromConfig == nil {
		return nil
	}
	return obj.Spec.IssuerFromConfig.Index()
}

// indexManagedidentityFederatedIdentityCredentialSubjectFromConfig an index function for managedidentity_v20230131s.FederatedIdentityCredential .spec.subjectFromConfig
func indexManagedidentityFederatedIdentityCredentialSubjectFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*managedidentity_v20230131s.FederatedIdentityCredential)
	if !ok {
		return nil
	}
	if obj.Spec.SubjectFromConfig == nil {
		return nil
	}
	return obj.Spec.SubjectFromConfig.Index()
}

// indexNetworkApplicationGatewayAuthenticationCertificatesData an index function for network_v20220701s.ApplicationGateway .spec.authenticationCertificates.data
func indexNetworkApplicationGatewayAuthenticationCertificatesData(rawObj client.Object) []string {
	obj, ok := rawObj.(*network_v20220701s.ApplicationGateway)
	if !ok {
		return nil
	}
	var result []string
	for _, authenticationCertificateItem := range obj.Spec.AuthenticationCertificates {
		if authenticationCertificateItem.Data == nil {
			continue
		}
		result = append(result, authenticationCertificateItem.Data.Index()...)
	}
	return result
}

// indexNetworkApplicationGatewaySslCertificatesData an index function for network_v20220701s.ApplicationGateway .spec.sslCertificates.data
func indexNetworkApplicationGatewaySslCertificatesData(rawObj client.Object) []string {
	obj, ok := rawObj.(*network_v20220701s.ApplicationGateway)
	if !ok {
		return nil
	}
	var result []string
	for _, sslCertificateItem := range obj.Spec.SslCertificates {
		if sslCertificateItem.Data == nil {
			continue
		}
		result = append(result, sslCertificateItem.Data.Index()...)
	}
	return result
}

// indexNetworkApplicationGatewaySslCertificatesPassword an index function for network_v20220701s.ApplicationGateway .spec.sslCertificates.password
func indexNetworkApplicationGatewaySslCertificatesPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*network_v20220701s.ApplicationGateway)
	if !ok {
		return nil
	}
	var result []string
	for _, sslCertificateItem := range obj.Spec.SslCertificates {
		if sslCertificateItem.Password == nil {
			continue
		}
		result = append(result, sslCertificateItem.Password.Index()...)
	}
	return result
}

// indexNetworkApplicationGatewayTrustedClientCertificatesData an index function for network_v20220701s.ApplicationGateway .spec.trustedClientCertificates.data
func indexNetworkApplicationGatewayTrustedClientCertificatesData(rawObj client.Object) []string {
	obj, ok := rawObj.(*network_v20220701s.ApplicationGateway)
	if !ok {
		return nil
	}
	var result []string
	for _, trustedClientCertificateItem := range obj.Spec.TrustedClientCertificates {
		if trustedClientCertificateItem.Data == nil {
			continue
		}
		result = append(result, trustedClientCertificateItem.Data.Index()...)
	}
	return result
}

// indexNetworkApplicationGatewayTrustedRootCertificatesData an index function for network_v20220701s.ApplicationGateway .spec.trustedRootCertificates.data
func indexNetworkApplicationGatewayTrustedRootCertificatesData(rawObj client.Object) []string {
	obj, ok := rawObj.(*network_v20220701s.ApplicationGateway)
	if !ok {
		return nil
	}
	var result []string
	for _, trustedRootCertificateItem := range obj.Spec.TrustedRootCertificates {
		if trustedRootCertificateItem.Data == nil {
			continue
		}
		result = append(result, trustedRootCertificateItem.Data.Index()...)
	}
	return result
}

// indexNetworkDnsForwardingRuleSetsForwardingRuleIpAddressFromConfig an index function for network_v20220701s.DnsForwardingRuleSetsForwardingRule .spec.targetDnsServers.ipAddressFromConfig
func indexNetworkDnsForwardingRuleSetsForwardingRuleIpAddressFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*network_v20220701s.DnsForwardingRuleSetsForwardingRule)
	if !ok {
		return nil
	}
	var result []string
	for _, targetDnsServerItem := range obj.Spec.TargetDnsServers {
		if targetDnsServerItem.IpAddressFromConfig == nil {
			continue
		}
		result = append(result, targetDnsServerItem.IpAddressFromConfig.Index()...)
	}
	return result
}

// indexRedhatopenshiftOpenShiftClusterClientIdFromConfig an index function for redhatopenshift_v20231122s.OpenShiftCluster .spec.servicePrincipalProfile.clientIdFromConfig
func indexRedhatopenshiftOpenShiftClusterClientIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*redhatopenshift_v20231122s.OpenShiftCluster)
	if !ok {
		return nil
	}
	if obj.Spec.ServicePrincipalProfile == nil {
		return nil
	}
	if obj.Spec.ServicePrincipalProfile.ClientIdFromConfig == nil {
		return nil
	}
	return obj.Spec.ServicePrincipalProfile.ClientIdFromConfig.Index()
}

// indexRedhatopenshiftOpenShiftClusterClientSecret an index function for redhatopenshift_v20231122s.OpenShiftCluster .spec.servicePrincipalProfile.clientSecret
func indexRedhatopenshiftOpenShiftClusterClientSecret(rawObj client.Object) []string {
	obj, ok := rawObj.(*redhatopenshift_v20231122s.OpenShiftCluster)
	if !ok {
		return nil
	}
	if obj.Spec.ServicePrincipalProfile == nil {
		return nil
	}
	if obj.Spec.ServicePrincipalProfile.ClientSecret == nil {
		return nil
	}
	return obj.Spec.ServicePrincipalProfile.ClientSecret.Index()
}

// indexRedhatopenshiftOpenShiftClusterPullSecret an index function for redhatopenshift_v20231122s.OpenShiftCluster .spec.clusterProfile.pullSecret
func indexRedhatopenshiftOpenShiftClusterPullSecret(rawObj client.Object) []string {
	obj, ok := rawObj.(*redhatopenshift_v20231122s.OpenShiftCluster)
	if !ok {
		return nil
	}
	if obj.Spec.ClusterProfile == nil {
		return nil
	}
	if obj.Spec.ClusterProfile.PullSecret == nil {
		return nil
	}
	return obj.Spec.ClusterProfile.PullSecret.Index()
}

// indexSqlServerAdministratorLoginPassword an index function for sql_v20211101s.Server .spec.administratorLoginPassword
func indexSqlServerAdministratorLoginPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*sql_v20211101s.Server)
	if !ok {
		return nil
	}
	if obj.Spec.AdministratorLoginPassword == nil {
		return nil
	}
	return obj.Spec.AdministratorLoginPassword.Index()
}

// indexSqlServersAdministratorSidFromConfig an index function for sql_v20211101s.ServersAdministrator .spec.sidFromConfig
func indexSqlServersAdministratorSidFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*sql_v20211101s.ServersAdministrator)
	if !ok {
		return nil
	}
	if obj.Spec.SidFromConfig == nil {
		return nil
	}
	return obj.Spec.SidFromConfig.Index()
}

// indexSqlServersAdministratorTenantIdFromConfig an index function for sql_v20211101s.ServersAdministrator .spec.tenantIdFromConfig
func indexSqlServersAdministratorTenantIdFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*sql_v20211101s.ServersAdministrator)
	if !ok {
		return nil
	}
	if obj.Spec.TenantIdFromConfig == nil {
		return nil
	}
	return obj.Spec.TenantIdFromConfig.Index()
}

// indexSqlServersAuditingSettingStorageAccountAccessKey an index function for sql_v20211101s.ServersAuditingSetting .spec.storageAccountAccessKey
func indexSqlServersAuditingSettingStorageAccountAccessKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*sql_v20211101s.ServersAuditingSetting)
	if !ok {
		return nil
	}
	if obj.Spec.StorageAccountAccessKey == nil {
		return nil
	}
	return obj.Spec.StorageAccountAccessKey.Index()
}

// indexSqlServersDatabasesAuditingSettingStorageAccountAccessKey an index function for sql_v20211101s.ServersDatabasesAuditingSetting .spec.storageAccountAccessKey
func indexSqlServersDatabasesAuditingSettingStorageAccountAccessKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*sql_v20211101s.ServersDatabasesAuditingSetting)
	if !ok {
		return nil
	}
	if obj.Spec.StorageAccountAccessKey == nil {
		return nil
	}
	return obj.Spec.StorageAccountAccessKey.Index()
}

// indexSqlServersDatabasesSecurityAlertPolicyStorageAccountAccessKey an index function for sql_v20211101s.ServersDatabasesSecurityAlertPolicy .spec.storageAccountAccessKey
func indexSqlServersDatabasesSecurityAlertPolicyStorageAccountAccessKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*sql_v20211101s.ServersDatabasesSecurityAlertPolicy)
	if !ok {
		return nil
	}
	if obj.Spec.StorageAccountAccessKey == nil {
		return nil
	}
	return obj.Spec.StorageAccountAccessKey.Index()
}

// indexSqlServersDatabasesVulnerabilityAssessmentStorageAccountAccessKey an index function for sql_v20211101s.ServersDatabasesVulnerabilityAssessment .spec.storageAccountAccessKey
func indexSqlServersDatabasesVulnerabilityAssessmentStorageAccountAccessKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*sql_v20211101s.ServersDatabasesVulnerabilityAssessment)
	if !ok {
		return nil
	}
	if obj.Spec.StorageAccountAccessKey == nil {
		return nil
	}
	return obj.Spec.StorageAccountAccessKey.Index()
}

// indexSqlServersDatabasesVulnerabilityAssessmentStorageContainerPathFromConfig an index function for sql_v20211101s.ServersDatabasesVulnerabilityAssessment .spec.storageContainerPathFromConfig
func indexSqlServersDatabasesVulnerabilityAssessmentStorageContainerPathFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*sql_v20211101s.ServersDatabasesVulnerabilityAssessment)
	if !ok {
		return nil
	}
	if obj.Spec.StorageContainerPathFromConfig == nil {
		return nil
	}
	return obj.Spec.StorageContainerPathFromConfig.Index()
}

// indexSqlServersDatabasesVulnerabilityAssessmentStorageContainerSasKey an index function for sql_v20211101s.ServersDatabasesVulnerabilityAssessment .spec.storageContainerSasKey
func indexSqlServersDatabasesVulnerabilityAssessmentStorageContainerSasKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*sql_v20211101s.ServersDatabasesVulnerabilityAssessment)
	if !ok {
		return nil
	}
	if obj.Spec.StorageContainerSasKey == nil {
		return nil
	}
	return obj.Spec.StorageContainerSasKey.Index()
}

// indexSqlServersSecurityAlertPolicyStorageAccountAccessKey an index function for sql_v20211101s.ServersSecurityAlertPolicy .spec.storageAccountAccessKey
func indexSqlServersSecurityAlertPolicyStorageAccountAccessKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*sql_v20211101s.ServersSecurityAlertPolicy)
	if !ok {
		return nil
	}
	if obj.Spec.StorageAccountAccessKey == nil {
		return nil
	}
	return obj.Spec.StorageAccountAccessKey.Index()
}

// indexSqlServersVulnerabilityAssessmentStorageAccountAccessKey an index function for sql_v20211101s.ServersVulnerabilityAssessment .spec.storageAccountAccessKey
func indexSqlServersVulnerabilityAssessmentStorageAccountAccessKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*sql_v20211101s.ServersVulnerabilityAssessment)
	if !ok {
		return nil
	}
	if obj.Spec.StorageAccountAccessKey == nil {
		return nil
	}
	return obj.Spec.StorageAccountAccessKey.Index()
}

// indexSqlServersVulnerabilityAssessmentStorageContainerPathFromConfig an index function for sql_v20211101s.ServersVulnerabilityAssessment .spec.storageContainerPathFromConfig
func indexSqlServersVulnerabilityAssessmentStorageContainerPathFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*sql_v20211101s.ServersVulnerabilityAssessment)
	if !ok {
		return nil
	}
	if obj.Spec.StorageContainerPathFromConfig == nil {
		return nil
	}
	return obj.Spec.StorageContainerPathFromConfig.Index()
}

// indexSqlServersVulnerabilityAssessmentStorageContainerSasKey an index function for sql_v20211101s.ServersVulnerabilityAssessment .spec.storageContainerSasKey
func indexSqlServersVulnerabilityAssessmentStorageContainerSasKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*sql_v20211101s.ServersVulnerabilityAssessment)
	if !ok {
		return nil
	}
	if obj.Spec.StorageContainerSasKey == nil {
		return nil
	}
	return obj.Spec.StorageContainerSasKey.Index()
}

// indexSynapseWorkspaceAccountUrlFromConfig an index function for synapse_v20210601s.Workspace .spec.defaultDataLakeStorage.accountUrlFromConfig
func indexSynapseWorkspaceAccountUrlFromConfig(rawObj client.Object) []string {
	obj, ok := rawObj.(*synapse_v20210601s.Workspace)
	if !ok {
		return nil
	}
	if obj.Spec.DefaultDataLakeStorage == nil {
		return nil
	}
	if obj.Spec.DefaultDataLakeStorage.AccountUrlFromConfig == nil {
		return nil
	}
	return obj.Spec.DefaultDataLakeStorage.AccountUrlFromConfig.Index()
}

// indexSynapseWorkspaceSqlAdministratorLoginPassword an index function for synapse_v20210601s.Workspace .spec.sqlAdministratorLoginPassword
func indexSynapseWorkspaceSqlAdministratorLoginPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*synapse_v20210601s.Workspace)
	if !ok {
		return nil
	}
	if obj.Spec.SqlAdministratorLoginPassword == nil {
		return nil
	}
	return obj.Spec.SqlAdministratorLoginPassword.Index()
}

// indexWebSiteAccessKey an index function for web_v20220301s.Site .spec.siteConfig.azureStorageAccounts.accessKey
func indexWebSiteAccessKey(rawObj client.Object) []string {
	obj, ok := rawObj.(*web_v20220301s.Site)
	if !ok {
		return nil
	}
	var result []string
	if obj.Spec.SiteConfig == nil {
		return nil
	}
	for _, value := range obj.Spec.SiteConfig.AzureStorageAccounts {
		if value.AccessKey == nil {
			continue
		}
		result = append(result, value.AccessKey.Index()...)
	}
	return result
}
