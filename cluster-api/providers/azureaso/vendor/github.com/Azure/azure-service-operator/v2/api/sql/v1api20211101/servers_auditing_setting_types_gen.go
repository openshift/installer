// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/sql/v1api20211101/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/sql/v1api20211101/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/BlobAuditing.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingSettings/default
type ServersAuditingSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServersAuditingSetting_Spec   `json:"spec,omitempty"`
	Status            ServersAuditingSetting_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &ServersAuditingSetting{}

// GetConditions returns the conditions of the resource
func (setting *ServersAuditingSetting) GetConditions() conditions.Conditions {
	return setting.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (setting *ServersAuditingSetting) SetConditions(conditions conditions.Conditions) {
	setting.Status.Conditions = conditions
}

var _ conversion.Convertible = &ServersAuditingSetting{}

// ConvertFrom populates our ServersAuditingSetting from the provided hub ServersAuditingSetting
func (setting *ServersAuditingSetting) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.ServersAuditingSetting)
	if !ok {
		return fmt.Errorf("expected sql/v1api20211101/storage/ServersAuditingSetting but received %T instead", hub)
	}

	return setting.AssignProperties_From_ServersAuditingSetting(source)
}

// ConvertTo populates the provided hub ServersAuditingSetting from our ServersAuditingSetting
func (setting *ServersAuditingSetting) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.ServersAuditingSetting)
	if !ok {
		return fmt.Errorf("expected sql/v1api20211101/storage/ServersAuditingSetting but received %T instead", hub)
	}

	return setting.AssignProperties_To_ServersAuditingSetting(destination)
}

// +kubebuilder:webhook:path=/mutate-sql-azure-com-v1api20211101-serversauditingsetting,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=sql.azure.com,resources=serversauditingsettings,verbs=create;update,versions=v1api20211101,name=default.v1api20211101.serversauditingsettings.sql.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &ServersAuditingSetting{}

// Default applies defaults to the ServersAuditingSetting resource
func (setting *ServersAuditingSetting) Default() {
	setting.defaultImpl()
	var temp any = setting
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultImpl applies the code generated defaults to the ServersAuditingSetting resource
func (setting *ServersAuditingSetting) defaultImpl() {}

var _ configmaps.Exporter = &ServersAuditingSetting{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (setting *ServersAuditingSetting) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if setting.Spec.OperatorSpec == nil {
		return nil
	}
	return setting.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &ServersAuditingSetting{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (setting *ServersAuditingSetting) SecretDestinationExpressions() []*core.DestinationExpression {
	if setting.Spec.OperatorSpec == nil {
		return nil
	}
	return setting.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &ServersAuditingSetting{}

// InitializeSpec initializes the spec for this resource from the given status
func (setting *ServersAuditingSetting) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*ServersAuditingSetting_STATUS); ok {
		return setting.Spec.Initialize_From_ServersAuditingSetting_STATUS(s)
	}

	return fmt.Errorf("expected Status of type ServersAuditingSetting_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &ServersAuditingSetting{}

// AzureName returns the Azure name of the resource (always "default")
func (setting *ServersAuditingSetting) AzureName() string {
	return "default"
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (setting ServersAuditingSetting) GetAPIVersion() string {
	return "2021-11-01"
}

// GetResourceScope returns the scope of the resource
func (setting *ServersAuditingSetting) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (setting *ServersAuditingSetting) GetSpec() genruntime.ConvertibleSpec {
	return &setting.Spec
}

// GetStatus returns the status of this resource
func (setting *ServersAuditingSetting) GetStatus() genruntime.ConvertibleStatus {
	return &setting.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (setting *ServersAuditingSetting) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Sql/servers/auditingSettings"
func (setting *ServersAuditingSetting) GetType() string {
	return "Microsoft.Sql/servers/auditingSettings"
}

// NewEmptyStatus returns a new empty (blank) status
func (setting *ServersAuditingSetting) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &ServersAuditingSetting_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (setting *ServersAuditingSetting) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(setting.Spec)
	return setting.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (setting *ServersAuditingSetting) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*ServersAuditingSetting_STATUS); ok {
		setting.Status = *st
		return nil
	}

	// Convert status to required version
	var st ServersAuditingSetting_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	setting.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-sql-azure-com-v1api20211101-serversauditingsetting,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=sql.azure.com,resources=serversauditingsettings,verbs=create;update,versions=v1api20211101,name=validate.v1api20211101.serversauditingsettings.sql.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &ServersAuditingSetting{}

// ValidateCreate validates the creation of the resource
func (setting *ServersAuditingSetting) ValidateCreate() (admission.Warnings, error) {
	validations := setting.createValidations()
	var temp any = setting
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (setting *ServersAuditingSetting) ValidateDelete() (admission.Warnings, error) {
	validations := setting.deleteValidations()
	var temp any = setting
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (setting *ServersAuditingSetting) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := setting.updateValidations()
	var temp any = setting
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (setting *ServersAuditingSetting) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){setting.validateResourceReferences, setting.validateOwnerReference, setting.validateSecretDestinations, setting.validateConfigMapDestinations}
}

// deleteValidations validates the deletion of the resource
func (setting *ServersAuditingSetting) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (setting *ServersAuditingSetting) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return setting.validateResourceReferences()
		},
		setting.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return setting.validateOwnerReference()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return setting.validateSecretDestinations()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return setting.validateConfigMapDestinations()
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (setting *ServersAuditingSetting) validateConfigMapDestinations() (admission.Warnings, error) {
	if setting.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(setting, nil, setting.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (setting *ServersAuditingSetting) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(setting)
}

// validateResourceReferences validates all resource references
func (setting *ServersAuditingSetting) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&setting.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (setting *ServersAuditingSetting) validateSecretDestinations() (admission.Warnings, error) {
	if setting.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(setting, nil, setting.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (setting *ServersAuditingSetting) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*ServersAuditingSetting)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, setting)
}

// AssignProperties_From_ServersAuditingSetting populates our ServersAuditingSetting from the provided source ServersAuditingSetting
func (setting *ServersAuditingSetting) AssignProperties_From_ServersAuditingSetting(source *storage.ServersAuditingSetting) error {

	// ObjectMeta
	setting.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec ServersAuditingSetting_Spec
	err := spec.AssignProperties_From_ServersAuditingSetting_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_ServersAuditingSetting_Spec() to populate field Spec")
	}
	setting.Spec = spec

	// Status
	var status ServersAuditingSetting_STATUS
	err = status.AssignProperties_From_ServersAuditingSetting_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_ServersAuditingSetting_STATUS() to populate field Status")
	}
	setting.Status = status

	// No error
	return nil
}

// AssignProperties_To_ServersAuditingSetting populates the provided destination ServersAuditingSetting from our ServersAuditingSetting
func (setting *ServersAuditingSetting) AssignProperties_To_ServersAuditingSetting(destination *storage.ServersAuditingSetting) error {

	// ObjectMeta
	destination.ObjectMeta = *setting.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.ServersAuditingSetting_Spec
	err := setting.Spec.AssignProperties_To_ServersAuditingSetting_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_ServersAuditingSetting_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.ServersAuditingSetting_STATUS
	err = setting.Status.AssignProperties_To_ServersAuditingSetting_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_ServersAuditingSetting_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (setting *ServersAuditingSetting) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: setting.Spec.OriginalVersion(),
		Kind:    "ServersAuditingSetting",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/BlobAuditing.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingSettings/default
type ServersAuditingSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServersAuditingSetting `json:"items"`
}

type ServersAuditingSetting_Spec struct {
	// AuditActionsAndGroups: Specifies the Actions-Groups and Actions to audit.
	// The recommended set of action groups to use is the following combination - this will audit all the queries and stored
	// procedures executed against the database, as well as successful and failed logins:
	// BATCH_COMPLETED_GROUP,
	// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
	// FAILED_DATABASE_AUTHENTICATION_GROUP.
	// This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
	// The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using
	// unnecessary groups could lead to very large quantities of audit records):
	// APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
	// BACKUP_RESTORE_GROUP
	// DATABASE_LOGOUT_GROUP
	// DATABASE_OBJECT_CHANGE_GROUP
	// DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
	// DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
	// DATABASE_OPERATION_GROUP
	// DATABASE_PERMISSION_CHANGE_GROUP
	// DATABASE_PRINCIPAL_CHANGE_GROUP
	// DATABASE_PRINCIPAL_IMPERSONATION_GROUP
	// DATABASE_ROLE_MEMBER_CHANGE_GROUP
	// FAILED_DATABASE_AUTHENTICATION_GROUP
	// SCHEMA_OBJECT_ACCESS_GROUP
	// SCHEMA_OBJECT_CHANGE_GROUP
	// SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
	// SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
	// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
	// USER_CHANGE_PASSWORD_GROUP
	// BATCH_STARTED_GROUP
	// BATCH_COMPLETED_GROUP
	// DBCC_GROUP
	// DATABASE_OWNERSHIP_CHANGE_GROUP
	// DATABASE_CHANGE_GROUP
	// LEDGER_OPERATION_GROUP
	// These are groups that cover all sql statements and stored procedures executed against the database, and should not be
	// used in combination with other groups as this will result in duplicate audit logs.
	// For more information, see [Database-Level Audit Action
	// Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
	// For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server
	// auditing policy). The supported actions to audit are:
	// SELECT
	// UPDATE
	// INSERT
	// DELETE
	// EXECUTE
	// RECEIVE
	// REFERENCES
	// The general form for defining an action to be audited is:
	// {action} ON {object} BY {principal}
	// Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire
	// database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
	// For example:
	// SELECT on dbo.myTable by public
	// SELECT on DATABASE::myDatabase by public
	// SELECT on SCHEMA::mySchema by public
	// For more information, see [Database-Level Audit
	// Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
	AuditActionsAndGroups []string `json:"auditActionsAndGroups,omitempty"`

	// IsAzureMonitorTargetEnabled: Specifies whether audit events are sent to Azure Monitor.
	// In order to send the events to Azure Monitor, specify 'State' as 'Enabled' and 'IsAzureMonitorTargetEnabled' as true.
	// When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on
	// the database should be also created.
	// Note that for server level audit you should use the 'master' database as {databaseName}.
	// Diagnostic Settings URI format:
	// PUT
	// https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
	// For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
	// or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
	IsAzureMonitorTargetEnabled *bool `json:"isAzureMonitorTargetEnabled,omitempty"`

	// IsDevopsAuditEnabled: Specifies the state of devops audit. If state is Enabled, devops logs will be sent to Azure
	// Monitor.
	// In order to send the events to Azure Monitor, specify 'State' as 'Enabled', 'IsAzureMonitorTargetEnabled' as true and
	// 'IsDevopsAuditEnabled' as true
	// When using REST API to configure auditing, Diagnostic Settings with 'DevOpsOperationsAudit' diagnostic logs category on
	// the master database should also be created.
	// Diagnostic Settings URI format:
	// PUT
	// https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/master/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
	// For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
	// or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
	IsDevopsAuditEnabled *bool `json:"isDevopsAuditEnabled,omitempty"`

	// IsManagedIdentityInUse: Specifies whether Managed Identity is used to access blob storage
	IsManagedIdentityInUse *bool `json:"isManagedIdentityInUse,omitempty"`

	// IsStorageSecondaryKeyInUse: Specifies whether storageAccountAccessKey value is the storage's secondary key.
	IsStorageSecondaryKeyInUse *bool `json:"isStorageSecondaryKeyInUse,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *ServersAuditingSettingOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a sql.azure.com/Server resource
	Owner *genruntime.KnownResourceReference `group:"sql.azure.com" json:"owner,omitempty" kind:"Server"`

	// QueueDelayMs: Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be
	// processed.
	// The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
	QueueDelayMs *int `json:"queueDelayMs,omitempty"`

	// RetentionDays: Specifies the number of days to keep in the audit logs in the storage account.
	RetentionDays *int `json:"retentionDays,omitempty"`

	// +kubebuilder:validation:Required
	// State: Specifies the state of the audit. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are
	// required.
	State *ServerBlobAuditingPolicyProperties_State `json:"state,omitempty"`

	// StorageAccountAccessKey: Specifies the identifier key of the auditing storage account.
	// If state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server
	// system-assigned managed identity to access the storage.
	// Prerequisites for using managed identity authentication:
	// 1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).
	// 2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the
	// server identity.
	// For more information, see [Auditing to storage using Managed Identity
	// authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
	StorageAccountAccessKey *genruntime.SecretReference `json:"storageAccountAccessKey,omitempty"`

	// +kubebuilder:validation:Pattern="^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$"
	// StorageAccountSubscriptionId: Specifies the blob storage subscription Id.
	StorageAccountSubscriptionId *string `json:"storageAccountSubscriptionId,omitempty"`

	// StorageEndpoint: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
	// Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
	StorageEndpoint *string `json:"storageEndpoint,omitempty"`
}

var _ genruntime.ARMTransformer = &ServersAuditingSetting_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (setting *ServersAuditingSetting_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if setting == nil {
		return nil, nil
	}
	result := &arm.ServersAuditingSetting_Spec{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if setting.AuditActionsAndGroups != nil ||
		setting.IsAzureMonitorTargetEnabled != nil ||
		setting.IsDevopsAuditEnabled != nil ||
		setting.IsManagedIdentityInUse != nil ||
		setting.IsStorageSecondaryKeyInUse != nil ||
		setting.QueueDelayMs != nil ||
		setting.RetentionDays != nil ||
		setting.State != nil ||
		setting.StorageAccountAccessKey != nil ||
		setting.StorageAccountSubscriptionId != nil ||
		setting.StorageEndpoint != nil {
		result.Properties = &arm.ServerBlobAuditingPolicyProperties{}
	}
	for _, item := range setting.AuditActionsAndGroups {
		result.Properties.AuditActionsAndGroups = append(result.Properties.AuditActionsAndGroups, item)
	}
	if setting.IsAzureMonitorTargetEnabled != nil {
		isAzureMonitorTargetEnabled := *setting.IsAzureMonitorTargetEnabled
		result.Properties.IsAzureMonitorTargetEnabled = &isAzureMonitorTargetEnabled
	}
	if setting.IsDevopsAuditEnabled != nil {
		isDevopsAuditEnabled := *setting.IsDevopsAuditEnabled
		result.Properties.IsDevopsAuditEnabled = &isDevopsAuditEnabled
	}
	if setting.IsManagedIdentityInUse != nil {
		isManagedIdentityInUse := *setting.IsManagedIdentityInUse
		result.Properties.IsManagedIdentityInUse = &isManagedIdentityInUse
	}
	if setting.IsStorageSecondaryKeyInUse != nil {
		isStorageSecondaryKeyInUse := *setting.IsStorageSecondaryKeyInUse
		result.Properties.IsStorageSecondaryKeyInUse = &isStorageSecondaryKeyInUse
	}
	if setting.QueueDelayMs != nil {
		queueDelayMs := *setting.QueueDelayMs
		result.Properties.QueueDelayMs = &queueDelayMs
	}
	if setting.RetentionDays != nil {
		retentionDays := *setting.RetentionDays
		result.Properties.RetentionDays = &retentionDays
	}
	if setting.State != nil {
		var temp string
		temp = string(*setting.State)
		state := arm.ServerBlobAuditingPolicyProperties_State(temp)
		result.Properties.State = &state
	}
	if setting.StorageAccountAccessKey != nil {
		storageAccountAccessKeySecret, err := resolved.ResolvedSecrets.Lookup(*setting.StorageAccountAccessKey)
		if err != nil {
			return nil, errors.Wrap(err, "looking up secret for property StorageAccountAccessKey")
		}
		storageAccountAccessKey := storageAccountAccessKeySecret
		result.Properties.StorageAccountAccessKey = &storageAccountAccessKey
	}
	if setting.StorageAccountSubscriptionId != nil {
		storageAccountSubscriptionId := *setting.StorageAccountSubscriptionId
		result.Properties.StorageAccountSubscriptionId = &storageAccountSubscriptionId
	}
	if setting.StorageEndpoint != nil {
		storageEndpoint := *setting.StorageEndpoint
		result.Properties.StorageEndpoint = &storageEndpoint
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (setting *ServersAuditingSetting_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.ServersAuditingSetting_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (setting *ServersAuditingSetting_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.ServersAuditingSetting_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.ServersAuditingSetting_Spec, got %T", armInput)
	}

	// Set property "AuditActionsAndGroups":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AuditActionsAndGroups {
			setting.AuditActionsAndGroups = append(setting.AuditActionsAndGroups, item)
		}
	}

	// Set property "IsAzureMonitorTargetEnabled":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsAzureMonitorTargetEnabled != nil {
			isAzureMonitorTargetEnabled := *typedInput.Properties.IsAzureMonitorTargetEnabled
			setting.IsAzureMonitorTargetEnabled = &isAzureMonitorTargetEnabled
		}
	}

	// Set property "IsDevopsAuditEnabled":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsDevopsAuditEnabled != nil {
			isDevopsAuditEnabled := *typedInput.Properties.IsDevopsAuditEnabled
			setting.IsDevopsAuditEnabled = &isDevopsAuditEnabled
		}
	}

	// Set property "IsManagedIdentityInUse":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsManagedIdentityInUse != nil {
			isManagedIdentityInUse := *typedInput.Properties.IsManagedIdentityInUse
			setting.IsManagedIdentityInUse = &isManagedIdentityInUse
		}
	}

	// Set property "IsStorageSecondaryKeyInUse":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsStorageSecondaryKeyInUse != nil {
			isStorageSecondaryKeyInUse := *typedInput.Properties.IsStorageSecondaryKeyInUse
			setting.IsStorageSecondaryKeyInUse = &isStorageSecondaryKeyInUse
		}
	}

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	setting.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "QueueDelayMs":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.QueueDelayMs != nil {
			queueDelayMs := *typedInput.Properties.QueueDelayMs
			setting.QueueDelayMs = &queueDelayMs
		}
	}

	// Set property "RetentionDays":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetentionDays != nil {
			retentionDays := *typedInput.Properties.RetentionDays
			setting.RetentionDays = &retentionDays
		}
	}

	// Set property "State":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.State != nil {
			var temp string
			temp = string(*typedInput.Properties.State)
			state := ServerBlobAuditingPolicyProperties_State(temp)
			setting.State = &state
		}
	}

	// no assignment for property "StorageAccountAccessKey"

	// Set property "StorageAccountSubscriptionId":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StorageAccountSubscriptionId != nil {
			storageAccountSubscriptionId := *typedInput.Properties.StorageAccountSubscriptionId
			setting.StorageAccountSubscriptionId = &storageAccountSubscriptionId
		}
	}

	// Set property "StorageEndpoint":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StorageEndpoint != nil {
			storageEndpoint := *typedInput.Properties.StorageEndpoint
			setting.StorageEndpoint = &storageEndpoint
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &ServersAuditingSetting_Spec{}

// ConvertSpecFrom populates our ServersAuditingSetting_Spec from the provided source
func (setting *ServersAuditingSetting_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.ServersAuditingSetting_Spec)
	if ok {
		// Populate our instance from source
		return setting.AssignProperties_From_ServersAuditingSetting_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.ServersAuditingSetting_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = setting.AssignProperties_From_ServersAuditingSetting_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our ServersAuditingSetting_Spec
func (setting *ServersAuditingSetting_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.ServersAuditingSetting_Spec)
	if ok {
		// Populate destination from our instance
		return setting.AssignProperties_To_ServersAuditingSetting_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.ServersAuditingSetting_Spec{}
	err := setting.AssignProperties_To_ServersAuditingSetting_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_ServersAuditingSetting_Spec populates our ServersAuditingSetting_Spec from the provided source ServersAuditingSetting_Spec
func (setting *ServersAuditingSetting_Spec) AssignProperties_From_ServersAuditingSetting_Spec(source *storage.ServersAuditingSetting_Spec) error {

	// AuditActionsAndGroups
	setting.AuditActionsAndGroups = genruntime.CloneSliceOfString(source.AuditActionsAndGroups)

	// IsAzureMonitorTargetEnabled
	if source.IsAzureMonitorTargetEnabled != nil {
		isAzureMonitorTargetEnabled := *source.IsAzureMonitorTargetEnabled
		setting.IsAzureMonitorTargetEnabled = &isAzureMonitorTargetEnabled
	} else {
		setting.IsAzureMonitorTargetEnabled = nil
	}

	// IsDevopsAuditEnabled
	if source.IsDevopsAuditEnabled != nil {
		isDevopsAuditEnabled := *source.IsDevopsAuditEnabled
		setting.IsDevopsAuditEnabled = &isDevopsAuditEnabled
	} else {
		setting.IsDevopsAuditEnabled = nil
	}

	// IsManagedIdentityInUse
	if source.IsManagedIdentityInUse != nil {
		isManagedIdentityInUse := *source.IsManagedIdentityInUse
		setting.IsManagedIdentityInUse = &isManagedIdentityInUse
	} else {
		setting.IsManagedIdentityInUse = nil
	}

	// IsStorageSecondaryKeyInUse
	if source.IsStorageSecondaryKeyInUse != nil {
		isStorageSecondaryKeyInUse := *source.IsStorageSecondaryKeyInUse
		setting.IsStorageSecondaryKeyInUse = &isStorageSecondaryKeyInUse
	} else {
		setting.IsStorageSecondaryKeyInUse = nil
	}

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec ServersAuditingSettingOperatorSpec
		err := operatorSpec.AssignProperties_From_ServersAuditingSettingOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ServersAuditingSettingOperatorSpec() to populate field OperatorSpec")
		}
		setting.OperatorSpec = &operatorSpec
	} else {
		setting.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		setting.Owner = &owner
	} else {
		setting.Owner = nil
	}

	// QueueDelayMs
	setting.QueueDelayMs = genruntime.ClonePointerToInt(source.QueueDelayMs)

	// RetentionDays
	setting.RetentionDays = genruntime.ClonePointerToInt(source.RetentionDays)

	// State
	if source.State != nil {
		state := *source.State
		stateTemp := genruntime.ToEnum(state, serverBlobAuditingPolicyProperties_State_Values)
		setting.State = &stateTemp
	} else {
		setting.State = nil
	}

	// StorageAccountAccessKey
	if source.StorageAccountAccessKey != nil {
		storageAccountAccessKey := source.StorageAccountAccessKey.Copy()
		setting.StorageAccountAccessKey = &storageAccountAccessKey
	} else {
		setting.StorageAccountAccessKey = nil
	}

	// StorageAccountSubscriptionId
	if source.StorageAccountSubscriptionId != nil {
		storageAccountSubscriptionId := *source.StorageAccountSubscriptionId
		setting.StorageAccountSubscriptionId = &storageAccountSubscriptionId
	} else {
		setting.StorageAccountSubscriptionId = nil
	}

	// StorageEndpoint
	setting.StorageEndpoint = genruntime.ClonePointerToString(source.StorageEndpoint)

	// No error
	return nil
}

// AssignProperties_To_ServersAuditingSetting_Spec populates the provided destination ServersAuditingSetting_Spec from our ServersAuditingSetting_Spec
func (setting *ServersAuditingSetting_Spec) AssignProperties_To_ServersAuditingSetting_Spec(destination *storage.ServersAuditingSetting_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AuditActionsAndGroups
	destination.AuditActionsAndGroups = genruntime.CloneSliceOfString(setting.AuditActionsAndGroups)

	// IsAzureMonitorTargetEnabled
	if setting.IsAzureMonitorTargetEnabled != nil {
		isAzureMonitorTargetEnabled := *setting.IsAzureMonitorTargetEnabled
		destination.IsAzureMonitorTargetEnabled = &isAzureMonitorTargetEnabled
	} else {
		destination.IsAzureMonitorTargetEnabled = nil
	}

	// IsDevopsAuditEnabled
	if setting.IsDevopsAuditEnabled != nil {
		isDevopsAuditEnabled := *setting.IsDevopsAuditEnabled
		destination.IsDevopsAuditEnabled = &isDevopsAuditEnabled
	} else {
		destination.IsDevopsAuditEnabled = nil
	}

	// IsManagedIdentityInUse
	if setting.IsManagedIdentityInUse != nil {
		isManagedIdentityInUse := *setting.IsManagedIdentityInUse
		destination.IsManagedIdentityInUse = &isManagedIdentityInUse
	} else {
		destination.IsManagedIdentityInUse = nil
	}

	// IsStorageSecondaryKeyInUse
	if setting.IsStorageSecondaryKeyInUse != nil {
		isStorageSecondaryKeyInUse := *setting.IsStorageSecondaryKeyInUse
		destination.IsStorageSecondaryKeyInUse = &isStorageSecondaryKeyInUse
	} else {
		destination.IsStorageSecondaryKeyInUse = nil
	}

	// OperatorSpec
	if setting.OperatorSpec != nil {
		var operatorSpec storage.ServersAuditingSettingOperatorSpec
		err := setting.OperatorSpec.AssignProperties_To_ServersAuditingSettingOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ServersAuditingSettingOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = setting.OriginalVersion()

	// Owner
	if setting.Owner != nil {
		owner := setting.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// QueueDelayMs
	destination.QueueDelayMs = genruntime.ClonePointerToInt(setting.QueueDelayMs)

	// RetentionDays
	destination.RetentionDays = genruntime.ClonePointerToInt(setting.RetentionDays)

	// State
	if setting.State != nil {
		state := string(*setting.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// StorageAccountAccessKey
	if setting.StorageAccountAccessKey != nil {
		storageAccountAccessKey := setting.StorageAccountAccessKey.Copy()
		destination.StorageAccountAccessKey = &storageAccountAccessKey
	} else {
		destination.StorageAccountAccessKey = nil
	}

	// StorageAccountSubscriptionId
	if setting.StorageAccountSubscriptionId != nil {
		storageAccountSubscriptionId := *setting.StorageAccountSubscriptionId
		destination.StorageAccountSubscriptionId = &storageAccountSubscriptionId
	} else {
		destination.StorageAccountSubscriptionId = nil
	}

	// StorageEndpoint
	destination.StorageEndpoint = genruntime.ClonePointerToString(setting.StorageEndpoint)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_ServersAuditingSetting_STATUS populates our ServersAuditingSetting_Spec from the provided source ServersAuditingSetting_STATUS
func (setting *ServersAuditingSetting_Spec) Initialize_From_ServersAuditingSetting_STATUS(source *ServersAuditingSetting_STATUS) error {

	// AuditActionsAndGroups
	setting.AuditActionsAndGroups = genruntime.CloneSliceOfString(source.AuditActionsAndGroups)

	// IsAzureMonitorTargetEnabled
	if source.IsAzureMonitorTargetEnabled != nil {
		isAzureMonitorTargetEnabled := *source.IsAzureMonitorTargetEnabled
		setting.IsAzureMonitorTargetEnabled = &isAzureMonitorTargetEnabled
	} else {
		setting.IsAzureMonitorTargetEnabled = nil
	}

	// IsDevopsAuditEnabled
	if source.IsDevopsAuditEnabled != nil {
		isDevopsAuditEnabled := *source.IsDevopsAuditEnabled
		setting.IsDevopsAuditEnabled = &isDevopsAuditEnabled
	} else {
		setting.IsDevopsAuditEnabled = nil
	}

	// IsManagedIdentityInUse
	if source.IsManagedIdentityInUse != nil {
		isManagedIdentityInUse := *source.IsManagedIdentityInUse
		setting.IsManagedIdentityInUse = &isManagedIdentityInUse
	} else {
		setting.IsManagedIdentityInUse = nil
	}

	// IsStorageSecondaryKeyInUse
	if source.IsStorageSecondaryKeyInUse != nil {
		isStorageSecondaryKeyInUse := *source.IsStorageSecondaryKeyInUse
		setting.IsStorageSecondaryKeyInUse = &isStorageSecondaryKeyInUse
	} else {
		setting.IsStorageSecondaryKeyInUse = nil
	}

	// QueueDelayMs
	setting.QueueDelayMs = genruntime.ClonePointerToInt(source.QueueDelayMs)

	// RetentionDays
	setting.RetentionDays = genruntime.ClonePointerToInt(source.RetentionDays)

	// State
	if source.State != nil {
		state := genruntime.ToEnum(string(*source.State), serverBlobAuditingPolicyProperties_State_Values)
		setting.State = &state
	} else {
		setting.State = nil
	}

	// StorageAccountSubscriptionId
	if source.StorageAccountSubscriptionId != nil {
		storageAccountSubscriptionId := *source.StorageAccountSubscriptionId
		setting.StorageAccountSubscriptionId = &storageAccountSubscriptionId
	} else {
		setting.StorageAccountSubscriptionId = nil
	}

	// StorageEndpoint
	setting.StorageEndpoint = genruntime.ClonePointerToString(source.StorageEndpoint)

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (setting *ServersAuditingSetting_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

type ServersAuditingSetting_STATUS struct {
	// AuditActionsAndGroups: Specifies the Actions-Groups and Actions to audit.
	// The recommended set of action groups to use is the following combination - this will audit all the queries and stored
	// procedures executed against the database, as well as successful and failed logins:
	// BATCH_COMPLETED_GROUP,
	// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
	// FAILED_DATABASE_AUTHENTICATION_GROUP.
	// This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
	// The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using
	// unnecessary groups could lead to very large quantities of audit records):
	// APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
	// BACKUP_RESTORE_GROUP
	// DATABASE_LOGOUT_GROUP
	// DATABASE_OBJECT_CHANGE_GROUP
	// DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
	// DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
	// DATABASE_OPERATION_GROUP
	// DATABASE_PERMISSION_CHANGE_GROUP
	// DATABASE_PRINCIPAL_CHANGE_GROUP
	// DATABASE_PRINCIPAL_IMPERSONATION_GROUP
	// DATABASE_ROLE_MEMBER_CHANGE_GROUP
	// FAILED_DATABASE_AUTHENTICATION_GROUP
	// SCHEMA_OBJECT_ACCESS_GROUP
	// SCHEMA_OBJECT_CHANGE_GROUP
	// SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
	// SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
	// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
	// USER_CHANGE_PASSWORD_GROUP
	// BATCH_STARTED_GROUP
	// BATCH_COMPLETED_GROUP
	// DBCC_GROUP
	// DATABASE_OWNERSHIP_CHANGE_GROUP
	// DATABASE_CHANGE_GROUP
	// LEDGER_OPERATION_GROUP
	// These are groups that cover all sql statements and stored procedures executed against the database, and should not be
	// used in combination with other groups as this will result in duplicate audit logs.
	// For more information, see [Database-Level Audit Action
	// Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
	// For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server
	// auditing policy). The supported actions to audit are:
	// SELECT
	// UPDATE
	// INSERT
	// DELETE
	// EXECUTE
	// RECEIVE
	// REFERENCES
	// The general form for defining an action to be audited is:
	// {action} ON {object} BY {principal}
	// Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire
	// database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
	// For example:
	// SELECT on dbo.myTable by public
	// SELECT on DATABASE::myDatabase by public
	// SELECT on SCHEMA::mySchema by public
	// For more information, see [Database-Level Audit
	// Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
	AuditActionsAndGroups []string `json:"auditActionsAndGroups,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// IsAzureMonitorTargetEnabled: Specifies whether audit events are sent to Azure Monitor.
	// In order to send the events to Azure Monitor, specify 'State' as 'Enabled' and 'IsAzureMonitorTargetEnabled' as true.
	// When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on
	// the database should be also created.
	// Note that for server level audit you should use the 'master' database as {databaseName}.
	// Diagnostic Settings URI format:
	// PUT
	// https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
	// For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
	// or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
	IsAzureMonitorTargetEnabled *bool `json:"isAzureMonitorTargetEnabled,omitempty"`

	// IsDevopsAuditEnabled: Specifies the state of devops audit. If state is Enabled, devops logs will be sent to Azure
	// Monitor.
	// In order to send the events to Azure Monitor, specify 'State' as 'Enabled', 'IsAzureMonitorTargetEnabled' as true and
	// 'IsDevopsAuditEnabled' as true
	// When using REST API to configure auditing, Diagnostic Settings with 'DevOpsOperationsAudit' diagnostic logs category on
	// the master database should also be created.
	// Diagnostic Settings URI format:
	// PUT
	// https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/master/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
	// For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
	// or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
	IsDevopsAuditEnabled *bool `json:"isDevopsAuditEnabled,omitempty"`

	// IsManagedIdentityInUse: Specifies whether Managed Identity is used to access blob storage
	IsManagedIdentityInUse *bool `json:"isManagedIdentityInUse,omitempty"`

	// IsStorageSecondaryKeyInUse: Specifies whether storageAccountAccessKey value is the storage's secondary key.
	IsStorageSecondaryKeyInUse *bool `json:"isStorageSecondaryKeyInUse,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// QueueDelayMs: Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be
	// processed.
	// The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
	QueueDelayMs *int `json:"queueDelayMs,omitempty"`

	// RetentionDays: Specifies the number of days to keep in the audit logs in the storage account.
	RetentionDays *int `json:"retentionDays,omitempty"`

	// State: Specifies the state of the audit. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are
	// required.
	State *ServerBlobAuditingPolicyProperties_State_STATUS `json:"state,omitempty"`

	// StorageAccountSubscriptionId: Specifies the blob storage subscription Id.
	StorageAccountSubscriptionId *string `json:"storageAccountSubscriptionId,omitempty"`

	// StorageEndpoint: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
	// Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
	StorageEndpoint *string `json:"storageEndpoint,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &ServersAuditingSetting_STATUS{}

// ConvertStatusFrom populates our ServersAuditingSetting_STATUS from the provided source
func (setting *ServersAuditingSetting_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.ServersAuditingSetting_STATUS)
	if ok {
		// Populate our instance from source
		return setting.AssignProperties_From_ServersAuditingSetting_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.ServersAuditingSetting_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = setting.AssignProperties_From_ServersAuditingSetting_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our ServersAuditingSetting_STATUS
func (setting *ServersAuditingSetting_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.ServersAuditingSetting_STATUS)
	if ok {
		// Populate destination from our instance
		return setting.AssignProperties_To_ServersAuditingSetting_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.ServersAuditingSetting_STATUS{}
	err := setting.AssignProperties_To_ServersAuditingSetting_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &ServersAuditingSetting_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (setting *ServersAuditingSetting_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.ServersAuditingSetting_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (setting *ServersAuditingSetting_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.ServersAuditingSetting_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.ServersAuditingSetting_STATUS, got %T", armInput)
	}

	// Set property "AuditActionsAndGroups":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AuditActionsAndGroups {
			setting.AuditActionsAndGroups = append(setting.AuditActionsAndGroups, item)
		}
	}

	// no assignment for property "Conditions"

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		setting.Id = &id
	}

	// Set property "IsAzureMonitorTargetEnabled":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsAzureMonitorTargetEnabled != nil {
			isAzureMonitorTargetEnabled := *typedInput.Properties.IsAzureMonitorTargetEnabled
			setting.IsAzureMonitorTargetEnabled = &isAzureMonitorTargetEnabled
		}
	}

	// Set property "IsDevopsAuditEnabled":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsDevopsAuditEnabled != nil {
			isDevopsAuditEnabled := *typedInput.Properties.IsDevopsAuditEnabled
			setting.IsDevopsAuditEnabled = &isDevopsAuditEnabled
		}
	}

	// Set property "IsManagedIdentityInUse":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsManagedIdentityInUse != nil {
			isManagedIdentityInUse := *typedInput.Properties.IsManagedIdentityInUse
			setting.IsManagedIdentityInUse = &isManagedIdentityInUse
		}
	}

	// Set property "IsStorageSecondaryKeyInUse":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsStorageSecondaryKeyInUse != nil {
			isStorageSecondaryKeyInUse := *typedInput.Properties.IsStorageSecondaryKeyInUse
			setting.IsStorageSecondaryKeyInUse = &isStorageSecondaryKeyInUse
		}
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		setting.Name = &name
	}

	// Set property "QueueDelayMs":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.QueueDelayMs != nil {
			queueDelayMs := *typedInput.Properties.QueueDelayMs
			setting.QueueDelayMs = &queueDelayMs
		}
	}

	// Set property "RetentionDays":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetentionDays != nil {
			retentionDays := *typedInput.Properties.RetentionDays
			setting.RetentionDays = &retentionDays
		}
	}

	// Set property "State":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.State != nil {
			var temp string
			temp = string(*typedInput.Properties.State)
			state := ServerBlobAuditingPolicyProperties_State_STATUS(temp)
			setting.State = &state
		}
	}

	// Set property "StorageAccountSubscriptionId":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StorageAccountSubscriptionId != nil {
			storageAccountSubscriptionId := *typedInput.Properties.StorageAccountSubscriptionId
			setting.StorageAccountSubscriptionId = &storageAccountSubscriptionId
		}
	}

	// Set property "StorageEndpoint":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StorageEndpoint != nil {
			storageEndpoint := *typedInput.Properties.StorageEndpoint
			setting.StorageEndpoint = &storageEndpoint
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		setting.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_ServersAuditingSetting_STATUS populates our ServersAuditingSetting_STATUS from the provided source ServersAuditingSetting_STATUS
func (setting *ServersAuditingSetting_STATUS) AssignProperties_From_ServersAuditingSetting_STATUS(source *storage.ServersAuditingSetting_STATUS) error {

	// AuditActionsAndGroups
	setting.AuditActionsAndGroups = genruntime.CloneSliceOfString(source.AuditActionsAndGroups)

	// Conditions
	setting.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	setting.Id = genruntime.ClonePointerToString(source.Id)

	// IsAzureMonitorTargetEnabled
	if source.IsAzureMonitorTargetEnabled != nil {
		isAzureMonitorTargetEnabled := *source.IsAzureMonitorTargetEnabled
		setting.IsAzureMonitorTargetEnabled = &isAzureMonitorTargetEnabled
	} else {
		setting.IsAzureMonitorTargetEnabled = nil
	}

	// IsDevopsAuditEnabled
	if source.IsDevopsAuditEnabled != nil {
		isDevopsAuditEnabled := *source.IsDevopsAuditEnabled
		setting.IsDevopsAuditEnabled = &isDevopsAuditEnabled
	} else {
		setting.IsDevopsAuditEnabled = nil
	}

	// IsManagedIdentityInUse
	if source.IsManagedIdentityInUse != nil {
		isManagedIdentityInUse := *source.IsManagedIdentityInUse
		setting.IsManagedIdentityInUse = &isManagedIdentityInUse
	} else {
		setting.IsManagedIdentityInUse = nil
	}

	// IsStorageSecondaryKeyInUse
	if source.IsStorageSecondaryKeyInUse != nil {
		isStorageSecondaryKeyInUse := *source.IsStorageSecondaryKeyInUse
		setting.IsStorageSecondaryKeyInUse = &isStorageSecondaryKeyInUse
	} else {
		setting.IsStorageSecondaryKeyInUse = nil
	}

	// Name
	setting.Name = genruntime.ClonePointerToString(source.Name)

	// QueueDelayMs
	setting.QueueDelayMs = genruntime.ClonePointerToInt(source.QueueDelayMs)

	// RetentionDays
	setting.RetentionDays = genruntime.ClonePointerToInt(source.RetentionDays)

	// State
	if source.State != nil {
		state := *source.State
		stateTemp := genruntime.ToEnum(state, serverBlobAuditingPolicyProperties_State_STATUS_Values)
		setting.State = &stateTemp
	} else {
		setting.State = nil
	}

	// StorageAccountSubscriptionId
	setting.StorageAccountSubscriptionId = genruntime.ClonePointerToString(source.StorageAccountSubscriptionId)

	// StorageEndpoint
	setting.StorageEndpoint = genruntime.ClonePointerToString(source.StorageEndpoint)

	// Type
	setting.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_ServersAuditingSetting_STATUS populates the provided destination ServersAuditingSetting_STATUS from our ServersAuditingSetting_STATUS
func (setting *ServersAuditingSetting_STATUS) AssignProperties_To_ServersAuditingSetting_STATUS(destination *storage.ServersAuditingSetting_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AuditActionsAndGroups
	destination.AuditActionsAndGroups = genruntime.CloneSliceOfString(setting.AuditActionsAndGroups)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(setting.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(setting.Id)

	// IsAzureMonitorTargetEnabled
	if setting.IsAzureMonitorTargetEnabled != nil {
		isAzureMonitorTargetEnabled := *setting.IsAzureMonitorTargetEnabled
		destination.IsAzureMonitorTargetEnabled = &isAzureMonitorTargetEnabled
	} else {
		destination.IsAzureMonitorTargetEnabled = nil
	}

	// IsDevopsAuditEnabled
	if setting.IsDevopsAuditEnabled != nil {
		isDevopsAuditEnabled := *setting.IsDevopsAuditEnabled
		destination.IsDevopsAuditEnabled = &isDevopsAuditEnabled
	} else {
		destination.IsDevopsAuditEnabled = nil
	}

	// IsManagedIdentityInUse
	if setting.IsManagedIdentityInUse != nil {
		isManagedIdentityInUse := *setting.IsManagedIdentityInUse
		destination.IsManagedIdentityInUse = &isManagedIdentityInUse
	} else {
		destination.IsManagedIdentityInUse = nil
	}

	// IsStorageSecondaryKeyInUse
	if setting.IsStorageSecondaryKeyInUse != nil {
		isStorageSecondaryKeyInUse := *setting.IsStorageSecondaryKeyInUse
		destination.IsStorageSecondaryKeyInUse = &isStorageSecondaryKeyInUse
	} else {
		destination.IsStorageSecondaryKeyInUse = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(setting.Name)

	// QueueDelayMs
	destination.QueueDelayMs = genruntime.ClonePointerToInt(setting.QueueDelayMs)

	// RetentionDays
	destination.RetentionDays = genruntime.ClonePointerToInt(setting.RetentionDays)

	// State
	if setting.State != nil {
		state := string(*setting.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// StorageAccountSubscriptionId
	destination.StorageAccountSubscriptionId = genruntime.ClonePointerToString(setting.StorageAccountSubscriptionId)

	// StorageEndpoint
	destination.StorageEndpoint = genruntime.ClonePointerToString(setting.StorageEndpoint)

	// Type
	destination.Type = genruntime.ClonePointerToString(setting.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ServerBlobAuditingPolicyProperties_State string

const (
	ServerBlobAuditingPolicyProperties_State_Disabled = ServerBlobAuditingPolicyProperties_State("Disabled")
	ServerBlobAuditingPolicyProperties_State_Enabled  = ServerBlobAuditingPolicyProperties_State("Enabled")
)

// Mapping from string to ServerBlobAuditingPolicyProperties_State
var serverBlobAuditingPolicyProperties_State_Values = map[string]ServerBlobAuditingPolicyProperties_State{
	"disabled": ServerBlobAuditingPolicyProperties_State_Disabled,
	"enabled":  ServerBlobAuditingPolicyProperties_State_Enabled,
}

type ServerBlobAuditingPolicyProperties_State_STATUS string

const (
	ServerBlobAuditingPolicyProperties_State_STATUS_Disabled = ServerBlobAuditingPolicyProperties_State_STATUS("Disabled")
	ServerBlobAuditingPolicyProperties_State_STATUS_Enabled  = ServerBlobAuditingPolicyProperties_State_STATUS("Enabled")
)

// Mapping from string to ServerBlobAuditingPolicyProperties_State_STATUS
var serverBlobAuditingPolicyProperties_State_STATUS_Values = map[string]ServerBlobAuditingPolicyProperties_State_STATUS{
	"disabled": ServerBlobAuditingPolicyProperties_State_STATUS_Disabled,
	"enabled":  ServerBlobAuditingPolicyProperties_State_STATUS_Enabled,
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type ServersAuditingSettingOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_ServersAuditingSettingOperatorSpec populates our ServersAuditingSettingOperatorSpec from the provided source ServersAuditingSettingOperatorSpec
func (operator *ServersAuditingSettingOperatorSpec) AssignProperties_From_ServersAuditingSettingOperatorSpec(source *storage.ServersAuditingSettingOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ServersAuditingSettingOperatorSpec populates the provided destination ServersAuditingSettingOperatorSpec from our ServersAuditingSettingOperatorSpec
func (operator *ServersAuditingSettingOperatorSpec) AssignProperties_To_ServersAuditingSettingOperatorSpec(destination *storage.ServersAuditingSettingOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&ServersAuditingSetting{}, &ServersAuditingSettingList{})
}
