// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type AutoscaleSetting_Spec struct {
	// Location: Resource location
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: The autoscale setting of the resource.
	Properties *AutoscaleSettingProperties `json:"properties,omitempty"`

	// Tags: Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping
	// this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no
	// greater in length than 128 characters and a value no greater in length than 256 characters.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &AutoscaleSetting_Spec{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2022-10-01"
func (setting AutoscaleSetting_Spec) GetAPIVersion() string {
	return "2022-10-01"
}

// GetName returns the Name of the resource
func (setting *AutoscaleSetting_Spec) GetName() string {
	return setting.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Insights/autoscalesettings"
func (setting *AutoscaleSetting_Spec) GetType() string {
	return "Microsoft.Insights/autoscalesettings"
}

// A setting that contains all of the configuration for the automatic scaling of a resource.
type AutoscaleSettingProperties struct {
	// Enabled: the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'false'.
	Enabled *bool `json:"enabled,omitempty"`

	// Name: the name of the autoscale setting.
	Name *string `json:"name,omitempty"`

	// Notifications: the collection of notifications.
	Notifications []AutoscaleNotification `json:"notifications,omitempty"`

	// PredictiveAutoscalePolicy: the predictive autoscale policy mode.
	PredictiveAutoscalePolicy *PredictiveAutoscalePolicy `json:"predictiveAutoscalePolicy,omitempty"`

	// Profiles: the collection of automatic scaling profiles that specify different scaling parameters for different time
	// periods. A maximum of 20 profiles can be specified.
	Profiles []AutoscaleProfile `json:"profiles,omitempty"`

	// TargetResourceLocation: the location of the resource that the autoscale setting should be added to.
	TargetResourceLocation *string `json:"targetResourceLocation,omitempty"`
	TargetResourceUri      *string `json:"targetResourceUri,omitempty"`
}

// Autoscale notification.
type AutoscaleNotification struct {
	// Email: the email notification.
	Email *EmailNotification `json:"email,omitempty"`

	// Operation: the operation associated with the notification and its value must be "scale"
	Operation *AutoscaleNotification_Operation `json:"operation,omitempty"`

	// Webhooks: the collection of webhook notifications.
	Webhooks []WebhookNotification `json:"webhooks,omitempty"`
}

// Autoscale profile.
type AutoscaleProfile struct {
	// Capacity: the number of instances that can be used during this profile.
	Capacity *ScaleCapacity `json:"capacity,omitempty"`

	// FixedDate: the specific date-time for the profile. This element is not used if the Recurrence element is used.
	FixedDate *TimeWindow `json:"fixedDate,omitempty"`

	// Name: the name of the profile.
	Name *string `json:"name,omitempty"`

	// Recurrence: the repeating times at which this profile begins. This element is not used if the FixedDate element is used.
	Recurrence *Recurrence `json:"recurrence,omitempty"`

	// Rules: the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules
	// can be specified.
	Rules []ScaleRule `json:"rules,omitempty"`
}

// The parameters for enabling predictive autoscale.
type PredictiveAutoscalePolicy struct {
	// ScaleLookAheadTime: the amount of time to specify by which instances are launched in advance. It must be between 1
	// minute and 60 minutes in ISO 8601 format.
	ScaleLookAheadTime *string `json:"scaleLookAheadTime,omitempty"`

	// ScaleMode: the predictive autoscale mode
	ScaleMode *PredictiveAutoscalePolicy_ScaleMode `json:"scaleMode,omitempty"`
}

// +kubebuilder:validation:Enum={"Scale"}
type AutoscaleNotification_Operation string

const AutoscaleNotification_Operation_Scale = AutoscaleNotification_Operation("Scale")

// Mapping from string to AutoscaleNotification_Operation
var autoscaleNotification_Operation_Values = map[string]AutoscaleNotification_Operation{
	"scale": AutoscaleNotification_Operation_Scale,
}

// Email notification of an autoscale event.
type EmailNotification struct {
	// CustomEmails: the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
	CustomEmails []string `json:"customEmails,omitempty"`

	// SendToSubscriptionAdministrator: a value indicating whether to send email to subscription administrator.
	SendToSubscriptionAdministrator *bool `json:"sendToSubscriptionAdministrator,omitempty"`

	// SendToSubscriptionCoAdministrators: a value indicating whether to send email to subscription co-administrators.
	SendToSubscriptionCoAdministrators *bool `json:"sendToSubscriptionCoAdministrators,omitempty"`
}

// +kubebuilder:validation:Enum={"Disabled","Enabled","ForecastOnly"}
type PredictiveAutoscalePolicy_ScaleMode string

const (
	PredictiveAutoscalePolicy_ScaleMode_Disabled     = PredictiveAutoscalePolicy_ScaleMode("Disabled")
	PredictiveAutoscalePolicy_ScaleMode_Enabled      = PredictiveAutoscalePolicy_ScaleMode("Enabled")
	PredictiveAutoscalePolicy_ScaleMode_ForecastOnly = PredictiveAutoscalePolicy_ScaleMode("ForecastOnly")
)

// Mapping from string to PredictiveAutoscalePolicy_ScaleMode
var predictiveAutoscalePolicy_ScaleMode_Values = map[string]PredictiveAutoscalePolicy_ScaleMode{
	"disabled":     PredictiveAutoscalePolicy_ScaleMode_Disabled,
	"enabled":      PredictiveAutoscalePolicy_ScaleMode_Enabled,
	"forecastonly": PredictiveAutoscalePolicy_ScaleMode_ForecastOnly,
}

// The repeating times at which this profile begins. This element is not used if the FixedDate element is used.
type Recurrence struct {
	// Frequency: the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning
	// each week will have the same set of profiles. For example, to set a daily schedule, set schedule to every day of the
	// week. The frequency property specifies that the schedule is repeated weekly.
	Frequency *Recurrence_Frequency `json:"frequency,omitempty"`

	// Schedule: the scheduling constraints for when the profile begins.
	Schedule *RecurrentSchedule `json:"schedule,omitempty"`
}

// The number of instances that can be used during this profile.
type ScaleCapacity struct {
	// Default: the number of instances that will be set if metrics are not available for evaluation. The default is only used
	// if the current instance count is lower than the default.
	Default *string `json:"default,omitempty"`

	// Maximum: the maximum number of instances for the resource. The actual maximum number of instances is limited by the
	// cores that are available in the subscription.
	Maximum *string `json:"maximum,omitempty"`

	// Minimum: the minimum number of instances for the resource.
	Minimum *string `json:"minimum,omitempty"`
}

// A rule that provide the triggers and parameters for the scaling action.
type ScaleRule struct {
	// MetricTrigger: the trigger that results in a scaling action.
	MetricTrigger *MetricTrigger `json:"metricTrigger,omitempty"`

	// ScaleAction: the parameters for the scaling action.
	ScaleAction *ScaleAction `json:"scaleAction,omitempty"`
}

// A specific date-time for the profile.
type TimeWindow struct {
	// End: the end time for the profile in ISO 8601 format.
	End *string `json:"end,omitempty"`

	// Start: the start time for the profile in ISO 8601 format.
	Start *string `json:"start,omitempty"`

	// TimeZone: the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline
	// Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard
	// Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time,
	// Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern
	// Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time,
	// Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E.
	// South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo
	// Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time,
	// Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard
	// Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time,
	// Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe
	// Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad
	// Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard
	// Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3,
	// Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard
	// Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard
	// Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE
	// Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard
	// Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard
	// Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS
	// Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard
	// Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji
	// Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
	TimeZone *string `json:"timeZone,omitempty"`
}

// Webhook notification of an autoscale event.
type WebhookNotification struct {
	// Properties: a property bag of settings. This value can be empty.
	Properties map[string]string `json:"properties,omitempty"`

	// ServiceUri: the service address to receive the notification.
	ServiceUri *string `json:"serviceUri,omitempty"`
}

// The trigger that results in a scaling action.
type MetricTrigger struct {
	// Dimensions: List of dimension conditions. For example:
	// [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].
	Dimensions []ScaleRuleMetricDimension `json:"dimensions,omitempty"`

	// DividePerInstance: a value indicating whether metric should divide per instance.
	DividePerInstance *bool `json:"dividePerInstance,omitempty"`

	// MetricName: the name of the metric that defines what the rule monitors.
	MetricName *string `json:"metricName,omitempty"`

	// MetricNamespace: the namespace of the metric that defines what the rule monitors.
	MetricNamespace *string `json:"metricNamespace,omitempty"`

	// MetricResourceLocation: the location of the resource the rule monitors.
	MetricResourceLocation *string `json:"metricResourceLocation,omitempty"`
	MetricResourceUri      *string `json:"metricResourceUri,omitempty"`

	// Operator: the operator that is used to compare the metric data and the threshold.
	Operator *MetricTrigger_Operator `json:"operator,omitempty"`

	// Statistic: the metric statistic type. How the metrics from multiple instances are combined.
	Statistic *MetricTrigger_Statistic `json:"statistic,omitempty"`

	// Threshold: the threshold of the metric that triggers the scale action.
	Threshold *float64 `json:"threshold,omitempty"`

	// TimeAggregation: time aggregation type. How the data that is collected should be combined over time. The default value
	// is Average.
	TimeAggregation *MetricTrigger_TimeAggregation `json:"timeAggregation,omitempty"`

	// TimeGrain: the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric
	// definitions for the metric. Must be between 12 hours and 1 minute.
	TimeGrain *string `json:"timeGrain,omitempty"`

	// TimeWindow: the range of time in which instance data is collected. This value must be greater than the delay in metric
	// collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
	TimeWindow *string `json:"timeWindow,omitempty"`
}

// +kubebuilder:validation:Enum={"Day","Hour","Minute","Month","None","Second","Week","Year"}
type Recurrence_Frequency string

const (
	Recurrence_Frequency_Day    = Recurrence_Frequency("Day")
	Recurrence_Frequency_Hour   = Recurrence_Frequency("Hour")
	Recurrence_Frequency_Minute = Recurrence_Frequency("Minute")
	Recurrence_Frequency_Month  = Recurrence_Frequency("Month")
	Recurrence_Frequency_None   = Recurrence_Frequency("None")
	Recurrence_Frequency_Second = Recurrence_Frequency("Second")
	Recurrence_Frequency_Week   = Recurrence_Frequency("Week")
	Recurrence_Frequency_Year   = Recurrence_Frequency("Year")
)

// Mapping from string to Recurrence_Frequency
var recurrence_Frequency_Values = map[string]Recurrence_Frequency{
	"day":    Recurrence_Frequency_Day,
	"hour":   Recurrence_Frequency_Hour,
	"minute": Recurrence_Frequency_Minute,
	"month":  Recurrence_Frequency_Month,
	"none":   Recurrence_Frequency_None,
	"second": Recurrence_Frequency_Second,
	"week":   Recurrence_Frequency_Week,
	"year":   Recurrence_Frequency_Year,
}

// The scheduling constraints for when the profile begins.
type RecurrentSchedule struct {
	// Days: the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.
	Days []string `json:"days,omitempty"`

	// Hours: A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM
	// times are not supported).
	Hours []int `json:"hours,omitempty"`

	// Minutes: A collection of minutes at which the profile takes effect at.
	Minutes []int `json:"minutes,omitempty"`

	// TimeZone: the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time,
	// UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US
	// Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central
	// Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard
	// Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central
	// Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South
	// America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard
	// Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco
	// Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time,
	// Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan
	// Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe
	// Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad
	// Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard
	// Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3,
	// Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard
	// Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard
	// Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE
	// Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard
	// Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard
	// Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS
	// Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard
	// Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji
	// Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
	TimeZone *string `json:"timeZone,omitempty"`
}

// The parameters for the scaling action.
type ScaleAction struct {
	// Cooldown: the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week
	// and 1 minute in ISO 8601 format.
	Cooldown *string `json:"cooldown,omitempty"`

	// Direction: the scale direction. Whether the scaling action increases or decreases the number of instances.
	Direction *ScaleAction_Direction `json:"direction,omitempty"`

	// Type: the type of action that should occur when the scale rule fires.
	Type *ScaleAction_Type `json:"type,omitempty"`

	// Value: the number of instances that are involved in the scaling action. This value must be 1 or greater. The default
	// value is 1.
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:validation:Enum={"Equals","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","NotEquals"}
type MetricTrigger_Operator string

const (
	MetricTrigger_Operator_Equals             = MetricTrigger_Operator("Equals")
	MetricTrigger_Operator_GreaterThan        = MetricTrigger_Operator("GreaterThan")
	MetricTrigger_Operator_GreaterThanOrEqual = MetricTrigger_Operator("GreaterThanOrEqual")
	MetricTrigger_Operator_LessThan           = MetricTrigger_Operator("LessThan")
	MetricTrigger_Operator_LessThanOrEqual    = MetricTrigger_Operator("LessThanOrEqual")
	MetricTrigger_Operator_NotEquals          = MetricTrigger_Operator("NotEquals")
)

// Mapping from string to MetricTrigger_Operator
var metricTrigger_Operator_Values = map[string]MetricTrigger_Operator{
	"equals":             MetricTrigger_Operator_Equals,
	"greaterthan":        MetricTrigger_Operator_GreaterThan,
	"greaterthanorequal": MetricTrigger_Operator_GreaterThanOrEqual,
	"lessthan":           MetricTrigger_Operator_LessThan,
	"lessthanorequal":    MetricTrigger_Operator_LessThanOrEqual,
	"notequals":          MetricTrigger_Operator_NotEquals,
}

// +kubebuilder:validation:Enum={"Average","Count","Max","Min","Sum"}
type MetricTrigger_Statistic string

const (
	MetricTrigger_Statistic_Average = MetricTrigger_Statistic("Average")
	MetricTrigger_Statistic_Count   = MetricTrigger_Statistic("Count")
	MetricTrigger_Statistic_Max     = MetricTrigger_Statistic("Max")
	MetricTrigger_Statistic_Min     = MetricTrigger_Statistic("Min")
	MetricTrigger_Statistic_Sum     = MetricTrigger_Statistic("Sum")
)

// Mapping from string to MetricTrigger_Statistic
var metricTrigger_Statistic_Values = map[string]MetricTrigger_Statistic{
	"average": MetricTrigger_Statistic_Average,
	"count":   MetricTrigger_Statistic_Count,
	"max":     MetricTrigger_Statistic_Max,
	"min":     MetricTrigger_Statistic_Min,
	"sum":     MetricTrigger_Statistic_Sum,
}

// +kubebuilder:validation:Enum={"Average","Count","Last","Maximum","Minimum","Total"}
type MetricTrigger_TimeAggregation string

const (
	MetricTrigger_TimeAggregation_Average = MetricTrigger_TimeAggregation("Average")
	MetricTrigger_TimeAggregation_Count   = MetricTrigger_TimeAggregation("Count")
	MetricTrigger_TimeAggregation_Last    = MetricTrigger_TimeAggregation("Last")
	MetricTrigger_TimeAggregation_Maximum = MetricTrigger_TimeAggregation("Maximum")
	MetricTrigger_TimeAggregation_Minimum = MetricTrigger_TimeAggregation("Minimum")
	MetricTrigger_TimeAggregation_Total   = MetricTrigger_TimeAggregation("Total")
)

// Mapping from string to MetricTrigger_TimeAggregation
var metricTrigger_TimeAggregation_Values = map[string]MetricTrigger_TimeAggregation{
	"average": MetricTrigger_TimeAggregation_Average,
	"count":   MetricTrigger_TimeAggregation_Count,
	"last":    MetricTrigger_TimeAggregation_Last,
	"maximum": MetricTrigger_TimeAggregation_Maximum,
	"minimum": MetricTrigger_TimeAggregation_Minimum,
	"total":   MetricTrigger_TimeAggregation_Total,
}

// +kubebuilder:validation:Enum={"Decrease","Increase","None"}
type ScaleAction_Direction string

const (
	ScaleAction_Direction_Decrease = ScaleAction_Direction("Decrease")
	ScaleAction_Direction_Increase = ScaleAction_Direction("Increase")
	ScaleAction_Direction_None     = ScaleAction_Direction("None")
)

// Mapping from string to ScaleAction_Direction
var scaleAction_Direction_Values = map[string]ScaleAction_Direction{
	"decrease": ScaleAction_Direction_Decrease,
	"increase": ScaleAction_Direction_Increase,
	"none":     ScaleAction_Direction_None,
}

// +kubebuilder:validation:Enum={"ChangeCount","ExactCount","PercentChangeCount","ServiceAllowedNextValue"}
type ScaleAction_Type string

const (
	ScaleAction_Type_ChangeCount             = ScaleAction_Type("ChangeCount")
	ScaleAction_Type_ExactCount              = ScaleAction_Type("ExactCount")
	ScaleAction_Type_PercentChangeCount      = ScaleAction_Type("PercentChangeCount")
	ScaleAction_Type_ServiceAllowedNextValue = ScaleAction_Type("ServiceAllowedNextValue")
)

// Mapping from string to ScaleAction_Type
var scaleAction_Type_Values = map[string]ScaleAction_Type{
	"changecount":             ScaleAction_Type_ChangeCount,
	"exactcount":              ScaleAction_Type_ExactCount,
	"percentchangecount":      ScaleAction_Type_PercentChangeCount,
	"serviceallowednextvalue": ScaleAction_Type_ServiceAllowedNextValue,
}

// Specifies an auto scale rule metric dimension.
type ScaleRuleMetricDimension struct {
	// DimensionName: Name of the dimension.
	DimensionName *string `json:"DimensionName,omitempty"`

	// Operator: the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the
	// values. 'NotEquals' being not equal to all of the values
	Operator *ScaleRuleMetricDimension_Operator `json:"Operator,omitempty"`

	// Values: list of dimension values. For example: ["App1","App2"].
	Values []string `json:"Values,omitempty"`
}

// +kubebuilder:validation:Enum={"Equals","NotEquals"}
type ScaleRuleMetricDimension_Operator string

const (
	ScaleRuleMetricDimension_Operator_Equals    = ScaleRuleMetricDimension_Operator("Equals")
	ScaleRuleMetricDimension_Operator_NotEquals = ScaleRuleMetricDimension_Operator("NotEquals")
)

// Mapping from string to ScaleRuleMetricDimension_Operator
var scaleRuleMetricDimension_Operator_Values = map[string]ScaleRuleMetricDimension_Operator{
	"equals":    ScaleRuleMetricDimension_Operator_Equals,
	"notequals": ScaleRuleMetricDimension_Operator_NotEquals,
}
