// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20231115

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/documentdb/v1api20231115/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/documentdb/v1api20231115/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2023-11-15/cosmos-db.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}
type SqlDatabaseContainerUserDefinedFunction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SqlDatabaseContainerUserDefinedFunction_Spec   `json:"spec,omitempty"`
	Status            SqlDatabaseContainerUserDefinedFunction_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &SqlDatabaseContainerUserDefinedFunction{}

// GetConditions returns the conditions of the resource
func (function *SqlDatabaseContainerUserDefinedFunction) GetConditions() conditions.Conditions {
	return function.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (function *SqlDatabaseContainerUserDefinedFunction) SetConditions(conditions conditions.Conditions) {
	function.Status.Conditions = conditions
}

var _ conversion.Convertible = &SqlDatabaseContainerUserDefinedFunction{}

// ConvertFrom populates our SqlDatabaseContainerUserDefinedFunction from the provided hub SqlDatabaseContainerUserDefinedFunction
func (function *SqlDatabaseContainerUserDefinedFunction) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.SqlDatabaseContainerUserDefinedFunction)
	if !ok {
		return fmt.Errorf("expected documentdb/v1api20231115/storage/SqlDatabaseContainerUserDefinedFunction but received %T instead", hub)
	}

	return function.AssignProperties_From_SqlDatabaseContainerUserDefinedFunction(source)
}

// ConvertTo populates the provided hub SqlDatabaseContainerUserDefinedFunction from our SqlDatabaseContainerUserDefinedFunction
func (function *SqlDatabaseContainerUserDefinedFunction) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.SqlDatabaseContainerUserDefinedFunction)
	if !ok {
		return fmt.Errorf("expected documentdb/v1api20231115/storage/SqlDatabaseContainerUserDefinedFunction but received %T instead", hub)
	}

	return function.AssignProperties_To_SqlDatabaseContainerUserDefinedFunction(destination)
}

// +kubebuilder:webhook:path=/mutate-documentdb-azure-com-v1api20231115-sqldatabasecontaineruserdefinedfunction,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=sqldatabasecontaineruserdefinedfunctions,verbs=create;update,versions=v1api20231115,name=default.v1api20231115.sqldatabasecontaineruserdefinedfunctions.documentdb.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &SqlDatabaseContainerUserDefinedFunction{}

// Default applies defaults to the SqlDatabaseContainerUserDefinedFunction resource
func (function *SqlDatabaseContainerUserDefinedFunction) Default() {
	function.defaultImpl()
	var temp any = function
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (function *SqlDatabaseContainerUserDefinedFunction) defaultAzureName() {
	if function.Spec.AzureName == "" {
		function.Spec.AzureName = function.Name
	}
}

// defaultImpl applies the code generated defaults to the SqlDatabaseContainerUserDefinedFunction resource
func (function *SqlDatabaseContainerUserDefinedFunction) defaultImpl() { function.defaultAzureName() }

var _ configmaps.Exporter = &SqlDatabaseContainerUserDefinedFunction{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (function *SqlDatabaseContainerUserDefinedFunction) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if function.Spec.OperatorSpec == nil {
		return nil
	}
	return function.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &SqlDatabaseContainerUserDefinedFunction{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (function *SqlDatabaseContainerUserDefinedFunction) SecretDestinationExpressions() []*core.DestinationExpression {
	if function.Spec.OperatorSpec == nil {
		return nil
	}
	return function.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &SqlDatabaseContainerUserDefinedFunction{}

// InitializeSpec initializes the spec for this resource from the given status
func (function *SqlDatabaseContainerUserDefinedFunction) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*SqlDatabaseContainerUserDefinedFunction_STATUS); ok {
		return function.Spec.Initialize_From_SqlDatabaseContainerUserDefinedFunction_STATUS(s)
	}

	return fmt.Errorf("expected Status of type SqlDatabaseContainerUserDefinedFunction_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &SqlDatabaseContainerUserDefinedFunction{}

// AzureName returns the Azure name of the resource
func (function *SqlDatabaseContainerUserDefinedFunction) AzureName() string {
	return function.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-11-15"
func (function SqlDatabaseContainerUserDefinedFunction) GetAPIVersion() string {
	return "2023-11-15"
}

// GetResourceScope returns the scope of the resource
func (function *SqlDatabaseContainerUserDefinedFunction) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (function *SqlDatabaseContainerUserDefinedFunction) GetSpec() genruntime.ConvertibleSpec {
	return &function.Spec
}

// GetStatus returns the status of this resource
func (function *SqlDatabaseContainerUserDefinedFunction) GetStatus() genruntime.ConvertibleStatus {
	return &function.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (function *SqlDatabaseContainerUserDefinedFunction) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/userDefinedFunctions"
func (function *SqlDatabaseContainerUserDefinedFunction) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/userDefinedFunctions"
}

// NewEmptyStatus returns a new empty (blank) status
func (function *SqlDatabaseContainerUserDefinedFunction) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SqlDatabaseContainerUserDefinedFunction_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (function *SqlDatabaseContainerUserDefinedFunction) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(function.Spec)
	return function.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (function *SqlDatabaseContainerUserDefinedFunction) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SqlDatabaseContainerUserDefinedFunction_STATUS); ok {
		function.Status = *st
		return nil
	}

	// Convert status to required version
	var st SqlDatabaseContainerUserDefinedFunction_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	function.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-documentdb-azure-com-v1api20231115-sqldatabasecontaineruserdefinedfunction,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=sqldatabasecontaineruserdefinedfunctions,verbs=create;update,versions=v1api20231115,name=validate.v1api20231115.sqldatabasecontaineruserdefinedfunctions.documentdb.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &SqlDatabaseContainerUserDefinedFunction{}

// ValidateCreate validates the creation of the resource
func (function *SqlDatabaseContainerUserDefinedFunction) ValidateCreate() (admission.Warnings, error) {
	validations := function.createValidations()
	var temp any = function
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (function *SqlDatabaseContainerUserDefinedFunction) ValidateDelete() (admission.Warnings, error) {
	validations := function.deleteValidations()
	var temp any = function
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (function *SqlDatabaseContainerUserDefinedFunction) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := function.updateValidations()
	var temp any = function
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (function *SqlDatabaseContainerUserDefinedFunction) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){function.validateResourceReferences, function.validateOwnerReference, function.validateSecretDestinations, function.validateConfigMapDestinations}
}

// deleteValidations validates the deletion of the resource
func (function *SqlDatabaseContainerUserDefinedFunction) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (function *SqlDatabaseContainerUserDefinedFunction) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return function.validateResourceReferences()
		},
		function.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return function.validateOwnerReference()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return function.validateSecretDestinations()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return function.validateConfigMapDestinations()
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (function *SqlDatabaseContainerUserDefinedFunction) validateConfigMapDestinations() (admission.Warnings, error) {
	if function.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(function, nil, function.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (function *SqlDatabaseContainerUserDefinedFunction) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(function)
}

// validateResourceReferences validates all resource references
func (function *SqlDatabaseContainerUserDefinedFunction) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&function.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (function *SqlDatabaseContainerUserDefinedFunction) validateSecretDestinations() (admission.Warnings, error) {
	if function.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(function, nil, function.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (function *SqlDatabaseContainerUserDefinedFunction) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*SqlDatabaseContainerUserDefinedFunction)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, function)
}

// AssignProperties_From_SqlDatabaseContainerUserDefinedFunction populates our SqlDatabaseContainerUserDefinedFunction from the provided source SqlDatabaseContainerUserDefinedFunction
func (function *SqlDatabaseContainerUserDefinedFunction) AssignProperties_From_SqlDatabaseContainerUserDefinedFunction(source *storage.SqlDatabaseContainerUserDefinedFunction) error {

	// ObjectMeta
	function.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec SqlDatabaseContainerUserDefinedFunction_Spec
	err := spec.AssignProperties_From_SqlDatabaseContainerUserDefinedFunction_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_SqlDatabaseContainerUserDefinedFunction_Spec() to populate field Spec")
	}
	function.Spec = spec

	// Status
	var status SqlDatabaseContainerUserDefinedFunction_STATUS
	err = status.AssignProperties_From_SqlDatabaseContainerUserDefinedFunction_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_SqlDatabaseContainerUserDefinedFunction_STATUS() to populate field Status")
	}
	function.Status = status

	// No error
	return nil
}

// AssignProperties_To_SqlDatabaseContainerUserDefinedFunction populates the provided destination SqlDatabaseContainerUserDefinedFunction from our SqlDatabaseContainerUserDefinedFunction
func (function *SqlDatabaseContainerUserDefinedFunction) AssignProperties_To_SqlDatabaseContainerUserDefinedFunction(destination *storage.SqlDatabaseContainerUserDefinedFunction) error {

	// ObjectMeta
	destination.ObjectMeta = *function.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.SqlDatabaseContainerUserDefinedFunction_Spec
	err := function.Spec.AssignProperties_To_SqlDatabaseContainerUserDefinedFunction_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_SqlDatabaseContainerUserDefinedFunction_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.SqlDatabaseContainerUserDefinedFunction_STATUS
	err = function.Status.AssignProperties_To_SqlDatabaseContainerUserDefinedFunction_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_SqlDatabaseContainerUserDefinedFunction_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (function *SqlDatabaseContainerUserDefinedFunction) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: function.Spec.OriginalVersion(),
		Kind:    "SqlDatabaseContainerUserDefinedFunction",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2023-11-15/cosmos-db.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}
type SqlDatabaseContainerUserDefinedFunctionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SqlDatabaseContainerUserDefinedFunction `json:"items"`
}

type SqlDatabaseContainerUserDefinedFunction_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *SqlDatabaseContainerUserDefinedFunctionOperatorSpec `json:"operatorSpec,omitempty"`

	// Options: A key-value pair of options to be applied for the request. This corresponds to the headers sent with the
	// request.
	Options *CreateUpdateOptions `json:"options,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a documentdb.azure.com/SqlDatabaseContainer resource
	Owner *genruntime.KnownResourceReference `group:"documentdb.azure.com" json:"owner,omitempty" kind:"SqlDatabaseContainer"`

	// +kubebuilder:validation:Required
	// Resource: The standard JSON format of a userDefinedFunction
	Resource *SqlUserDefinedFunctionResource `json:"resource,omitempty"`
	Tags     map[string]string               `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &SqlDatabaseContainerUserDefinedFunction_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (function *SqlDatabaseContainerUserDefinedFunction_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if function == nil {
		return nil, nil
	}
	result := &arm.SqlDatabaseContainerUserDefinedFunction_Spec{}

	// Set property "Location":
	if function.Location != nil {
		location := *function.Location
		result.Location = &location
	}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if function.Options != nil || function.Resource != nil {
		result.Properties = &arm.SqlUserDefinedFunctionCreateUpdateProperties{}
	}
	if function.Options != nil {
		options_ARM, err := (*function.Options).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		options := *options_ARM.(*arm.CreateUpdateOptions)
		result.Properties.Options = &options
	}
	if function.Resource != nil {
		resource_ARM, err := (*function.Resource).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		resource := *resource_ARM.(*arm.SqlUserDefinedFunctionResource)
		result.Properties.Resource = &resource
	}

	// Set property "Tags":
	if function.Tags != nil {
		result.Tags = make(map[string]string, len(function.Tags))
		for key, value := range function.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (function *SqlDatabaseContainerUserDefinedFunction_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.SqlDatabaseContainerUserDefinedFunction_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (function *SqlDatabaseContainerUserDefinedFunction_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.SqlDatabaseContainerUserDefinedFunction_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.SqlDatabaseContainerUserDefinedFunction_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	function.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		function.Location = &location
	}

	// no assignment for property "OperatorSpec"

	// Set property "Options":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Options != nil {
			var options1 CreateUpdateOptions
			err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
			if err != nil {
				return err
			}
			options := options1
			function.Options = &options
		}
	}

	// Set property "Owner":
	function.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Resource":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 SqlUserDefinedFunctionResource
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			function.Resource = &resource
		}
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		function.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			function.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &SqlDatabaseContainerUserDefinedFunction_Spec{}

// ConvertSpecFrom populates our SqlDatabaseContainerUserDefinedFunction_Spec from the provided source
func (function *SqlDatabaseContainerUserDefinedFunction_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.SqlDatabaseContainerUserDefinedFunction_Spec)
	if ok {
		// Populate our instance from source
		return function.AssignProperties_From_SqlDatabaseContainerUserDefinedFunction_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.SqlDatabaseContainerUserDefinedFunction_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = function.AssignProperties_From_SqlDatabaseContainerUserDefinedFunction_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our SqlDatabaseContainerUserDefinedFunction_Spec
func (function *SqlDatabaseContainerUserDefinedFunction_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.SqlDatabaseContainerUserDefinedFunction_Spec)
	if ok {
		// Populate destination from our instance
		return function.AssignProperties_To_SqlDatabaseContainerUserDefinedFunction_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.SqlDatabaseContainerUserDefinedFunction_Spec{}
	err := function.AssignProperties_To_SqlDatabaseContainerUserDefinedFunction_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_SqlDatabaseContainerUserDefinedFunction_Spec populates our SqlDatabaseContainerUserDefinedFunction_Spec from the provided source SqlDatabaseContainerUserDefinedFunction_Spec
func (function *SqlDatabaseContainerUserDefinedFunction_Spec) AssignProperties_From_SqlDatabaseContainerUserDefinedFunction_Spec(source *storage.SqlDatabaseContainerUserDefinedFunction_Spec) error {

	// AzureName
	function.AzureName = source.AzureName

	// Location
	function.Location = genruntime.ClonePointerToString(source.Location)

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec SqlDatabaseContainerUserDefinedFunctionOperatorSpec
		err := operatorSpec.AssignProperties_From_SqlDatabaseContainerUserDefinedFunctionOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SqlDatabaseContainerUserDefinedFunctionOperatorSpec() to populate field OperatorSpec")
		}
		function.OperatorSpec = &operatorSpec
	} else {
		function.OperatorSpec = nil
	}

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions
		err := option.AssignProperties_From_CreateUpdateOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CreateUpdateOptions() to populate field Options")
		}
		function.Options = &option
	} else {
		function.Options = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		function.Owner = &owner
	} else {
		function.Owner = nil
	}

	// Resource
	if source.Resource != nil {
		var resource SqlUserDefinedFunctionResource
		err := resource.AssignProperties_From_SqlUserDefinedFunctionResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SqlUserDefinedFunctionResource() to populate field Resource")
		}
		function.Resource = &resource
	} else {
		function.Resource = nil
	}

	// Tags
	function.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignProperties_To_SqlDatabaseContainerUserDefinedFunction_Spec populates the provided destination SqlDatabaseContainerUserDefinedFunction_Spec from our SqlDatabaseContainerUserDefinedFunction_Spec
func (function *SqlDatabaseContainerUserDefinedFunction_Spec) AssignProperties_To_SqlDatabaseContainerUserDefinedFunction_Spec(destination *storage.SqlDatabaseContainerUserDefinedFunction_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = function.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(function.Location)

	// OperatorSpec
	if function.OperatorSpec != nil {
		var operatorSpec storage.SqlDatabaseContainerUserDefinedFunctionOperatorSpec
		err := function.OperatorSpec.AssignProperties_To_SqlDatabaseContainerUserDefinedFunctionOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SqlDatabaseContainerUserDefinedFunctionOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// Options
	if function.Options != nil {
		var option storage.CreateUpdateOptions
		err := function.Options.AssignProperties_To_CreateUpdateOptions(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CreateUpdateOptions() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// OriginalVersion
	destination.OriginalVersion = function.OriginalVersion()

	// Owner
	if function.Owner != nil {
		owner := function.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Resource
	if function.Resource != nil {
		var resource storage.SqlUserDefinedFunctionResource
		err := function.Resource.AssignProperties_To_SqlUserDefinedFunctionResource(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SqlUserDefinedFunctionResource() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(function.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_SqlDatabaseContainerUserDefinedFunction_STATUS populates our SqlDatabaseContainerUserDefinedFunction_Spec from the provided source SqlDatabaseContainerUserDefinedFunction_STATUS
func (function *SqlDatabaseContainerUserDefinedFunction_Spec) Initialize_From_SqlDatabaseContainerUserDefinedFunction_STATUS(source *SqlDatabaseContainerUserDefinedFunction_STATUS) error {

	// Location
	function.Location = genruntime.ClonePointerToString(source.Location)

	// Resource
	if source.Resource != nil {
		var resource SqlUserDefinedFunctionResource
		err := resource.Initialize_From_SqlUserDefinedFunctionGetProperties_Resource_STATUS(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_SqlUserDefinedFunctionGetProperties_Resource_STATUS() to populate field Resource")
		}
		function.Resource = &resource
	} else {
		function.Resource = nil
	}

	// Tags
	function.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (function *SqlDatabaseContainerUserDefinedFunction_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (function *SqlDatabaseContainerUserDefinedFunction_Spec) SetAzureName(azureName string) {
	function.AzureName = azureName
}

type SqlDatabaseContainerUserDefinedFunction_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Id: The unique resource identifier of the ARM resource.
	Id *string `json:"id,omitempty"`

	// Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	// Name: The name of the ARM resource.
	Name     *string                                              `json:"name,omitempty"`
	Resource *SqlUserDefinedFunctionGetProperties_Resource_STATUS `json:"resource,omitempty"`
	Tags     map[string]string                                    `json:"tags,omitempty"`

	// Type: The type of Azure resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SqlDatabaseContainerUserDefinedFunction_STATUS{}

// ConvertStatusFrom populates our SqlDatabaseContainerUserDefinedFunction_STATUS from the provided source
func (function *SqlDatabaseContainerUserDefinedFunction_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.SqlDatabaseContainerUserDefinedFunction_STATUS)
	if ok {
		// Populate our instance from source
		return function.AssignProperties_From_SqlDatabaseContainerUserDefinedFunction_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.SqlDatabaseContainerUserDefinedFunction_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = function.AssignProperties_From_SqlDatabaseContainerUserDefinedFunction_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SqlDatabaseContainerUserDefinedFunction_STATUS
func (function *SqlDatabaseContainerUserDefinedFunction_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.SqlDatabaseContainerUserDefinedFunction_STATUS)
	if ok {
		// Populate destination from our instance
		return function.AssignProperties_To_SqlDatabaseContainerUserDefinedFunction_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.SqlDatabaseContainerUserDefinedFunction_STATUS{}
	err := function.AssignProperties_To_SqlDatabaseContainerUserDefinedFunction_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SqlDatabaseContainerUserDefinedFunction_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (function *SqlDatabaseContainerUserDefinedFunction_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.SqlDatabaseContainerUserDefinedFunction_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (function *SqlDatabaseContainerUserDefinedFunction_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.SqlDatabaseContainerUserDefinedFunction_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.SqlDatabaseContainerUserDefinedFunction_STATUS, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		function.Id = &id
	}

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		function.Location = &location
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		function.Name = &name
	}

	// Set property "Resource":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 SqlUserDefinedFunctionGetProperties_Resource_STATUS
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			function.Resource = &resource
		}
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		function.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			function.Tags[key] = value
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		function.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_SqlDatabaseContainerUserDefinedFunction_STATUS populates our SqlDatabaseContainerUserDefinedFunction_STATUS from the provided source SqlDatabaseContainerUserDefinedFunction_STATUS
func (function *SqlDatabaseContainerUserDefinedFunction_STATUS) AssignProperties_From_SqlDatabaseContainerUserDefinedFunction_STATUS(source *storage.SqlDatabaseContainerUserDefinedFunction_STATUS) error {

	// Conditions
	function.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	function.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	function.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	function.Name = genruntime.ClonePointerToString(source.Name)

	// Resource
	if source.Resource != nil {
		var resource SqlUserDefinedFunctionGetProperties_Resource_STATUS
		err := resource.AssignProperties_From_SqlUserDefinedFunctionGetProperties_Resource_STATUS(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SqlUserDefinedFunctionGetProperties_Resource_STATUS() to populate field Resource")
		}
		function.Resource = &resource
	} else {
		function.Resource = nil
	}

	// Tags
	function.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	function.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_SqlDatabaseContainerUserDefinedFunction_STATUS populates the provided destination SqlDatabaseContainerUserDefinedFunction_STATUS from our SqlDatabaseContainerUserDefinedFunction_STATUS
func (function *SqlDatabaseContainerUserDefinedFunction_STATUS) AssignProperties_To_SqlDatabaseContainerUserDefinedFunction_STATUS(destination *storage.SqlDatabaseContainerUserDefinedFunction_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(function.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(function.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(function.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(function.Name)

	// Resource
	if function.Resource != nil {
		var resource storage.SqlUserDefinedFunctionGetProperties_Resource_STATUS
		err := function.Resource.AssignProperties_To_SqlUserDefinedFunctionGetProperties_Resource_STATUS(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SqlUserDefinedFunctionGetProperties_Resource_STATUS() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(function.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(function.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type SqlDatabaseContainerUserDefinedFunctionOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_SqlDatabaseContainerUserDefinedFunctionOperatorSpec populates our SqlDatabaseContainerUserDefinedFunctionOperatorSpec from the provided source SqlDatabaseContainerUserDefinedFunctionOperatorSpec
func (operator *SqlDatabaseContainerUserDefinedFunctionOperatorSpec) AssignProperties_From_SqlDatabaseContainerUserDefinedFunctionOperatorSpec(source *storage.SqlDatabaseContainerUserDefinedFunctionOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SqlDatabaseContainerUserDefinedFunctionOperatorSpec populates the provided destination SqlDatabaseContainerUserDefinedFunctionOperatorSpec from our SqlDatabaseContainerUserDefinedFunctionOperatorSpec
func (operator *SqlDatabaseContainerUserDefinedFunctionOperatorSpec) AssignProperties_To_SqlDatabaseContainerUserDefinedFunctionOperatorSpec(destination *storage.SqlDatabaseContainerUserDefinedFunctionOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SqlUserDefinedFunctionGetProperties_Resource_STATUS struct {
	// Body: Body of the User Defined Function
	Body *string `json:"body,omitempty"`

	// Etag: A system generated property representing the resource etag required for optimistic concurrency control.
	Etag *string `json:"_etag,omitempty"`

	// Id: Name of the Cosmos DB SQL userDefinedFunction
	Id *string `json:"id,omitempty"`

	// Rid: A system generated property. A unique identifier.
	Rid *string `json:"_rid,omitempty"`

	// Ts: A system generated property that denotes the last updated timestamp of the resource.
	Ts *float64 `json:"_ts,omitempty"`
}

var _ genruntime.FromARMConverter = &SqlUserDefinedFunctionGetProperties_Resource_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *SqlUserDefinedFunctionGetProperties_Resource_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.SqlUserDefinedFunctionGetProperties_Resource_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *SqlUserDefinedFunctionGetProperties_Resource_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.SqlUserDefinedFunctionGetProperties_Resource_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.SqlUserDefinedFunctionGetProperties_Resource_STATUS, got %T", armInput)
	}

	// Set property "Body":
	if typedInput.Body != nil {
		body := *typedInput.Body
		resource.Body = &body
	}

	// Set property "Etag":
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		resource.Etag = &etag
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		resource.Id = &id
	}

	// Set property "Rid":
	if typedInput.Rid != nil {
		rid := *typedInput.Rid
		resource.Rid = &rid
	}

	// Set property "Ts":
	if typedInput.Ts != nil {
		ts := *typedInput.Ts
		resource.Ts = &ts
	}

	// No error
	return nil
}

// AssignProperties_From_SqlUserDefinedFunctionGetProperties_Resource_STATUS populates our SqlUserDefinedFunctionGetProperties_Resource_STATUS from the provided source SqlUserDefinedFunctionGetProperties_Resource_STATUS
func (resource *SqlUserDefinedFunctionGetProperties_Resource_STATUS) AssignProperties_From_SqlUserDefinedFunctionGetProperties_Resource_STATUS(source *storage.SqlUserDefinedFunctionGetProperties_Resource_STATUS) error {

	// Body
	resource.Body = genruntime.ClonePointerToString(source.Body)

	// Etag
	resource.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// Rid
	resource.Rid = genruntime.ClonePointerToString(source.Rid)

	// Ts
	if source.Ts != nil {
		t := *source.Ts
		resource.Ts = &t
	} else {
		resource.Ts = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SqlUserDefinedFunctionGetProperties_Resource_STATUS populates the provided destination SqlUserDefinedFunctionGetProperties_Resource_STATUS from our SqlUserDefinedFunctionGetProperties_Resource_STATUS
func (resource *SqlUserDefinedFunctionGetProperties_Resource_STATUS) AssignProperties_To_SqlUserDefinedFunctionGetProperties_Resource_STATUS(destination *storage.SqlUserDefinedFunctionGetProperties_Resource_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Body
	destination.Body = genruntime.ClonePointerToString(resource.Body)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(resource.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// Rid
	destination.Rid = genruntime.ClonePointerToString(resource.Rid)

	// Ts
	if resource.Ts != nil {
		t := *resource.Ts
		destination.Ts = &t
	} else {
		destination.Ts = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Cosmos DB SQL userDefinedFunction resource object
type SqlUserDefinedFunctionResource struct {
	// Body: Body of the User Defined Function
	Body *string `json:"body,omitempty"`

	// +kubebuilder:validation:Required
	// Id: Name of the Cosmos DB SQL userDefinedFunction
	Id *string `json:"id,omitempty"`
}

var _ genruntime.ARMTransformer = &SqlUserDefinedFunctionResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *SqlUserDefinedFunctionResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	result := &arm.SqlUserDefinedFunctionResource{}

	// Set property "Body":
	if resource.Body != nil {
		body := *resource.Body
		result.Body = &body
	}

	// Set property "Id":
	if resource.Id != nil {
		id := *resource.Id
		result.Id = &id
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *SqlUserDefinedFunctionResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.SqlUserDefinedFunctionResource{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *SqlUserDefinedFunctionResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.SqlUserDefinedFunctionResource)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.SqlUserDefinedFunctionResource, got %T", armInput)
	}

	// Set property "Body":
	if typedInput.Body != nil {
		body := *typedInput.Body
		resource.Body = &body
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		resource.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_SqlUserDefinedFunctionResource populates our SqlUserDefinedFunctionResource from the provided source SqlUserDefinedFunctionResource
func (resource *SqlUserDefinedFunctionResource) AssignProperties_From_SqlUserDefinedFunctionResource(source *storage.SqlUserDefinedFunctionResource) error {

	// Body
	resource.Body = genruntime.ClonePointerToString(source.Body)

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_SqlUserDefinedFunctionResource populates the provided destination SqlUserDefinedFunctionResource from our SqlUserDefinedFunctionResource
func (resource *SqlUserDefinedFunctionResource) AssignProperties_To_SqlUserDefinedFunctionResource(destination *storage.SqlUserDefinedFunctionResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Body
	destination.Body = genruntime.ClonePointerToString(resource.Body)

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_SqlUserDefinedFunctionGetProperties_Resource_STATUS populates our SqlUserDefinedFunctionResource from the provided source SqlUserDefinedFunctionGetProperties_Resource_STATUS
func (resource *SqlUserDefinedFunctionResource) Initialize_From_SqlUserDefinedFunctionGetProperties_Resource_STATUS(source *SqlUserDefinedFunctionGetProperties_Resource_STATUS) error {

	// Body
	resource.Body = genruntime.ClonePointerToString(source.Body)

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&SqlDatabaseContainerUserDefinedFunction{}, &SqlDatabaseContainerUserDefinedFunctionList{})
}
