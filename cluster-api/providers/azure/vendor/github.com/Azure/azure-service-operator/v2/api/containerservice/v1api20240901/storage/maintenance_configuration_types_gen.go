// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=containerservice.azure.com,resources=maintenanceconfigurations,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=containerservice.azure.com,resources={maintenanceconfigurations/status,maintenanceconfigurations/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1api20240901.MaintenanceConfiguration
// Generator information:
// - Generated from: /containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-09-01/managedClusters.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations/{configName}
type MaintenanceConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MaintenanceConfiguration_Spec   `json:"spec,omitempty"`
	Status            MaintenanceConfiguration_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &MaintenanceConfiguration{}

// GetConditions returns the conditions of the resource
func (configuration *MaintenanceConfiguration) GetConditions() conditions.Conditions {
	return configuration.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (configuration *MaintenanceConfiguration) SetConditions(conditions conditions.Conditions) {
	configuration.Status.Conditions = conditions
}

var _ configmaps.Exporter = &MaintenanceConfiguration{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (configuration *MaintenanceConfiguration) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if configuration.Spec.OperatorSpec == nil {
		return nil
	}
	return configuration.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &MaintenanceConfiguration{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (configuration *MaintenanceConfiguration) SecretDestinationExpressions() []*core.DestinationExpression {
	if configuration.Spec.OperatorSpec == nil {
		return nil
	}
	return configuration.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.KubernetesResource = &MaintenanceConfiguration{}

// AzureName returns the Azure name of the resource
func (configuration *MaintenanceConfiguration) AzureName() string {
	return configuration.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2024-09-01"
func (configuration MaintenanceConfiguration) GetAPIVersion() string {
	return "2024-09-01"
}

// GetResourceScope returns the scope of the resource
func (configuration *MaintenanceConfiguration) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (configuration *MaintenanceConfiguration) GetSpec() genruntime.ConvertibleSpec {
	return &configuration.Spec
}

// GetStatus returns the status of this resource
func (configuration *MaintenanceConfiguration) GetStatus() genruntime.ConvertibleStatus {
	return &configuration.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (configuration *MaintenanceConfiguration) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ContainerService/managedClusters/maintenanceConfigurations"
func (configuration *MaintenanceConfiguration) GetType() string {
	return "Microsoft.ContainerService/managedClusters/maintenanceConfigurations"
}

// NewEmptyStatus returns a new empty (blank) status
func (configuration *MaintenanceConfiguration) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &MaintenanceConfiguration_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (configuration *MaintenanceConfiguration) Owner() *genruntime.ResourceReference {
	if configuration.Spec.Owner == nil {
		return nil
	}

	group, kind := genruntime.LookupOwnerGroupKind(configuration.Spec)
	return configuration.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (configuration *MaintenanceConfiguration) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*MaintenanceConfiguration_STATUS); ok {
		configuration.Status = *st
		return nil
	}

	// Convert status to required version
	var st MaintenanceConfiguration_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	configuration.Status = st
	return nil
}

// Hub marks that this MaintenanceConfiguration is the hub type for conversion
func (configuration *MaintenanceConfiguration) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (configuration *MaintenanceConfiguration) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: configuration.Spec.OriginalVersion,
		Kind:    "MaintenanceConfiguration",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1api20240901.MaintenanceConfiguration
// Generator information:
// - Generated from: /containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-09-01/managedClusters.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations/{configName}
type MaintenanceConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MaintenanceConfiguration `json:"items"`
}

// Storage version of v1api20240901.APIVersion
// +kubebuilder:validation:Enum={"2024-09-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2024-09-01")

// Storage version of v1api20240901.MaintenanceConfiguration_Spec
type MaintenanceConfiguration_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName         string                                `json:"azureName,omitempty"`
	MaintenanceWindow *MaintenanceWindow                    `json:"maintenanceWindow,omitempty"`
	NotAllowedTime    []TimeSpan                            `json:"notAllowedTime,omitempty"`
	OperatorSpec      *MaintenanceConfigurationOperatorSpec `json:"operatorSpec,omitempty"`
	OriginalVersion   string                                `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a containerservice.azure.com/ManagedCluster resource
	Owner       *genruntime.KnownResourceReference `group:"containerservice.azure.com" json:"owner,omitempty" kind:"ManagedCluster"`
	PropertyBag genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	TimeInWeek  []TimeInWeek                       `json:"timeInWeek,omitempty"`
}

var _ genruntime.ConvertibleSpec = &MaintenanceConfiguration_Spec{}

// ConvertSpecFrom populates our MaintenanceConfiguration_Spec from the provided source
func (configuration *MaintenanceConfiguration_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == configuration {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(configuration)
}

// ConvertSpecTo populates the provided destination from our MaintenanceConfiguration_Spec
func (configuration *MaintenanceConfiguration_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == configuration {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(configuration)
}

// Storage version of v1api20240901.MaintenanceConfiguration_STATUS
type MaintenanceConfiguration_STATUS struct {
	Conditions        []conditions.Condition    `json:"conditions,omitempty"`
	Id                *string                   `json:"id,omitempty"`
	MaintenanceWindow *MaintenanceWindow_STATUS `json:"maintenanceWindow,omitempty"`
	Name              *string                   `json:"name,omitempty"`
	NotAllowedTime    []TimeSpan_STATUS         `json:"notAllowedTime,omitempty"`
	PropertyBag       genruntime.PropertyBag    `json:"$propertyBag,omitempty"`
	SystemData        *SystemData_STATUS        `json:"systemData,omitempty"`
	TimeInWeek        []TimeInWeek_STATUS       `json:"timeInWeek,omitempty"`
	Type              *string                   `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &MaintenanceConfiguration_STATUS{}

// ConvertStatusFrom populates our MaintenanceConfiguration_STATUS from the provided source
func (configuration *MaintenanceConfiguration_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == configuration {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(configuration)
}

// ConvertStatusTo populates the provided destination from our MaintenanceConfiguration_STATUS
func (configuration *MaintenanceConfiguration_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == configuration {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(configuration)
}

// Storage version of v1api20240901.MaintenanceConfigurationOperatorSpec
// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type MaintenanceConfigurationOperatorSpec struct {
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`
	PropertyBag          genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	SecretExpressions    []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// Storage version of v1api20240901.MaintenanceWindow
// Maintenance window used to configure scheduled auto-upgrade for a Managed Cluster.
type MaintenanceWindow struct {
	DurationHours   *int                   `json:"durationHours,omitempty"`
	NotAllowedDates []DateSpan             `json:"notAllowedDates,omitempty"`
	PropertyBag     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Schedule        *Schedule              `json:"schedule,omitempty"`
	StartDate       *string                `json:"startDate,omitempty"`
	StartTime       *string                `json:"startTime,omitempty"`
	UtcOffset       *string                `json:"utcOffset,omitempty"`
}

// Storage version of v1api20240901.MaintenanceWindow_STATUS
// Maintenance window used to configure scheduled auto-upgrade for a Managed Cluster.
type MaintenanceWindow_STATUS struct {
	DurationHours   *int                   `json:"durationHours,omitempty"`
	NotAllowedDates []DateSpan_STATUS      `json:"notAllowedDates,omitempty"`
	PropertyBag     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Schedule        *Schedule_STATUS       `json:"schedule,omitempty"`
	StartDate       *string                `json:"startDate,omitempty"`
	StartTime       *string                `json:"startTime,omitempty"`
	UtcOffset       *string                `json:"utcOffset,omitempty"`
}

// Storage version of v1api20240901.SystemData_STATUS
// Metadata pertaining to creation and last modification of the resource.
type SystemData_STATUS struct {
	CreatedAt          *string                `json:"createdAt,omitempty"`
	CreatedBy          *string                `json:"createdBy,omitempty"`
	CreatedByType      *string                `json:"createdByType,omitempty"`
	LastModifiedAt     *string                `json:"lastModifiedAt,omitempty"`
	LastModifiedBy     *string                `json:"lastModifiedBy,omitempty"`
	LastModifiedByType *string                `json:"lastModifiedByType,omitempty"`
	PropertyBag        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20240901.TimeInWeek
// Time in a week.
type TimeInWeek struct {
	Day         *string                `json:"day,omitempty"`
	HourSlots   []int                  `json:"hourSlots,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20240901.TimeInWeek_STATUS
// Time in a week.
type TimeInWeek_STATUS struct {
	Day         *string                `json:"day,omitempty"`
	HourSlots   []int                  `json:"hourSlots,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20240901.TimeSpan
// For example, between 2021-05-25T13:00:00Z and 2021-05-25T14:00:00Z.
type TimeSpan struct {
	End         *string                `json:"end,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Start       *string                `json:"start,omitempty"`
}

// Storage version of v1api20240901.TimeSpan_STATUS
// For example, between 2021-05-25T13:00:00Z and 2021-05-25T14:00:00Z.
type TimeSpan_STATUS struct {
	End         *string                `json:"end,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Start       *string                `json:"start,omitempty"`
}

// Storage version of v1api20240901.DateSpan
// For example, between '2022-12-23' and '2023-01-05'.
type DateSpan struct {
	End         *string                `json:"end,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Start       *string                `json:"start,omitempty"`
}

// Storage version of v1api20240901.DateSpan_STATUS
// For example, between '2022-12-23' and '2023-01-05'.
type DateSpan_STATUS struct {
	End         *string                `json:"end,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Start       *string                `json:"start,omitempty"`
}

// Storage version of v1api20240901.Schedule
// One and only one of the schedule types should be specified. Choose either 'daily', 'weekly', 'absoluteMonthly' or
// 'relativeMonthly' for your maintenance schedule.
type Schedule struct {
	AbsoluteMonthly *AbsoluteMonthlySchedule `json:"absoluteMonthly,omitempty"`
	Daily           *DailySchedule           `json:"daily,omitempty"`
	PropertyBag     genruntime.PropertyBag   `json:"$propertyBag,omitempty"`
	RelativeMonthly *RelativeMonthlySchedule `json:"relativeMonthly,omitempty"`
	Weekly          *WeeklySchedule          `json:"weekly,omitempty"`
}

// Storage version of v1api20240901.Schedule_STATUS
// One and only one of the schedule types should be specified. Choose either 'daily', 'weekly', 'absoluteMonthly' or
// 'relativeMonthly' for your maintenance schedule.
type Schedule_STATUS struct {
	AbsoluteMonthly *AbsoluteMonthlySchedule_STATUS `json:"absoluteMonthly,omitempty"`
	Daily           *DailySchedule_STATUS           `json:"daily,omitempty"`
	PropertyBag     genruntime.PropertyBag          `json:"$propertyBag,omitempty"`
	RelativeMonthly *RelativeMonthlySchedule_STATUS `json:"relativeMonthly,omitempty"`
	Weekly          *WeeklySchedule_STATUS          `json:"weekly,omitempty"`
}

// Storage version of v1api20240901.AbsoluteMonthlySchedule
// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
type AbsoluteMonthlySchedule struct {
	DayOfMonth     *int                   `json:"dayOfMonth,omitempty"`
	IntervalMonths *int                   `json:"intervalMonths,omitempty"`
	PropertyBag    genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20240901.AbsoluteMonthlySchedule_STATUS
// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
type AbsoluteMonthlySchedule_STATUS struct {
	DayOfMonth     *int                   `json:"dayOfMonth,omitempty"`
	IntervalMonths *int                   `json:"intervalMonths,omitempty"`
	PropertyBag    genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20240901.DailySchedule
// For schedules like: 'recur every day' or 'recur every 3 days'.
type DailySchedule struct {
	IntervalDays *int                   `json:"intervalDays,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20240901.DailySchedule_STATUS
// For schedules like: 'recur every day' or 'recur every 3 days'.
type DailySchedule_STATUS struct {
	IntervalDays *int                   `json:"intervalDays,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20240901.RelativeMonthlySchedule
// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
type RelativeMonthlySchedule struct {
	DayOfWeek      *string                `json:"dayOfWeek,omitempty"`
	IntervalMonths *int                   `json:"intervalMonths,omitempty"`
	PropertyBag    genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	WeekIndex      *string                `json:"weekIndex,omitempty"`
}

// Storage version of v1api20240901.RelativeMonthlySchedule_STATUS
// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
type RelativeMonthlySchedule_STATUS struct {
	DayOfWeek      *string                `json:"dayOfWeek,omitempty"`
	IntervalMonths *int                   `json:"intervalMonths,omitempty"`
	PropertyBag    genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	WeekIndex      *string                `json:"weekIndex,omitempty"`
}

// Storage version of v1api20240901.WeeklySchedule
// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
type WeeklySchedule struct {
	DayOfWeek     *string                `json:"dayOfWeek,omitempty"`
	IntervalWeeks *int                   `json:"intervalWeeks,omitempty"`
	PropertyBag   genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20240901.WeeklySchedule_STATUS
// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
type WeeklySchedule_STATUS struct {
	DayOfWeek     *string                `json:"dayOfWeek,omitempty"`
	IntervalWeeks *int                   `json:"intervalWeeks,omitempty"`
	PropertyBag   genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

func init() {
	SchemeBuilder.Register(&MaintenanceConfiguration{}, &MaintenanceConfigurationList{})
}
