// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220701

import (
	"fmt"
	storage "github.com/Azure/azure-service-operator/v2/api/network/v1api20220701/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /dnsresolver/resource-manager/Microsoft.Network/stable/2022-07-01/dnsresolver.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/forwardingRules/{forwardingRuleName}
type DnsForwardingRuleSetsForwardingRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnsForwardingRulesets_ForwardingRule_Spec   `json:"spec,omitempty"`
	Status            DnsForwardingRulesets_ForwardingRule_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &DnsForwardingRuleSetsForwardingRule{}

// GetConditions returns the conditions of the resource
func (rule *DnsForwardingRuleSetsForwardingRule) GetConditions() conditions.Conditions {
	return rule.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (rule *DnsForwardingRuleSetsForwardingRule) SetConditions(conditions conditions.Conditions) {
	rule.Status.Conditions = conditions
}

var _ conversion.Convertible = &DnsForwardingRuleSetsForwardingRule{}

// ConvertFrom populates our DnsForwardingRuleSetsForwardingRule from the provided hub DnsForwardingRuleSetsForwardingRule
func (rule *DnsForwardingRuleSetsForwardingRule) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.DnsForwardingRuleSetsForwardingRule)
	if !ok {
		return fmt.Errorf("expected network/v1api20220701/storage/DnsForwardingRuleSetsForwardingRule but received %T instead", hub)
	}

	return rule.AssignProperties_From_DnsForwardingRuleSetsForwardingRule(source)
}

// ConvertTo populates the provided hub DnsForwardingRuleSetsForwardingRule from our DnsForwardingRuleSetsForwardingRule
func (rule *DnsForwardingRuleSetsForwardingRule) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.DnsForwardingRuleSetsForwardingRule)
	if !ok {
		return fmt.Errorf("expected network/v1api20220701/storage/DnsForwardingRuleSetsForwardingRule but received %T instead", hub)
	}

	return rule.AssignProperties_To_DnsForwardingRuleSetsForwardingRule(destination)
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1api20220701-dnsforwardingrulesetsforwardingrule,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=dnsforwardingrulesetsforwardingrules,verbs=create;update,versions=v1api20220701,name=default.v1api20220701.dnsforwardingrulesetsforwardingrules.network.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &DnsForwardingRuleSetsForwardingRule{}

// Default applies defaults to the DnsForwardingRuleSetsForwardingRule resource
func (rule *DnsForwardingRuleSetsForwardingRule) Default() {
	rule.defaultImpl()
	var temp any = rule
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (rule *DnsForwardingRuleSetsForwardingRule) defaultAzureName() {
	if rule.Spec.AzureName == "" {
		rule.Spec.AzureName = rule.Name
	}
}

// defaultImpl applies the code generated defaults to the DnsForwardingRuleSetsForwardingRule resource
func (rule *DnsForwardingRuleSetsForwardingRule) defaultImpl() { rule.defaultAzureName() }

var _ genruntime.ImportableResource = &DnsForwardingRuleSetsForwardingRule{}

// InitializeSpec initializes the spec for this resource from the given status
func (rule *DnsForwardingRuleSetsForwardingRule) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*DnsForwardingRulesets_ForwardingRule_STATUS); ok {
		return rule.Spec.Initialize_From_DnsForwardingRulesets_ForwardingRule_STATUS(s)
	}

	return fmt.Errorf("expected Status of type DnsForwardingRulesets_ForwardingRule_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &DnsForwardingRuleSetsForwardingRule{}

// AzureName returns the Azure name of the resource
func (rule *DnsForwardingRuleSetsForwardingRule) AzureName() string {
	return rule.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2022-07-01"
func (rule DnsForwardingRuleSetsForwardingRule) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (rule *DnsForwardingRuleSetsForwardingRule) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (rule *DnsForwardingRuleSetsForwardingRule) GetSpec() genruntime.ConvertibleSpec {
	return &rule.Spec
}

// GetStatus returns the status of this resource
func (rule *DnsForwardingRuleSetsForwardingRule) GetStatus() genruntime.ConvertibleStatus {
	return &rule.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (rule *DnsForwardingRuleSetsForwardingRule) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/dnsForwardingRulesets/forwardingRules"
func (rule *DnsForwardingRuleSetsForwardingRule) GetType() string {
	return "Microsoft.Network/dnsForwardingRulesets/forwardingRules"
}

// NewEmptyStatus returns a new empty (blank) status
func (rule *DnsForwardingRuleSetsForwardingRule) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &DnsForwardingRulesets_ForwardingRule_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (rule *DnsForwardingRuleSetsForwardingRule) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(rule.Spec)
	return rule.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (rule *DnsForwardingRuleSetsForwardingRule) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*DnsForwardingRulesets_ForwardingRule_STATUS); ok {
		rule.Status = *st
		return nil
	}

	// Convert status to required version
	var st DnsForwardingRulesets_ForwardingRule_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	rule.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1api20220701-dnsforwardingrulesetsforwardingrule,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=dnsforwardingrulesetsforwardingrules,verbs=create;update,versions=v1api20220701,name=validate.v1api20220701.dnsforwardingrulesetsforwardingrules.network.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &DnsForwardingRuleSetsForwardingRule{}

// ValidateCreate validates the creation of the resource
func (rule *DnsForwardingRuleSetsForwardingRule) ValidateCreate() (admission.Warnings, error) {
	validations := rule.createValidations()
	var temp any = rule
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (rule *DnsForwardingRuleSetsForwardingRule) ValidateDelete() (admission.Warnings, error) {
	validations := rule.deleteValidations()
	var temp any = rule
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (rule *DnsForwardingRuleSetsForwardingRule) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := rule.updateValidations()
	var temp any = rule
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (rule *DnsForwardingRuleSetsForwardingRule) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){rule.validateResourceReferences, rule.validateOwnerReference, rule.validateOptionalConfigMapReferences}
}

// deleteValidations validates the deletion of the resource
func (rule *DnsForwardingRuleSetsForwardingRule) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (rule *DnsForwardingRuleSetsForwardingRule) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return rule.validateResourceReferences()
		},
		rule.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return rule.validateOwnerReference()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return rule.validateOptionalConfigMapReferences()
		},
	}
}

// validateOptionalConfigMapReferences validates all optional configmap reference pairs to ensure that at most 1 is set
func (rule *DnsForwardingRuleSetsForwardingRule) validateOptionalConfigMapReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindOptionalConfigMapReferences(&rule.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateOptionalConfigMapReferences(refs)
}

// validateOwnerReference validates the owner field
func (rule *DnsForwardingRuleSetsForwardingRule) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(rule)
}

// validateResourceReferences validates all resource references
func (rule *DnsForwardingRuleSetsForwardingRule) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&rule.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (rule *DnsForwardingRuleSetsForwardingRule) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*DnsForwardingRuleSetsForwardingRule)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, rule)
}

// AssignProperties_From_DnsForwardingRuleSetsForwardingRule populates our DnsForwardingRuleSetsForwardingRule from the provided source DnsForwardingRuleSetsForwardingRule
func (rule *DnsForwardingRuleSetsForwardingRule) AssignProperties_From_DnsForwardingRuleSetsForwardingRule(source *storage.DnsForwardingRuleSetsForwardingRule) error {

	// ObjectMeta
	rule.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DnsForwardingRulesets_ForwardingRule_Spec
	err := spec.AssignProperties_From_DnsForwardingRulesets_ForwardingRule_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_DnsForwardingRulesets_ForwardingRule_Spec() to populate field Spec")
	}
	rule.Spec = spec

	// Status
	var status DnsForwardingRulesets_ForwardingRule_STATUS
	err = status.AssignProperties_From_DnsForwardingRulesets_ForwardingRule_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_DnsForwardingRulesets_ForwardingRule_STATUS() to populate field Status")
	}
	rule.Status = status

	// No error
	return nil
}

// AssignProperties_To_DnsForwardingRuleSetsForwardingRule populates the provided destination DnsForwardingRuleSetsForwardingRule from our DnsForwardingRuleSetsForwardingRule
func (rule *DnsForwardingRuleSetsForwardingRule) AssignProperties_To_DnsForwardingRuleSetsForwardingRule(destination *storage.DnsForwardingRuleSetsForwardingRule) error {

	// ObjectMeta
	destination.ObjectMeta = *rule.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.DnsForwardingRulesets_ForwardingRule_Spec
	err := rule.Spec.AssignProperties_To_DnsForwardingRulesets_ForwardingRule_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_DnsForwardingRulesets_ForwardingRule_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.DnsForwardingRulesets_ForwardingRule_STATUS
	err = rule.Status.AssignProperties_To_DnsForwardingRulesets_ForwardingRule_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_DnsForwardingRulesets_ForwardingRule_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (rule *DnsForwardingRuleSetsForwardingRule) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: rule.Spec.OriginalVersion(),
		Kind:    "DnsForwardingRuleSetsForwardingRule",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /dnsresolver/resource-manager/Microsoft.Network/stable/2022-07-01/dnsresolver.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/forwardingRules/{forwardingRuleName}
type DnsForwardingRuleSetsForwardingRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnsForwardingRuleSetsForwardingRule `json:"items"`
}

type DnsForwardingRulesets_ForwardingRule_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	// DomainName: The domain name for the forwarding rule.
	DomainName *string `json:"domainName,omitempty"`

	// ForwardingRuleState: The state of forwarding rule.
	ForwardingRuleState *ForwardingRuleProperties_ForwardingRuleState `json:"forwardingRuleState,omitempty"`

	// Metadata: Metadata attached to the forwarding rule.
	Metadata map[string]string `json:"metadata,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a network.azure.com/DnsForwardingRuleset resource
	Owner *genruntime.KnownResourceReference `group:"network.azure.com" json:"owner,omitempty" kind:"DnsForwardingRuleset"`

	// +kubebuilder:validation:Required
	// TargetDnsServers: DNS servers to forward the DNS query to.
	TargetDnsServers []TargetDnsServer `json:"targetDnsServers,omitempty"`
}

var _ genruntime.ARMTransformer = &DnsForwardingRulesets_ForwardingRule_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *DnsForwardingRulesets_ForwardingRule_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &DnsForwardingRulesets_ForwardingRule_Spec_ARM{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if rule.DomainName != nil ||
		rule.ForwardingRuleState != nil ||
		rule.Metadata != nil ||
		rule.TargetDnsServers != nil {
		result.Properties = &ForwardingRuleProperties_ARM{}
	}
	if rule.DomainName != nil {
		domainName := *rule.DomainName
		result.Properties.DomainName = &domainName
	}
	if rule.ForwardingRuleState != nil {
		forwardingRuleState := *rule.ForwardingRuleState
		result.Properties.ForwardingRuleState = &forwardingRuleState
	}
	if rule.Metadata != nil {
		result.Properties.Metadata = make(map[string]string, len(rule.Metadata))
		for key, value := range rule.Metadata {
			result.Properties.Metadata[key] = value
		}
	}
	for _, item := range rule.TargetDnsServers {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.TargetDnsServers = append(result.Properties.TargetDnsServers, *item_ARM.(*TargetDnsServer_ARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *DnsForwardingRulesets_ForwardingRule_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DnsForwardingRulesets_ForwardingRule_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *DnsForwardingRulesets_ForwardingRule_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DnsForwardingRulesets_ForwardingRule_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DnsForwardingRulesets_ForwardingRule_Spec_ARM, got %T", armInput)
	}

	// Set property "AzureName":
	rule.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "DomainName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DomainName != nil {
			domainName := *typedInput.Properties.DomainName
			rule.DomainName = &domainName
		}
	}

	// Set property "ForwardingRuleState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForwardingRuleState != nil {
			forwardingRuleState := *typedInput.Properties.ForwardingRuleState
			rule.ForwardingRuleState = &forwardingRuleState
		}
	}

	// Set property "Metadata":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			rule.Metadata = make(map[string]string, len(typedInput.Properties.Metadata))
			for key, value := range typedInput.Properties.Metadata {
				rule.Metadata[key] = value
			}
		}
	}

	// Set property "Owner":
	rule.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "TargetDnsServers":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.TargetDnsServers {
			var item1 TargetDnsServer
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			rule.TargetDnsServers = append(rule.TargetDnsServers, item1)
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DnsForwardingRulesets_ForwardingRule_Spec{}

// ConvertSpecFrom populates our DnsForwardingRulesets_ForwardingRule_Spec from the provided source
func (rule *DnsForwardingRulesets_ForwardingRule_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.DnsForwardingRulesets_ForwardingRule_Spec)
	if ok {
		// Populate our instance from source
		return rule.AssignProperties_From_DnsForwardingRulesets_ForwardingRule_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.DnsForwardingRulesets_ForwardingRule_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = rule.AssignProperties_From_DnsForwardingRulesets_ForwardingRule_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DnsForwardingRulesets_ForwardingRule_Spec
func (rule *DnsForwardingRulesets_ForwardingRule_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.DnsForwardingRulesets_ForwardingRule_Spec)
	if ok {
		// Populate destination from our instance
		return rule.AssignProperties_To_DnsForwardingRulesets_ForwardingRule_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.DnsForwardingRulesets_ForwardingRule_Spec{}
	err := rule.AssignProperties_To_DnsForwardingRulesets_ForwardingRule_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_DnsForwardingRulesets_ForwardingRule_Spec populates our DnsForwardingRulesets_ForwardingRule_Spec from the provided source DnsForwardingRulesets_ForwardingRule_Spec
func (rule *DnsForwardingRulesets_ForwardingRule_Spec) AssignProperties_From_DnsForwardingRulesets_ForwardingRule_Spec(source *storage.DnsForwardingRulesets_ForwardingRule_Spec) error {

	// AzureName
	rule.AzureName = source.AzureName

	// DomainName
	rule.DomainName = genruntime.ClonePointerToString(source.DomainName)

	// ForwardingRuleState
	if source.ForwardingRuleState != nil {
		forwardingRuleState := *source.ForwardingRuleState
		forwardingRuleStateTemp := genruntime.ToEnum(forwardingRuleState, forwardingRuleProperties_ForwardingRuleState_Values)
		rule.ForwardingRuleState = &forwardingRuleStateTemp
	} else {
		rule.ForwardingRuleState = nil
	}

	// Metadata
	rule.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		rule.Owner = &owner
	} else {
		rule.Owner = nil
	}

	// TargetDnsServers
	if source.TargetDnsServers != nil {
		targetDnsServerList := make([]TargetDnsServer, len(source.TargetDnsServers))
		for targetDnsServerIndex, targetDnsServerItem := range source.TargetDnsServers {
			// Shadow the loop variable to avoid aliasing
			targetDnsServerItem := targetDnsServerItem
			var targetDnsServer TargetDnsServer
			err := targetDnsServer.AssignProperties_From_TargetDnsServer(&targetDnsServerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_TargetDnsServer() to populate field TargetDnsServers")
			}
			targetDnsServerList[targetDnsServerIndex] = targetDnsServer
		}
		rule.TargetDnsServers = targetDnsServerList
	} else {
		rule.TargetDnsServers = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DnsForwardingRulesets_ForwardingRule_Spec populates the provided destination DnsForwardingRulesets_ForwardingRule_Spec from our DnsForwardingRulesets_ForwardingRule_Spec
func (rule *DnsForwardingRulesets_ForwardingRule_Spec) AssignProperties_To_DnsForwardingRulesets_ForwardingRule_Spec(destination *storage.DnsForwardingRulesets_ForwardingRule_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = rule.AzureName

	// DomainName
	destination.DomainName = genruntime.ClonePointerToString(rule.DomainName)

	// ForwardingRuleState
	if rule.ForwardingRuleState != nil {
		forwardingRuleState := string(*rule.ForwardingRuleState)
		destination.ForwardingRuleState = &forwardingRuleState
	} else {
		destination.ForwardingRuleState = nil
	}

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(rule.Metadata)

	// OriginalVersion
	destination.OriginalVersion = rule.OriginalVersion()

	// Owner
	if rule.Owner != nil {
		owner := rule.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// TargetDnsServers
	if rule.TargetDnsServers != nil {
		targetDnsServerList := make([]storage.TargetDnsServer, len(rule.TargetDnsServers))
		for targetDnsServerIndex, targetDnsServerItem := range rule.TargetDnsServers {
			// Shadow the loop variable to avoid aliasing
			targetDnsServerItem := targetDnsServerItem
			var targetDnsServer storage.TargetDnsServer
			err := targetDnsServerItem.AssignProperties_To_TargetDnsServer(&targetDnsServer)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_TargetDnsServer() to populate field TargetDnsServers")
			}
			targetDnsServerList[targetDnsServerIndex] = targetDnsServer
		}
		destination.TargetDnsServers = targetDnsServerList
	} else {
		destination.TargetDnsServers = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_DnsForwardingRulesets_ForwardingRule_STATUS populates our DnsForwardingRulesets_ForwardingRule_Spec from the provided source DnsForwardingRulesets_ForwardingRule_STATUS
func (rule *DnsForwardingRulesets_ForwardingRule_Spec) Initialize_From_DnsForwardingRulesets_ForwardingRule_STATUS(source *DnsForwardingRulesets_ForwardingRule_STATUS) error {

	// DomainName
	rule.DomainName = genruntime.ClonePointerToString(source.DomainName)

	// ForwardingRuleState
	if source.ForwardingRuleState != nil {
		forwardingRuleState := genruntime.ToEnum(string(*source.ForwardingRuleState), forwardingRuleProperties_ForwardingRuleState_Values)
		rule.ForwardingRuleState = &forwardingRuleState
	} else {
		rule.ForwardingRuleState = nil
	}

	// Metadata
	rule.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// TargetDnsServers
	if source.TargetDnsServers != nil {
		targetDnsServerList := make([]TargetDnsServer, len(source.TargetDnsServers))
		for targetDnsServerIndex, targetDnsServerItem := range source.TargetDnsServers {
			// Shadow the loop variable to avoid aliasing
			targetDnsServerItem := targetDnsServerItem
			var targetDnsServer TargetDnsServer
			err := targetDnsServer.Initialize_From_TargetDnsServer_STATUS(&targetDnsServerItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_TargetDnsServer_STATUS() to populate field TargetDnsServers")
			}
			targetDnsServerList[targetDnsServerIndex] = targetDnsServer
		}
		rule.TargetDnsServers = targetDnsServerList
	} else {
		rule.TargetDnsServers = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (rule *DnsForwardingRulesets_ForwardingRule_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (rule *DnsForwardingRulesets_ForwardingRule_Spec) SetAzureName(azureName string) {
	rule.AzureName = azureName
}

type DnsForwardingRulesets_ForwardingRule_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// DomainName: The domain name for the forwarding rule.
	DomainName *string `json:"domainName,omitempty"`

	// Etag: ETag of the forwarding rule.
	Etag *string `json:"etag,omitempty"`

	// ForwardingRuleState: The state of forwarding rule.
	ForwardingRuleState *ForwardingRuleProperties_ForwardingRuleState_STATUS `json:"forwardingRuleState,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// Metadata: Metadata attached to the forwarding rule.
	Metadata map[string]string `json:"metadata,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The current provisioning state of the forwarding rule. This is a read-only property and any attempt
	// to set this value will be ignored.
	ProvisioningState *DnsresolverProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// SystemData: Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// TargetDnsServers: DNS servers to forward the DNS query to.
	TargetDnsServers []TargetDnsServer_STATUS `json:"targetDnsServers,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &DnsForwardingRulesets_ForwardingRule_STATUS{}

// ConvertStatusFrom populates our DnsForwardingRulesets_ForwardingRule_STATUS from the provided source
func (rule *DnsForwardingRulesets_ForwardingRule_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.DnsForwardingRulesets_ForwardingRule_STATUS)
	if ok {
		// Populate our instance from source
		return rule.AssignProperties_From_DnsForwardingRulesets_ForwardingRule_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.DnsForwardingRulesets_ForwardingRule_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = rule.AssignProperties_From_DnsForwardingRulesets_ForwardingRule_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our DnsForwardingRulesets_ForwardingRule_STATUS
func (rule *DnsForwardingRulesets_ForwardingRule_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.DnsForwardingRulesets_ForwardingRule_STATUS)
	if ok {
		// Populate destination from our instance
		return rule.AssignProperties_To_DnsForwardingRulesets_ForwardingRule_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.DnsForwardingRulesets_ForwardingRule_STATUS{}
	err := rule.AssignProperties_To_DnsForwardingRulesets_ForwardingRule_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &DnsForwardingRulesets_ForwardingRule_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *DnsForwardingRulesets_ForwardingRule_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DnsForwardingRulesets_ForwardingRule_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *DnsForwardingRulesets_ForwardingRule_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DnsForwardingRulesets_ForwardingRule_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DnsForwardingRulesets_ForwardingRule_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "DomainName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DomainName != nil {
			domainName := *typedInput.Properties.DomainName
			rule.DomainName = &domainName
		}
	}

	// Set property "Etag":
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		rule.Etag = &etag
	}

	// Set property "ForwardingRuleState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForwardingRuleState != nil {
			forwardingRuleState := *typedInput.Properties.ForwardingRuleState
			rule.ForwardingRuleState = &forwardingRuleState
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		rule.Id = &id
	}

	// Set property "Metadata":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			rule.Metadata = make(map[string]string, len(typedInput.Properties.Metadata))
			for key, value := range typedInput.Properties.Metadata {
				rule.Metadata[key] = value
			}
		}
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		rule.Name = &name
	}

	// Set property "ProvisioningState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			rule.ProvisioningState = &provisioningState
		}
	}

	// Set property "SystemData":
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		rule.SystemData = &systemData
	}

	// Set property "TargetDnsServers":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.TargetDnsServers {
			var item1 TargetDnsServer_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			rule.TargetDnsServers = append(rule.TargetDnsServers, item1)
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		rule.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_DnsForwardingRulesets_ForwardingRule_STATUS populates our DnsForwardingRulesets_ForwardingRule_STATUS from the provided source DnsForwardingRulesets_ForwardingRule_STATUS
func (rule *DnsForwardingRulesets_ForwardingRule_STATUS) AssignProperties_From_DnsForwardingRulesets_ForwardingRule_STATUS(source *storage.DnsForwardingRulesets_ForwardingRule_STATUS) error {

	// Conditions
	rule.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DomainName
	rule.DomainName = genruntime.ClonePointerToString(source.DomainName)

	// Etag
	rule.Etag = genruntime.ClonePointerToString(source.Etag)

	// ForwardingRuleState
	if source.ForwardingRuleState != nil {
		forwardingRuleState := *source.ForwardingRuleState
		forwardingRuleStateTemp := genruntime.ToEnum(forwardingRuleState, forwardingRuleProperties_ForwardingRuleState_STATUS_Values)
		rule.ForwardingRuleState = &forwardingRuleStateTemp
	} else {
		rule.ForwardingRuleState = nil
	}

	// Id
	rule.Id = genruntime.ClonePointerToString(source.Id)

	// Metadata
	rule.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// Name
	rule.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := *source.ProvisioningState
		provisioningStateTemp := genruntime.ToEnum(provisioningState, dnsresolverProvisioningState_STATUS_Values)
		rule.ProvisioningState = &provisioningStateTemp
	} else {
		rule.ProvisioningState = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		rule.SystemData = &systemDatum
	} else {
		rule.SystemData = nil
	}

	// TargetDnsServers
	if source.TargetDnsServers != nil {
		targetDnsServerList := make([]TargetDnsServer_STATUS, len(source.TargetDnsServers))
		for targetDnsServerIndex, targetDnsServerItem := range source.TargetDnsServers {
			// Shadow the loop variable to avoid aliasing
			targetDnsServerItem := targetDnsServerItem
			var targetDnsServer TargetDnsServer_STATUS
			err := targetDnsServer.AssignProperties_From_TargetDnsServer_STATUS(&targetDnsServerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_TargetDnsServer_STATUS() to populate field TargetDnsServers")
			}
			targetDnsServerList[targetDnsServerIndex] = targetDnsServer
		}
		rule.TargetDnsServers = targetDnsServerList
	} else {
		rule.TargetDnsServers = nil
	}

	// Type
	rule.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_DnsForwardingRulesets_ForwardingRule_STATUS populates the provided destination DnsForwardingRulesets_ForwardingRule_STATUS from our DnsForwardingRulesets_ForwardingRule_STATUS
func (rule *DnsForwardingRulesets_ForwardingRule_STATUS) AssignProperties_To_DnsForwardingRulesets_ForwardingRule_STATUS(destination *storage.DnsForwardingRulesets_ForwardingRule_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(rule.Conditions)

	// DomainName
	destination.DomainName = genruntime.ClonePointerToString(rule.DomainName)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(rule.Etag)

	// ForwardingRuleState
	if rule.ForwardingRuleState != nil {
		forwardingRuleState := string(*rule.ForwardingRuleState)
		destination.ForwardingRuleState = &forwardingRuleState
	} else {
		destination.ForwardingRuleState = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(rule.Id)

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(rule.Metadata)

	// Name
	destination.Name = genruntime.ClonePointerToString(rule.Name)

	// ProvisioningState
	if rule.ProvisioningState != nil {
		provisioningState := string(*rule.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// SystemData
	if rule.SystemData != nil {
		var systemDatum storage.SystemData_STATUS
		err := rule.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// TargetDnsServers
	if rule.TargetDnsServers != nil {
		targetDnsServerList := make([]storage.TargetDnsServer_STATUS, len(rule.TargetDnsServers))
		for targetDnsServerIndex, targetDnsServerItem := range rule.TargetDnsServers {
			// Shadow the loop variable to avoid aliasing
			targetDnsServerItem := targetDnsServerItem
			var targetDnsServer storage.TargetDnsServer_STATUS
			err := targetDnsServerItem.AssignProperties_To_TargetDnsServer_STATUS(&targetDnsServer)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_TargetDnsServer_STATUS() to populate field TargetDnsServers")
			}
			targetDnsServerList[targetDnsServerIndex] = targetDnsServer
		}
		destination.TargetDnsServers = targetDnsServerList
	} else {
		destination.TargetDnsServers = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(rule.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// The current provisioning state of the resource.
type DnsresolverProvisioningState_STATUS string

const (
	DnsresolverProvisioningState_STATUS_Canceled  = DnsresolverProvisioningState_STATUS("Canceled")
	DnsresolverProvisioningState_STATUS_Creating  = DnsresolverProvisioningState_STATUS("Creating")
	DnsresolverProvisioningState_STATUS_Deleting  = DnsresolverProvisioningState_STATUS("Deleting")
	DnsresolverProvisioningState_STATUS_Failed    = DnsresolverProvisioningState_STATUS("Failed")
	DnsresolverProvisioningState_STATUS_Succeeded = DnsresolverProvisioningState_STATUS("Succeeded")
	DnsresolverProvisioningState_STATUS_Updating  = DnsresolverProvisioningState_STATUS("Updating")
)

// Mapping from string to DnsresolverProvisioningState_STATUS
var dnsresolverProvisioningState_STATUS_Values = map[string]DnsresolverProvisioningState_STATUS{
	"canceled":  DnsresolverProvisioningState_STATUS_Canceled,
	"creating":  DnsresolverProvisioningState_STATUS_Creating,
	"deleting":  DnsresolverProvisioningState_STATUS_Deleting,
	"failed":    DnsresolverProvisioningState_STATUS_Failed,
	"succeeded": DnsresolverProvisioningState_STATUS_Succeeded,
	"updating":  DnsresolverProvisioningState_STATUS_Updating,
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ForwardingRuleProperties_ForwardingRuleState string

const (
	ForwardingRuleProperties_ForwardingRuleState_Disabled = ForwardingRuleProperties_ForwardingRuleState("Disabled")
	ForwardingRuleProperties_ForwardingRuleState_Enabled  = ForwardingRuleProperties_ForwardingRuleState("Enabled")
)

// Mapping from string to ForwardingRuleProperties_ForwardingRuleState
var forwardingRuleProperties_ForwardingRuleState_Values = map[string]ForwardingRuleProperties_ForwardingRuleState{
	"disabled": ForwardingRuleProperties_ForwardingRuleState_Disabled,
	"enabled":  ForwardingRuleProperties_ForwardingRuleState_Enabled,
}

type ForwardingRuleProperties_ForwardingRuleState_STATUS string

const (
	ForwardingRuleProperties_ForwardingRuleState_STATUS_Disabled = ForwardingRuleProperties_ForwardingRuleState_STATUS("Disabled")
	ForwardingRuleProperties_ForwardingRuleState_STATUS_Enabled  = ForwardingRuleProperties_ForwardingRuleState_STATUS("Enabled")
)

// Mapping from string to ForwardingRuleProperties_ForwardingRuleState_STATUS
var forwardingRuleProperties_ForwardingRuleState_STATUS_Values = map[string]ForwardingRuleProperties_ForwardingRuleState_STATUS{
	"disabled": ForwardingRuleProperties_ForwardingRuleState_STATUS_Disabled,
	"enabled":  ForwardingRuleProperties_ForwardingRuleState_STATUS_Enabled,
}

// Metadata pertaining to creation and last modification of the resource.
type SystemData_STATUS struct {
	// CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreatedByType: The type of identity that created the resource.
	CreatedByType *SystemData_CreatedByType_STATUS `json:"createdByType,omitempty"`

	// LastModifiedAt: The timestamp of resource last modification (UTC)
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	// LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *SystemData_LastModifiedByType_STATUS `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SystemData_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SystemData_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SystemData_STATUS_ARM, got %T", armInput)
	}

	// Set property "CreatedAt":
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property "CreatedBy":
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property "CreatedByType":
	if typedInput.CreatedByType != nil {
		createdByType := *typedInput.CreatedByType
		data.CreatedByType = &createdByType
	}

	// Set property "LastModifiedAt":
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property "LastModifiedBy":
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property "LastModifiedByType":
	if typedInput.LastModifiedByType != nil {
		lastModifiedByType := *typedInput.LastModifiedByType
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignProperties_From_SystemData_STATUS populates our SystemData_STATUS from the provided source SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_From_SystemData_STATUS(source *storage.SystemData_STATUS) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := *source.CreatedByType
		createdByTypeTemp := genruntime.ToEnum(createdByType, systemData_CreatedByType_STATUS_Values)
		data.CreatedByType = &createdByTypeTemp
	} else {
		data.CreatedByType = nil
	}

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := *source.LastModifiedByType
		lastModifiedByTypeTemp := genruntime.ToEnum(lastModifiedByType, systemData_LastModifiedByType_STATUS_Values)
		data.LastModifiedByType = &lastModifiedByTypeTemp
	} else {
		data.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SystemData_STATUS populates the provided destination SystemData_STATUS from our SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_To_SystemData_STATUS(destination *storage.SystemData_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	if data.CreatedByType != nil {
		createdByType := string(*data.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	if data.LastModifiedByType != nil {
		lastModifiedByType := string(*data.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Describes a server to forward the DNS queries to.
type TargetDnsServer struct {
	// IpAddress: DNS server IP address.
	IpAddress *string `json:"ipAddress,omitempty" optionalConfigMapPair:"IpAddress"`

	// IpAddressFromConfig: DNS server IP address.
	IpAddressFromConfig *genruntime.ConfigMapReference `json:"ipAddressFromConfig,omitempty" optionalConfigMapPair:"IpAddress"`

	// Port: DNS server port.
	Port *int `json:"port,omitempty"`
}

var _ genruntime.ARMTransformer = &TargetDnsServer{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (server *TargetDnsServer) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if server == nil {
		return nil, nil
	}
	result := &TargetDnsServer_ARM{}

	// Set property "IpAddress":
	if server.IpAddress != nil {
		ipAddress := *server.IpAddress
		result.IpAddress = &ipAddress
	}
	if server.IpAddressFromConfig != nil {
		ipAddressValue, err := resolved.ResolvedConfigMaps.Lookup(*server.IpAddressFromConfig)
		if err != nil {
			return nil, errors.Wrap(err, "looking up configmap for property IpAddress")
		}
		ipAddress := ipAddressValue
		result.IpAddress = &ipAddress
	}

	// Set property "Port":
	if server.Port != nil {
		port := *server.Port
		result.Port = &port
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (server *TargetDnsServer) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TargetDnsServer_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (server *TargetDnsServer) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TargetDnsServer_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TargetDnsServer_ARM, got %T", armInput)
	}

	// Set property "IpAddress":
	if typedInput.IpAddress != nil {
		ipAddress := *typedInput.IpAddress
		server.IpAddress = &ipAddress
	}

	// no assignment for property "IpAddressFromConfig"

	// Set property "Port":
	if typedInput.Port != nil {
		port := *typedInput.Port
		server.Port = &port
	}

	// No error
	return nil
}

// AssignProperties_From_TargetDnsServer populates our TargetDnsServer from the provided source TargetDnsServer
func (server *TargetDnsServer) AssignProperties_From_TargetDnsServer(source *storage.TargetDnsServer) error {

	// IpAddress
	server.IpAddress = genruntime.ClonePointerToString(source.IpAddress)

	// IpAddressFromConfig
	if source.IpAddressFromConfig != nil {
		ipAddressFromConfig := source.IpAddressFromConfig.Copy()
		server.IpAddressFromConfig = &ipAddressFromConfig
	} else {
		server.IpAddressFromConfig = nil
	}

	// Port
	server.Port = genruntime.ClonePointerToInt(source.Port)

	// No error
	return nil
}

// AssignProperties_To_TargetDnsServer populates the provided destination TargetDnsServer from our TargetDnsServer
func (server *TargetDnsServer) AssignProperties_To_TargetDnsServer(destination *storage.TargetDnsServer) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IpAddress
	destination.IpAddress = genruntime.ClonePointerToString(server.IpAddress)

	// IpAddressFromConfig
	if server.IpAddressFromConfig != nil {
		ipAddressFromConfig := server.IpAddressFromConfig.Copy()
		destination.IpAddressFromConfig = &ipAddressFromConfig
	} else {
		destination.IpAddressFromConfig = nil
	}

	// Port
	destination.Port = genruntime.ClonePointerToInt(server.Port)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_TargetDnsServer_STATUS populates our TargetDnsServer from the provided source TargetDnsServer_STATUS
func (server *TargetDnsServer) Initialize_From_TargetDnsServer_STATUS(source *TargetDnsServer_STATUS) error {

	// IpAddress
	server.IpAddress = genruntime.ClonePointerToString(source.IpAddress)

	// Port
	server.Port = genruntime.ClonePointerToInt(source.Port)

	// No error
	return nil
}

// Describes a server to forward the DNS queries to.
type TargetDnsServer_STATUS struct {
	// IpAddress: DNS server IP address.
	IpAddress *string `json:"ipAddress,omitempty"`

	// Port: DNS server port.
	Port *int `json:"port,omitempty"`
}

var _ genruntime.FromARMConverter = &TargetDnsServer_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (server *TargetDnsServer_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TargetDnsServer_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (server *TargetDnsServer_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TargetDnsServer_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TargetDnsServer_STATUS_ARM, got %T", armInput)
	}

	// Set property "IpAddress":
	if typedInput.IpAddress != nil {
		ipAddress := *typedInput.IpAddress
		server.IpAddress = &ipAddress
	}

	// Set property "Port":
	if typedInput.Port != nil {
		port := *typedInput.Port
		server.Port = &port
	}

	// No error
	return nil
}

// AssignProperties_From_TargetDnsServer_STATUS populates our TargetDnsServer_STATUS from the provided source TargetDnsServer_STATUS
func (server *TargetDnsServer_STATUS) AssignProperties_From_TargetDnsServer_STATUS(source *storage.TargetDnsServer_STATUS) error {

	// IpAddress
	server.IpAddress = genruntime.ClonePointerToString(source.IpAddress)

	// Port
	server.Port = genruntime.ClonePointerToInt(source.Port)

	// No error
	return nil
}

// AssignProperties_To_TargetDnsServer_STATUS populates the provided destination TargetDnsServer_STATUS from our TargetDnsServer_STATUS
func (server *TargetDnsServer_STATUS) AssignProperties_To_TargetDnsServer_STATUS(destination *storage.TargetDnsServer_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IpAddress
	destination.IpAddress = genruntime.ClonePointerToString(server.IpAddress)

	// Port
	destination.Port = genruntime.ClonePointerToInt(server.Port)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&DnsForwardingRuleSetsForwardingRule{}, &DnsForwardingRuleSetsForwardingRuleList{})
}
