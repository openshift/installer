// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package compat

import (
	storage "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20240901/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/rotisserie/eris"
)

// Storage version of v1api20231102preview.AgentPoolSecurityProfile_STATUS
type AgentPoolSecurityProfile_STATUS struct {
	EnableSecureBoot *bool                  `json:"enableSecureBoot,omitempty"`
	EnableVTPM       *bool                  `json:"enableVTPM,omitempty"`
	PropertyBag      genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SshAccess        *string                `json:"sshAccess,omitempty"`
}

// AssignProperties_From_AgentPoolSecurityProfile_STATUS populates our AgentPoolSecurityProfile_STATUS from the provided source AgentPoolSecurityProfile_STATUS
func (profile *AgentPoolSecurityProfile_STATUS) AssignProperties_From_AgentPoolSecurityProfile_STATUS(source *storage.AgentPoolSecurityProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EnableSecureBoot
	if source.EnableSecureBoot != nil {
		enableSecureBoot := *source.EnableSecureBoot
		profile.EnableSecureBoot = &enableSecureBoot
	} else {
		profile.EnableSecureBoot = nil
	}

	// EnableVTPM
	if source.EnableVTPM != nil {
		enableVTPM := *source.EnableVTPM
		profile.EnableVTPM = &enableVTPM
	} else {
		profile.EnableVTPM = nil
	}

	// SshAccess
	if propertyBag.Contains("SshAccess") {
		var sshAccess string
		err := propertyBag.Pull("SshAccess", &sshAccess)
		if err != nil {
			return eris.Wrap(err, "pulling 'SshAccess' from propertyBag")
		}

		profile.SshAccess = &sshAccess
	} else {
		profile.SshAccess = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		profile.PropertyBag = propertyBag
	} else {
		profile.PropertyBag = nil
	}

	// Invoke the augmentConversionForAgentPoolSecurityProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForAgentPoolSecurityProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesFrom(source)
		if err != nil {
			return eris.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_AgentPoolSecurityProfile_STATUS populates the provided destination AgentPoolSecurityProfile_STATUS from our AgentPoolSecurityProfile_STATUS
func (profile *AgentPoolSecurityProfile_STATUS) AssignProperties_To_AgentPoolSecurityProfile_STATUS(destination *storage.AgentPoolSecurityProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(profile.PropertyBag)

	// EnableSecureBoot
	if profile.EnableSecureBoot != nil {
		enableSecureBoot := *profile.EnableSecureBoot
		destination.EnableSecureBoot = &enableSecureBoot
	} else {
		destination.EnableSecureBoot = nil
	}

	// EnableVTPM
	if profile.EnableVTPM != nil {
		enableVTPM := *profile.EnableVTPM
		destination.EnableVTPM = &enableVTPM
	} else {
		destination.EnableVTPM = nil
	}

	// SshAccess
	if profile.SshAccess != nil {
		propertyBag.Add("SshAccess", *profile.SshAccess)
	} else {
		propertyBag.Remove("SshAccess")
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForAgentPoolSecurityProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForAgentPoolSecurityProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesTo(destination)
		if err != nil {
			return eris.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForAgentPoolSecurityProfile_STATUS interface {
	AssignPropertiesFrom(src *storage.AgentPoolSecurityProfile_STATUS) error
	AssignPropertiesTo(dst *storage.AgentPoolSecurityProfile_STATUS) error
}
