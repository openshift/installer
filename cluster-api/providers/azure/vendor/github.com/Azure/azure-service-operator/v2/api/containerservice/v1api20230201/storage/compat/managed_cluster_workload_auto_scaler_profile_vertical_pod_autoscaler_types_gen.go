// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package compat

import (
	storage "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20231001/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
)

// Storage version of v1api20230202preview.ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler
type ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler struct {
	ControlledValues *string                `json:"controlledValues,omitempty"`
	Enabled          *bool                  `json:"enabled,omitempty"`
	PropertyBag      genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	UpdateMode       *string                `json:"updateMode,omitempty"`
}

// AssignProperties_From_ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler populates our ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler from the provided source ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler
func (autoscaler *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler) AssignProperties_From_ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler(source *storage.ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ControlledValues
	if propertyBag.Contains("ControlledValues") {
		var controlledValue string
		err := propertyBag.Pull("ControlledValues", &controlledValue)
		if err != nil {
			return errors.Wrap(err, "pulling 'ControlledValues' from propertyBag")
		}

		autoscaler.ControlledValues = &controlledValue
	} else {
		autoscaler.ControlledValues = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		autoscaler.Enabled = &enabled
	} else {
		autoscaler.Enabled = nil
	}

	// UpdateMode
	if propertyBag.Contains("UpdateMode") {
		var updateMode string
		err := propertyBag.Pull("UpdateMode", &updateMode)
		if err != nil {
			return errors.Wrap(err, "pulling 'UpdateMode' from propertyBag")
		}

		autoscaler.UpdateMode = &updateMode
	} else {
		autoscaler.UpdateMode = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		autoscaler.PropertyBag = propertyBag
	} else {
		autoscaler.PropertyBag = nil
	}

	// Invoke the augmentConversionForManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler interface (if implemented) to customize the conversion
	var autoscalerAsAny any = autoscaler
	if augmentedAutoscaler, ok := autoscalerAsAny.(augmentConversionForManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler); ok {
		err := augmentedAutoscaler.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler populates the provided destination ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler from our ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler
func (autoscaler *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler) AssignProperties_To_ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler(destination *storage.ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(autoscaler.PropertyBag)

	// ControlledValues
	if autoscaler.ControlledValues != nil {
		propertyBag.Add("ControlledValues", *autoscaler.ControlledValues)
	} else {
		propertyBag.Remove("ControlledValues")
	}

	// Enabled
	if autoscaler.Enabled != nil {
		enabled := *autoscaler.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// UpdateMode
	if autoscaler.UpdateMode != nil {
		propertyBag.Add("UpdateMode", *autoscaler.UpdateMode)
	} else {
		propertyBag.Remove("UpdateMode")
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler interface (if implemented) to customize the conversion
	var autoscalerAsAny any = autoscaler
	if augmentedAutoscaler, ok := autoscalerAsAny.(augmentConversionForManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler); ok {
		err := augmentedAutoscaler.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler interface {
	AssignPropertiesFrom(src *storage.ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler) error
	AssignPropertiesTo(dst *storage.ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler) error
}
