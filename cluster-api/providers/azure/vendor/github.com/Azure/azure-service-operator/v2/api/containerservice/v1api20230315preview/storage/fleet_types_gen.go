// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	storage "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20230201/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=containerservice.azure.com,resources=fleets,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=containerservice.azure.com,resources={fleets/status,fleets/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1api20230315preview.Fleet
// Generator information:
// - Generated from: /containerservice/resource-manager/Microsoft.ContainerService/fleet/preview/2023-03-15-preview/fleets.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}
type Fleet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Fleet_Spec   `json:"spec,omitempty"`
	Status            Fleet_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Fleet{}

// GetConditions returns the conditions of the resource
func (fleet *Fleet) GetConditions() conditions.Conditions {
	return fleet.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (fleet *Fleet) SetConditions(conditions conditions.Conditions) {
	fleet.Status.Conditions = conditions
}

var _ genruntime.KubernetesResource = &Fleet{}

// AzureName returns the Azure name of the resource
func (fleet *Fleet) AzureName() string {
	return fleet.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-03-15-preview"
func (fleet Fleet) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (fleet *Fleet) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (fleet *Fleet) GetSpec() genruntime.ConvertibleSpec {
	return &fleet.Spec
}

// GetStatus returns the status of this resource
func (fleet *Fleet) GetStatus() genruntime.ConvertibleStatus {
	return &fleet.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (fleet *Fleet) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ContainerService/fleets"
func (fleet *Fleet) GetType() string {
	return "Microsoft.ContainerService/fleets"
}

// NewEmptyStatus returns a new empty (blank) status
func (fleet *Fleet) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Fleet_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (fleet *Fleet) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(fleet.Spec)
	return fleet.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (fleet *Fleet) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Fleet_STATUS); ok {
		fleet.Status = *st
		return nil
	}

	// Convert status to required version
	var st Fleet_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	fleet.Status = st
	return nil
}

// Hub marks that this Fleet is the hub type for conversion
func (fleet *Fleet) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (fleet *Fleet) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: fleet.Spec.OriginalVersion,
		Kind:    "Fleet",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1api20230315preview.Fleet
// Generator information:
// - Generated from: /containerservice/resource-manager/Microsoft.ContainerService/fleet/preview/2023-03-15-preview/fleets.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}
type FleetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Fleet `json:"items"`
}

// Storage version of v1api20230315preview.APIVersion
// +kubebuilder:validation:Enum={"2023-03-15-preview"}
type APIVersion string

const APIVersion_Value = APIVersion("2023-03-15-preview")

// Storage version of v1api20230315preview.Fleet_Spec
type Fleet_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName       string             `json:"azureName,omitempty"`
	HubProfile      *FleetHubProfile   `json:"hubProfile,omitempty"`
	Location        *string            `json:"location,omitempty"`
	OperatorSpec    *FleetOperatorSpec `json:"operatorSpec,omitempty"`
	OriginalVersion string             `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner       *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PropertyBag genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	Tags        map[string]string                  `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Fleet_Spec{}

// ConvertSpecFrom populates our Fleet_Spec from the provided source
func (fleet *Fleet_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == fleet {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(fleet)
}

// ConvertSpecTo populates the provided destination from our Fleet_Spec
func (fleet *Fleet_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == fleet {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(fleet)
}

// Storage version of v1api20230315preview.Fleet_STATUS
// The Fleet resource.
type Fleet_STATUS struct {
	Conditions        []conditions.Condition  `json:"conditions,omitempty"`
	ETag              *string                 `json:"eTag,omitempty"`
	HubProfile        *FleetHubProfile_STATUS `json:"hubProfile,omitempty"`
	Id                *string                 `json:"id,omitempty"`
	Location          *string                 `json:"location,omitempty"`
	Name              *string                 `json:"name,omitempty"`
	PropertyBag       genruntime.PropertyBag  `json:"$propertyBag,omitempty"`
	ProvisioningState *string                 `json:"provisioningState,omitempty"`
	SystemData        *SystemData_STATUS      `json:"systemData,omitempty"`
	Tags              map[string]string       `json:"tags,omitempty"`
	Type              *string                 `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Fleet_STATUS{}

// ConvertStatusFrom populates our Fleet_STATUS from the provided source
func (fleet *Fleet_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == fleet {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(fleet)
}

// ConvertStatusTo populates the provided destination from our Fleet_STATUS
func (fleet *Fleet_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == fleet {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(fleet)
}

// Storage version of v1api20230315preview.FleetHubProfile
// The FleetHubProfile configures the fleet hub.
type FleetHubProfile struct {
	DnsPrefix   *string                `json:"dnsPrefix,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20230315preview.FleetHubProfile_STATUS
// The FleetHubProfile configures the fleet hub.
type FleetHubProfile_STATUS struct {
	DnsPrefix         *string                `json:"dnsPrefix,omitempty"`
	Fqdn              *string                `json:"fqdn,omitempty"`
	KubernetesVersion *string                `json:"kubernetesVersion,omitempty"`
	PropertyBag       genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20230315preview.FleetOperatorSpec
// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type FleetOperatorSpec struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Secrets     *FleetOperatorSecrets  `json:"secrets,omitempty"`
}

// Storage version of v1api20230315preview.SystemData_STATUS
// Metadata pertaining to creation and last modification of the resource.
type SystemData_STATUS struct {
	CreatedAt          *string                `json:"createdAt,omitempty"`
	CreatedBy          *string                `json:"createdBy,omitempty"`
	CreatedByType      *string                `json:"createdByType,omitempty"`
	LastModifiedAt     *string                `json:"lastModifiedAt,omitempty"`
	LastModifiedBy     *string                `json:"lastModifiedBy,omitempty"`
	LastModifiedByType *string                `json:"lastModifiedByType,omitempty"`
	PropertyBag        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_SystemData_STATUS populates our SystemData_STATUS from the provided source SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_From_SystemData_STATUS(source *storage.SystemData_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	data.CreatedByType = genruntime.ClonePointerToString(source.CreatedByType)

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	data.LastModifiedByType = genruntime.ClonePointerToString(source.LastModifiedByType)

	// Update the property bag
	if len(propertyBag) > 0 {
		data.PropertyBag = propertyBag
	} else {
		data.PropertyBag = nil
	}

	// Invoke the augmentConversionForSystemData_STATUS interface (if implemented) to customize the conversion
	var dataAsAny any = data
	if augmentedData, ok := dataAsAny.(augmentConversionForSystemData_STATUS); ok {
		err := augmentedData.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_SystemData_STATUS populates the provided destination SystemData_STATUS from our SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_To_SystemData_STATUS(destination *storage.SystemData_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(data.PropertyBag)

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	destination.CreatedByType = genruntime.ClonePointerToString(data.CreatedByType)

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	destination.LastModifiedByType = genruntime.ClonePointerToString(data.LastModifiedByType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForSystemData_STATUS interface (if implemented) to customize the conversion
	var dataAsAny any = data
	if augmentedData, ok := dataAsAny.(augmentConversionForSystemData_STATUS); ok {
		err := augmentedData.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForSystemData_STATUS interface {
	AssignPropertiesFrom(src *storage.SystemData_STATUS) error
	AssignPropertiesTo(dst *storage.SystemData_STATUS) error
}

// Storage version of v1api20230315preview.FleetOperatorSecrets
type FleetOperatorSecrets struct {
	PropertyBag     genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	UserCredentials *genruntime.SecretDestination `json:"userCredentials,omitempty"`
}

func init() {
	SchemeBuilder.Register(&Fleet{}, &FleetList{})
}
