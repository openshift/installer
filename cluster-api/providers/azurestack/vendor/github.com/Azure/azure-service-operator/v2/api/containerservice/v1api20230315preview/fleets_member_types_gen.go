// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230315preview

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20230315preview/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20230315preview/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /containerservice/resource-manager/Microsoft.ContainerService/fleet/preview/2023-03-15-preview/fleets.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/members/{fleetMemberName}
type FleetsMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FleetsMember_Spec   `json:"spec,omitempty"`
	Status            FleetsMember_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &FleetsMember{}

// GetConditions returns the conditions of the resource
func (member *FleetsMember) GetConditions() conditions.Conditions {
	return member.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (member *FleetsMember) SetConditions(conditions conditions.Conditions) {
	member.Status.Conditions = conditions
}

var _ conversion.Convertible = &FleetsMember{}

// ConvertFrom populates our FleetsMember from the provided hub FleetsMember
func (member *FleetsMember) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.FleetsMember)
	if !ok {
		return fmt.Errorf("expected containerservice/v1api20230315preview/storage/FleetsMember but received %T instead", hub)
	}

	return member.AssignProperties_From_FleetsMember(source)
}

// ConvertTo populates the provided hub FleetsMember from our FleetsMember
func (member *FleetsMember) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.FleetsMember)
	if !ok {
		return fmt.Errorf("expected containerservice/v1api20230315preview/storage/FleetsMember but received %T instead", hub)
	}

	return member.AssignProperties_To_FleetsMember(destination)
}

// +kubebuilder:webhook:path=/mutate-containerservice-azure-com-v1api20230315preview-fleetsmember,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=containerservice.azure.com,resources=fleetsmembers,verbs=create;update,versions=v1api20230315preview,name=default.v1api20230315preview.fleetsmembers.containerservice.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &FleetsMember{}

// Default applies defaults to the FleetsMember resource
func (member *FleetsMember) Default() {
	member.defaultImpl()
	var temp any = member
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (member *FleetsMember) defaultAzureName() {
	if member.Spec.AzureName == "" {
		member.Spec.AzureName = member.Name
	}
}

// defaultImpl applies the code generated defaults to the FleetsMember resource
func (member *FleetsMember) defaultImpl() { member.defaultAzureName() }

var _ configmaps.Exporter = &FleetsMember{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (member *FleetsMember) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if member.Spec.OperatorSpec == nil {
		return nil
	}
	return member.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &FleetsMember{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (member *FleetsMember) SecretDestinationExpressions() []*core.DestinationExpression {
	if member.Spec.OperatorSpec == nil {
		return nil
	}
	return member.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &FleetsMember{}

// InitializeSpec initializes the spec for this resource from the given status
func (member *FleetsMember) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*FleetsMember_STATUS); ok {
		return member.Spec.Initialize_From_FleetsMember_STATUS(s)
	}

	return fmt.Errorf("expected Status of type FleetsMember_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &FleetsMember{}

// AzureName returns the Azure name of the resource
func (member *FleetsMember) AzureName() string {
	return member.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-03-15-preview"
func (member FleetsMember) GetAPIVersion() string {
	return "2023-03-15-preview"
}

// GetResourceScope returns the scope of the resource
func (member *FleetsMember) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (member *FleetsMember) GetSpec() genruntime.ConvertibleSpec {
	return &member.Spec
}

// GetStatus returns the status of this resource
func (member *FleetsMember) GetStatus() genruntime.ConvertibleStatus {
	return &member.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (member *FleetsMember) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ContainerService/fleets/members"
func (member *FleetsMember) GetType() string {
	return "Microsoft.ContainerService/fleets/members"
}

// NewEmptyStatus returns a new empty (blank) status
func (member *FleetsMember) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &FleetsMember_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (member *FleetsMember) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(member.Spec)
	return member.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (member *FleetsMember) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*FleetsMember_STATUS); ok {
		member.Status = *st
		return nil
	}

	// Convert status to required version
	var st FleetsMember_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	member.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-containerservice-azure-com-v1api20230315preview-fleetsmember,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=containerservice.azure.com,resources=fleetsmembers,verbs=create;update,versions=v1api20230315preview,name=validate.v1api20230315preview.fleetsmembers.containerservice.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &FleetsMember{}

// ValidateCreate validates the creation of the resource
func (member *FleetsMember) ValidateCreate() (admission.Warnings, error) {
	validations := member.createValidations()
	var temp any = member
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (member *FleetsMember) ValidateDelete() (admission.Warnings, error) {
	validations := member.deleteValidations()
	var temp any = member
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (member *FleetsMember) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := member.updateValidations()
	var temp any = member
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (member *FleetsMember) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){member.validateResourceReferences, member.validateOwnerReference, member.validateSecretDestinations, member.validateConfigMapDestinations}
}

// deleteValidations validates the deletion of the resource
func (member *FleetsMember) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (member *FleetsMember) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return member.validateResourceReferences()
		},
		member.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return member.validateOwnerReference()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return member.validateSecretDestinations()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return member.validateConfigMapDestinations()
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (member *FleetsMember) validateConfigMapDestinations() (admission.Warnings, error) {
	if member.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(member, nil, member.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (member *FleetsMember) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(member)
}

// validateResourceReferences validates all resource references
func (member *FleetsMember) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&member.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (member *FleetsMember) validateSecretDestinations() (admission.Warnings, error) {
	if member.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(member, nil, member.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (member *FleetsMember) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*FleetsMember)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, member)
}

// AssignProperties_From_FleetsMember populates our FleetsMember from the provided source FleetsMember
func (member *FleetsMember) AssignProperties_From_FleetsMember(source *storage.FleetsMember) error {

	// ObjectMeta
	member.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec FleetsMember_Spec
	err := spec.AssignProperties_From_FleetsMember_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_FleetsMember_Spec() to populate field Spec")
	}
	member.Spec = spec

	// Status
	var status FleetsMember_STATUS
	err = status.AssignProperties_From_FleetsMember_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_FleetsMember_STATUS() to populate field Status")
	}
	member.Status = status

	// No error
	return nil
}

// AssignProperties_To_FleetsMember populates the provided destination FleetsMember from our FleetsMember
func (member *FleetsMember) AssignProperties_To_FleetsMember(destination *storage.FleetsMember) error {

	// ObjectMeta
	destination.ObjectMeta = *member.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.FleetsMember_Spec
	err := member.Spec.AssignProperties_To_FleetsMember_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_FleetsMember_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.FleetsMember_STATUS
	err = member.Status.AssignProperties_To_FleetsMember_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_FleetsMember_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (member *FleetsMember) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: member.Spec.OriginalVersion(),
		Kind:    "FleetsMember",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /containerservice/resource-manager/Microsoft.ContainerService/fleet/preview/2023-03-15-preview/fleets.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/members/{fleetMemberName}
type FleetsMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FleetsMember `json:"items"`
}

type FleetsMember_Spec struct {
	// +kubebuilder:validation:MaxLength=50
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	// ClusterResourceReference: The ARM resource id of the cluster that joins the Fleet. Must be a valid Azure resource id.
	// e.g.:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.
	ClusterResourceReference *genruntime.ResourceReference `armReference:"ClusterResourceId" json:"clusterResourceReference,omitempty"`

	// +kubebuilder:validation:MaxLength=50
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
	// Group: The group this member belongs to for multi-cluster update management.
	Group *string `json:"group,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *FleetsMemberOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a containerservice.azure.com/Fleet resource
	Owner *genruntime.KnownResourceReference `group:"containerservice.azure.com" json:"owner,omitempty" kind:"Fleet"`
}

var _ genruntime.ARMTransformer = &FleetsMember_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (member *FleetsMember_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if member == nil {
		return nil, nil
	}
	result := &arm.FleetsMember_Spec{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if member.ClusterResourceReference != nil || member.Group != nil {
		result.Properties = &arm.FleetMemberProperties{}
	}
	if member.ClusterResourceReference != nil {
		clusterResourceIdARMID, err := resolved.ResolvedReferences.Lookup(*member.ClusterResourceReference)
		if err != nil {
			return nil, err
		}
		clusterResourceId := clusterResourceIdARMID
		result.Properties.ClusterResourceId = &clusterResourceId
	}
	if member.Group != nil {
		group := *member.Group
		result.Properties.Group = &group
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (member *FleetsMember_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.FleetsMember_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (member *FleetsMember_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.FleetsMember_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.FleetsMember_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	member.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// no assignment for property "ClusterResourceReference"

	// Set property "Group":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Group != nil {
			group := *typedInput.Properties.Group
			member.Group = &group
		}
	}

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	member.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FleetsMember_Spec{}

// ConvertSpecFrom populates our FleetsMember_Spec from the provided source
func (member *FleetsMember_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.FleetsMember_Spec)
	if ok {
		// Populate our instance from source
		return member.AssignProperties_From_FleetsMember_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.FleetsMember_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = member.AssignProperties_From_FleetsMember_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our FleetsMember_Spec
func (member *FleetsMember_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.FleetsMember_Spec)
	if ok {
		// Populate destination from our instance
		return member.AssignProperties_To_FleetsMember_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.FleetsMember_Spec{}
	err := member.AssignProperties_To_FleetsMember_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_FleetsMember_Spec populates our FleetsMember_Spec from the provided source FleetsMember_Spec
func (member *FleetsMember_Spec) AssignProperties_From_FleetsMember_Spec(source *storage.FleetsMember_Spec) error {

	// AzureName
	member.AzureName = source.AzureName

	// ClusterResourceReference
	if source.ClusterResourceReference != nil {
		clusterResourceReference := source.ClusterResourceReference.Copy()
		member.ClusterResourceReference = &clusterResourceReference
	} else {
		member.ClusterResourceReference = nil
	}

	// Group
	if source.Group != nil {
		group := *source.Group
		member.Group = &group
	} else {
		member.Group = nil
	}

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec FleetsMemberOperatorSpec
		err := operatorSpec.AssignProperties_From_FleetsMemberOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_FleetsMemberOperatorSpec() to populate field OperatorSpec")
		}
		member.OperatorSpec = &operatorSpec
	} else {
		member.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		member.Owner = &owner
	} else {
		member.Owner = nil
	}

	// No error
	return nil
}

// AssignProperties_To_FleetsMember_Spec populates the provided destination FleetsMember_Spec from our FleetsMember_Spec
func (member *FleetsMember_Spec) AssignProperties_To_FleetsMember_Spec(destination *storage.FleetsMember_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = member.AzureName

	// ClusterResourceReference
	if member.ClusterResourceReference != nil {
		clusterResourceReference := member.ClusterResourceReference.Copy()
		destination.ClusterResourceReference = &clusterResourceReference
	} else {
		destination.ClusterResourceReference = nil
	}

	// Group
	if member.Group != nil {
		group := *member.Group
		destination.Group = &group
	} else {
		destination.Group = nil
	}

	// OperatorSpec
	if member.OperatorSpec != nil {
		var operatorSpec storage.FleetsMemberOperatorSpec
		err := member.OperatorSpec.AssignProperties_To_FleetsMemberOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_FleetsMemberOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = member.OriginalVersion()

	// Owner
	if member.Owner != nil {
		owner := member.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_FleetsMember_STATUS populates our FleetsMember_Spec from the provided source FleetsMember_STATUS
func (member *FleetsMember_Spec) Initialize_From_FleetsMember_STATUS(source *FleetsMember_STATUS) error {

	// ClusterResourceReference
	if source.ClusterResourceId != nil {
		clusterResourceReference := genruntime.CreateResourceReferenceFromARMID(*source.ClusterResourceId)
		member.ClusterResourceReference = &clusterResourceReference
	} else {
		member.ClusterResourceReference = nil
	}

	// Group
	if source.Group != nil {
		group := *source.Group
		member.Group = &group
	} else {
		member.Group = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (member *FleetsMember_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (member *FleetsMember_Spec) SetAzureName(azureName string) { member.AzureName = azureName }

type FleetsMember_STATUS struct {
	// ClusterResourceId: The ARM resource id of the cluster that joins the Fleet. Must be a valid Azure resource id. e.g.:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.
	ClusterResourceId *string `json:"clusterResourceId,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// ETag: If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.
	// Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in
	// the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header
	// fields.
	ETag *string `json:"eTag,omitempty"`

	// Group: The group this member belongs to for multi-cluster update management.
	Group *string `json:"group,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The status of the last operation.
	ProvisioningState *FleetMemberProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// SystemData: Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &FleetsMember_STATUS{}

// ConvertStatusFrom populates our FleetsMember_STATUS from the provided source
func (member *FleetsMember_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.FleetsMember_STATUS)
	if ok {
		// Populate our instance from source
		return member.AssignProperties_From_FleetsMember_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.FleetsMember_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = member.AssignProperties_From_FleetsMember_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our FleetsMember_STATUS
func (member *FleetsMember_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.FleetsMember_STATUS)
	if ok {
		// Populate destination from our instance
		return member.AssignProperties_To_FleetsMember_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.FleetsMember_STATUS{}
	err := member.AssignProperties_To_FleetsMember_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &FleetsMember_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (member *FleetsMember_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.FleetsMember_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (member *FleetsMember_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.FleetsMember_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.FleetsMember_STATUS, got %T", armInput)
	}

	// Set property "ClusterResourceId":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ClusterResourceId != nil {
			clusterResourceId := *typedInput.Properties.ClusterResourceId
			member.ClusterResourceId = &clusterResourceId
		}
	}

	// no assignment for property "Conditions"

	// Set property "ETag":
	if typedInput.ETag != nil {
		eTag := *typedInput.ETag
		member.ETag = &eTag
	}

	// Set property "Group":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Group != nil {
			group := *typedInput.Properties.Group
			member.Group = &group
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		member.Id = &id
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		member.Name = &name
	}

	// Set property "ProvisioningState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			var temp string
			temp = string(*typedInput.Properties.ProvisioningState)
			provisioningState := FleetMemberProvisioningState_STATUS(temp)
			member.ProvisioningState = &provisioningState
		}
	}

	// Set property "SystemData":
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		member.SystemData = &systemData
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		member.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_FleetsMember_STATUS populates our FleetsMember_STATUS from the provided source FleetsMember_STATUS
func (member *FleetsMember_STATUS) AssignProperties_From_FleetsMember_STATUS(source *storage.FleetsMember_STATUS) error {

	// ClusterResourceId
	member.ClusterResourceId = genruntime.ClonePointerToString(source.ClusterResourceId)

	// Conditions
	member.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ETag
	member.ETag = genruntime.ClonePointerToString(source.ETag)

	// Group
	member.Group = genruntime.ClonePointerToString(source.Group)

	// Id
	member.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	member.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := *source.ProvisioningState
		provisioningStateTemp := genruntime.ToEnum(provisioningState, fleetMemberProvisioningState_STATUS_Values)
		member.ProvisioningState = &provisioningStateTemp
	} else {
		member.ProvisioningState = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		member.SystemData = &systemDatum
	} else {
		member.SystemData = nil
	}

	// Type
	member.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_FleetsMember_STATUS populates the provided destination FleetsMember_STATUS from our FleetsMember_STATUS
func (member *FleetsMember_STATUS) AssignProperties_To_FleetsMember_STATUS(destination *storage.FleetsMember_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClusterResourceId
	destination.ClusterResourceId = genruntime.ClonePointerToString(member.ClusterResourceId)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(member.Conditions)

	// ETag
	destination.ETag = genruntime.ClonePointerToString(member.ETag)

	// Group
	destination.Group = genruntime.ClonePointerToString(member.Group)

	// Id
	destination.Id = genruntime.ClonePointerToString(member.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(member.Name)

	// ProvisioningState
	if member.ProvisioningState != nil {
		provisioningState := string(*member.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// SystemData
	if member.SystemData != nil {
		var systemDatum storage.SystemData_STATUS
		err := member.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(member.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// The provisioning state of the last accepted operation.
type FleetMemberProvisioningState_STATUS string

const (
	FleetMemberProvisioningState_STATUS_Canceled  = FleetMemberProvisioningState_STATUS("Canceled")
	FleetMemberProvisioningState_STATUS_Failed    = FleetMemberProvisioningState_STATUS("Failed")
	FleetMemberProvisioningState_STATUS_Joining   = FleetMemberProvisioningState_STATUS("Joining")
	FleetMemberProvisioningState_STATUS_Leaving   = FleetMemberProvisioningState_STATUS("Leaving")
	FleetMemberProvisioningState_STATUS_Succeeded = FleetMemberProvisioningState_STATUS("Succeeded")
	FleetMemberProvisioningState_STATUS_Updating  = FleetMemberProvisioningState_STATUS("Updating")
)

// Mapping from string to FleetMemberProvisioningState_STATUS
var fleetMemberProvisioningState_STATUS_Values = map[string]FleetMemberProvisioningState_STATUS{
	"canceled":  FleetMemberProvisioningState_STATUS_Canceled,
	"failed":    FleetMemberProvisioningState_STATUS_Failed,
	"joining":   FleetMemberProvisioningState_STATUS_Joining,
	"leaving":   FleetMemberProvisioningState_STATUS_Leaving,
	"succeeded": FleetMemberProvisioningState_STATUS_Succeeded,
	"updating":  FleetMemberProvisioningState_STATUS_Updating,
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type FleetsMemberOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_FleetsMemberOperatorSpec populates our FleetsMemberOperatorSpec from the provided source FleetsMemberOperatorSpec
func (operator *FleetsMemberOperatorSpec) AssignProperties_From_FleetsMemberOperatorSpec(source *storage.FleetsMemberOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_FleetsMemberOperatorSpec populates the provided destination FleetsMemberOperatorSpec from our FleetsMemberOperatorSpec
func (operator *FleetsMemberOperatorSpec) AssignProperties_To_FleetsMemberOperatorSpec(destination *storage.FleetsMemberOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&FleetsMember{}, &FleetsMemberList{})
}
