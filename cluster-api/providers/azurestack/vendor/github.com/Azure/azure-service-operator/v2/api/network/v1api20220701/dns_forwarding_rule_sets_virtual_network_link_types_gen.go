// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220701

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/network/v1api20220701/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/network/v1api20220701/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /dnsresolver/resource-manager/Microsoft.Network/stable/2022-07-01/dnsresolver.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/virtualNetworkLinks/{virtualNetworkLinkName}
type DnsForwardingRuleSetsVirtualNetworkLink struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnsForwardingRuleSetsVirtualNetworkLink_Spec   `json:"spec,omitempty"`
	Status            DnsForwardingRuleSetsVirtualNetworkLink_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &DnsForwardingRuleSetsVirtualNetworkLink{}

// GetConditions returns the conditions of the resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) GetConditions() conditions.Conditions {
	return link.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (link *DnsForwardingRuleSetsVirtualNetworkLink) SetConditions(conditions conditions.Conditions) {
	link.Status.Conditions = conditions
}

var _ conversion.Convertible = &DnsForwardingRuleSetsVirtualNetworkLink{}

// ConvertFrom populates our DnsForwardingRuleSetsVirtualNetworkLink from the provided hub DnsForwardingRuleSetsVirtualNetworkLink
func (link *DnsForwardingRuleSetsVirtualNetworkLink) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.DnsForwardingRuleSetsVirtualNetworkLink)
	if !ok {
		return fmt.Errorf("expected network/v1api20220701/storage/DnsForwardingRuleSetsVirtualNetworkLink but received %T instead", hub)
	}

	return link.AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink(source)
}

// ConvertTo populates the provided hub DnsForwardingRuleSetsVirtualNetworkLink from our DnsForwardingRuleSetsVirtualNetworkLink
func (link *DnsForwardingRuleSetsVirtualNetworkLink) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.DnsForwardingRuleSetsVirtualNetworkLink)
	if !ok {
		return fmt.Errorf("expected network/v1api20220701/storage/DnsForwardingRuleSetsVirtualNetworkLink but received %T instead", hub)
	}

	return link.AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink(destination)
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1api20220701-dnsforwardingrulesetsvirtualnetworklink,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=dnsforwardingrulesetsvirtualnetworklinks,verbs=create;update,versions=v1api20220701,name=default.v1api20220701.dnsforwardingrulesetsvirtualnetworklinks.network.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &DnsForwardingRuleSetsVirtualNetworkLink{}

// Default applies defaults to the DnsForwardingRuleSetsVirtualNetworkLink resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) Default() {
	link.defaultImpl()
	var temp any = link
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (link *DnsForwardingRuleSetsVirtualNetworkLink) defaultAzureName() {
	if link.Spec.AzureName == "" {
		link.Spec.AzureName = link.Name
	}
}

// defaultImpl applies the code generated defaults to the DnsForwardingRuleSetsVirtualNetworkLink resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) defaultImpl() { link.defaultAzureName() }

var _ configmaps.Exporter = &DnsForwardingRuleSetsVirtualNetworkLink{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (link *DnsForwardingRuleSetsVirtualNetworkLink) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if link.Spec.OperatorSpec == nil {
		return nil
	}
	return link.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &DnsForwardingRuleSetsVirtualNetworkLink{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (link *DnsForwardingRuleSetsVirtualNetworkLink) SecretDestinationExpressions() []*core.DestinationExpression {
	if link.Spec.OperatorSpec == nil {
		return nil
	}
	return link.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &DnsForwardingRuleSetsVirtualNetworkLink{}

// InitializeSpec initializes the spec for this resource from the given status
func (link *DnsForwardingRuleSetsVirtualNetworkLink) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*DnsForwardingRuleSetsVirtualNetworkLink_STATUS); ok {
		return link.Spec.Initialize_From_DnsForwardingRuleSetsVirtualNetworkLink_STATUS(s)
	}

	return fmt.Errorf("expected Status of type DnsForwardingRuleSetsVirtualNetworkLink_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &DnsForwardingRuleSetsVirtualNetworkLink{}

// AzureName returns the Azure name of the resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) AzureName() string {
	return link.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2022-07-01"
func (link DnsForwardingRuleSetsVirtualNetworkLink) GetAPIVersion() string {
	return "2022-07-01"
}

// GetResourceScope returns the scope of the resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) GetSpec() genruntime.ConvertibleSpec {
	return &link.Spec
}

// GetStatus returns the status of this resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) GetStatus() genruntime.ConvertibleStatus {
	return &link.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/dnsForwardingRulesets/virtualNetworkLinks"
func (link *DnsForwardingRuleSetsVirtualNetworkLink) GetType() string {
	return "Microsoft.Network/dnsForwardingRulesets/virtualNetworkLinks"
}

// NewEmptyStatus returns a new empty (blank) status
func (link *DnsForwardingRuleSetsVirtualNetworkLink) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &DnsForwardingRuleSetsVirtualNetworkLink_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (link *DnsForwardingRuleSetsVirtualNetworkLink) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(link.Spec)
	return link.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*DnsForwardingRuleSetsVirtualNetworkLink_STATUS); ok {
		link.Status = *st
		return nil
	}

	// Convert status to required version
	var st DnsForwardingRuleSetsVirtualNetworkLink_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	link.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1api20220701-dnsforwardingrulesetsvirtualnetworklink,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=dnsforwardingrulesetsvirtualnetworklinks,verbs=create;update,versions=v1api20220701,name=validate.v1api20220701.dnsforwardingrulesetsvirtualnetworklinks.network.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &DnsForwardingRuleSetsVirtualNetworkLink{}

// ValidateCreate validates the creation of the resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) ValidateCreate() (admission.Warnings, error) {
	validations := link.createValidations()
	var temp any = link
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) ValidateDelete() (admission.Warnings, error) {
	validations := link.deleteValidations()
	var temp any = link
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := link.updateValidations()
	var temp any = link
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){link.validateResourceReferences, link.validateOwnerReference, link.validateSecretDestinations, link.validateConfigMapDestinations}
}

// deleteValidations validates the deletion of the resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return link.validateResourceReferences()
		},
		link.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return link.validateOwnerReference()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return link.validateSecretDestinations()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return link.validateConfigMapDestinations()
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (link *DnsForwardingRuleSetsVirtualNetworkLink) validateConfigMapDestinations() (admission.Warnings, error) {
	if link.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(link, nil, link.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (link *DnsForwardingRuleSetsVirtualNetworkLink) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(link)
}

// validateResourceReferences validates all resource references
func (link *DnsForwardingRuleSetsVirtualNetworkLink) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&link.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (link *DnsForwardingRuleSetsVirtualNetworkLink) validateSecretDestinations() (admission.Warnings, error) {
	if link.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(link, nil, link.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (link *DnsForwardingRuleSetsVirtualNetworkLink) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*DnsForwardingRuleSetsVirtualNetworkLink)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, link)
}

// AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink populates our DnsForwardingRuleSetsVirtualNetworkLink from the provided source DnsForwardingRuleSetsVirtualNetworkLink
func (link *DnsForwardingRuleSetsVirtualNetworkLink) AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink(source *storage.DnsForwardingRuleSetsVirtualNetworkLink) error {

	// ObjectMeta
	link.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DnsForwardingRuleSetsVirtualNetworkLink_Spec
	err := spec.AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink_Spec() to populate field Spec")
	}
	link.Spec = spec

	// Status
	var status DnsForwardingRuleSetsVirtualNetworkLink_STATUS
	err = status.AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink_STATUS() to populate field Status")
	}
	link.Status = status

	// No error
	return nil
}

// AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink populates the provided destination DnsForwardingRuleSetsVirtualNetworkLink from our DnsForwardingRuleSetsVirtualNetworkLink
func (link *DnsForwardingRuleSetsVirtualNetworkLink) AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink(destination *storage.DnsForwardingRuleSetsVirtualNetworkLink) error {

	// ObjectMeta
	destination.ObjectMeta = *link.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.DnsForwardingRuleSetsVirtualNetworkLink_Spec
	err := link.Spec.AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.DnsForwardingRuleSetsVirtualNetworkLink_STATUS
	err = link.Status.AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: link.Spec.OriginalVersion(),
		Kind:    "DnsForwardingRuleSetsVirtualNetworkLink",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /dnsresolver/resource-manager/Microsoft.Network/stable/2022-07-01/dnsresolver.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/virtualNetworkLinks/{virtualNetworkLinkName}
type DnsForwardingRuleSetsVirtualNetworkLinkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnsForwardingRuleSetsVirtualNetworkLink `json:"items"`
}

type DnsForwardingRuleSetsVirtualNetworkLink_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// Metadata: Metadata attached to the virtual network link.
	Metadata map[string]string `json:"metadata,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a network.azure.com/DnsForwardingRuleset resource
	Owner *genruntime.KnownResourceReference `group:"network.azure.com" json:"owner,omitempty" kind:"DnsForwardingRuleset"`

	// +kubebuilder:validation:Required
	// VirtualNetwork: The reference to the virtual network. This cannot be changed after creation.
	VirtualNetwork *SubResource `json:"virtualNetwork,omitempty"`
}

var _ genruntime.ARMTransformer = &DnsForwardingRuleSetsVirtualNetworkLink_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (link *DnsForwardingRuleSetsVirtualNetworkLink_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if link == nil {
		return nil, nil
	}
	result := &arm.DnsForwardingRuleSetsVirtualNetworkLink_Spec{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if link.Metadata != nil || link.VirtualNetwork != nil {
		result.Properties = &arm.VirtualNetworkLinkProperties{}
	}
	if link.Metadata != nil {
		result.Properties.Metadata = make(map[string]string, len(link.Metadata))
		for key, value := range link.Metadata {
			result.Properties.Metadata[key] = value
		}
	}
	if link.VirtualNetwork != nil {
		virtualNetwork_ARM, err := (*link.VirtualNetwork).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		virtualNetwork := *virtualNetwork_ARM.(*arm.SubResource)
		result.Properties.VirtualNetwork = &virtualNetwork
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (link *DnsForwardingRuleSetsVirtualNetworkLink_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.DnsForwardingRuleSetsVirtualNetworkLink_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (link *DnsForwardingRuleSetsVirtualNetworkLink_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.DnsForwardingRuleSetsVirtualNetworkLink_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.DnsForwardingRuleSetsVirtualNetworkLink_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	link.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Metadata":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			link.Metadata = make(map[string]string, len(typedInput.Properties.Metadata))
			for key, value := range typedInput.Properties.Metadata {
				link.Metadata[key] = value
			}
		}
	}

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	link.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "VirtualNetwork":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VirtualNetwork != nil {
			var virtualNetwork1 SubResource
			err := virtualNetwork1.PopulateFromARM(owner, *typedInput.Properties.VirtualNetwork)
			if err != nil {
				return err
			}
			virtualNetwork := virtualNetwork1
			link.VirtualNetwork = &virtualNetwork
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DnsForwardingRuleSetsVirtualNetworkLink_Spec{}

// ConvertSpecFrom populates our DnsForwardingRuleSetsVirtualNetworkLink_Spec from the provided source
func (link *DnsForwardingRuleSetsVirtualNetworkLink_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.DnsForwardingRuleSetsVirtualNetworkLink_Spec)
	if ok {
		// Populate our instance from source
		return link.AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.DnsForwardingRuleSetsVirtualNetworkLink_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = link.AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DnsForwardingRuleSetsVirtualNetworkLink_Spec
func (link *DnsForwardingRuleSetsVirtualNetworkLink_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.DnsForwardingRuleSetsVirtualNetworkLink_Spec)
	if ok {
		// Populate destination from our instance
		return link.AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.DnsForwardingRuleSetsVirtualNetworkLink_Spec{}
	err := link.AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink_Spec populates our DnsForwardingRuleSetsVirtualNetworkLink_Spec from the provided source DnsForwardingRuleSetsVirtualNetworkLink_Spec
func (link *DnsForwardingRuleSetsVirtualNetworkLink_Spec) AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink_Spec(source *storage.DnsForwardingRuleSetsVirtualNetworkLink_Spec) error {

	// AzureName
	link.AzureName = source.AzureName

	// Metadata
	link.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec
		err := operatorSpec.AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec() to populate field OperatorSpec")
		}
		link.OperatorSpec = &operatorSpec
	} else {
		link.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		link.Owner = &owner
	} else {
		link.Owner = nil
	}

	// VirtualNetwork
	if source.VirtualNetwork != nil {
		var virtualNetwork SubResource
		err := virtualNetwork.AssignProperties_From_SubResource(source.VirtualNetwork)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SubResource() to populate field VirtualNetwork")
		}
		link.VirtualNetwork = &virtualNetwork
	} else {
		link.VirtualNetwork = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink_Spec populates the provided destination DnsForwardingRuleSetsVirtualNetworkLink_Spec from our DnsForwardingRuleSetsVirtualNetworkLink_Spec
func (link *DnsForwardingRuleSetsVirtualNetworkLink_Spec) AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink_Spec(destination *storage.DnsForwardingRuleSetsVirtualNetworkLink_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = link.AzureName

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(link.Metadata)

	// OperatorSpec
	if link.OperatorSpec != nil {
		var operatorSpec storage.DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec
		err := link.OperatorSpec.AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = link.OriginalVersion()

	// Owner
	if link.Owner != nil {
		owner := link.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// VirtualNetwork
	if link.VirtualNetwork != nil {
		var virtualNetwork storage.SubResource
		err := link.VirtualNetwork.AssignProperties_To_SubResource(&virtualNetwork)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SubResource() to populate field VirtualNetwork")
		}
		destination.VirtualNetwork = &virtualNetwork
	} else {
		destination.VirtualNetwork = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_DnsForwardingRuleSetsVirtualNetworkLink_STATUS populates our DnsForwardingRuleSetsVirtualNetworkLink_Spec from the provided source DnsForwardingRuleSetsVirtualNetworkLink_STATUS
func (link *DnsForwardingRuleSetsVirtualNetworkLink_Spec) Initialize_From_DnsForwardingRuleSetsVirtualNetworkLink_STATUS(source *DnsForwardingRuleSetsVirtualNetworkLink_STATUS) error {

	// Metadata
	link.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// VirtualNetwork
	if source.VirtualNetwork != nil {
		var virtualNetwork SubResource
		err := virtualNetwork.Initialize_From_SubResource_STATUS(source.VirtualNetwork)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_SubResource_STATUS() to populate field VirtualNetwork")
		}
		link.VirtualNetwork = &virtualNetwork
	} else {
		link.VirtualNetwork = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (link *DnsForwardingRuleSetsVirtualNetworkLink_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (link *DnsForwardingRuleSetsVirtualNetworkLink_Spec) SetAzureName(azureName string) {
	link.AzureName = azureName
}

type DnsForwardingRuleSetsVirtualNetworkLink_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Etag: ETag of the virtual network link.
	Etag *string `json:"etag,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// Metadata: Metadata attached to the virtual network link.
	Metadata map[string]string `json:"metadata,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The current provisioning state of the virtual network link. This is a read-only property and any
	// attempt to set this value will be ignored.
	ProvisioningState *DnsresolverProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// SystemData: Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`

	// VirtualNetwork: The reference to the virtual network. This cannot be changed after creation.
	VirtualNetwork *SubResource_STATUS `json:"virtualNetwork,omitempty"`
}

var _ genruntime.ConvertibleStatus = &DnsForwardingRuleSetsVirtualNetworkLink_STATUS{}

// ConvertStatusFrom populates our DnsForwardingRuleSetsVirtualNetworkLink_STATUS from the provided source
func (link *DnsForwardingRuleSetsVirtualNetworkLink_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.DnsForwardingRuleSetsVirtualNetworkLink_STATUS)
	if ok {
		// Populate our instance from source
		return link.AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.DnsForwardingRuleSetsVirtualNetworkLink_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = link.AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our DnsForwardingRuleSetsVirtualNetworkLink_STATUS
func (link *DnsForwardingRuleSetsVirtualNetworkLink_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.DnsForwardingRuleSetsVirtualNetworkLink_STATUS)
	if ok {
		// Populate destination from our instance
		return link.AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.DnsForwardingRuleSetsVirtualNetworkLink_STATUS{}
	err := link.AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &DnsForwardingRuleSetsVirtualNetworkLink_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (link *DnsForwardingRuleSetsVirtualNetworkLink_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.DnsForwardingRuleSetsVirtualNetworkLink_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (link *DnsForwardingRuleSetsVirtualNetworkLink_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.DnsForwardingRuleSetsVirtualNetworkLink_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.DnsForwardingRuleSetsVirtualNetworkLink_STATUS, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "Etag":
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		link.Etag = &etag
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		link.Id = &id
	}

	// Set property "Metadata":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			link.Metadata = make(map[string]string, len(typedInput.Properties.Metadata))
			for key, value := range typedInput.Properties.Metadata {
				link.Metadata[key] = value
			}
		}
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		link.Name = &name
	}

	// Set property "ProvisioningState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			var temp string
			temp = string(*typedInput.Properties.ProvisioningState)
			provisioningState := DnsresolverProvisioningState_STATUS(temp)
			link.ProvisioningState = &provisioningState
		}
	}

	// Set property "SystemData":
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		link.SystemData = &systemData
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		link.Type = &typeVar
	}

	// Set property "VirtualNetwork":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VirtualNetwork != nil {
			var virtualNetwork1 SubResource_STATUS
			err := virtualNetwork1.PopulateFromARM(owner, *typedInput.Properties.VirtualNetwork)
			if err != nil {
				return err
			}
			virtualNetwork := virtualNetwork1
			link.VirtualNetwork = &virtualNetwork
		}
	}

	// No error
	return nil
}

// AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink_STATUS populates our DnsForwardingRuleSetsVirtualNetworkLink_STATUS from the provided source DnsForwardingRuleSetsVirtualNetworkLink_STATUS
func (link *DnsForwardingRuleSetsVirtualNetworkLink_STATUS) AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLink_STATUS(source *storage.DnsForwardingRuleSetsVirtualNetworkLink_STATUS) error {

	// Conditions
	link.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Etag
	link.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	link.Id = genruntime.ClonePointerToString(source.Id)

	// Metadata
	link.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// Name
	link.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := *source.ProvisioningState
		provisioningStateTemp := genruntime.ToEnum(provisioningState, dnsresolverProvisioningState_STATUS_Values)
		link.ProvisioningState = &provisioningStateTemp
	} else {
		link.ProvisioningState = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		link.SystemData = &systemDatum
	} else {
		link.SystemData = nil
	}

	// Type
	link.Type = genruntime.ClonePointerToString(source.Type)

	// VirtualNetwork
	if source.VirtualNetwork != nil {
		var virtualNetwork SubResource_STATUS
		err := virtualNetwork.AssignProperties_From_SubResource_STATUS(source.VirtualNetwork)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SubResource_STATUS() to populate field VirtualNetwork")
		}
		link.VirtualNetwork = &virtualNetwork
	} else {
		link.VirtualNetwork = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink_STATUS populates the provided destination DnsForwardingRuleSetsVirtualNetworkLink_STATUS from our DnsForwardingRuleSetsVirtualNetworkLink_STATUS
func (link *DnsForwardingRuleSetsVirtualNetworkLink_STATUS) AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLink_STATUS(destination *storage.DnsForwardingRuleSetsVirtualNetworkLink_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(link.Conditions)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(link.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(link.Id)

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(link.Metadata)

	// Name
	destination.Name = genruntime.ClonePointerToString(link.Name)

	// ProvisioningState
	if link.ProvisioningState != nil {
		provisioningState := string(*link.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// SystemData
	if link.SystemData != nil {
		var systemDatum storage.SystemData_STATUS
		err := link.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(link.Type)

	// VirtualNetwork
	if link.VirtualNetwork != nil {
		var virtualNetwork storage.SubResource_STATUS
		err := link.VirtualNetwork.AssignProperties_To_SubResource_STATUS(&virtualNetwork)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SubResource_STATUS() to populate field VirtualNetwork")
		}
		destination.VirtualNetwork = &virtualNetwork
	} else {
		destination.VirtualNetwork = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec populates our DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec from the provided source DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec
func (operator *DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec) AssignProperties_From_DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec(source *storage.DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec populates the provided destination DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec from our DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec
func (operator *DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec) AssignProperties_To_DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec(destination *storage.DnsForwardingRuleSetsVirtualNetworkLinkOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&DnsForwardingRuleSetsVirtualNetworkLink{}, &DnsForwardingRuleSetsVirtualNetworkLinkList{})
}
