/*
Copyright (c) 2024 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ClusterRegistryConfig describes the configuration of registries for the cluster.
// Its format reflects the OpenShift Image Configuration, for which docs are available on
// [docs.openshift.com](https://docs.openshift.com/container-platform/4.16/openshift_images/image-configuration.html)
// ```json
// {
//    "registry_config": {
//      "registry_sources": {
//        "blocked_registries": [
//          "badregistry.io",
//          "badregistry8.io"
//        ]
//      }
//    }
// }
// ```
//
struct ClusterRegistryConfig {
	// PlatformAllowlist contains a reference to a RegistryAllowlist which is a list of internal registries
	// which needs to be whitelisted for the platform to work. It can be omitted at creation and 
	// updating and its lifecycle can be managed separately if needed.
	PlatformAllowlist RegistryAllowlist
	// A map containing the registry hostname as the key, and the PEM-encoded certificate as the value,
	// for each additional registry CA to trust.
	AdditionalTrustedCa [String]String
	// AllowedRegistriesForImport limits the container image registries that normal users may import
	// images from. Set this list to the registries that you trust to contain valid Docker
	// images and that you want applications to be able to import from. Users with
	// permission to create Images or ImageStreamMappings via the API are not affected by
	// this policy - typically only administrators or system integrations will have those
	// permissions.
	AllowedRegistriesForImport []RegistryLocation
	// RegistrySources contains configuration that determines how the container runtime
	// should treat individual registries when accessing images for builds+pods. (e.g.
	// whether or not to allow insecure access). It does not contain configuration for the
	// internal cluster registry.
	RegistrySources RegistrySources
}

// RegistrySources contains configuration that determines how the container runtime should treat individual
// registries when accessing images for builds and pods. For instance, whether or not to allow insecure access.
// It does not contain configuration for the internal cluster registry.
struct RegistrySources {
	// AllowedRegistries: registries for which image pull and push actions are allowed.
	// To specify all subdomains, add the asterisk (*) wildcard character as a prefix to the domain name.
	// For example, *.example.com. You can specify an individual repository within a registry.
	// For example: reg1.io/myrepo/myapp:latest. All other registries are blocked.
	// Mutually exclusive with `BlockedRegistries`
	AllowedRegistries []String
	// BlockedRegistries: registries for which image pull and push actions are denied.
	// To specify all subdomains, add the asterisk (*) wildcard character as a prefix to the domain name.
	// For example, *.example.com. You can specify an individual repository within a registry.
	// For example: reg1.io/myrepo/myapp:latest. All other registries are allowed.
	// Mutually exclusive with `AllowedRegistries`
	BlockedRegistries []String
	// InsecureRegistries are registries which do not have a valid TLS certificate or only support HTTP connections.
	// To specify all subdomains, add the asterisk (*) wildcard character as a prefix to the domain name.
	// For example, *.example.com. You can specify an individual repository within a registry.
	// For example: reg1.io/myrepo/myapp:latest.
	InsecureRegistries []String
}

// RegistryLocation contains a location of the registry specified by the registry domain
// name. The domain name might include wildcards, like '*' or '??'.
struct RegistryLocation {
	// domainName specifies a domain name for the registry
	// In case the registry use non-standard (80 or 443) port, the port should be included
	// in the domain name as well.
	DomainName String
	// insecure indicates whether the registry is secure (https) or insecure (http)
	// By default (if not specified) the registry is assumed as secure.
	Insecure Boolean
}
