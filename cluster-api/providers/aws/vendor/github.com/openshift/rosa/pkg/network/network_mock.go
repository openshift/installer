// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/network/network.go
//
// Generated by this command:
//
//	mockgen-v0.4.0 -source=pkg/network/network.go -package=network -destination=pkg/network/network_mock.go
//

// Package network is a generated GoMock package.
package network

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// CreateStack mocks base method.
func (m *MockNetworkService) CreateStack(templateFile *string, templateBody *[]byte, params, tags map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStack", templateFile, templateBody, params, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStack indicates an expected call of CreateStack.
func (mr *MockNetworkServiceMockRecorder) CreateStack(templateFile, templateBody, params, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStack", reflect.TypeOf((*MockNetworkService)(nil).CreateStack), templateFile, templateBody, params, tags)
}
