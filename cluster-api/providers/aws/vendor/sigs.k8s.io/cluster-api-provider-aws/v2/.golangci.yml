version: "2"
run:
  build-tags:
    - tools
    - e2e
  allow-parallel-runners: true
linters:
  default: none
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - containedctx
    - copyloopvar
    - dogsled
    - dupword
    - durationcheck
    - errcheck
    - errchkjson
    - ginkgolinter
    - goconst
    - gocritic
    - godot
    - goprintffuncname
    - gosec
    - govet
    - iface
    - importas
    - ineffassign
    - intrange
    - loggercheck
    - misspell
    - nakedret
    - nilerr
    - noctx
    - nolintlint
    - nosprintfhostport
    - prealloc
    - predeclared
    - revive
    - rowserrcheck
    - staticcheck
    - thelper
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - whitespace
  settings:
    depguard:
      rules:
        main:
          deny:
            - pkg: io/ioutil
              desc: ioutil is deprecated starting with Go 1.16
    ginkgolinter:
      suppress-len-assertion: true
      suppress-nil-assertion: false
      suppress-err-assertion: true
      forbid-focus-container: true
    gocritic:
      disabled-checks:
        - appendAssign
        - dupImport
        - evalOrder
        - ifElseChain
        - octalLiteral
        - regexpSimplify
        - sloppyReassign
        - truncateCmp
        - typeDefFirst
        - unnamedResult
        - unnecessaryDefer
        - whyNoLint
        - wrapperFunc
        - rangeValCopy
        - hugeParam
        - filepathJoin
        - emptyStringTest
      enabled-tags:
        - diagnostic
        - experimental
        - performance
    godot:
      scope: toplevel
      exclude:
        - ^ \+.*
        - ^ ANCHOR.*
    gosec:
      excludes:
        - G307
        - G108
    importas:
      alias:
        - pkg: k8s.io/api/core/v1
          alias: corev1
        - pkg: k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1
          alias: apiextensionsv1
        - pkg: k8s.io/apimachinery/pkg/apis/meta/v1
          alias: metav1
        - pkg: k8s.io/apimachinery/pkg/util/errors
          alias: kerrors
        - pkg: sigs.k8s.io/controller-runtime/pkg/conversion
          alias: ctrlconversion
        - pkg: sigs.k8s.io/cluster-api/util/conversion
          alias: utilconversion
        - pkg: k8s.io/apimachinery/pkg/conversion
          alias: apiconversion
        - pkg: sigs.k8s.io/cluster-api-provider-aws/v2/api/v1beta2
          alias: infrav1
        - pkg: sigs.k8s.io/cluster-api-provider-aws/v2/api/v1beta1
          alias: infrav1beta1
        - pkg: sigs.k8s.io/cluster-api-provider-aws/v2/exp/api/v1beta1
          alias: expinfrav1beta1
        - pkg: sigs.k8s.io/cluster-api-provider-aws/v2/exp/api/v1beta2
          alias: expinfrav1
        - pkg: k8s.io/client-go/kubernetes/scheme
          alias: cgscheme
        - pkg: k8s.io/client-go/tools/record
          alias: cgrecord
        - pkg: sigs.k8s.io/cluster-api-provider-aws/v2/bootstrap/eks/api/v1beta1
          alias: eksbootstrapv1beta1
        - pkg: sigs.k8s.io/cluster-api-provider-aws/v2/bootstrap/eks/api/v1beta2
          alias: eksbootstrapv1
        - pkg: sigs.k8s.io/cluster-api-provider-aws/v2/controlplane/eks/api/v1beta1
          alias: ekscontrolplanev1beta1
        - pkg: sigs.k8s.io/cluster-api-provider-aws/v2/controlplane/eks/api/v1beta2
          alias: ekscontrolplanev1
        - pkg: sigs.k8s.io/cluster-api-provider-aws/v2/bootstrap/eks/controllers
          alias: eksbootstrapcontrollers
        - pkg: sigs.k8s.io/cluster-api-provider-aws/v2/controlplane/eks/controllers
          alias: ekscontrolplanecontrollers
        - pkg: sigs.k8s.io/cluster-api-provider-aws/v2/exp/controllers
          alias: expcontrollers
        - pkg: k8s.io/apimachinery/pkg/runtime
          alias: runtime
        - pkg: k8s.io/apimachinery/pkg/runtime/serializer
          alias: runtimeserializer
        - pkg: k8s.io/apimachinery/pkg/runtime/serializer/yaml
          alias: yamlserializer
        - pkg: sigs.k8s.io/cluster-api/api/v1beta1
          alias: clusterv1
        - pkg: sigs.k8s.io/cluster-api/util/defaulting
          alias: utildefaulting
        - pkg: sigs.k8s.io/controller-runtime
          alias: ctrl
        - pkg: k8s.io/apimachinery/pkg/api/errors
          alias: apierrors
        - pkg: sigs.k8s.io/controller-runtime/pkg/log
          alias: logf
        - pkg: github.com/google/gofuzz
          alias: fuzz
        - pkg: sigs.k8s.io/cluster-api-provider-aws/v2/pkg/cloud/logs
          alias: awslogs
        - pkg: sigs.k8s.io/cluster-api-provider-aws/v2/pkg/cloud/metrics
          alias: awsmetrics
        - pkg: sigs.k8s.io/cluster-api/errors
          alias: capierrors
        - pkg: github.com/aws/aws-sdk-go/aws/client
          alias: awsclient
        - pkg: github.com/aws/amazon-vpc-cni-k8s/pkg/apis/crd/v1alpha1
          alias: amazoncni
        - pkg: github.com/aws/aws-sdk-go/service/resourcegroupstaggingapi
          alias: rgapi
        - pkg: crypto/rand
          alias: crand
        - pkg: sigs.k8s.io/controller-runtime/pkg/client
          alias: crclient
        - pkg: k8s.io/apimachinery/pkg/types
          alias: apimachinerytypes
        - pkg: sigs.k8s.io/cluster-api/exp/api/v1beta1
          alias: expclusterv1
      no-unaliased: false
    nolintlint:
      require-specific: true
      allow-unused: false
    revive:
      rules:
        - name: blank-imports
        - name: context-as-argument
        - name: context-keys-type
        - name: dot-imports
        - name: error-return
        - name: error-strings
        - name: error-naming
        - name: exported
        - name: if-return
        - name: increment-decrement
        - name: var-naming
        - name: var-declaration
        - name: package-comments
        - name: range
        - name: receiver-naming
        - name: time-naming
        - name: unexported-return
        - name: indent-error-flow
        - name: errorf
        - name: empty-block
        - name: superfluous-else
        - name: unreachable-code
        - name: redefines-builtin-id
        - name: bool-literal-in-expr
        - name: constant-logical-expr
  exclusions:
    generated: lax
    rules:
      - linters:
          - errcheck
        text: Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv|outputPrinter.Print|printer.Print). is not checked
      # - linters:
      #   - errcheck
      #   text: Error return value of `outputPrinter.Print` is not checked
      - linters:
        - gosec
        text: 'G103: Use of unsafe calls should be audited'
        path: .*(api|types|test)\/.*\/.*conversion.*\.go$
      - linters:
          - staticcheck
        text: 'QF1008: could remove embedded field .*'
      # TODO: change to use time.Time.Equal
      - linters:
          - staticcheck
        text: 'QF1009: probably want to use time.Time.Equal instead'
      - linters:
          - revive
        # Ignoring stylistic checks for generated code
        path: .*(api|types|test)\/.*\/.*conversion.*\.go$
        # Exported function and methods should have comments. This warns on undocumented exported functions and methods.
        text: exported (method|function|type|const) (.+) should have comment or be unexported
      - linters:
          - revive
        # Ignoring stylistic checks for generated code
        path: .*(api|types)\/.*\/.*conversion.*\.go$
        # By convention, receiver names in a method should reflect their identity.
        text: 'receiver-naming: receiver name (.+) should be consistent with previous receiver name (.+)'
      - linters:
          - revive
        # Ignoring stylistic checks for generated code
        path: .*(api|types|test)\/.*\/.*conversion.*\.go$
        # Checking if an error is nil to just after return the error or nil is redundant
        text: 'if-return: redundant if ...; err != nil check, just return error instead'
      - linters:
          - revive
        text: 'exported: exported method .*\.(Reconcile|SetupWithManager|SetupWebhookWithManager) should have comment or be unexported'
      - linters:
          - errcheck
        text: Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked
      - linters:
          - revive
        text: exported (method|function|type|const) (.+) should have comment or be unexported
        source: (func|type).*Fake.*
      - linters:
          - revive
        path: fake_\.go
        text: exported (method|function|type|const) (.+) should have comment or be unexported
      - linters:
          - revive
        path: .*test/(providers|framework|e2e).*.go
        text: exported (method|function|type|const) (.+) should have comment or be unexported
      - linters:
          - errcheck
        path: _test\.go
        text: Error return value is not checked
      - linters:
          - errcheck
        path: _test\.go
        text: Error return value of (.+) is not checked
      - linters:
          - gosec
        text: 'G108: Profiling endpoint is automatically exposed on /debug/pprof'
      - linters:
          - godot
        path: (.*)/(v1beta1|v1beta2)/(.*)types.go
        text: Comment should end in a period
      - linters:
          - errcheck
        text: Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked
      - linters:
          - revive
        source: _ "embed"
      - linters:
          - revive
        path: .*/defaults.go
        text: 'var-naming: don''t use underscores in Go names; func (.+) should be (.+)'
      - linters:
          - revive
        path: .*/.*(mock|gc_).*/.+\.go
        text: 'var-naming: don''t use an underscore in package name'
      - linters:
          - revive
        # Ignoring stylistic checks for generated code
        path: .*(api|types|test)\/.*\/.*conversion.*\.go$
        # This rule warns when initialism, variable or package naming conventions are not followed.
        text: 'var-naming: don''t use underscores in Go names'
      - linters:
          - unparam
        text: always receives
      - path: _test\.go
        text: should not use dot imports
      - path: (framework|e2e)/.*.go
        text: should not use dot imports
      - path: _test\.go
        text: cyclomatic complexity
      - linters:
          - unparam
        text: (.+) - g is unused
      - path: _test\.go
        text: cyclomatic complexity
      - linters:
          - gocritic
        text: 'appendAssign: append result not assigned to the same slice'
      - path: (.+)\.go$
        text: (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)
      - path: (.+)\.go$
        text: 'exported: (func|type) name will be used as (.+) by other packages, and that stutters; consider calling this (.+)'
      - path: (.+)\.go$
        text: (G104|G107|G404|G505|ST1000)
      - path: (.+)\.go$
        text: 'G108: Profiling endpoint is automatically exposed on /debug/pprof'
      - path: (.+)\.go$
        text: net/http.Get must not be called
      - linters:
          - goconst
        path: (.+)_test\.go
    paths:
      - third_party$
      - builtin$
      - examples$
issues:
  max-issues-per-linter: 0
  max-same-issues: 0
formatters:
  enable:
    - gci
    - gofmt
    - goimports
  settings:
    gci:
      sections:
        - standard
        - default
        - prefix(sigs.k8s.io/cluster-api)
  exclusions:
    generated: lax
    paths:
      - third_party$
      - builtin$
      - examples$
